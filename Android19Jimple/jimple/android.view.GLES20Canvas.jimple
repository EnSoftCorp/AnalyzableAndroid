class android.view.GLES20Canvas extends android.view.HardwareCanvas
{
    static final int FLUSH_CACHES_FULL;
    static final int FLUSH_CACHES_LAYERS;
    static final int FLUSH_CACHES_MODERATE;
    private static final int MODIFIER_COLOR_FILTER;
    private static final int MODIFIER_NONE;
    private static final int MODIFIER_SHADER;
    private static final int MODIFIER_SHADOW;
    private static boolean sIsAvailable;
    private android.graphics.Rect mClipBounds;
    private android.graphics.DrawFilter mFilter;
    private android.view.GLES20Canvas$CanvasFinalizer mFinalizer;
    private int mHeight;
    private float[] mLine;
    private final boolean mOpaque;
    private android.graphics.RectF mPathBounds;
    private float[] mPoint;
    private int mRenderer;
    private int mWidth;

    static void <clinit>()
    {
        boolean $z0;

        <android.view.GLES20Canvas: int MODIFIER_SHADOW> = 1;

        <android.view.GLES20Canvas: int MODIFIER_SHADER> = 2;

        <android.view.GLES20Canvas: int MODIFIER_NONE> = 0;

        <android.view.GLES20Canvas: int MODIFIER_COLOR_FILTER> = 4;

        <android.view.GLES20Canvas: int FLUSH_CACHES_MODERATE> = 1;

        <android.view.GLES20Canvas: int FLUSH_CACHES_LAYERS> = 0;

        <android.view.GLES20Canvas: int FLUSH_CACHES_FULL> = 2;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nIsAvailable()>();

        <android.view.GLES20Canvas: boolean sIsAvailable> = $z0;

        return;
    }

    void <init>(int, boolean)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1;
        boolean z0, z1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.view.HardwareCanvas: void <init>()>();

        if z0 != 0 goto label2;

        z1 = 1;

     label1:
        r0.<android.view.GLES20Canvas: boolean mOpaque> = z1;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nCreateLayerRenderer(int)>(i0);

        r0.<android.view.GLES20Canvas: int mRenderer> = $i1;

        specialinvoke r0.<android.view.GLES20Canvas: void setupFinalizer()>();

        return;

     label2:
        z1 = 0;

        goto label1;
    }

    void <init>(boolean)
    {
        android.view.GLES20Canvas r0;
        boolean z0;

        r0 := @this: android.view.GLES20Canvas;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.GLES20Canvas: void <init>(boolean,boolean)>(0, z0);

        return;
    }

    protected void <init>(boolean, boolean)
    {
        android.view.GLES20Canvas r0;
        boolean z0, z1, z2;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<android.view.HardwareCanvas: void <init>()>();

        if z1 != 0 goto label3;

        z2 = 1;

     label1:
        r0.<android.view.GLES20Canvas: boolean mOpaque> = z2;

        if z0 == 0 goto label4;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nCreateDisplayListRenderer()>();

        r0.<android.view.GLES20Canvas: int mRenderer> = $i1;

     label2:
        specialinvoke r0.<android.view.GLES20Canvas: void setupFinalizer()>();

        return;

     label3:
        z2 = 0;

        goto label1;

     label4:
        $i0 = staticinvoke <android.view.GLES20Canvas: int nCreateRenderer()>();

        r0.<android.view.GLES20Canvas: int mRenderer> = $i0;

        goto label2;
    }

    static void access$000(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.view.GLES20Canvas: void nDestroyRenderer(int)>(i0);

        return;
    }

    static void flushCaches(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.view.GLES20Canvas: void nFlushCaches(int)>(i0);

        return;
    }

    private android.graphics.Rect getInternalClipBounds()
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: android.graphics.Rect mClipBounds>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.view.GLES20Canvas: android.graphics.Rect mClipBounds> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: android.graphics.Rect mClipBounds>;

        return $r2;
    }

    private float[] getLineStorage()
    {
        android.view.GLES20Canvas r0;
        float[] $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: float[] mLine>;

        if $r1 != null goto label1;

        $r3 = newarray (float)[4];

        r0.<android.view.GLES20Canvas: float[] mLine> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: float[] mLine>;

        return $r2;
    }

    private android.graphics.RectF getPathBounds()
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: android.graphics.RectF mPathBounds>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r0.<android.view.GLES20Canvas: android.graphics.RectF mPathBounds> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: android.graphics.RectF mPathBounds>;

        return $r2;
    }

    private float[] getPointStorage()
    {
        android.view.GLES20Canvas r0;
        float[] $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: float[] mPoint>;

        if $r1 != null goto label1;

        $r3 = newarray (float)[2];

        r0.<android.view.GLES20Canvas: float[] mPoint> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: float[] mPoint>;

        return $r2;
    }

    public static int getStencilSize()
    {
        int $i0;

        $i0 = staticinvoke <android.view.GLES20Canvas: int nGetStencilSize()>();

        return $i0;
    }

    static void initAtlas(android.view.GraphicBuffer, int[])
    {
        android.view.GraphicBuffer r0;
        int[] r1;
        int $i0;

        r0 := @parameter0: android.view.GraphicBuffer;

        r1 := @parameter1: int[];

        $i0 = lengthof r1;

        staticinvoke <android.view.GLES20Canvas: void nInitAtlas(android.view.GraphicBuffer,int[],int)>(r0, r1, $i0);

        return;
    }

    static boolean initCaches()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nInitCaches()>();

        return $z0;
    }

    static boolean isAvailable()
    {
        boolean $z0;

        $z0 = <android.view.GLES20Canvas: boolean sIsAvailable>;

        return $z0;
    }

    private static native void nAttachFunctor(int, int);

    private static native int nCallDrawGLFunction(int, int);

    private static native void nCancelLayerUpdate(int, int);

    static native void nClearLayerTexture(int);

    private static native void nClearLayerUpdates(int);

    private static native boolean nClipPath(int, int, int);

    private static native boolean nClipRect(int, float, float, float, float, int);

    private static native boolean nClipRect(int, int, int, int, int, int);

    private static native boolean nClipRegion(int, int, int);

    private static native void nConcatMatrix(int, int);

    static native boolean nCopyLayer(int, int);

    private static native int nCreateDisplayListRenderer();

    static native int nCreateLayer(int, int, boolean, int[]);

    private static native int nCreateLayerRenderer(int);

    private static native int nCreateRenderer();

    static native int nCreateTextureLayer(boolean, int[]);

    static native void nDestroyLayer(int);

    static native void nDestroyLayerDeferred(int);

    private static native void nDestroyRenderer(int);

    private static native void nDetachFunctor(int, int);

    private static native void nDrawArc(int, float, float, float, float, float, float, boolean, int);

    private static native void nDrawBitmap(int, int, byte[], float, float, float, float, float, float, float, float, int);

    private static native void nDrawBitmap(int, int, byte[], float, float, int);

    private static native void nDrawBitmap(int, int, byte[], int, int);

    private static native void nDrawBitmap(int, int[], int, int, float, float, int, int, boolean, int);

    private static native void nDrawBitmapMesh(int, int, byte[], int, int, float[], int, int[], int, int);

    private static native void nDrawCircle(int, float, float, float, int);

    private static native void nDrawColor(int, int, int);

    private static native int nDrawDisplayList(int, int, android.graphics.Rect, int);

    private static native void nDrawLayer(int, int, float, float);

    private static native void nDrawLines(int, float[], int, int, int);

    private static native void nDrawOval(int, float, float, float, float, int);

    private static native void nDrawPatch(int, int, byte[], int, float, float, float, float, int);

    private static native void nDrawPath(int, int, int);

    private static native void nDrawPoints(int, float[], int, int, int);

    private static native void nDrawPosText(int, java.lang.String, int, int, float[], int);

    private static native void nDrawPosText(int, char[], int, int, float[], int);

    private static native void nDrawRect(int, float, float, float, float, int);

    private static native void nDrawRects(int, int, int);

    private static native void nDrawRects(int, float[], int, int);

    private static native void nDrawRoundRect(int, float, float, float, float, float, float, int);

    private static native void nDrawText(int, java.lang.String, int, int, float, float, int, int);

    private static native void nDrawText(int, char[], int, int, float, float, int, int);

    private static native void nDrawTextOnPath(int, java.lang.String, int, int, int, float, float, int, int);

    private static native void nDrawTextOnPath(int, char[], int, int, int, float, float, int, int);

    private static native void nDrawTextRun(int, java.lang.String, int, int, int, int, float, float, int, int);

    private static native void nDrawTextRun(int, char[], int, int, int, int, float, float, int, int);

    private static native void nFinish(int);

    private static native void nFlushCaches(int);

    private static native void nFlushLayerUpdates(int);

    private static native boolean nGetClipBounds(int, android.graphics.Rect);

    private static native int nGetDisplayList(int, int);

    private static native void nGetMatrix(int, int);

    private static native int nGetMaximumTextureHeight();

    private static native int nGetMaximumTextureWidth();

    static native float nGetOverdraw(int);

    private static native int nGetSaveCount(int);

    private static native int nGetStencilSize();

    private static native void nInitAtlas(android.view.GraphicBuffer, int[], int);

    private static native boolean nInitCaches();

    private static native void nInterrupt(int);

    private static native int nInvokeFunctors(int, android.graphics.Rect);

    private static native boolean nIsAvailable();

    private static native void nOutputDisplayList(int, int);

    private static native int nPrepare(int, boolean);

    private static native int nPrepareDirty(int, int, int, int, int, boolean);

    private static native void nPushLayerUpdate(int, int);

    private static native boolean nQuickReject(int, float, float, float, float);

    private static native void nResetDisplayListRenderer(int);

    private static native void nResetModifiers(int, int);

    private static native void nResetPaintFilter(int);

    static native boolean nResizeLayer(int, int, int, int[]);

    private static native void nRestore(int);

    private static native void nRestoreToCount(int, int);

    private static native void nResume(int);

    private static native void nRotate(int, float);

    private static native int nSave(int, int);

    private static native int nSaveLayer(int, float, float, float, float, int, int);

    private static native int nSaveLayer(int, int, int);

    private static native int nSaveLayerAlpha(int, float, float, float, float, int, int);

    private static native int nSaveLayerAlpha(int, int, int);

    private static native void nScale(int, float, float);

    static native void nSetCountOverdrawEnabled(int, boolean);

    static native void nSetLayerColorFilter(int, int);

    static native void nSetLayerPaint(int, int);

    private static native void nSetMatrix(int, int);

    private static native void nSetName(int, java.lang.String);

    static native void nSetOpaqueLayer(int, boolean);

    static native void nSetTextureLayerTransform(int, int);

    private static native void nSetViewport(int, int, int);

    private static native void nSetupColorFilter(int, int);

    private static native void nSetupPaintFilter(int, int, int);

    private static native void nSetupShader(int, int);

    private static native void nSetupShadow(int, float, float, float, int);

    private static native void nSkew(int, float, float);

    private static native void nTerminateCaches();

    private static native void nTranslate(int, float, float);

    static native void nUpdateRenderLayer(int, int, int, int, int, int, int);

    static native void nUpdateTextureLayer(int, int, int, boolean, android.graphics.SurfaceTexture);

    private int setupColorFilter(android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Paint r1;
        android.graphics.ColorFilter r2;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Paint;

        r2 = virtualinvoke r1.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        if r2 == null goto label1;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i0 = r2.<android.graphics.ColorFilter: int nativeColorFilter>;

        staticinvoke <android.view.GLES20Canvas: void nSetupColorFilter(int,int)>($i1, $i0);

        return 4;

     label1:
        return 0;
    }

    private void setupFinalizer()
    {
        android.view.GLES20Canvas r0;
        int $i0, $i1;
        android.view.GLES20Canvas$CanvasFinalizer $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not create GLES20Canvas renderer");

        throw $r2;

     label1:
        $r1 = new android.view.GLES20Canvas$CanvasFinalizer;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        specialinvoke $r1.<android.view.GLES20Canvas$CanvasFinalizer: void <init>(int)>($i1);

        r0.<android.view.GLES20Canvas: android.view.GLES20Canvas$CanvasFinalizer mFinalizer> = $r1;

        return;
    }

    private int setupModifiers(android.graphics.Bitmap, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Paint r2;
        android.graphics.ColorFilter r3;
        android.graphics.Bitmap$Config $r4, $r5;
        int $i0, $i1, $i2;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Paint;

        $r4 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        if $r4 == $r5 goto label2;

        r3 = virtualinvoke r2.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        if r3 == null goto label1;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r3.<android.graphics.ColorFilter: int nativeColorFilter>;

        staticinvoke <android.view.GLES20Canvas: void nSetupColorFilter(int,int)>($i2, $i1);

        return 4;

     label1:
        return 0;

     label2:
        $i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r2);

        return $i0;
    }

    private int setupModifiers(android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Paint r1;
        boolean z0;
        byte b0;
        android.graphics.Shader r2;
        android.graphics.ColorFilter r3;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0, $f1, $f2;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Paint;

        z0 = r1.<android.graphics.Paint: boolean hasShadow>;

        b0 = 0;

        if z0 == 0 goto label1;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f2 = r1.<android.graphics.Paint: float shadowRadius>;

        $f1 = r1.<android.graphics.Paint: float shadowDx>;

        $f0 = r1.<android.graphics.Paint: float shadowDy>;

        $i5 = r1.<android.graphics.Paint: int shadowColor>;

        staticinvoke <android.view.GLES20Canvas: void nSetupShadow(int,float,float,float,int)>($i6, $f2, $f1, $f0, $i5);

        b0 = 1;

     label1:
        r2 = virtualinvoke r1.<android.graphics.Paint: android.graphics.Shader getShader()>();

        if r2 == null goto label2;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i3 = r2.<android.graphics.Shader: int native_shader>;

        staticinvoke <android.view.GLES20Canvas: void nSetupShader(int,int)>($i4, $i3);

        b0 = b0 | 2;

     label2:
        r3 = virtualinvoke r1.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        if r3 == null goto label3;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r3.<android.graphics.ColorFilter: int nativeColorFilter>;

        staticinvoke <android.view.GLES20Canvas: void nSetupColorFilter(int,int)>($i2, $i1);

        b0 = b0 | 4;

     label3:
        return b0;
    }

    private int setupModifiers(android.graphics.Paint, int)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Paint r1;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0;
        byte b1;
        android.graphics.Shader r2;
        android.graphics.ColorFilter r3;
        float $f0, $f1, $f2;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Paint;

        i0 := @parameter1: int;

        z0 = r1.<android.graphics.Paint: boolean hasShadow>;

        b1 = 0;

        if z0 == 0 goto label1;

        i2 = i0 & 1;

        b1 = 0;

        if i2 == 0 goto label1;

        $i10 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f1 = r1.<android.graphics.Paint: float shadowRadius>;

        $f2 = r1.<android.graphics.Paint: float shadowDx>;

        $f0 = r1.<android.graphics.Paint: float shadowDy>;

        $i9 = r1.<android.graphics.Paint: int shadowColor>;

        staticinvoke <android.view.GLES20Canvas: void nSetupShadow(int,float,float,float,int)>($i10, $f1, $f2, $f0, $i9);

        b1 = 1;

     label1:
        r2 = virtualinvoke r1.<android.graphics.Paint: android.graphics.Shader getShader()>();

        if r2 == null goto label2;

        $i6 = i0 & 2;

        if $i6 == 0 goto label2;

        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i7 = r2.<android.graphics.Shader: int native_shader>;

        staticinvoke <android.view.GLES20Canvas: void nSetupShader(int,int)>($i8, $i7);

        b1 = b1 | 2;

     label2:
        r3 = virtualinvoke r1.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        if r3 == null goto label3;

        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i4 = r3.<android.graphics.ColorFilter: int nativeColorFilter>;

        staticinvoke <android.view.GLES20Canvas: void nSetupColorFilter(int,int)>($i5, $i4);

        b1 = b1 | 4;

     label3:
        return b1;
    }

    static void terminateCaches()
    {
        staticinvoke <android.view.GLES20Canvas: void nTerminateCaches()>();

        return;
    }

    public void attachFunctor(int)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nAttachFunctor(int,int)>($i1, i0);

        return;
    }

    public int callDrawGLFunction(int)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i2 = staticinvoke <android.view.GLES20Canvas: int nCallDrawGLFunction(int,int)>($i1, i0);

        return $i2;
    }

    void cancelLayerUpdate(android.view.HardwareLayer)
    {
        android.view.GLES20Canvas r0;
        android.view.HardwareLayer r1;
        android.view.GLES20RenderLayer $r2;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.view.HardwareLayer;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r2 = (android.view.GLES20RenderLayer) r1;

        $i0 = $r2.<android.view.GLES20RenderLayer: int mLayer>;

        staticinvoke <android.view.GLES20Canvas: void nCancelLayerUpdate(int,int)>($i1, $i0);

        return;
    }

    void clearLayerUpdates()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nClearLayerUpdates(int)>($i0);

        return;
    }

    public boolean clipPath(android.graphics.Path)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Region$Op $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r1.<android.graphics.Path: int mNativePath>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipPath(int,int,int)>($i2, $i1, $i0);

        return $z0;
    }

    public boolean clipPath(android.graphics.Path, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Region$Op r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Region$Op;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r1.<android.graphics.Path: int mNativePath>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipPath(int,int,int)>($i2, $i1, $i0);

        return $z0;
    }

    public boolean clipRect(float, float, float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Region$Op $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(int,float,float,float,float,int)>($i1, f0, f1, f2, f3, $i0);

        return $z0;
    }

    public boolean clipRect(float, float, float, float, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Region$Op r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Region$Op;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i0 = r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(int,float,float,float,float,int)>($i1, f0, f1, f2, f3, $i0);

        return $z0;
    }

    public boolean clipRect(int, int, int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.graphics.Region$Op $r1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i4 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(int,int,int,int,int,int)>($i5, i0, i1, i2, i3, $i4);

        return $z0;
    }

    public boolean clipRect(android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Region$Op $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int bottom>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(int,int,int,int,int,int)>($i5, $i4, $i3, $i2, $i1, $i0);

        return $z0;
    }

    public boolean clipRect(android.graphics.Rect, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Region$Op r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Region$Op;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int bottom>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(int,int,int,int,int,int)>($i5, $i4, $i3, $i2, $i1, $i0);

        return $z0;
    }

    public boolean clipRect(android.graphics.RectF)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Region$Op $r2;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(int,float,float,float,float,int)>($i1, $f3, $f2, $f1, $f0, $i0);

        return $z0;
    }

    public boolean clipRect(android.graphics.RectF, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Region$Op r2;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Region$Op;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(int,float,float,float,float,int)>($i1, $f3, $f2, $f1, $f0, $i0);

        return $z0;
    }

    public boolean clipRegion(android.graphics.Region)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Region r1;
        android.graphics.Region$Op $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Region;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r1.<android.graphics.Region: int mNativeRegion>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRegion(int,int,int)>($i2, $i1, $i0);

        return $z0;
    }

    public boolean clipRegion(android.graphics.Region, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Region r1;
        android.graphics.Region$Op r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Region;

        r2 := @parameter1: android.graphics.Region$Op;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r1.<android.graphics.Region: int mNativeRegion>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRegion(int,int,int)>($i2, $i1, $i0);

        return $z0;
    }

    public void concat(android.graphics.Matrix)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Matrix r1;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        if r1 == null goto label1;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i0 = r1.<android.graphics.Matrix: int native_instance>;

        staticinvoke <android.view.GLES20Canvas: void nConcatMatrix(int,int)>($i1, $i0);

     label1:
        return;
    }

    public void detachFunctor(int)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nDetachFunctor(int,int)>($i1, i0);

        return;
    }

    public void drawARGB(int, int, int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i4 = i0 & 255;

        $i7 = $i4 << 24;

        $i5 = i1 & 255;

        $i6 = $i5 << 16;

        $i10 = $i7 | $i6;

        $i8 = i2 & 255;

        $i9 = $i8 << 8;

        $i12 = $i10 | $i9;

        $i11 = i3 & 255;

        $i13 = $i12 | $i11;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawColor(int)>($i13);

        return;
    }

    public void drawArc(android.graphics.RectF, float, float, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        float f0, f1, $f2, $f3, $f4, $f5;
        boolean z0;
        android.graphics.Paint r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r3, $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        r2 := @parameter4: android.graphics.Paint;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r2, 6);

     label1:
        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f5 = r1.<android.graphics.RectF: float left>;

        $f4 = r1.<android.graphics.RectF: float top>;

        $f3 = r1.<android.graphics.RectF: float right>;

        $f2 = r1.<android.graphics.RectF: float bottom>;

        $i1 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawArc(int,float,float,float,float,float,float,boolean,int)>($i2, $f5, $f4, $f3, $f2, f0, f1, z0, $i1);

     label2:
        if i0 == 0 goto label3;

        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i3, i0);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        if i0 == 0 goto label5;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i0);

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        float f0, f1;
        android.graphics.Paint r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Throwable r3, $r5;
        byte[] $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r2 == null goto label5;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Bitmap,android.graphics.Paint)>(r1, r2);

     label1:
        if r2 != null goto label6;

        i1 = 0;

     label2:
        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i2 = r1.<android.graphics.Bitmap: int mNativeBitmap>;

        $r4 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],float,float,int)>($i3, $i2, $r4, f0, f1, i1);

     label3:
        if i0 == 0 goto label4;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i0);

     label4:
        return;

     label5:
        i0 = 0;

        goto label1;

     label6:
        i1 = r2.<android.graphics.Paint: int mNativePaint>;

     label7:
        goto label2;

     label8:
        $r5 := @caughtexception;

        r3 = $r5;

        if i0 == 0 goto label9;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i5, i0);

     label9:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Matrix r2;
        android.graphics.Paint r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Throwable r4, $r6;
        byte[] $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Matrix;

        r3 := @parameter2: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r3 == null goto label5;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Bitmap,android.graphics.Paint)>(r1, r3);

     label1:
        if r3 != null goto label6;

        i1 = 0;

     label2:
        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i3 = r1.<android.graphics.Bitmap: int mNativeBitmap>;

        $r5 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        $i2 = r2.<android.graphics.Matrix: int native_instance>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],int,int)>($i4, $i3, $r5, $i2, i1);

     label3:
        if i0 == 0 goto label4;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i5, i0);

     label4:
        return;

     label5:
        i0 = 0;

        goto label1;

     label6:
        i1 = r3.<android.graphics.Paint: int mNativePaint>;

     label7:
        goto label2;

     label8:
        $r6 := @caughtexception;

        r4 = $r6;

        if i0 == 0 goto label9;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i6, i0);

     label9:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2, r3;
        android.graphics.Paint r4;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Throwable r5, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte[] $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r4 == null goto label07;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Bitmap,android.graphics.Paint)>(r1, r4);

     label01:
        if r4 != null goto label08;

        i1 = 0;

     label02:
        if r2 != null goto label10;

        i4 = 0;

        i2 = 0;

     label03:
        i3 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        i5 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

     label04:
        $i12 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i10 = r1.<android.graphics.Bitmap: int mNativeBitmap>;

        $r6 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        $f6 = (float) i2;

        $f7 = (float) i4;

        $f4 = (float) i3;

        $f5 = (float) i5;

        $i6 = r3.<android.graphics.Rect: int left>;

        $f2 = (float) $i6;

        $i7 = r3.<android.graphics.Rect: int top>;

        $f3 = (float) $i7;

        $i8 = r3.<android.graphics.Rect: int right>;

        $f0 = (float) $i8;

        $i9 = r3.<android.graphics.Rect: int bottom>;

        $f1 = (float) $i9;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],float,float,float,float,float,float,float,float,int)>($i12, $i10, $r6, $f6, $f7, $f4, $f5, $f2, $f3, $f0, $f1, i1);

     label05:
        if i0 == 0 goto label06;

        $i11 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i11, i0);

     label06:
        return;

     label07:
        i0 = 0;

        goto label01;

     label08:
        i1 = r4.<android.graphics.Paint: int mNativePaint>;

     label09:
        goto label02;

     label10:
        i2 = r2.<android.graphics.Rect: int left>;

        i3 = r2.<android.graphics.Rect: int right>;

        i4 = r2.<android.graphics.Rect: int top>;

        i5 = r2.<android.graphics.Rect: int bottom>;

     label11:
        goto label04;

     label12:
        $r7 := @caughtexception;

        r5 = $r7;

        if i0 == 0 goto label13;

        $i13 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i13, i0);

     label13:
        throw r5;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2;
        android.graphics.RectF r3;
        android.graphics.Paint r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Throwable r5, $r7;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7;
        byte[] $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.RectF;

        r4 := @parameter3: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r4 == null goto label07;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Bitmap,android.graphics.Paint)>(r1, r4);

     label01:
        if r4 != null goto label08;

        i1 = 0;

     label02:
        if r2 != null goto label10;

        f2 = 0.0F;

        f0 = 0.0F;

     label03:
        $i10 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        f1 = (float) $i10;

        $i9 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        f3 = (float) $i9;

     label04:
        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i6 = r1.<android.graphics.Bitmap: int mNativeBitmap>;

        $r6 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        $f6 = r3.<android.graphics.RectF: float left>;

        $f7 = r3.<android.graphics.RectF: float top>;

        $f4 = r3.<android.graphics.RectF: float right>;

        $f5 = r3.<android.graphics.RectF: float bottom>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],float,float,float,float,float,float,float,float,int)>($i8, $i6, $r6, f0, f2, f1, f3, $f6, $f7, $f4, $f5, i1);

     label05:
        if i0 == 0 goto label06;

        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i7, i0);

     label06:
        return;

     label07:
        i0 = 0;

        goto label01;

     label08:
        i1 = r4.<android.graphics.Paint: int mNativePaint>;

     label09:
        goto label02;

     label10:
        $i3 = r2.<android.graphics.Rect: int left>;

        f0 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int right>;

        f1 = (float) $i4;

        $i5 = r2.<android.graphics.Rect: int top>;

        f2 = (float) $i5;

        i2 = r2.<android.graphics.Rect: int bottom>;

     label11:
        f3 = (float) i2;

        goto label04;

     label12:
        $r7 := @caughtexception;

        r5 = $r7;

        if i0 == 0 goto label13;

        $i11 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i11, i0);

     label13:
        throw r5;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public void drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r7;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        java.lang.IllegalArgumentException $r5, $r6, $r8;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        if i2 >= 0 goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be >= 0");

        throw $r8;

     label01:
        if i3 >= 0 goto label02;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be >= 0");

        throw $r5;

     label02:
        $i8 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i8 >= i2 goto label03;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r6;

     label03:
        $i10 = i3 - 1;

        $i9 = i1 * $i10;

        i4 = i0 + $i9;

        i5 = lengthof r1;

        if i0 < 0 goto label04;

        $i11 = i0 + i2;

        if $i11 > i5 goto label04;

        if i4 < 0 goto label04;

        $i13 = i4 + i2;

        if $i13 <= i5 goto label05;

     label04:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label05:
        if r2 == null goto label10;

        i6 = specialinvoke r0.<android.view.GLES20Canvas: int setupColorFilter(android.graphics.Paint)>(r2);

     label06:
        if r2 != null goto label11;

        i7 = 0;

     label07:
        $i12 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(int,int[],int,int,float,float,int,int,boolean,int)>($i12, r1, i0, i1, f0, f1, i2, i3, z0, i7);

     label08:
        if i6 == 0 goto label09;

        $i14 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i14, i6);

     label09:
        return;

     label10:
        i6 = 0;

        goto label06;

     label11:
        i7 = r2.<android.graphics.Paint: int mNativePaint>;

     label12:
        goto label07;

     label13:
        $r7 := @caughtexception;

        r3 = $r7;

        if i6 == 0 goto label14;

        $i15 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i15, i6);

     label14:
        throw r3;

        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public void drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5;
        boolean z0;
        android.graphics.Paint r2;
        float $f0, $f1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        $f1 = (float) i2;

        $f0 = (float) i3;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>(r1, i0, i1, $f1, $f0, i4, i5, z0, r2);

        return;
    }

    public void drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        float[] r2;
        int[] r3;
        android.graphics.Paint r4;
        java.lang.Throwable r5, $r8;
        java.lang.ArrayIndexOutOfBoundsException $r6;
        byte[] $r7;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: float[];

        i2 := @parameter4: int;

        r3 := @parameter5: int[];

        i3 := @parameter6: int;

        r4 := @parameter7: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if i0 < 0 goto label01;

        if i1 < 0 goto label01;

        if i2 < 0 goto label01;

        if i3 >= 0 goto label02;

     label01:
        $r6 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label02:
        if i0 == 0 goto label03;

        if i1 != 0 goto label04;

     label03:
        return;

     label04:
        $i8 = i0 + 1;

        $i7 = i1 + 1;

        i4 = $i8 * $i7;

        $i9 = lengthof r2;

        $i10 = i4 * 2;

        staticinvoke <android.view.GLES20Canvas: void checkRange(int,int,int)>($i9, i2, $i10);

        if r3 == null goto label05;

        $i14 = lengthof r3;

        staticinvoke <android.view.GLES20Canvas: void checkRange(int,int,int)>($i14, i3, i4);

     label05:
        if r4 == null goto label09;

        i5 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Bitmap,android.graphics.Paint)>(r1, r4);

     label06:
        if r4 != null goto label10;

        i6 = 0;

     label07:
        $i13 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i11 = r1.<android.graphics.Bitmap: int mNativeBitmap>;

        $r7 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmapMesh(int,int,byte[],int,int,float[],int,int[],int,int)>($i13, $i11, $r7, i0, i1, r2, i2, r3, i3, i6);

     label08:
        if i5 == 0 goto label03;

        $i12 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i12, i5);

        return;

     label09:
        i5 = 0;

        goto label06;

     label10:
        i6 = r4.<android.graphics.Paint: int mNativePaint>;

     label11:
        goto label07;

     label12:
        $r8 := @caughtexception;

        r5 = $r8;

        if i5 == 0 goto label13;

        $i15 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i15, i5);

     label13:
        throw r5;

        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public void drawCircle(float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2;
        android.graphics.Paint r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r1 := @parameter3: android.graphics.Paint;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r1, 6);

     label1:
        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r1.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawCircle(int,float,float,float,int)>($i2, f0, f1, f2, $i1);

     label2:
        if i0 == 0 goto label3;

        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i3, i0);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        if i0 == 0 goto label5;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i0);

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void drawColor(int)
    {
        android.view.GLES20Canvas r0;
        int i0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(i0, $r1);

        return;
    }

    public void drawColor(int, android.graphics.PorterDuff$Mode)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1, $i2;
        android.graphics.PorterDuff$Mode r1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.PorterDuff$Mode;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        staticinvoke <android.view.GLES20Canvas: void nDrawColor(int,int,int)>($i2, i0, $i1);

        return;
    }

    public int drawDisplayList(android.view.DisplayList, android.graphics.Rect, int)
    {
        android.view.GLES20Canvas r0;
        android.view.DisplayList r1;
        android.graphics.Rect r2;
        int i0, $i1, $i2, $i3;
        android.view.GLES20DisplayList $r3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.view.DisplayList;

        r2 := @parameter1: android.graphics.Rect;

        i0 := @parameter2: int;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r3 = (android.view.GLES20DisplayList) r1;

        $i2 = virtualinvoke $r3.<android.view.GLES20DisplayList: int getNativeDisplayList()>();

        $i3 = staticinvoke <android.view.GLES20Canvas: int nDrawDisplayList(int,int,android.graphics.Rect,int)>($i1, $i2, r2, i0);

        return $i3;
    }

    void drawHardwareLayer(android.view.HardwareLayer, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.view.HardwareLayer r1;
        float f0, f1;
        android.graphics.Paint r2;
        android.view.GLES20Layer r3;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.view.HardwareLayer;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        virtualinvoke r1.<android.view.HardwareLayer: void setLayerPaint(android.graphics.Paint)>(r2);

        r3 = (android.view.GLES20Layer) r1;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = virtualinvoke r3.<android.view.GLES20Layer: int getLayer()>();

        staticinvoke <android.view.GLES20Canvas: void nDrawLayer(int,int,float,float)>($i0, $i1, f0, f1);

        return;
    }

    public void drawLine(float, float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        float[] r2;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        r2 = specialinvoke r0.<android.view.GLES20Canvas: float[] getLineStorage()>();

        r2[0] = f0;

        r2[1] = f1;

        r2[2] = f2;

        r2[3] = f3;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawLines(float[],int,int,android.graphics.Paint)>(r2, 0, 4, r1);

        return;
    }

    public void drawLines(float[], int, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r5;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Paint;

        if i1 >= 4 goto label2;

     label1:
        return;

     label2:
        $i3 = i0 | i1;

        if $i3 < 0 goto label3;

        $i5 = i0 + i1;

        $i4 = lengthof r1;

        if $i5 <= $i4 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The lines array must contain 4 elements per line.");

        throw $r4;

     label4:
        i2 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r2, 6);

     label5:
        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i6 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawLines(int,float[],int,int,int)>($i7, r1, i0, i1, $i6);

     label6:
        if i2 == 0 goto label1;

        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i8, i2);

        return;

     label7:
        $r5 := @caughtexception;

        r3 = $r5;

        if i2 == 0 goto label8;

        $i9 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i9, i2);

     label8:
        throw r3;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void drawLines(float[], android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        android.graphics.Paint r2;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.graphics.Paint;

        $i0 = lengthof r1;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawLines(float[],int,int,android.graphics.Paint)>(r1, 0, $i0, r2);

        return;
    }

    public void drawOval(android.graphics.RectF, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r3, $r4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r2, 6);

     label1:
        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $i1 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawOval(int,float,float,float,float,int)>($i2, $f3, $f2, $f1, $f0, $i1);

     label2:
        if i0 == 0 goto label3;

        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i3, i0);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        if i0 == 0 goto label5;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i0);

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void drawPaint(android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Paint r1;
        android.graphics.Rect r2;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Paint;

        r2 = specialinvoke r0.<android.view.GLES20Canvas: android.graphics.Rect getInternalClipBounds()>();

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: boolean nGetClipBounds(int,android.graphics.Rect)>($i0, r2);

        $i1 = r2.<android.graphics.Rect: int left>;

        $f3 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f2 = (float) $i2;

        $i3 = r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i4;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r1);

        return;
    }

    public void drawPatch(android.graphics.NinePatch, android.graphics.Rect, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.NinePatch r1;
        android.graphics.Rect r2;
        android.graphics.Paint r3;
        android.graphics.Bitmap r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Throwable r5, $r7;
        float $f0, $f1, $f2, $f3;
        byte[] $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.NinePatch;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Paint;

        r4 = virtualinvoke r1.<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>();

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r4);

        if r3 == null goto label5;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupColorFilter(android.graphics.Paint)>(r3);

     label1:
        if r3 != null goto label6;

        i1 = 0;

     label2:
        $i9 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i7 = r4.<android.graphics.Bitmap: int mNativeBitmap>;

        $r6 = r4.<android.graphics.Bitmap: byte[] mBuffer>;

        $i6 = r1.<android.graphics.NinePatch: int mNativeChunk>;

        $i2 = r2.<android.graphics.Rect: int left>;

        $f3 = (float) $i2;

        $i3 = r2.<android.graphics.Rect: int top>;

        $f2 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i4;

        $i5 = r2.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i5;

        staticinvoke <android.view.GLES20Canvas: void nDrawPatch(int,int,byte[],int,float,float,float,float,int)>($i9, $i7, $r6, $i6, $f3, $f2, $f1, $f0, i1);

     label3:
        if i0 == 0 goto label4;

        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i8, i0);

     label4:
        return;

     label5:
        i0 = 0;

        goto label1;

     label6:
        i1 = r3.<android.graphics.Paint: int mNativePaint>;

     label7:
        goto label2;

     label8:
        $r7 := @caughtexception;

        r5 = $r7;

        if i0 == 0 goto label9;

        $i10 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i10, i0);

     label9:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void drawPatch(android.graphics.NinePatch, android.graphics.RectF, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.NinePatch r1;
        android.graphics.RectF r2;
        android.graphics.Paint r3;
        android.graphics.Bitmap r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Throwable r5, $r7;
        float $f0, $f1, $f2, $f3;
        byte[] $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.NinePatch;

        r2 := @parameter1: android.graphics.RectF;

        r3 := @parameter2: android.graphics.Paint;

        r4 = virtualinvoke r1.<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>();

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r4);

        if r3 == null goto label5;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupColorFilter(android.graphics.Paint)>(r3);

     label1:
        if r3 != null goto label6;

        i1 = 0;

     label2:
        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i3 = r4.<android.graphics.Bitmap: int mNativeBitmap>;

        $r6 = r4.<android.graphics.Bitmap: byte[] mBuffer>;

        $i2 = r1.<android.graphics.NinePatch: int mNativeChunk>;

        $f3 = r2.<android.graphics.RectF: float left>;

        $f2 = r2.<android.graphics.RectF: float top>;

        $f1 = r2.<android.graphics.RectF: float right>;

        $f0 = r2.<android.graphics.RectF: float bottom>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPatch(int,int,byte[],int,float,float,float,float,int)>($i5, $i3, $r6, $i2, $f3, $f2, $f1, $f0, i1);

     label3:
        if i0 == 0 goto label4;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i0);

     label4:
        return;

     label5:
        i0 = 0;

        goto label1;

     label6:
        i1 = r3.<android.graphics.Paint: int mNativePaint>;

     label7:
        goto label2;

     label8:
        $r7 := @caughtexception;

        r5 = $r7;

        if i0 == 0 goto label9;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i6, i0);

     label9:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void drawPath(android.graphics.Path, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Paint r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        android.graphics.Region $r4, $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Paint;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r2, 6);

     label1:
        $z0 = r1.<android.graphics.Path: boolean isSimplePath>;

        if $z0 == 0 goto label4;

        $r4 = r1.<android.graphics.Path: android.graphics.Region rects>;

        if $r4 == null goto label2;

        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r5 = r1.<android.graphics.Path: android.graphics.Region rects>;

        $i6 = $r5.<android.graphics.Region: int mNativeRegion>;

        $i5 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawRects(int,int,int)>($i7, $i6, $i5);

     label2:
        if i0 == 0 goto label3;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i0);

     label3:
        return;

     label4:
        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i2 = r1.<android.graphics.Path: int mNativePath>;

        $i1 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPath(int,int,int)>($i3, $i2, $i1);

     label5:
        goto label2;

     label6:
        $r6 := @caughtexception;

        r3 = $r6;

        if i0 == 0 goto label7;

        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i8, i0);

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void drawPicture(android.graphics.Picture)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Picture r1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Picture;

        $z0 = r1.<android.graphics.Picture: boolean createdFromStream>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<android.graphics.Picture: void endRecording()>();

        return;
    }

    public void drawPicture(android.graphics.Picture, android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Picture r1;
        android.graphics.Rect r2;
        boolean $z0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Picture;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = r1.<android.graphics.Picture: boolean createdFromStream>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.view.GLES20Canvas: int save()>();

        $i1 = r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f0 = (float) $i2;

        virtualinvoke r0.<android.view.GLES20Canvas: void translate(float,float)>($f1, $f0);

        $i3 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        if $i3 <= 0 goto label2;

        $i4 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        if $i4 <= 0 goto label2;

        $i5 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i6 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        $i7 = $i5 / $i6;

        $f2 = (float) $i7;

        $i8 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $i10 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        $i9 = $i8 / $i10;

        $f3 = (float) $i9;

        virtualinvoke r0.<android.view.GLES20Canvas: void scale(float,float)>($f2, $f3);

     label2:
        virtualinvoke r0.<android.view.GLES20Canvas: void drawPicture(android.graphics.Picture)>(r1);

        virtualinvoke r0.<android.view.GLES20Canvas: void restore()>();

        return;
    }

    public void drawPicture(android.graphics.Picture, android.graphics.RectF)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Picture r1;
        android.graphics.RectF r2;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i1, $i2, $i3, $i4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Picture;

        r2 := @parameter1: android.graphics.RectF;

        $z0 = r1.<android.graphics.Picture: boolean createdFromStream>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.view.GLES20Canvas: int save()>();

        $f1 = r2.<android.graphics.RectF: float left>;

        $f0 = r2.<android.graphics.RectF: float top>;

        virtualinvoke r0.<android.view.GLES20Canvas: void translate(float,float)>($f1, $f0);

        $i1 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        if $i1 <= 0 goto label2;

        $i2 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        if $i2 <= 0 goto label2;

        $f2 = virtualinvoke r2.<android.graphics.RectF: float width()>();

        $i3 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        $f3 = (float) $i3;

        $f4 = $f2 / $f3;

        $f5 = virtualinvoke r2.<android.graphics.RectF: float height()>();

        $i4 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        $f6 = (float) $i4;

        $f7 = $f5 / $f6;

        virtualinvoke r0.<android.view.GLES20Canvas: void scale(float,float)>($f4, $f7);

     label2:
        virtualinvoke r0.<android.view.GLES20Canvas: void drawPicture(android.graphics.Picture)>(r1);

        virtualinvoke r0.<android.view.GLES20Canvas: void restore()>();

        return;
    }

    public void drawPoint(float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        android.graphics.Paint r1;
        float[] r2;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.graphics.Paint;

        r2 = specialinvoke r0.<android.view.GLES20Canvas: float[] getPointStorage()>();

        r2[0] = f0;

        r2[1] = f1;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>(r2, 0, 2, r1);

        return;
    }

    public void drawPoints(float[], int, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Paint;

        if i1 >= 2 goto label2;

     label1:
        return;

     label2:
        i2 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r2, 6);

     label3:
        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i3 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPoints(int,float[],int,int,int)>($i4, r1, i0, i1, $i3);

     label4:
        if i2 == 0 goto label1;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i5, i2);

        return;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

        if i2 == 0 goto label6;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i6, i2);

     label6:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void drawPoints(float[], android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        android.graphics.Paint r2;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.graphics.Paint;

        $i0 = lengthof r1;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>(r1, 0, $i0, r2);

        return;
    }

    public void drawPosText(java.lang.String, float[], android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        float[] r2;
        android.graphics.Paint r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Throwable r4, $r5;
        java.lang.ArrayIndexOutOfBoundsException $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: float[];

        r3 := @parameter2: android.graphics.Paint;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = 2 * $i1;

        $i2 = lengthof r2;

        if $i3 <= $i2 goto label1;

        $r6 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label1:
        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r3);

     label2:
        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = r3.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPosText(int,java.lang.String,int,int,float[],int)>($i4, r1, 0, $i5, r2, $i6);

     label3:
        if i0 == 0 goto label4;

        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i7, i0);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        r4 = $r5;

        if i0 == 0 goto label6;

        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i8, i0);

     label6:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void drawPosText(char[], int, int, float[], android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        float[] r2;
        android.graphics.Paint r3;
        java.lang.Throwable r4, $r6;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: float[];

        r3 := @parameter4: android.graphics.Paint;

        if i0 < 0 goto label1;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 > $i3 goto label1;

        $i6 = i1 * 2;

        $i5 = lengthof r2;

        if $i6 <= $i5 goto label2;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label2:
        i2 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r3);

     label3:
        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i7 = r3.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPosText(int,char[],int,int,float[],int)>($i8, r1, i0, i1, r2, $i7);

     label4:
        if i2 == 0 goto label5;

        $i9 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i9, i2);

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        r4 = $r6;

        if i2 == 0 goto label7;

        $i10 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i10, i2);

     label7:
        throw r4;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public void drawRGB(int, int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i0 & 255;

        $i4 = $i3 << 16;

        $i7 = -16777216 | $i4;

        $i5 = i1 & 255;

        $i6 = $i5 << 8;

        $i9 = $i7 | $i6;

        $i8 = i2 & 255;

        $i10 = $i9 | $i8;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawColor(int)>($i10);

        return;
    }

    public void drawRect(float, float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        int i0, $i3, $i4, $i5, $i6;
        java.lang.Throwable r2, $r3;
        byte $b1, $b2;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        $b1 = f0 cmpl f2;

        if $b1 == 0 goto label1;

        $b2 = f1 cmpl f3;

        if $b2 != 0 goto label2;

     label1:
        return;

     label2:
        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r1, 6);

     label3:
        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i3 = r1.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawRect(int,float,float,float,float,int)>($i4, f0, f1, f2, f3, $i3);

     label4:
        if i0 == 0 goto label1;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i5, i0);

        return;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        if i0 == 0 goto label6;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i6, i0);

     label6:
        throw r2;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void drawRect(android.graphics.Rect, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Paint r2;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Paint;

        $i0 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i0;

        $i1 = r1.<android.graphics.Rect: int top>;

        $f2 = (float) $i1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f1 = (float) $i2;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i3;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r2);

        return;
    }

    public void drawRect(android.graphics.RectF, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r2);

        return;
    }

    void drawRects(float[], int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        r2 := @parameter2: android.graphics.Paint;

        i1 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r2, 6);

     label1:
        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i2 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawRects(int,float[],int,int)>($i3, r1, i0, $i2);

     label2:
        if i1 == 0 goto label3;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        if i1 == 0 goto label5;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i5, i1);

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.graphics.Paint r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r3, $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)>(r2, 6);

     label1:
        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f5 = r1.<android.graphics.RectF: float left>;

        $f4 = r1.<android.graphics.RectF: float top>;

        $f3 = r1.<android.graphics.RectF: float right>;

        $f2 = r1.<android.graphics.RectF: float bottom>;

        $i1 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawRoundRect(int,float,float,float,float,float,float,int)>($i2, $f5, $f4, $f3, $f2, f0, f1, $i1);

     label2:
        if i0 == 0 goto label3;

        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i3, i0);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        if i0 == 0 goto label5;

        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i4, i0);

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        float f0, f1;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r6;
        char[] r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5;
        android.text.GraphicsOperations $r7;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        i2 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r2);

     label01:
        $z0 = r1 instanceof java.lang.String;

        if $z0 != 0 goto label02;

        $z2 = r1 instanceof android.text.SpannedString;

        if $z2 != 0 goto label02;

        $z1 = r1 instanceof android.text.SpannableString;

        if $z1 == 0 goto label05;

     label02:
        $i4 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $i7 = r2.<android.graphics.Paint: int mBidiFlags>;

        $i5 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(int,java.lang.String,int,int,float,float,int,int)>($i4, $r5, i0, i1, f0, f1, $i7, $i5);

     label03:
        if i2 == 0 goto label04;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i6, i2);

     label04:
        return;

     label05:
        $z3 = r1 instanceof android.text.GraphicsOperations;

        if $z3 == 0 goto label09;

        $r7 = (android.text.GraphicsOperations) r1;

        interfaceinvoke $r7.<android.text.GraphicsOperations: void drawText(android.graphics.Canvas,int,int,float,float,android.graphics.Paint)>(r0, i0, i1, f0, f1, r2);

     label06:
        goto label03;

     label07:
        $r6 := @caughtexception;

        r3 = $r6;

        if i2 == 0 goto label08;

        $i12 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i12, i2);

     label08:
        throw r3;

     label09:
        i3 = i1 - i0;

     label10:
        r4 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>(i3);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i0, i1, r4, 0);

        $i10 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i11 = i1 - i0;

        $i8 = r2.<android.graphics.Paint: int mBidiFlags>;

        $i9 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(int,char[],int,int,float,float,int,int)>($i10, r4, 0, $i11, f0, f1, $i8, $i9);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r4);

     label11:
        goto label03;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    public void drawText(java.lang.String, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        float f0, f1;
        android.graphics.Paint r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Throwable r3, $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r2);

     label1:
        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = r2.<android.graphics.Paint: int mBidiFlags>;

        $i3 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(int,java.lang.String,int,int,float,float,int,int)>($i1, r1, 0, $i2, f0, f1, $i4, $i3);

     label2:
        if i0 == 0 goto label3;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i5, i0);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        if i0 == 0 goto label5;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i6, i0);

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void drawText(java.lang.String, int, int, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        float f0, f1;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r4;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        $i4 = i0 | i1;

        $i3 = i1 - i0;

        $i5 = $i4 | $i3;

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        $i7 = $i6 - i1;

        $i8 = $i5 | $i7;

        if $i8 >= 0 goto label1;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label1:
        i2 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r2);

     label2:
        $i12 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i9 = r2.<android.graphics.Paint: int mBidiFlags>;

        $i10 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(int,java.lang.String,int,int,float,float,int,int)>($i12, r1, i0, i1, f0, f1, $i9, $i10);

     label3:
        if i2 == 0 goto label4;

        $i11 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i11, i2);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

        if i2 == 0 goto label6;

        $i13 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i13, i2);

     label6:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void drawText(char[], int, int, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        float f0, f1;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r5;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        $i4 = i0 | i1;

        $i3 = i0 + i1;

        $i8 = $i4 | $i3;

        $i5 = lengthof r1;

        $i6 = $i5 - i0;

        $i7 = $i6 - i1;

        $i9 = $i8 | $i7;

        if $i9 >= 0 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        i2 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r2);

     label2:
        $i11 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i12 = r2.<android.graphics.Paint: int mBidiFlags>;

        $i10 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(int,char[],int,int,float,float,int,int)>($i11, r1, i0, i1, f0, f1, $i12, $i10);

     label3:
        if i2 == 0 goto label4;

        $i13 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i13, i2);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        if i2 == 0 goto label6;

        $i14 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i14, i2);

     label6:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        android.graphics.Path r2;
        float f0, f1;
        android.graphics.Paint r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Throwable r4, $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Path;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r3 := @parameter4: android.graphics.Paint;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return;

     label2:
        i0 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r3);

     label3:
        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = r2.<android.graphics.Path: int mNativePath>;

        $i5 = r3.<android.graphics.Paint: int mBidiFlags>;

        $i4 = r3.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextOnPath(int,java.lang.String,int,int,int,float,float,int,int)>($i2, r1, 0, $i3, $i6, f0, f1, $i5, $i4);

     label4:
        if i0 == 0 goto label1;

        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i7, i0);

        return;

     label5:
        $r5 := @caughtexception;

        r4 = $r5;

        if i0 == 0 goto label6;

        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i8, i0);

     label6:
        throw r4;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.graphics.Path r2;
        float f0, f1;
        android.graphics.Paint r3;
        java.lang.Throwable r4, $r6;
        java.lang.ArrayIndexOutOfBoundsException $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Path;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r3 := @parameter6: android.graphics.Paint;

        if i0 < 0 goto label1;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 <= $i3 goto label2;

     label1:
        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label2:
        i2 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r3);

     label3:
        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i8 = r2.<android.graphics.Path: int mNativePath>;

        $i6 = r3.<android.graphics.Paint: int mBidiFlags>;

        $i5 = r3.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextOnPath(int,char[],int,int,int,float,float,int,int)>($i7, r1, i0, i1, $i8, f0, f1, $i6, $i5);

     label4:
        if i2 == 0 goto label5;

        $i9 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i9, i2);

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        r4 = $r6;

        if i2 == 0 goto label7;

        $i10 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i10, i2);

     label7:
        throw r4;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, i5, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        float f0, f1;
        android.graphics.Paint r2;
        byte b6;
        java.lang.Throwable r3, $r8;
        char[] r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5;
        android.text.GraphicsOperations $r6;
        java.lang.IndexOutOfBoundsException $r7;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        i4 := @parameter7: int;

        r2 := @parameter8: android.graphics.Paint;

        $i9 = i0 | i1;

        $i10 = i1 - i0;

        $i12 = $i9 | $i10;

        $i11 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i14 = $i11 - i1;

        $i13 = $i12 | $i14;

        if $i13 >= 0 goto label01;

        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r7;

     label01:
        i5 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r2);

        if i4 != 0 goto label06;

        b6 = 0;

     label02:
        $z0 = r1 instanceof java.lang.String;

        if $z0 != 0 goto label03;

        $z2 = r1 instanceof android.text.SpannedString;

        if $z2 != 0 goto label03;

        $z1 = r1 instanceof android.text.SpannableString;

        if $z1 == 0 goto label07;

     label03:
        $i15 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $i17 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextRun(int,java.lang.String,int,int,int,int,float,float,int,int)>($i15, $r5, i0, i1, i2, i3, f0, f1, b6, $i17);

     label04:
        if i5 == 0 goto label05;

        $i16 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i16, i5);

     label05:
        return;

     label06:
        b6 = 1;

        goto label02;

     label07:
        $z3 = r1 instanceof android.text.GraphicsOperations;

        if $z3 == 0 goto label11;

        $r6 = (android.text.GraphicsOperations) r1;

        interfaceinvoke $r6.<android.text.GraphicsOperations: void drawTextRun(android.graphics.Canvas,int,int,int,int,float,float,int,android.graphics.Paint)>(r0, i0, i1, i2, i3, f0, f1, b6, r2);

     label08:
        goto label04;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

        if i5 == 0 goto label10;

        $i21 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i21, i5);

     label10:
        throw r3;

     label11:
        i7 = i3 - i2;

        i8 = i1 - i0;

     label12:
        r4 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>(i7);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i2, i3, r4, 0);

        $i18 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i20 = i0 - i2;

        $i19 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextRun(int,char[],int,int,int,int,float,float,int,int)>($i18, r4, $i20, i8, 0, i7, f0, f1, b6, $i19);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r4);

     label13:
        goto label04;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public void drawTextRun(char[], int, int, int, int, float, float, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        char[] r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        float f0, f1;
        android.graphics.Paint r2;
        java.lang.Throwable r3, $r9;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7;
        java.lang.IndexOutOfBoundsException $r10;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        i4 := @parameter7: int;

        r2 := @parameter8: android.graphics.Paint;

        $i9 = i0 | i1;

        $i6 = lengthof r1;

        $i7 = $i6 - i0;

        $i8 = $i7 - i1;

        $i10 = $i9 | $i8;

        if $i10 >= 0 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r10;

     label1:
        if i4 == 0 goto label2;

        if i4 == 1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown direction: ");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label2:
        i5 = specialinvoke r0.<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>(r2);

     label3:
        $i11 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i12 = r2.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextRun(int,char[],int,int,int,int,float,float,int,int)>($i11, r1, i0, i1, i2, i3, f0, f1, i4, $i12);

     label4:
        if i5 == 0 goto label5;

        $i13 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i13, i5);

     label5:
        return;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

        if i5 == 0 goto label7;

        $i14 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i14, i5);

     label7:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public void drawVertices(android.graphics.Canvas$VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Canvas$VertexMode r1;
        int i0, i1, i2, i3, i4, i5;
        float[] r2, r3;
        int[] r4;
        short[] r5;
        android.graphics.Paint r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Canvas$VertexMode;

        i0 := @parameter1: int;

        r2 := @parameter2: float[];

        i1 := @parameter3: int;

        r3 := @parameter4: float[];

        i2 := @parameter5: int;

        r4 := @parameter6: int[];

        i3 := @parameter7: int;

        r5 := @parameter8: short[];

        i4 := @parameter9: int;

        i5 := @parameter10: int;

        r6 := @parameter11: android.graphics.Paint;

        return;
    }

    void flushLayerUpdates()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nFlushLayerUpdates(int)>($i0);

        return;
    }

    public boolean getClipBounds(android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nGetClipBounds(int,android.graphics.Rect)>($i0, r1);

        return $z0;
    }

    int getDisplayList(int)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i2 = staticinvoke <android.view.GLES20Canvas: int nGetDisplayList(int,int)>($i1, i0);

        return $i2;
    }

    public android.graphics.DrawFilter getDrawFilter()
    {
        android.view.GLES20Canvas r0;
        android.graphics.DrawFilter $r1;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: android.graphics.DrawFilter mFilter>;

        return $r1;
    }

    public int getHeight()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mHeight>;

        return $i0;
    }

    public void getMatrix(android.graphics.Matrix)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Matrix r1;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i0 = r1.<android.graphics.Matrix: int native_instance>;

        staticinvoke <android.view.GLES20Canvas: void nGetMatrix(int,int)>($i1, $i0);

        return;
    }

    public int getMaximumBitmapHeight()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = staticinvoke <android.view.GLES20Canvas: int nGetMaximumTextureHeight()>();

        return $i0;
    }

    public int getMaximumBitmapWidth()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = staticinvoke <android.view.GLES20Canvas: int nGetMaximumTextureWidth()>();

        return $i0;
    }

    float getOverdraw()
    {
        android.view.GLES20Canvas r0;
        int $i0;
        float $f0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f0 = staticinvoke <android.view.GLES20Canvas: float nGetOverdraw(int)>($i0);

        return $f0;
    }

    int getRenderer()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        return $i0;
    }

    public int getSaveCount()
    {
        android.view.GLES20Canvas r0;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nGetSaveCount(int)>($i0);

        return $i1;
    }

    public int getWidth()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mWidth>;

        return $i0;
    }

    void interrupt()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nInterrupt(int)>($i0);

        return;
    }

    public int invokeFunctors(android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nInvokeFunctors(int,android.graphics.Rect)>($i0, r1);

        return $i1;
    }

    public boolean isOpaque()
    {
        android.view.GLES20Canvas r0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        $z0 = r0.<android.view.GLES20Canvas: boolean mOpaque>;

        return $z0;
    }

    public void onPostDraw()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nFinish(int)>($i0);

        return;
    }

    public int onPreDraw(android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label1;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r1.<android.graphics.Rect: int top>;

        $i3 = r1.<android.graphics.Rect: int right>;

        $i2 = r1.<android.graphics.Rect: int bottom>;

        $z1 = r0.<android.view.GLES20Canvas: boolean mOpaque>;

        $i7 = staticinvoke <android.view.GLES20Canvas: int nPrepareDirty(int,int,int,int,int,boolean)>($i6, $i5, $i4, $i3, $i2, $z1);

        return $i7;

     label1:
        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $z0 = r0.<android.view.GLES20Canvas: boolean mOpaque>;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nPrepare(int,boolean)>($i0, $z0);

        return $i1;
    }

    void outputDisplayList(android.view.DisplayList)
    {
        android.view.GLES20Canvas r0;
        android.view.DisplayList r1;
        android.view.GLES20DisplayList $r2;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.view.DisplayList;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r2 = (android.view.GLES20DisplayList) r1;

        $i1 = virtualinvoke $r2.<android.view.GLES20DisplayList: int getNativeDisplayList()>();

        staticinvoke <android.view.GLES20Canvas: void nOutputDisplayList(int,int)>($i0, $i1);

        return;
    }

    void pushLayerUpdate(android.view.HardwareLayer)
    {
        android.view.GLES20Canvas r0;
        android.view.HardwareLayer r1;
        android.view.GLES20RenderLayer $r2;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.view.HardwareLayer;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $r2 = (android.view.GLES20RenderLayer) r1;

        $i0 = $r2.<android.view.GLES20RenderLayer: int mLayer>;

        staticinvoke <android.view.GLES20Canvas: void nPushLayerUpdate(int,int)>($i1, $i0);

        return;
    }

    public boolean quickReject(float, float, float, float, android.graphics.Canvas$EdgeType)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Canvas$EdgeType r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Canvas$EdgeType;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nQuickReject(int,float,float,float,float)>($i0, f0, f1, f2, f3);

        return $z0;
    }

    public boolean quickReject(android.graphics.Path, android.graphics.Canvas$EdgeType)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Canvas$EdgeType r2;
        android.graphics.RectF r3;
        float $f0, $f1, $f2, $f3;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Canvas$EdgeType;

        r3 = specialinvoke r0.<android.view.GLES20Canvas: android.graphics.RectF getPathBounds()>();

        virtualinvoke r1.<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>(r3, 1);

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f3 = r3.<android.graphics.RectF: float left>;

        $f2 = r3.<android.graphics.RectF: float top>;

        $f1 = r3.<android.graphics.RectF: float right>;

        $f0 = r3.<android.graphics.RectF: float bottom>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nQuickReject(int,float,float,float,float)>($i0, $f3, $f2, $f1, $f0);

        return $z0;
    }

    public boolean quickReject(android.graphics.RectF, android.graphics.Canvas$EdgeType)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Canvas$EdgeType r2;
        float $f0, $f1, $f2, $f3;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Canvas$EdgeType;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nQuickReject(int,float,float,float,float)>($i0, $f3, $f2, $f1, $f0);

        return $z0;
    }

    protected void resetDisplayListRenderer()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetDisplayListRenderer(int)>($i0);

        return;
    }

    public void restore()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nRestore(int)>($i0);

        return;
    }

    public void restoreToCount(int)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nRestoreToCount(int,int)>($i1, i0);

        return;
    }

    void resume()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResume(int)>($i0);

        return;
    }

    public void rotate(float)
    {
        android.view.GLES20Canvas r0;
        float f0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nRotate(int,float)>($i0, f0);

        return;
    }

    public int save()
    {
        android.view.GLES20Canvas r0;
        int $i0, $i1;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nSave(int,int)>($i0, 3);

        return $i1;
    }

    public int save(int)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i2 = staticinvoke <android.view.GLES20Canvas: int nSave(int,int)>($i1, i0);

        return $i2;
    }

    public int saveLayer(float, float, float, float, android.graphics.Paint, int)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        int i0, i1, i2, i3, $i5, $i7, $i8, $i9;
        java.lang.Throwable r2, $r3;
        byte $b4, $b6;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        i0 := @parameter5: int;

        $b4 = f0 cmpg f2;

        if $b4 >= 0 goto label10;

        $b6 = f1 cmpg f3;

        if $b6 >= 0 goto label10;

        if r1 == null goto label05;

        i1 = specialinvoke r0.<android.view.GLES20Canvas: int setupColorFilter(android.graphics.Paint)>(r1);

     label01:
        if r1 != null goto label06;

        i2 = 0;

     label02:
        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        i3 = staticinvoke <android.view.GLES20Canvas: int nSaveLayer(int,float,float,float,float,int,int)>($i7, f0, f1, f2, f3, i2, i0);

     label03:
        if i1 == 0 goto label04;

        $i8 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i8, i1);

     label04:
        return i3;

     label05:
        i1 = 0;

        goto label01;

     label06:
        i2 = r1.<android.graphics.Paint: int mNativePaint>;

     label07:
        goto label02;

     label08:
        $r3 := @caughtexception;

        r2 = $r3;

        if i1 == 0 goto label09;

        $i9 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i9, i1);

     label09:
        throw r2;

     label10:
        $i5 = virtualinvoke r0.<android.view.GLES20Canvas: int save(int)>(i0);

        return $i5;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    public int saveLayer(android.graphics.RectF, android.graphics.Paint, int)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.Throwable r3, $r4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        if r1 == null goto label02;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        i4 = virtualinvoke r0.<android.view.GLES20Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f3, $f2, $f1, $f0, r2, i0);

     label01:
        return i4;

     label02:
        if r2 == null goto label06;

        i1 = specialinvoke r0.<android.view.GLES20Canvas: int setupColorFilter(android.graphics.Paint)>(r2);

     label03:
        if r2 != null goto label07;

        i2 = 0;

     label04:
        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        i3 = staticinvoke <android.view.GLES20Canvas: int nSaveLayer(int,int,int)>($i5, i2, i0);

     label05:
        i4 = i3;

        if i1 == 0 goto label01;

        $i6 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i6, i1);

        return i4;

     label06:
        i1 = 0;

        goto label03;

     label07:
        i2 = r2.<android.graphics.Paint: int mNativePaint>;

     label08:
        goto label04;

     label09:
        $r4 := @caughtexception;

        r3 = $r4;

        if i1 == 0 goto label10;

        $i7 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetModifiers(int,int)>($i7, i1);

     label10:
        throw r3;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public int saveLayerAlpha(float, float, float, float, int, int)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        int i0, i1, $i3, $i5, $i6;
        byte $b2, $b4;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $b2 = f0 cmpg f2;

        if $b2 >= 0 goto label1;

        $b4 = f1 cmpg f3;

        if $b4 >= 0 goto label1;

        $i5 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i6 = staticinvoke <android.view.GLES20Canvas: int nSaveLayerAlpha(int,float,float,float,float,int,int)>($i5, f0, f1, f2, f3, i0, i1);

        return $i6;

     label1:
        $i3 = virtualinvoke r0.<android.view.GLES20Canvas: int save(int)>(i1);

        return $i3;
    }

    public int saveLayerAlpha(android.graphics.RectF, int, int)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        int i0, i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label1;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $i4 = virtualinvoke r0.<android.view.GLES20Canvas: int saveLayerAlpha(float,float,float,float,int,int)>($f3, $f2, $f1, $f0, i0, i1);

        return $i4;

     label1:
        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i3 = staticinvoke <android.view.GLES20Canvas: int nSaveLayerAlpha(int,int,int)>($i2, i0, i1);

        return $i3;
    }

    public void scale(float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nScale(int,float,float)>($i0, f0, f1);

        return;
    }

    void setCountOverdrawEnabled(boolean)
    {
        android.view.GLES20Canvas r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nSetCountOverdrawEnabled(int,boolean)>($i0, z0);

        return;
    }

    public void setDrawFilter(android.graphics.DrawFilter)
    {
        android.view.GLES20Canvas r0;
        android.graphics.DrawFilter r1;
        android.graphics.PaintFlagsDrawFilter r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.DrawFilter;

        r0.<android.view.GLES20Canvas: android.graphics.DrawFilter mFilter> = r1;

        if r1 != null goto label2;

        $i3 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetPaintFilter(int)>($i3);

     label1:
        return;

     label2:
        $z0 = r1 instanceof android.graphics.PaintFlagsDrawFilter;

        if $z0 == 0 goto label1;

        r2 = (android.graphics.PaintFlagsDrawFilter) r1;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        $i1 = r2.<android.graphics.PaintFlagsDrawFilter: int clearBits>;

        $i0 = r2.<android.graphics.PaintFlagsDrawFilter: int setBits>;

        staticinvoke <android.view.GLES20Canvas: void nSetupPaintFilter(int,int,int)>($i2, $i1, $i0);

        return;
    }

    public void setMatrix(android.graphics.Matrix)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Matrix r1;
        int i0, i1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        if r1 != null goto label2;

        i1 = 0;

     label1:
        staticinvoke <android.view.GLES20Canvas: void nSetMatrix(int,int)>(i0, i1);

        return;

     label2:
        i1 = r1.<android.graphics.Matrix: int native_instance>;

        goto label1;
    }

    public void setName(java.lang.String)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.view.HardwareCanvas: void setName(java.lang.String)>(r1);

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nSetName(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setViewport(int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1, $i2;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.view.GLES20Canvas: int mWidth> = i0;

        r0.<android.view.GLES20Canvas: int mHeight> = i1;

        $i2 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nSetViewport(int,int,int)>($i2, i0, i1);

        return;
    }

    public void skew(float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $i0 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nSkew(int,float,float)>($i0, f0, f1);

        return;
    }

    public void translate(float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        byte $b0, $b2;
        int $i1;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $b2 = f1 cmpl 0.0F;

        if $b2 == 0 goto label2;

     label1:
        $i1 = r0.<android.view.GLES20Canvas: int mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nTranslate(int,float,float)>($i1, f0, f1);

     label2:
        return;
    }
}
