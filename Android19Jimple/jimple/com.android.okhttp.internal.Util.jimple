public final class com.android.okhttp.internal.Util extends java.lang.Object
{
    public static final byte[] EMPTY_BYTE_ARRAY;
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    public static final java.nio.charset.Charset ISO_8859_1;
    public static final java.nio.charset.Charset US_ASCII;
    public static final java.nio.charset.Charset UTF_8;
    private static java.util.concurrent.atomic.AtomicReference skipBuffer;

    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String[] $r1;
        java.nio.charset.Charset $r2, $r3, $r4;
        java.util.concurrent.atomic.AtomicReference $r5;

        $r0 = newarray (byte)[0];

        <com.android.okhttp.internal.Util: byte[] EMPTY_BYTE_ARRAY> = $r0;

        $r1 = newarray (java.lang.String)[0];

        <com.android.okhttp.internal.Util: java.lang.String[] EMPTY_STRING_ARRAY> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        <com.android.okhttp.internal.Util: java.nio.charset.Charset ISO_8859_1> = $r2;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <com.android.okhttp.internal.Util: java.nio.charset.Charset US_ASCII> = $r3;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.android.okhttp.internal.Util: java.nio.charset.Charset UTF_8> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <com.android.okhttp.internal.Util: java.util.concurrent.atomic.AtomicReference skipBuffer> = $r5;

        return;
    }

    private void <init>()
    {
        com.android.okhttp.internal.Util r0;

        r0 := @this: com.android.okhttp.internal.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkOffsetAndCount(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i1 | i2;

        if $i3 < 0 goto label1;

        if i1 > i0 goto label1;

        $i4 = i0 - i1;

        if $i4 >= i2 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        return;
    }

    public static void closeAll(java.io.Closeable, java.io.Closeable) throws java.io.IOException
    {
        java.io.Closeable r0, r1;
        java.lang.Throwable r2, r3, r4, $r9, $r10;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r5;
        java.lang.Error $r6;
        java.lang.RuntimeException $r7;
        java.io.IOException $r8;

        r0 := @parameter0: java.io.Closeable;

        r1 := @parameter1: java.io.Closeable;

        r2 = null;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        interfaceinvoke r1.<java.io.Closeable: void close()>();

     label3:
        if r2 != null goto label6;

        return;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        r2 = r3;

        goto label2;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

        if r2 != null goto label3;

        r2 = r4;

        goto label3;

     label6:
        $z0 = r2 instanceof java.io.IOException;

        if $z0 == 0 goto label7;

        $r8 = (java.io.IOException) r2;

        throw $r8;

     label7:
        $z1 = r2 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label8;

        $r7 = (java.lang.RuntimeException) r2;

        throw $r7;

     label8:
        $z2 = r2 instanceof java.lang.Error;

        if $z2 == 0 goto label9;

        $r6 = (java.lang.Error) r2;

        throw $r6;

     label9:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.lang.RuntimeException r2, $r4;
        java.lang.Exception $r3;

        r0 := @parameter0: java.io.Closeable;

        if r0 == null goto label2;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        throw r2;

     label4:
        $r3 := @caughtexception;

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void closeQuietly(java.net.Socket)
    {
        java.net.Socket r0;
        java.lang.RuntimeException r2, $r4;
        java.lang.Exception $r3;

        r0 := @parameter0: java.net.Socket;

        if r0 == null goto label2;

     label1:
        virtualinvoke r0.<java.net.Socket: void close()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        throw r2;

     label4:
        $r3 := @caughtexception;

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        int i0, i1;
        byte[] r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 = 0;

        r2 = newarray (byte)[8192];

     label1:
        i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if i1 == -1 goto label2;

        i0 = i0 + i1;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i1);

        goto label1;

     label2:
        return i0;
    }

    public static java.util.concurrent.ThreadFactory daemonThreadFactory(java.lang.String)
    {
        java.lang.String r0;
        com.android.okhttp.internal.Util$1 $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new com.android.okhttp.internal.Util$1;

        specialinvoke $r1.<com.android.okhttp.internal.Util$1: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static void deleteContents(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r2;
        java.io.File[] r1;
        int i0, i1;
        boolean $z0, $z1;
        java.io.IOException $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r12;
        java.lang.String $r7, $r11;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 != null goto label1;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a readable directory: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label1:
        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        staticinvoke <com.android.okhttp.internal.Util: void deleteContents(java.io.File)>(r2);

     label3:
        $z1 = virtualinvoke r2.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label4;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete file: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static int getDefaultPort(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = "http";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return 80;

     label1:
        $r2 = "https";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        return 443;

     label2:
        return -1;
    }

    private static int getEffectivePort(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 == -1 goto label1;

        return i0;

     label1:
        $i1 = staticinvoke <com.android.okhttp.internal.Util: int getDefaultPort(java.lang.String)>(r0);

        return $i1;
    }

    public static int getEffectivePort(java.net.URI)
    {
        java.net.URI r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @parameter0: java.net.URI;

        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $i0 = virtualinvoke r0.<java.net.URI: int getPort()>();

        $i1 = staticinvoke <com.android.okhttp.internal.Util: int getEffectivePort(java.lang.String,int)>($r1, $i0);

        return $i1;
    }

    public static int getEffectivePort(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $i0 = virtualinvoke r0.<java.net.URL: int getPort()>();

        $i1 = staticinvoke <com.android.okhttp.internal.Util: int getEffectivePort(java.lang.String,int)>($r1, $i0);

        return $i1;
    }

    public static java.util.List immutableList(java.util.List)
    {
        java.util.List r0, $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.List;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public static void pokeInt(byte[], int, int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i22, $i23, $i24, $i25, $i28, $i30, $i31;
        java.nio.ByteOrder r1, $r2;
        byte $b10, $b14, $b15, $b20, $b21, $b26, $b27, $b29;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i5 = i0 + 1;

        $i19 = i1 >> 24;

        $i22 = 255 & $i19;

        $b21 = (byte) $i22;

        r0[i0] = $b21;

        i6 = i5 + 1;

        $i24 = i1 >> 16;

        $i23 = 255 & $i24;

        $b26 = (byte) $i23;

        r0[i5] = $b26;

        i7 = i6 + 1;

        $i25 = i1 >> 8;

        $i28 = 255 & $i25;

        $b27 = (byte) $i28;

        r0[i6] = $b27;

        $i30 = i1 >> 0;

        $i31 = 255 & $i30;

        $b29 = (byte) $i31;

        r0[i7] = $b29;

        return;

     label1:
        i2 = i0 + 1;

        $i8 = i1 >> 0;

        $i9 = 255 & $i8;

        $b10 = (byte) $i9;

        r0[i0] = $b10;

        i3 = i2 + 1;

        $i11 = i1 >> 8;

        $i12 = 255 & $i11;

        $b14 = (byte) $i12;

        r0[i2] = $b14;

        i4 = i3 + 1;

        $i13 = i1 >> 16;

        $i16 = 255 & $i13;

        $b15 = (byte) $i16;

        r0[i3] = $b15;

        $i18 = i1 >> 24;

        $i17 = 255 & $i18;

        $b20 = (byte) $i17;

        r0[i4] = $b20;

        return;
    }

    public static java.lang.String readAsciiLine(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.StringBuilder r1, $r2;
        int i0, i1, $i3, $i5;
        char $c2, $c4;
        java.lang.String $r4;
        java.io.EOFException $r5;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(80);

        r1 = $r2;

     label1:
        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i0 != -1 goto label2;

        $r5 = new java.io.EOFException;

        specialinvoke $r5.<java.io.EOFException: void <init>()>();

        throw $r5;

     label2:
        if i0 != 10 goto label4;

        i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if i1 <= 0 goto label3;

        $i3 = i1 - 1;

        $c4 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i3);

        if $c4 != 13 goto label3;

        $i5 = i1 - 1;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>($i5);

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label4:
        $c2 = (char) i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label1;
    }

    public static java.lang.String readFully(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.StringWriter r1, $r5;
        java.lang.Throwable r2, $r6;
        char[] r3;
        int i0;
        java.lang.String r4;

        r0 := @parameter0: java.io.Reader;

     label1:
        $r5 = new java.io.StringWriter;

        specialinvoke $r5.<java.io.StringWriter: void <init>()>();

        r1 = $r5;

        r3 = newarray (char)[1024];

     label2:
        i0 = virtualinvoke r0.<java.io.Reader: int read(char[])>(r3);

     label3:
        if i0 == -1 goto label7;

     label4:
        virtualinvoke r1.<java.io.StringWriter: void write(char[],int,int)>(r3, 0, i0);

     label5:
        goto label2;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r0.<java.io.Reader: void close()>();

        throw r2;

     label7:
        r4 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

     label8:
        virtualinvoke r0.<java.io.Reader: void close()>();

        return r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.io.EOFException $r2;
        java.lang.NullPointerException $r3, $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i1 != 0 goto label2;

     label1:
        return;

     label2:
        if r0 != null goto label3;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r4;

     label3:
        if r1 != null goto label4;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("dst == null");

        throw $r3;

     label4:
        $i3 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

     label5:
        if i1 <= 0 goto label1;

        i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 >= 0 goto label6;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label6:
        i0 = i0 + i2;

        i1 = i1 - i2;

        goto label5;
    }

    public static int readSingleByte(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        short s0;
        byte[] r1;
        int $i1;
        byte $b2;

        r0 := @parameter0: java.io.InputStream;

        s0 = -1;

        r1 = newarray (byte)[1];

        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, 1);

        if $i1 == -1 goto label1;

        $b2 = r1[0];

        s0 = 255 & $b2;

     label1:
        return s0;
    }

    public static void skipAll(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i1;

        r0 := @parameter0: java.io.InputStream;

     label1:
        virtualinvoke r0.<java.io.InputStream: long skip(long)>(9223372036854775807L);

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i1 != -1 goto label1;

        return;
    }

    public static long skipByReading(java.io.InputStream, long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, l1, $l6, $l7, $l8, $l9;
        byte[] r1;
        int i2, i3, $i5;
        java.util.concurrent.atomic.AtomicReference $r2, $r4;
        java.lang.Object $r3;
        byte $b4;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        $r2 = <com.android.okhttp.internal.Util: java.util.concurrent.atomic.AtomicReference skipBuffer>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r1 = (byte[]) $r3;

        if r1 != null goto label1;

        r1 = newarray (byte)[4096];

     label1:
        l1 = 0L;

     label2:
        $b4 = l1 cmp l0;

        if $b4 >= 0 goto label3;

        $l7 = l0 - l1;

        $i5 = lengthof r1;

        $l6 = (long) $i5;

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>($l7, $l6);

        i2 = (int) $l8;

        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, i2);

        if i3 != -1 goto label4;

     label3:
        $r4 = <com.android.okhttp.internal.Util: java.util.concurrent.atomic.AtomicReference skipBuffer>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return l1;

     label4:
        $l9 = (long) i3;

        l1 = l1 + $l9;

        if i3 >= i2 goto label2;

        goto label3;
    }

    public static void writeSingleByte(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int i0, $i1;
        byte[] r1;
        byte $b2;

        r0 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r1 = newarray (byte)[1];

        $i1 = i0 & 255;

        $b2 = (byte) $i1;

        r1[0] = $b2;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }
}
