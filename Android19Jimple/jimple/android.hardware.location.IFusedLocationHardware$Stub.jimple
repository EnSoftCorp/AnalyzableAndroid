public abstract class android.hardware.location.IFusedLocationHardware$Stub extends android.os.Binder implements android.hardware.location.IFusedLocationHardware
{
    private static final java.lang.String DESCRIPTOR;
    static final int TRANSACTION_getSupportedBatchSize;
    static final int TRANSACTION_injectDeviceContext;
    static final int TRANSACTION_injectDiagnosticData;
    static final int TRANSACTION_registerSink;
    static final int TRANSACTION_requestBatchOfLocations;
    static final int TRANSACTION_startBatching;
    static final int TRANSACTION_stopBatching;
    static final int TRANSACTION_supportsDeviceContextInjection;
    static final int TRANSACTION_supportsDiagnosticDataInjection;
    static final int TRANSACTION_unregisterSink;
    static final int TRANSACTION_updateBatchingOptions;

    public void <init>()
    {
        android.hardware.location.IFusedLocationHardware$Stub r0;

        r0 := @this: android.hardware.location.IFusedLocationHardware$Stub;

        specialinvoke r0.<android.os.Binder: void <init>()>();

        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void attachInterface(android.os.IInterface,java.lang.String)>(r0, "android.hardware.location.IFusedLocationHardware");

        return;
    }

    public static android.hardware.location.IFusedLocationHardware asInterface(android.os.IBinder)
    {
        android.os.IBinder r0;
        android.os.IInterface r1;
        android.hardware.location.IFusedLocationHardware$Stub$Proxy $r2;
        boolean $z0;
        android.hardware.location.IFusedLocationHardware $r3;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = interfaceinvoke r0.<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        if r1 == null goto label2;

        $z0 = r1 instanceof android.hardware.location.IFusedLocationHardware;

        if $z0 == 0 goto label2;

        $r3 = (android.hardware.location.IFusedLocationHardware) r1;

        return $r3;

     label2:
        $r2 = new android.hardware.location.IFusedLocationHardware$Stub$Proxy;

        specialinvoke $r2.<android.hardware.location.IFusedLocationHardware$Stub$Proxy: void <init>(android.os.IBinder)>(r0);

        return $r2;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.location.IFusedLocationHardware$Stub r0;

        r0 := @this: android.hardware.location.IFusedLocationHardware$Stub;

        return r0;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.hardware.location.IFusedLocationHardware$Stub r0;
        int i0, i1, i4, i5, i6, $i7, $i8, $i9, $i10, $i11;
        android.os.Parcel r1, r2;
        boolean z0, z1, $z2;
        byte b2, b3;
        android.location.FusedBatchOptions r3, r4;
        java.lang.String $r5;
        android.os.Parcelable$Creator $r6, $r9;
        java.lang.Object $r7, $r8;
        android.os.IBinder $r10, $r11;
        android.hardware.location.IFusedLocationHardwareSink $r12, $r13;

        r0 := @this: android.hardware.location.IFusedLocationHardware$Stub;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        lookupswitch(i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label09;
            case 6: goto label10;
            case 7: goto label13;
            case 8: goto label14;
            case 9: goto label16;
            case 10: goto label17;
            case 11: goto label19;
            case 1598968902: goto label02;
            default: goto label01;
        };

     label01:
        $z2 = specialinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

        return $z2;

     label02:
        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        return 1;

     label03:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        $r11 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r13 = staticinvoke <android.hardware.location.IFusedLocationHardwareSink$Stub: android.hardware.location.IFusedLocationHardwareSink asInterface(android.os.IBinder)>($r11);

        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void registerSink(android.hardware.location.IFusedLocationHardwareSink)>($r13);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label04:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        $r10 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r12 = staticinvoke <android.hardware.location.IFusedLocationHardwareSink$Stub: android.hardware.location.IFusedLocationHardwareSink asInterface(android.os.IBinder)>($r10);

        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void unregisterSink(android.hardware.location.IFusedLocationHardwareSink)>($r12);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label05:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        i6 = virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: int getSupportedBatchSize()>();

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(i6);

        return 1;

     label06:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        i5 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $i11 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i11 == 0 goto label08;

        $r9 = <android.location.FusedBatchOptions: android.os.Parcelable$Creator CREATOR>;

        $r8 = interfaceinvoke $r9.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        r4 = (android.location.FusedBatchOptions) $r8;

     label07:
        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void startBatching(int,android.location.FusedBatchOptions)>(i5, r4);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label08:
        r4 = null;

        goto label07;

     label09:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        $i10 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void stopBatching(int)>($i10);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label10:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $i9 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i9 == 0 goto label12;

        $r6 = <android.location.FusedBatchOptions: android.os.Parcelable$Creator CREATOR>;

        $r7 = interfaceinvoke $r6.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        r3 = (android.location.FusedBatchOptions) $r7;

     label11:
        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void updateBatchingOptions(int,android.location.FusedBatchOptions)>(i4, r3);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label12:
        r3 = null;

        goto label11;

     label13:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        $i8 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void requestBatchOfLocations(int)>($i8);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label14:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        z1 = virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: boolean supportsDiagnosticDataInjection()>();

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        b3 = 0;

        if z1 == 0 goto label15;

        b3 = 1;

     label15:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(b3);

        return 1;

     label16:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        $r5 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void injectDiagnosticData(java.lang.String)>($r5);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label17:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        z0 = virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: boolean supportsDeviceContextInjection()>();

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        b2 = 0;

        if z0 == 0 goto label18;

        b2 = 1;

     label18:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(b2);

        return 1;

     label19:
        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.location.IFusedLocationHardware");

        $i7 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        virtualinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void injectDeviceContext(int)>($i7);

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;
    }

    public static void <clinit>()
    {
        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_updateBatchingOptions> = 6;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_unregisterSink> = 2;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_supportsDiagnosticDataInjection> = 8;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_supportsDeviceContextInjection> = 10;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_stopBatching> = 5;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_startBatching> = 4;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_requestBatchOfLocations> = 7;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_registerSink> = 1;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_injectDiagnosticData> = 9;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_injectDeviceContext> = 11;

        <android.hardware.location.IFusedLocationHardware$Stub: int TRANSACTION_getSupportedBatchSize> = 3;

        <android.hardware.location.IFusedLocationHardware$Stub: java.lang.String DESCRIPTOR> = "android.hardware.location.IFusedLocationHardware";

        return;
    }
}
