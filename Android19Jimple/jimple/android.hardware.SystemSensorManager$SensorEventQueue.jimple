final class android.hardware.SystemSensorManager$SensorEventQueue extends android.hardware.SystemSensorManager$BaseEventQueue
{
    private final android.hardware.SensorEventListener mListener;
    private final android.util.SparseArray mSensorsEvents;

    public void <init>(android.hardware.SensorEventListener, android.os.Looper, android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager$SensorEventQueue r0;
        android.hardware.SensorEventListener r1;
        android.os.Looper r2;
        android.hardware.SystemSensorManager r3;
        android.util.SparseArray $r4;

        r0 := @this: android.hardware.SystemSensorManager$SensorEventQueue;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.os.Looper;

        r3 := @parameter2: android.hardware.SystemSensorManager;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void <init>(android.os.Looper,android.hardware.SystemSensorManager)>(r2, r3);

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseArray mSensorsEvents> = $r4;

        r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.hardware.SensorEventListener mListener> = r1;

        return;
    }

    public void addSensorEvent(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$SensorEventQueue r0;
        android.hardware.Sensor r1;
        android.hardware.SensorEvent r2, $r5;
        android.util.SparseArray r3, $r7;
        java.lang.Throwable r4, $r8;
        android.hardware.SystemSensorManager $r6;
        int $i0, $i1, $i2;

        r0 := @this: android.hardware.SystemSensorManager$SensorEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        $r5 = new android.hardware.SensorEvent;

        $r6 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.hardware.SystemSensorManager mManager>;

        $i0 = staticinvoke <android.hardware.SystemSensorManager: int access$100(android.hardware.SystemSensorManager)>($r6);

        $i1 = staticinvoke <android.hardware.Sensor: int getMaxLengthValuesArray(android.hardware.Sensor,int)>(r1, $i0);

        specialinvoke $r5.<android.hardware.SensorEvent: void <init>(int)>($i1);

        r2 = $r5;

        r3 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseArray mSensorsEvents>;

        entermonitor r3;

     label1:
        $r7 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseArray mSensorsEvents>;

        $i2 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, r2);

        exitmonitor r3;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void dispatchFlushCompleteEvent(int)
    {
        android.hardware.SystemSensorManager$SensorEventQueue r0;
        int i0;
        android.hardware.Sensor r1;
        android.hardware.SensorEventListener $r2, $r5;
        boolean $z0;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        android.hardware.SensorEventListener2 $r6;

        r0 := @this: android.hardware.SystemSensorManager$SensorEventQueue;

        i0 := @parameter0: int;

        $r2 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.hardware.SensorEventListener mListener>;

        $z0 = $r2 instanceof android.hardware.SensorEventListener2;

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <android.hardware.SystemSensorManager: android.util.SparseArray access$000()>();

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.hardware.Sensor) $r4;

        $r5 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.hardware.SensorEventListener mListener>;

        $r6 = (android.hardware.SensorEventListener2) $r5;

        interfaceinvoke $r6.<android.hardware.SensorEventListener2: void onFlushCompleted(android.hardware.Sensor)>(r1);

     label1:
        return;
    }

    protected void dispatchSensorEvent(int, float[], int, long)
    {
        android.hardware.SystemSensorManager$SensorEventQueue r0;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        float[] r1, $r10, $r11;
        long l2;
        android.hardware.Sensor r2, $r12, $r17, $r19;
        android.util.SparseArray r3, $r6, $r8;
        java.lang.Throwable r4, $r22;
        android.hardware.SensorEvent r5;
        java.lang.Object $r7, $r9;
        boolean $z0;
        android.util.SparseBooleanArray $r13, $r14;
        android.hardware.SensorEventListener $r15, $r16, $r21;
        android.util.SparseIntArray $r18, $r20;

        r0 := @this: android.hardware.SystemSensorManager$SensorEventQueue;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $r6 = staticinvoke <android.hardware.SystemSensorManager: android.util.SparseArray access$000()>();

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.hardware.Sensor) $r7;

        r3 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseArray mSensorsEvents>;

        entermonitor r3;

     label1:
        $r8 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseArray mSensorsEvents>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (android.hardware.SensorEvent) $r9;

        exitmonitor r3;

     label2:
        if r5 != null goto label6;

        return;

     label3:
        $r22 := @caughtexception;

        r4 = $r22;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

     label6:
        $r11 = r5.<android.hardware.SensorEvent: float[] values>;

        $r10 = r5.<android.hardware.SensorEvent: float[] values>;

        $i4 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r11, 0, $i4);

        r5.<android.hardware.SensorEvent: long timestamp> = l2;

        r5.<android.hardware.SensorEvent: int accuracy> = i1;

        r5.<android.hardware.SensorEvent: android.hardware.Sensor sensor> = r2;

        $r12 = r5.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        $i5 = virtualinvoke $r12.<android.hardware.Sensor: int getType()>();

        tableswitch($i5)
        {
            case 2: goto label9;
            case 3: goto label9;
            default: goto label7;
        };

     label7:
        $r13 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseBooleanArray mFirstEvent>;

        $z0 = virtualinvoke $r13.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z0 != 0 goto label8;

        $r14 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseBooleanArray mFirstEvent>;

        virtualinvoke $r14.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        $r16 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.hardware.SensorEventListener mListener>;

        $r17 = r5.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        interfaceinvoke $r16.<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>($r17, 3);

     label8:
        $r15 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.hardware.SensorEventListener mListener>;

        interfaceinvoke $r15.<android.hardware.SensorEventListener: void onSensorChanged(android.hardware.SensorEvent)>(r5);

        return;

     label9:
        $r18 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseIntArray mSensorAccuracies>;

        i3 = virtualinvoke $r18.<android.util.SparseIntArray: int get(int)>(i0);

        $i7 = r5.<android.hardware.SensorEvent: int accuracy>;

        if $i7 < 0 goto label8;

        $i6 = r5.<android.hardware.SensorEvent: int accuracy>;

        if i3 == $i6 goto label8;

        $r20 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseIntArray mSensorAccuracies>;

        $i9 = r5.<android.hardware.SensorEvent: int accuracy>;

        virtualinvoke $r20.<android.util.SparseIntArray: void put(int,int)>(i0, $i9);

        $r21 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.hardware.SensorEventListener mListener>;

        $r19 = r5.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        $i8 = r5.<android.hardware.SensorEvent: int accuracy>;

        interfaceinvoke $r21.<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>($r19, $i8);

        goto label8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeSensorEvent(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$SensorEventQueue r0;
        android.hardware.Sensor r1;
        android.util.SparseArray r2, $r4;
        java.lang.Throwable r3, $r5;
        int $i0;

        r0 := @this: android.hardware.SystemSensorManager$SensorEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        r2 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseArray mSensorsEvents>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.hardware.SystemSensorManager$SensorEventQueue: android.util.SparseArray mSensorsEvents>;

        $i0 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r4.<android.util.SparseArray: void delete(int)>($i0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
