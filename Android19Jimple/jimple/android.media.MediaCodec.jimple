public final class android.media.MediaCodec extends java.lang.Object
{
    public static final int BUFFER_FLAG_CODEC_CONFIG;
    public static final int BUFFER_FLAG_END_OF_STREAM;
    public static final int BUFFER_FLAG_SYNC_FRAME;
    public static final int CONFIGURE_FLAG_ENCODE;
    public static final int CRYPTO_MODE_AES_CTR;
    public static final int CRYPTO_MODE_UNENCRYPTED;
    public static final int INFO_OUTPUT_BUFFERS_CHANGED;
    public static final int INFO_OUTPUT_FORMAT_CHANGED;
    public static final int INFO_TRY_AGAIN_LATER;
    public static final java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME;
    public static final java.lang.String PARAMETER_KEY_SUSPEND;
    public static final java.lang.String PARAMETER_KEY_VIDEO_BITRATE;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
    private int mNativeContext;

    static void <clinit>()
    {
        <android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING> = 2;

        <android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT> = 1;

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_VIDEO_BITRATE> = "video-bitrate";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_SUSPEND> = "drop-input-frames";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME> = "request-sync";

        <android.media.MediaCodec: int INFO_TRY_AGAIN_LATER> = -1;

        <android.media.MediaCodec: int INFO_OUTPUT_FORMAT_CHANGED> = -2;

        <android.media.MediaCodec: int INFO_OUTPUT_BUFFERS_CHANGED> = -3;

        <android.media.MediaCodec: int CRYPTO_MODE_UNENCRYPTED> = 0;

        <android.media.MediaCodec: int CRYPTO_MODE_AES_CTR> = 1;

        <android.media.MediaCodec: int CONFIGURE_FLAG_ENCODE> = 1;

        <android.media.MediaCodec: int BUFFER_FLAG_SYNC_FRAME> = 1;

        <android.media.MediaCodec: int BUFFER_FLAG_END_OF_STREAM> = 4;

        <android.media.MediaCodec: int BUFFER_FLAG_CODEC_CONFIG> = 2;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaCodec: void native_init()>();

        return;
    }

    private void <init>(java.lang.String, boolean, boolean)
    {
        android.media.MediaCodec r0;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<android.media.MediaCodec: void native_setup(java.lang.String,boolean,boolean)>(r1, z0, z1);

        return;
    }

    public static android.media.MediaCodec createByCodecName(java.lang.String)
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 0, 0);

        return $r1;
    }

    public static android.media.MediaCodec createDecoderByType(java.lang.String)
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 1, 0);

        return $r1;
    }

    public static android.media.MediaCodec createEncoderByType(java.lang.String)
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 1, 1);

        return $r1;
    }

    private final native java.nio.ByteBuffer[] getBuffers(boolean);

    private final native java.util.Map getOutputFormatNative();

    private final native void native_configure(java.lang.String[], java.lang.Object[], android.view.Surface, android.media.MediaCrypto, int);

    private final native void native_finalize();

    private static final native void native_init();

    private final native void native_setup(java.lang.String, boolean, boolean);

    private final native void setParameters(java.lang.String[], java.lang.Object[]);

    public void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int)
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat r1;
        android.view.Surface r2;
        android.media.MediaCrypto r3;
        int i0, i1, $i2, $i3;
        java.util.Map r4;
        java.lang.String[] r5;
        java.lang.Object[] r6;
        java.util.Iterator r7;
        java.util.Map$Entry r8;
        java.util.Set $r9;
        java.lang.Object $r10, $r12, $r13;
        boolean $z0;
        java.lang.String $r11;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: android.media.MediaCrypto;

        i0 := @parameter3: int;

        r4 = virtualinvoke r1.<android.media.MediaFormat: java.util.Map getMap()>();

        r5 = null;

        r6 = null;

        if r1 == null goto label2;

        $i2 = interfaceinvoke r4.<java.util.Map: int size()>();

        r5 = newarray (java.lang.String)[$i2];

        $i3 = interfaceinvoke r4.<java.util.Map: int size()>();

        r6 = newarray (java.lang.Object)[$i3];

        i1 = 0;

        $r9 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r12;

        r5[i1] = $r11;

        $r13 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6[i1] = $r13;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<android.media.MediaCodec: void native_configure(java.lang.String[],java.lang.Object[],android.view.Surface,android.media.MediaCrypto,int)>(r5, r6, r2, r3, i0);

        return;
    }

    public final native android.view.Surface createInputSurface();

    public final native int dequeueInputBuffer(long);

    public final native int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long);

    protected void finalize()
    {
        android.media.MediaCodec r0;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void native_finalize()>();

        return;
    }

    public final native void flush();

    public android.media.MediaCodecInfo getCodecInfo()
    {
        android.media.MediaCodec r0;
        java.lang.String $r1;
        int $i0;
        android.media.MediaCodecInfo $r2;

        r0 := @this: android.media.MediaCodec;

        $r1 = virtualinvoke r0.<android.media.MediaCodec: java.lang.String getName()>();

        $i0 = staticinvoke <android.media.MediaCodecList: int findCodecByName(java.lang.String)>($r1);

        $r2 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)>($i0);

        return $r2;
    }

    public java.nio.ByteBuffer[] getInputBuffers()
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1;

        r0 := @this: android.media.MediaCodec;

        $r1 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer[] getBuffers(boolean)>(1);

        return $r1;
    }

    public final native java.lang.String getName();

    public java.nio.ByteBuffer[] getOutputBuffers()
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1;

        r0 := @this: android.media.MediaCodec;

        $r1 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer[] getBuffers(boolean)>(0);

        return $r1;
    }

    public final android.media.MediaFormat getOutputFormat()
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaCodec;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodec: java.util.Map getOutputFormatNative()>();

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public final native void queueInputBuffer(int, int, int, long, int) throws android.media.MediaCodec$CryptoException;

    public final native void queueSecureInputBuffer(int, int, android.media.MediaCodec$CryptoInfo, long, int) throws android.media.MediaCodec$CryptoException;

    public final native void release();

    public final native void releaseOutputBuffer(int, boolean);

    public final void setParameters(android.os.Bundle)
    {
        android.media.MediaCodec r0;
        android.os.Bundle r1;
        java.lang.String[] r2;
        java.lang.Object[] r3;
        int i0, $i1, $i2;
        java.util.Iterator r4;
        java.lang.String r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.os.Bundle;

        if r1 != null goto label1;

        return;

     label1:
        $i1 = virtualinvoke r1.<android.os.Bundle: int size()>();

        r2 = newarray (java.lang.String)[$i1];

        $i2 = virtualinvoke r1.<android.os.Bundle: int size()>();

        r3 = newarray (java.lang.Object)[$i2];

        i0 = 0;

        $r6 = virtualinvoke r1.<android.os.Bundle: java.util.Set keySet()>();

        r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r7;

        r2[i0] = r5;

        $r8 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>(r5);

        r3[i0] = $r8;

        i0 = i0 + 1;

        goto label2;

     label3:
        specialinvoke r0.<android.media.MediaCodec: void setParameters(java.lang.String[],java.lang.Object[])>(r2, r3);

        return;
    }

    public final native void setVideoScalingMode(int);

    public final native void signalEndOfInputStream();

    public final native void start();

    public final native void stop();
}
