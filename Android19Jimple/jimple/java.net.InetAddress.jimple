public class java.net.InetAddress extends java.lang.Object implements java.io.Serializable
{
    public static final java.net.InetAddress UNSPECIFIED;
    private static final java.net.AddressCache addressCache;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long serialVersionUID;
    private int family;
    java.lang.String hostName;
    byte[] ipaddress;

    static void <clinit>()
    {
        java.io.ObjectStreamField[] r0;
        java.net.AddressCache $r1;
        java.net.InetAddress $r2;
        int $i0;
        java.io.ObjectStreamField $r3, $r5, $r7;
        java.lang.Class $r4, $r6;

        <java.net.InetAddress: long serialVersionUID> = 3286316764910316507L;

        $r1 = new java.net.AddressCache;

        specialinvoke $r1.<java.net.AddressCache: void <init>()>();

        <java.net.InetAddress: java.net.AddressCache addressCache> = $r1;

        $r2 = new java.net.InetAddress;

        $i0 = <libcore.io.OsConstants: int AF_UNSPEC>;

        specialinvoke $r2.<java.net.InetAddress: void <init>(int,byte[],java.lang.String)>($i0, null, null);

        <java.net.InetAddress: java.net.InetAddress UNSPECIFIED> = $r2;

        r0 = newarray (java.io.ObjectStreamField)[3];

        $r3 = new java.io.ObjectStreamField;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r3.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("address", $r4);

        r0[0] = $r3;

        $r5 = new java.io.ObjectStreamField;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("family", $r6);

        r0[1] = $r5;

        $r7 = new java.io.ObjectStreamField;

        specialinvoke $r7.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("hostName", class "java/lang/String");

        r0[2] = $r7;

        <java.net.InetAddress: java.io.ObjectStreamField[] serialPersistentFields> = r0;

        return;
    }

    void <init>(int, byte[], java.lang.String)
    {
        java.net.InetAddress r0;
        int i0;
        byte[] r1;
        java.lang.String r2;

        r0 := @this: java.net.InetAddress;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.InetAddress: int family> = i0;

        r0.<java.net.InetAddress: byte[] ipaddress> = r1;

        r0.<java.net.InetAddress: java.lang.String hostName> = r2;

        return;
    }

    static boolean access$000(java.net.InetAddress, java.net.InetAddress, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.InetAddress r0, r1, r2;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.InetAddress;

        r2 := @parameter2: java.net.InetAddress;

        i0 := @parameter3: int;

        $z0 = specialinvoke r0.<java.net.InetAddress: boolean isReachable(java.net.InetAddress,java.net.InetAddress,int)>(r1, r2, i0);

        return $z0;
    }

    private static java.net.UnknownHostException badAddressLength(byte[]) throws java.net.UnknownHostException
    {
        byte[] r0;
        java.net.UnknownHostException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @parameter0: byte[];

        $r1 = new java.net.UnknownHostException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Address is neither 4 or 16 bytes: ");

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.net.UnknownHostException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    private static java.net.InetAddress[] bytesToInetAddresses(byte[][], java.lang.String) throws java.net.UnknownHostException
    {
        byte[][] r0;
        java.lang.String r1;
        java.net.InetAddress[] r2;
        int i0, $i1, $i2;
        byte[] $r3;
        java.net.InetAddress $r4;

        r0 := @parameter0: byte[][];

        r1 := @parameter1: java.lang.String;

        $i1 = lengthof r0;

        r2 = newarray (java.net.InetAddress)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r3 = r0[i0];

        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress makeInetAddress(byte[],java.lang.String)>($r3, r1);

        r2[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static void clearDnsCache()
    {
        java.net.AddressCache $r0;

        $r0 = <java.net.InetAddress: java.net.AddressCache addressCache>;

        virtualinvoke $r0.<java.net.AddressCache: void clear()>();

        return;
    }

    private static java.net.InetAddress disallowDeprecatedFormats(java.lang.String, java.net.InetAddress)
    {
        java.lang.String r0;
        java.net.InetAddress r1, $r3;
        boolean $z0;
        int $i0, $i1;
        libcore.io.Os $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.net.InetAddress;

        $z0 = r1 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 == -1 goto label2;

     label1:
        return r1;

     label2:
        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        $i1 = <libcore.io.OsConstants: int AF_INET>;

        $r3 = interfaceinvoke $r2.<libcore.io.Os: java.net.InetAddress inet_pton(int,java.lang.String)>($i1, r0);

        return $r3;
    }

    public static java.net.InetAddress[] getAllByName(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByNameImpl(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.net.InetAddress[]) $r2;

        return $r3;
    }

    private static java.net.InetAddress[] getAllByNameImpl(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0, $r12;
        java.net.InetAddress r1, r2;
        java.net.InetAddress[] $r3, $r4, $r6, $r7;
        boolean $z0;
        java.lang.Object $r5;
        java.net.UnknownHostException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] loopbackAddresses()>();

        return $r3;

     label2:
        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddressNoThrow(java.lang.String)>(r0);

        if r1 == null goto label4;

        r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress disallowDeprecatedFormats(java.lang.String,java.net.InetAddress)>(r0, r1);

        if r2 != null goto label3;

        $r8 = new java.net.UnknownHostException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deprecated IPv4 address format: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.net.UnknownHostException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        $r7 = newarray (java.net.InetAddress)[1];

        $r7[0] = r2;

        return $r7;

     label4:
        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] lookupHostByName(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (java.net.InetAddress[]) $r5;

        return $r6;
    }

    public static java.net.InetAddress getByAddress(java.lang.String, byte[]) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        byte[] r1;
        java.net.InetAddress $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[],int)>(r0, r1, 0);

        return $r2;
    }

    private static java.net.InetAddress getByAddress(java.lang.String, byte[], int) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        byte[] r1, $r5, $r7, $r10;
        int i0, $i1, $i2;
        java.net.UnknownHostException $r2, $r11;
        boolean $z0;
        java.net.Inet6Address $r3;
        java.lang.Object $r4, $r9;
        java.net.Inet4Address $r6, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        if r1 != null goto label1;

        $r11 = new java.net.UnknownHostException;

        specialinvoke $r11.<java.net.UnknownHostException: void <init>(java.lang.String)>("ipAddress == null");

        throw $r11;

     label1:
        $i1 = lengthof r1;

        if $i1 != 4 goto label2;

        $r8 = new java.net.Inet4Address;

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (byte[]) $r9;

        specialinvoke $r8.<java.net.Inet4Address: void <init>(byte[],java.lang.String)>($r10, r0);

        return $r8;

     label2:
        $i2 = lengthof r1;

        if $i2 != 16 goto label4;

        $z0 = staticinvoke <java.net.InetAddress: boolean isIPv4MappedAddress(byte[])>(r1);

        if $z0 == 0 goto label3;

        $r6 = new java.net.Inet4Address;

        $r7 = staticinvoke <java.net.InetAddress: byte[] ipv4MappedToIPv4(byte[])>(r1);

        specialinvoke $r6.<java.net.Inet4Address: void <init>(byte[],java.lang.String)>($r7, r0);

        return $r6;

     label3:
        $r3 = new java.net.Inet6Address;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (byte[]) $r4;

        specialinvoke $r3.<java.net.Inet6Address: void <init>(byte[],java.lang.String,int)>($r5, r0, i0);

        return $r3;

     label4:
        $r2 = staticinvoke <java.net.InetAddress: java.net.UnknownHostException badAddressLength(byte[])>(r1);

        throw $r2;
    }

    public static java.net.InetAddress getByAddress(byte[]) throws java.net.UnknownHostException
    {
        byte[] r0;
        java.net.InetAddress $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[],int)>(null, r0, 0);

        return $r1;
    }

    public static java.net.InetAddress getByName(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress[] $r1;
        java.net.InetAddress $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByNameImpl(java.lang.String)>(r0);

        $r2 = $r1[0];

        return $r2;
    }

    private static java.net.InetAddress getHostByAddrImpl(java.net.InetAddress) throws java.net.UnknownHostException
    {
        java.net.InetAddress r0, r3;
        libcore.io.GaiException r1, $r9;
        java.lang.String r2;
        dalvik.system.BlockGuard$Policy $r4;
        int $i0;
        libcore.io.Os $r5;
        byte[] $r6, $r8;
        java.lang.Object $r7;
        java.net.UnknownHostException $r10;

        r0 := @parameter0: java.net.InetAddress;

        $r4 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r4.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

     label1:
        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $i0 = <libcore.io.OsConstants: int NI_NAMEREQD>;

        r2 = interfaceinvoke $r5.<libcore.io.Os: java.lang.String getnameinfo(java.net.InetAddress,int)>(r0, $i0);

        $r6 = r0.<java.net.InetAddress: byte[] ipaddress>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (byte[]) $r7;

        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress makeInetAddress(byte[],java.lang.String)>($r8, r2);

     label2:
        return r3;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $r10 = virtualinvoke r1.<libcore.io.GaiException: java.net.UnknownHostException rethrowAsUnknownHostException()>();

        throw $r10;

        catch libcore.io.GaiException from label1 to label2 with label3;
    }

    public static java.net.InetAddress getLocalHost() throws java.net.UnknownHostException
    {
        libcore.io.Os $r0;
        libcore.io.StructUtsname $r1;
        java.lang.String $r2;
        java.net.InetAddress[] $r3;
        java.net.InetAddress $r4;

        $r0 = <libcore.io.Libcore: libcore.io.Os os>;

        $r1 = interfaceinvoke $r0.<libcore.io.Os: libcore.io.StructUtsname uname()>();

        $r2 = $r1.<libcore.io.StructUtsname: java.lang.String nodename>;

        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] lookupHostByName(java.lang.String)>($r2);

        $r4 = $r3[0];

        return $r4;
    }

    public static java.net.InetAddress getLoopbackAddress()
    {
        java.net.InetAddress $r0;

        $r0 = <java.net.Inet6Address: java.net.InetAddress LOOPBACK>;

        return $r0;
    }

    private static byte[] ipv4MappedToIPv4(byte[])
    {
        byte[] r0, r1;
        int i0, $i1;
        byte $b2;

        r0 := @parameter0: byte[];

        r1 = newarray (byte)[4];

        i0 = 0;

     label1:
        if i0 >= 4 goto label2;

        $i1 = i0 + 12;

        $b2 = r0[$i1];

        r1[i0] = $b2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static boolean isIPv4MappedAddress(byte[])
    {
        byte[] r0;
        int i0, $i1;
        byte $b2, $b3, $b4;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 == 16 goto label2;

     label1:
        return 0;

     label2:
        i0 = 0;

     label3:
        if i0 >= 10 goto label4;

        $b4 = r0[i0];

        if $b4 != 0 goto label1;

        i0 = i0 + 1;

        goto label3;

     label4:
        $b2 = r0[10];

        if $b2 != -1 goto label1;

        $b3 = r0[11];

        if $b3 != -1 goto label1;

        return 1;
    }

    public static boolean isNumeric(java.lang.String)
    {
        java.lang.String r0;
        java.net.InetAddress r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddressNoThrow(java.lang.String)>(r0);

        if r1 == null goto label1;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress disallowDeprecatedFormats(java.lang.String,java.net.InetAddress)>(r0, r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isReachable(java.net.InetAddress, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.InetAddress r0, r1, r2;
        int i0, $i1, $i2;
        java.io.FileDescriptor r3;
        java.io.IOException r4, $r5;
        boolean z0, z1;
        java.lang.Throwable $r6, $r7;
        libcore.io.ErrnoException $r8;

        r0 := @this: java.net.InetAddress;

        r1 := @parameter0: java.net.InetAddress;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        r3 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor socket(boolean)>(1);

        if r2 == null goto label2;

     label1:
        staticinvoke <libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>(r3, r2, 0);

     label2:
        staticinvoke <libcore.io.IoBridge: boolean connect(java.io.FileDescriptor,java.net.InetAddress,int,int)>(r3, r1, 7, i0);

     label3:
        z1 = 1;

     label4:
        staticinvoke <libcore.io.IoBridge: void closeSocket(java.io.FileDescriptor)>(r3);

        return z1;

     label5:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = virtualinvoke r4.<java.io.IOException: java.lang.Throwable getCause()>();

        z0 = $r6 instanceof libcore.io.ErrnoException;

        z1 = 0;

        if z0 == 0 goto label4;

        $r7 = virtualinvoke r4.<java.io.IOException: java.lang.Throwable getCause()>();

        $r8 = (libcore.io.ErrnoException) $r7;

        $i2 = $r8.<libcore.io.ErrnoException: int errno>;

        $i1 = <libcore.io.OsConstants: int ECONNREFUSED>;

        if $i2 != $i1 goto label7;

        z1 = 1;

     label6:
        goto label4;

     label7:
        z1 = 0;

        goto label6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label2 to label3 with label5;
    }

    private static java.net.InetAddress[] lookupHostByName(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0, r4, $r12, $r24;
        java.lang.Object r1;
        libcore.io.StructAddrinfo r2, $r8;
        libcore.io.GaiException r3, $r17;
        java.net.InetAddress[] r5, $r14, $r15;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        dalvik.system.BlockGuard$Policy $r6;
        java.net.AddressCache $r7, $r10, $r27;
        libcore.io.Os $r9, $r23;
        boolean $z0, $z1;
        java.net.InetAddress $r11;
        java.net.UnknownHostException $r13, $r28;
        java.lang.Throwable $r16, $r25;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r22;
        libcore.io.ErrnoException $r26;
        java.lang.SecurityException $r29;

        r0 := @parameter0: java.lang.String;

        $r6 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r6.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $r7 = <java.net.InetAddress: java.net.AddressCache addressCache>;

        r1 = virtualinvoke $r7.<java.net.AddressCache: java.lang.Object get(java.lang.String)>(r0);

        if r1 == null goto label02;

        $z0 = r1 instanceof java.net.InetAddress[];

        if $z0 == 0 goto label01;

        $r15 = (java.net.InetAddress[]) r1;

        $r14 = (java.net.InetAddress[]) $r15;

        return $r14;

     label01:
        $r13 = new java.net.UnknownHostException;

        $r12 = (java.lang.String) r1;

        specialinvoke $r13.<java.net.UnknownHostException: void <init>(java.lang.String)>($r12);

        throw $r13;

     label02:
        $r8 = new libcore.io.StructAddrinfo;

        specialinvoke $r8.<libcore.io.StructAddrinfo: void <init>()>();

        r2 = $r8;

        $i2 = <libcore.io.OsConstants: int AI_ADDRCONFIG>;

        r2.<libcore.io.StructAddrinfo: int ai_flags> = $i2;

        $i3 = <libcore.io.OsConstants: int AF_UNSPEC>;

        r2.<libcore.io.StructAddrinfo: int ai_family> = $i3;

        $i4 = <libcore.io.OsConstants: int SOCK_STREAM>;

        r2.<libcore.io.StructAddrinfo: int ai_socktype> = $i4;

        $r9 = <libcore.io.Libcore: libcore.io.Os os>;

        r5 = interfaceinvoke $r9.<libcore.io.Os: java.net.InetAddress[] getaddrinfo(java.lang.String,libcore.io.StructAddrinfo)>(r0, r2);

        i0 = lengthof r5;

     label03:
        i1 = 0;

     label04:
        if i1 >= i0 goto label07;

     label05:
        $r11 = r5[i1];

        $r11.<java.net.InetAddress: java.lang.String hostName> = r0;

     label06:
        i1 = i1 + 1;

        goto label04;

     label07:
        $r10 = <java.net.InetAddress: java.net.AddressCache addressCache>;

        virtualinvoke $r10.<java.net.AddressCache: void put(java.lang.String,java.net.InetAddress[])>(r0, r5);

     label08:
        return r5;

     label09:
        $r17 := @caughtexception;

        r3 = $r17;

        $r16 = virtualinvoke r3.<libcore.io.GaiException: java.lang.Throwable getCause()>();

        $z1 = $r16 instanceof libcore.io.ErrnoException;

        if $z1 == 0 goto label10;

        $r25 = virtualinvoke r3.<libcore.io.GaiException: java.lang.Throwable getCause()>();

        $r26 = (libcore.io.ErrnoException) $r25;

        $i7 = $r26.<libcore.io.ErrnoException: int errno>;

        $i6 = <libcore.io.OsConstants: int EACCES>;

        if $i7 != $i6 goto label10;

        $r29 = new java.lang.SecurityException;

        specialinvoke $r29.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Permission denied (missing INTERNET permission?)", r3);

        throw $r29;

     label10:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to resolve host \"");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r23 = <libcore.io.Libcore: libcore.io.Os os>;

        $i5 = r3.<libcore.io.GaiException: int error>;

        $r24 = interfaceinvoke $r23.<libcore.io.Os: java.lang.String gai_strerror(int)>($i5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        r4 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = <java.net.InetAddress: java.net.AddressCache addressCache>;

        virtualinvoke $r27.<java.net.AddressCache: void putUnknownHost(java.lang.String,java.lang.String)>(r0, r4);

        $r28 = virtualinvoke r3.<libcore.io.GaiException: java.net.UnknownHostException rethrowAsUnknownHostException(java.lang.String)>(r4);

        throw $r28;

        catch libcore.io.GaiException from label02 to label03 with label09;
        catch libcore.io.GaiException from label05 to label06 with label09;
        catch libcore.io.GaiException from label07 to label08 with label09;
    }

    private static java.net.InetAddress[] loopbackAddresses()
    {
        java.net.InetAddress[] r0;
        java.net.InetAddress $r1, $r2;

        r0 = newarray (java.net.InetAddress)[2];

        $r1 = <java.net.Inet6Address: java.net.InetAddress LOOPBACK>;

        r0[0] = $r1;

        $r2 = <java.net.Inet4Address: java.net.InetAddress LOOPBACK>;

        r0[1] = $r2;

        return r0;
    }

    private static java.net.InetAddress makeInetAddress(byte[], java.lang.String) throws java.net.UnknownHostException
    {
        byte[] r0;
        java.lang.String r1;
        int $i0, $i1;
        java.net.UnknownHostException $r2;
        java.net.Inet6Address $r3;
        java.net.Inet4Address $r4;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        $i0 = lengthof r0;

        if $i0 != 4 goto label1;

        $r4 = new java.net.Inet4Address;

        specialinvoke $r4.<java.net.Inet4Address: void <init>(byte[],java.lang.String)>(r0, r1);

        return $r4;

     label1:
        $i1 = lengthof r0;

        if $i1 != 16 goto label2;

        $r3 = new java.net.Inet6Address;

        specialinvoke $r3.<java.net.Inet6Address: void <init>(byte[],java.lang.String,int)>(r0, r1, 0);

        return $r3;

     label2:
        $r2 = staticinvoke <java.net.InetAddress: java.net.UnknownHostException badAddressLength(byte[])>(r0);

        throw $r2;
    }

    public static java.net.InetAddress parseNumericAddress(java.lang.String)
    {
        java.lang.String r0, $r7;
        java.net.InetAddress r1, $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label1:
        r1 = <java.net.Inet6Address: java.net.InetAddress LOOPBACK>;

     label2:
        return r1;

     label3:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddressNoThrow(java.lang.String)>(r0);

        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress disallowDeprecatedFormats(java.lang.String,java.net.InetAddress)>(r0, $r2);

        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a numeric address: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    private static java.net.InetAddress parseNumericAddressNoThrow(java.lang.String)
    {
        java.lang.String r0;
        libcore.io.StructAddrinfo r1, $r5;
        java.net.InetAddress[] r3, r4;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        libcore.io.Os $r6;
        java.net.InetAddress $r7;
        libcore.io.GaiException $r8;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i1 == -1 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = -1 + $i2;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

     label1:
        $r5 = new libcore.io.StructAddrinfo;

        specialinvoke $r5.<libcore.io.StructAddrinfo: void <init>()>();

        r1 = $r5;

        $i0 = <libcore.io.OsConstants: int AI_NUMERICHOST>;

        r1.<libcore.io.StructAddrinfo: int ai_flags> = $i0;

     label2:
        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        r4 = interfaceinvoke $r6.<libcore.io.Os: java.net.InetAddress[] getaddrinfo(java.lang.String,libcore.io.StructAddrinfo)>(r0, r1);

     label3:
        r3 = r4;

     label4:
        if r3 == null goto label5;

        $r7 = r3[0];

        return $r7;

     label5:
        return null;

     label6:
        $r8 := @caughtexception;

        r3 = null;

        goto label4;

        catch libcore.io.GaiException from label2 to label3 with label6;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.net.InetAddress r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        int i0, $i1;
        byte[] $r3, $r5;
        java.nio.ByteOrder $r4;
        java.lang.Object $r6;
        java.lang.String $r7;

        r0 := @this: java.net.InetAddress;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("address", 0);

        $r3 = newarray (byte)[4];

        r0.<java.net.InetAddress: byte[] ipaddress> = $r3;

        $r5 = r0.<java.net.InetAddress: byte[] ipaddress>;

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeInt(byte[],int,int,java.nio.ByteOrder)>($r5, 0, i0, $r4);

        $r6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("hostName", null);

        $r7 = (java.lang.String) $r6;

        r0.<java.net.InetAddress: java.lang.String hostName> = $r7;

        $i1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("family", 2);

        r0.<java.net.InetAddress: int family> = $i1;

        return;
    }

    private java.lang.Object readResolve() throws java.io.ObjectStreamException
    {
        java.net.InetAddress r0;
        java.net.Inet4Address $r1;
        java.lang.String $r2;
        byte[] $r3;

        r0 := @this: java.net.InetAddress;

        $r1 = new java.net.Inet4Address;

        $r3 = r0.<java.net.InetAddress: byte[] ipaddress>;

        $r2 = r0.<java.net.InetAddress: java.lang.String hostName>;

        specialinvoke $r1.<java.net.Inet4Address: void <init>(byte[],java.lang.String)>($r3, $r2);

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.net.InetAddress r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        byte[] $r3, $r5;
        java.nio.ByteOrder $r4;
        int $i0, $i1;
        java.lang.String $r6;

        r0 := @this: java.net.InetAddress;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $r3 = r0.<java.net.InetAddress: byte[] ipaddress>;

        if $r3 != null goto label2;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("address", 0);

     label1:
        $i1 = r0.<java.net.InetAddress: int family>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("family", $i1);

        $r6 = r0.<java.net.InetAddress: java.lang.String hostName>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("hostName", $r6);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;

     label2:
        $r5 = r0.<java.net.InetAddress: byte[] ipaddress>;

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        $i0 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r5, 0, $r4);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("address", $i0);

        goto label1;
    }

    public boolean equals(java.lang.Object)
    {
        java.net.InetAddress r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte[] $r3, $r4;

        r0 := @this: java.net.InetAddress;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.net.InetAddress;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<java.net.InetAddress: byte[] ipaddress>;

        $r2 = (java.net.InetAddress) r1;

        $r3 = $r2.<java.net.InetAddress: byte[] ipaddress>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3);

        return $z1;
    }

    public byte[] getAddress()
    {
        java.net.InetAddress r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.net.InetAddress;

        $r1 = r0.<java.net.InetAddress: byte[] ipaddress>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public java.lang.String getCanonicalHostName()
    {
        java.net.InetAddress r0, $r3;
        java.lang.String r2, $r5;
        java.net.UnknownHostException $r4;

        r0 := @this: java.net.InetAddress;

     label1:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getHostByAddrImpl(java.net.InetAddress)>(r0);

        r2 = $r3.<java.net.InetAddress: java.lang.String hostName>;

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r5;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public java.lang.String getHostAddress()
    {
        java.net.InetAddress r0;
        int $i0;
        libcore.io.Os $r1;
        java.lang.String $r2;

        r0 := @this: java.net.InetAddress;

        $r1 = <libcore.io.Libcore: libcore.io.Os os>;

        $i0 = <libcore.io.OsConstants: int NI_NUMERICHOST>;

        $r2 = interfaceinvoke $r1.<libcore.io.Os: java.lang.String getnameinfo(java.net.InetAddress,int)>(r0, $i0);

        return $r2;
    }

    public java.lang.String getHostName()
    {
        java.net.InetAddress r0, $r4;
        java.lang.String $r2, $r3, $r5, $r7;
        java.net.UnknownHostException $r6;

        r0 := @this: java.net.InetAddress;

        $r2 = r0.<java.net.InetAddress: java.lang.String hostName>;

        if $r2 != null goto label2;

     label1:
        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getHostByAddrImpl(java.net.InetAddress)>(r0);

        $r5 = $r4.<java.net.InetAddress: java.lang.String hostName>;

        r0.<java.net.InetAddress: java.lang.String hostName> = $r5;

     label2:
        $r3 = r0.<java.net.InetAddress: java.lang.String hostName>;

        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<java.net.InetAddress: java.lang.String hostName> = $r7;

        goto label2;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public int hashCode()
    {
        java.net.InetAddress r0;
        byte[] $r1;
        int $i0;

        r0 := @this: java.net.InetAddress;

        $r1 = r0.<java.net.InetAddress: byte[] ipaddress>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        return $i0;
    }

    public boolean isAnyLocalAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isLinkLocalAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isLoopbackAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isMCGlobal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isMCLinkLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isMCNodeLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isMCOrgLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isMCSiteLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isMulticastAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public boolean isReachable(int) throws java.io.IOException
    {
        java.net.InetAddress r0;
        int i0;
        boolean $z0;

        r0 := @this: java.net.InetAddress;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>(null, 0, i0);

        return $z0;
    }

    public boolean isReachable(java.net.NetworkInterface, int, int) throws java.io.IOException
    {
        java.net.InetAddress r0, $r12;
        java.net.NetworkInterface r1;
        int i0, i1, $i2;
        java.util.ArrayList r2;
        boolean z0, z1, $z2, $z3;
        java.util.concurrent.CountDownLatch r3, $r9;
        java.util.concurrent.atomic.AtomicBoolean r4, $r10;
        java.util.Iterator r5;
        java.lang.IllegalArgumentException $r7;
        java.util.Enumeration $r8;
        java.net.InetAddress$1 $r11;
        java.lang.Object $r13;
        java.lang.InterruptedException $r14;
        java.lang.Thread $r15;

        r0 := @this: java.net.InetAddress;

        r1 := @parameter0: java.net.NetworkInterface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ttl < 0 || timeout < 0");

        throw $r7;

     label2:
        if r1 != null goto label4;

        z1 = specialinvoke r0.<java.net.InetAddress: boolean isReachable(java.net.InetAddress,java.net.InetAddress,int)>(r0, null, i1);

     label3:
        return z1;

     label4:
        $r8 = virtualinvoke r1.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

        r2 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r8);

        z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        z1 = 0;

        if z0 != 0 goto label3;

        $r9 = new java.util.concurrent.CountDownLatch;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke $r9.<java.util.concurrent.CountDownLatch: void <init>(int)>($i2);

        r3 = $r9;

        $r10 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r4 = $r10;

        r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = new java.net.InetAddress$1;

        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.net.InetAddress) $r13;

        specialinvoke $r11.<java.net.InetAddress$1: void <init>(java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,int,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.CountDownLatch)>(r0, r0, $r12, i1, r4, r3);

        virtualinvoke $r11.<java.net.InetAddress$1: void start()>();

        goto label5;

     label6:
        virtualinvoke r3.<java.util.concurrent.CountDownLatch: void await()>();

     label7:
        $z3 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z3;

     label8:
        $r14 := @caughtexception;

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r15.<java.lang.Thread: void interrupt()>();

        goto label7;

        catch java.lang.InterruptedException from label6 to label7 with label8;
    }

    public boolean isSiteLocalAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;

        return 0;
    }

    public java.lang.String toString()
    {
        java.net.InetAddress r0;
        java.lang.StringBuilder r1, $r3, $r5, $r6, $r8;
        java.lang.String r2, $r4, $r7, $r9;

        r0 := @this: java.net.InetAddress;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        $r4 = r0.<java.net.InetAddress: java.lang.String hostName>;

        if $r4 != null goto label2;

        r2 = "";

     label1:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label2:
        r2 = r0.<java.net.InetAddress: java.lang.String hostName>;

        goto label1;
    }
}
