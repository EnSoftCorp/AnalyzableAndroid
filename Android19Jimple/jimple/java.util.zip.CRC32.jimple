public class java.util.zip.CRC32 extends java.lang.Object implements java.util.zip.Checksum
{
    private long crc;
    long tbytes;

    public void <init>()
    {
        java.util.zip.CRC32 r0;

        r0 := @this: java.util.zip.CRC32;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.CRC32: long crc> = 0L;

        r0.<java.util.zip.CRC32: long tbytes> = 0L;

        return;
    }

    private native long updateByteImpl(byte, long);

    private native long updateImpl(byte[], int, int, long);

    public long getValue()
    {
        java.util.zip.CRC32 r0;
        long $l0;

        r0 := @this: java.util.zip.CRC32;

        $l0 = r0.<java.util.zip.CRC32: long crc>;

        return $l0;
    }

    public void reset()
    {
        java.util.zip.CRC32 r0;

        r0 := @this: java.util.zip.CRC32;

        r0.<java.util.zip.CRC32: long crc> = 0L;

        r0.<java.util.zip.CRC32: long tbytes> = 0L;

        return;
    }

    public void update(int)
    {
        java.util.zip.CRC32 r0;
        int i0;
        long $l1, $l3;
        byte $b2;

        r0 := @this: java.util.zip.CRC32;

        i0 := @parameter0: int;

        $b2 = (byte) i0;

        $l1 = r0.<java.util.zip.CRC32: long crc>;

        $l3 = specialinvoke r0.<java.util.zip.CRC32: long updateByteImpl(byte,long)>($b2, $l1);

        r0.<java.util.zip.CRC32: long crc> = $l3;

        return;
    }

    public void update(byte[])
    {
        java.util.zip.CRC32 r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.CRC32;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void update(byte[], int, int)
    {
        java.util.zip.CRC32 r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3, $l4, $l5, $l6, $l7;

        r0 := @this: java.util.zip.CRC32;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $l4 = r0.<java.util.zip.CRC32: long tbytes>;

        $l3 = (long) i1;

        $l5 = $l4 + $l3;

        r0.<java.util.zip.CRC32: long tbytes> = $l5;

        $l6 = r0.<java.util.zip.CRC32: long crc>;

        $l7 = specialinvoke r0.<java.util.zip.CRC32: long updateImpl(byte[],int,int,long)>(r1, i0, i1, $l6);

        r0.<java.util.zip.CRC32: long crc> = $l7;

        return;
    }
}
