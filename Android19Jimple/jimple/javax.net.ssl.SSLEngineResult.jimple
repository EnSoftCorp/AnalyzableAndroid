public class javax.net.ssl.SSLEngineResult extends java.lang.Object
{
    private final int bytesConsumed;
    private final int bytesProduced;
    private final javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus;
    private final javax.net.ssl.SSLEngineResult$Status status;

    public void <init>(javax.net.ssl.SSLEngineResult$Status, javax.net.ssl.SSLEngineResult$HandshakeStatus, int, int)
    {
        javax.net.ssl.SSLEngineResult r0;
        javax.net.ssl.SSLEngineResult$Status r1;
        javax.net.ssl.SSLEngineResult$HandshakeStatus r2;
        int i0, i1;
        java.lang.IllegalArgumentException $r3, $r4, $r5, $r6;

        r0 := @this: javax.net.ssl.SSLEngineResult;

        r1 := @parameter0: javax.net.ssl.SSLEngineResult$Status;

        r2 := @parameter1: javax.net.ssl.SSLEngineResult$HandshakeStatus;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("status is null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handshakeStatus is null");

        throw $r5;

     label2:
        if i0 >= 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bytesConsumed is negative");

        throw $r4;

     label3:
        if i1 >= 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bytesProduced is negative");

        throw $r3;

     label4:
        r0.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status status> = r1;

        r0.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = r2;

        r0.<javax.net.ssl.SSLEngineResult: int bytesConsumed> = i0;

        r0.<javax.net.ssl.SSLEngineResult: int bytesProduced> = i1;

        return;
    }

    public final int bytesConsumed()
    {
        javax.net.ssl.SSLEngineResult r0;
        int $i0;

        r0 := @this: javax.net.ssl.SSLEngineResult;

        $i0 = r0.<javax.net.ssl.SSLEngineResult: int bytesConsumed>;

        return $i0;
    }

    public final int bytesProduced()
    {
        javax.net.ssl.SSLEngineResult r0;
        int $i0;

        r0 := @this: javax.net.ssl.SSLEngineResult;

        $i0 = r0.<javax.net.ssl.SSLEngineResult: int bytesProduced>;

        return $i0;
    }

    public final javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()
    {
        javax.net.ssl.SSLEngineResult r0;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r1;

        r0 := @this: javax.net.ssl.SSLEngineResult;

        $r1 = r0.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;

        return $r1;
    }

    public final javax.net.ssl.SSLEngineResult$Status getStatus()
    {
        javax.net.ssl.SSLEngineResult r0;
        javax.net.ssl.SSLEngineResult$Status $r1;

        r0 := @this: javax.net.ssl.SSLEngineResult;

        $r1 = r0.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status status>;

        return $r1;
    }

    public java.lang.String toString()
    {
        javax.net.ssl.SSLEngineResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r11;
        javax.net.ssl.SSLEngineResult$Status $r3;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r6;
        int $i0, $i1;
        java.lang.String $r12;

        r0 := @this: javax.net.ssl.SSLEngineResult;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLEngineReport: Status = ");

        $r3 = r0.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status status>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  HandshakeStatus = ");

        $r6 = r0.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                 bytesConsumed = ");

        $i0 = r0.<javax.net.ssl.SSLEngineResult: int bytesConsumed>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytesProduced = ");

        $i1 = r0.<javax.net.ssl.SSLEngineResult: int bytesProduced>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }
}
