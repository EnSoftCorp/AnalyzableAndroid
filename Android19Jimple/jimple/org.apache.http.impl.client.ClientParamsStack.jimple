public class org.apache.http.impl.client.ClientParamsStack extends org.apache.http.params.AbstractHttpParams
{
    protected final org.apache.http.params.HttpParams applicationParams;
    protected final org.apache.http.params.HttpParams clientParams;
    private final org.apache.commons.logging.Log log;
    protected final org.apache.http.params.HttpParams overrideParams;
    protected final org.apache.http.params.HttpParams requestParams;

    public void <init>(org.apache.http.impl.client.ClientParamsStack)
    {
        org.apache.http.impl.client.ClientParamsStack r0, r1;
        org.apache.http.params.HttpParams $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: org.apache.http.impl.client.ClientParamsStack;

        $r2 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()>();

        $r3 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()>();

        $r4 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()>();

        $r5 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()>();

        specialinvoke r0.<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r2, $r3, $r4, $r5);

        return;
    }

    public void <init>(org.apache.http.impl.client.ClientParamsStack, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.ClientParamsStack r0, r1;
        org.apache.http.params.HttpParams r2, r3, r4, r5;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: org.apache.http.impl.client.ClientParamsStack;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        r4 := @parameter3: org.apache.http.params.HttpParams;

        r5 := @parameter4: org.apache.http.params.HttpParams;

        if r2 == null goto label5;

     label1:
        if r3 == null goto label6;

     label2:
        if r4 == null goto label7;

     label3:
        if r5 == null goto label8;

     label4:
        specialinvoke r0.<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>(r2, r3, r4, r5);

        return;

     label5:
        r2 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()>();

        goto label1;

     label6:
        r3 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()>();

        goto label2;

     label7:
        r4 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()>();

        goto label3;

     label8:
        r5 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()>();

        goto label4;
    }

    public void <init>(org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams r1, r2, r3, r4;
        java.lang.Class $r5;
        org.apache.commons.logging.Log $r6;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        r4 := @parameter3: org.apache.http.params.HttpParams;

        specialinvoke r0.<org.apache.http.params.AbstractHttpParams: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r5);

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.commons.logging.Log log> = $r6;

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams> = r1;

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams> = r2;

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams> = r3;

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams> = r4;

        return;
    }

    public org.apache.http.params.HttpParams copy()
    {
        org.apache.http.impl.client.ClientParamsStack r0;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        return r0;
    }

    public final org.apache.http.params.HttpParams getApplicationParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams>;

        return $r1;
    }

    public final org.apache.http.params.HttpParams getClientParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams>;

        return $r1;
    }

    public final org.apache.http.params.HttpParams getOverrideParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams>;

        return $r1;
    }

    public java.lang.Object getParameter(java.lang.String)
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        java.lang.String r1, $r11;
        org.apache.http.params.HttpParams r2, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.Object r3;
        org.apache.commons.logging.Log $r4, $r6;
        boolean $z0;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name must not be null.");

        throw $r19;

     label1:
        r2 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams>;

        r3 = null;

        if r2 == null goto label2;

        $r18 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams>;

        r3 = interfaceinvoke $r18.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r1);

     label2:
        if r3 != null goto label3;

        $r16 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams>;

        if $r16 == null goto label3;

        $r17 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams>;

        r3 = interfaceinvoke $r17.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r1);

     label3:
        if r3 != null goto label4;

        $r15 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams>;

        if $r15 == null goto label4;

        $r14 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams>;

        r3 = interfaceinvoke $r14.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r1);

     label4:
        if r3 != null goto label5;

        $r12 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams>;

        if $r12 == null goto label5;

        $r13 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams>;

        r3 = interfaceinvoke $r13.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r1);

     label5:
        $r4 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r6 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11);

     label6:
        return r3;
    }

    public final org.apache.http.params.HttpParams getRequestParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams>;

        return $r1;
    }

    public boolean removeParameter(java.lang.String)
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Removing parameters in a stack is not supported.");

        throw $r2;
    }

    public org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object) throws java.lang.UnsupportedOperationException
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Setting parameters in a stack is not supported.");

        throw $r3;
    }
}
