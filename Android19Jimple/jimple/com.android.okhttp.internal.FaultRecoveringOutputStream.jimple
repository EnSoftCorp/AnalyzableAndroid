public abstract class com.android.okhttp.internal.FaultRecoveringOutputStream extends com.android.okhttp.internal.AbstractOutputStream
{
    private final int maxReplayBufferLength;
    private java.io.OutputStream out;
    private java.io.ByteArrayOutputStream replayBuffer;

    public void <init>(int, java.io.OutputStream)
    {
        com.android.okhttp.internal.FaultRecoveringOutputStream r0;
        int i0;
        java.io.OutputStream r1;
        java.io.ByteArrayOutputStream $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.okhttp.internal.FaultRecoveringOutputStream;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<com.android.okhttp.internal.AbstractOutputStream: void <init>()>();

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: int maxReplayBufferLength> = i0;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer> = $r2;

        r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream out> = r1;

        return;
    }

    private boolean recover(java.io.IOException)
    {
        com.android.okhttp.internal.FaultRecoveringOutputStream r0;
        java.io.IOException r1, r3, $r5;
        java.io.OutputStream r2;
        java.io.ByteArrayOutputStream $r4;

        r0 := @this: com.android.okhttp.internal.FaultRecoveringOutputStream;

        r1 := @parameter0: java.io.IOException;

        $r4 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer>;

        if $r4 != null goto label3;

     label1:
        return 0;

     label2:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r2);

        r1 = r3;

     label3:
        r2 = null;

     label4:
        r2 = virtualinvoke r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream replacementStream(java.io.IOException)>(r1);

     label5:
        if r2 == null goto label1;

     label6:
        virtualinvoke r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: void replaceStream(java.io.OutputStream)>(r2);

     label7:
        return 1;

        catch java.io.IOException from label4 to label5 with label2;
        catch java.io.IOException from label6 to label7 with label2;
    }

    public final void close() throws java.io.IOException
    {
        com.android.okhttp.internal.FaultRecoveringOutputStream r0;
        java.io.IOException r1, $r3;
        boolean $z0, $z1;
        java.io.OutputStream $r2;

        r0 := @this: com.android.okhttp.internal.FaultRecoveringOutputStream;

        $z0 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean closed> = 1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $z1 = specialinvoke r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean recover(java.io.IOException)>(r1);

        if $z1 != 0 goto label1;

        throw r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public final void flush() throws java.io.IOException
    {
        com.android.okhttp.internal.FaultRecoveringOutputStream r0;
        java.io.IOException r1, $r3;
        boolean $z0, $z1;
        java.io.OutputStream $r2;

        r0 := @this: com.android.okhttp.internal.FaultRecoveringOutputStream;

        $z0 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $z1 = specialinvoke r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean recover(java.io.IOException)>(r1);

        if $z1 != 0 goto label1;

        throw r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isRecoverable()
    {
        com.android.okhttp.internal.FaultRecoveringOutputStream r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: com.android.okhttp.internal.FaultRecoveringOutputStream;

        $r1 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final void replaceStream(java.io.OutputStream) throws java.io.IOException
    {
        com.android.okhttp.internal.FaultRecoveringOutputStream r0;
        java.io.OutputStream r1, $r2, $r4;
        boolean $z0;
        java.io.ByteArrayOutputStream $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.okhttp.internal.FaultRecoveringOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $z0 = virtualinvoke r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean isRecoverable()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream out>;

        if $r2 != r1 goto label2;

        return;

     label2:
        $r3 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r1);

        $r4 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream out>;

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>($r4);

        r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream out> = r1;

        return;
    }

    protected abstract java.io.OutputStream replacementStream(java.io.IOException) throws java.io.IOException;

    public final void write(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.FaultRecoveringOutputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.io.IOException r2, $r7, $r8;
        boolean $z0, $z1;
        java.io.OutputStream $r3;
        java.io.ByteArrayOutputStream $r4, $r5, $r6;

        r0 := @this: com.android.okhttp.internal.FaultRecoveringOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("stream closed");

        throw $r7;

     label1:
        $i2 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

     label2:
        $r3 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $r4 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer>;

        if $r4 == null goto label7;

        $r5 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer>;

        $i3 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: int size()>();

        $i5 = i1 + $i3;

        $i4 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: int maxReplayBufferLength>;

        if $i5 <= $i4 goto label4;

        r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer> = null;

     label3:
        return;

     label4:
        $r6 = r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: java.io.ByteArrayOutputStream replayBuffer>;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1);

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        $z1 = specialinvoke r0.<com.android.okhttp.internal.FaultRecoveringOutputStream: boolean recover(java.io.IOException)>(r2);

        if $z1 != 0 goto label2;

        throw r2;

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }
}
