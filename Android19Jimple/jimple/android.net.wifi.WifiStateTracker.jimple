public class android.net.wifi.WifiStateTracker extends android.net.BaseNetworkStateTracker
{
    private static final boolean LOGV;
    private static final java.lang.String NETWORKTYPE;
    private static final java.lang.String TAG;
    private android.os.Handler mCsHandler;
    private java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet;
    private android.net.NetworkInfo$State mLastState;
    private java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet;
    private android.net.SamplingDataTracker mSamplingDataTracker;
    private java.util.concurrent.atomic.AtomicBoolean mTeardownRequested;
    private android.net.wifi.WifiInfo mWifiInfo;
    private android.net.wifi.WifiManager mWifiManager;
    private android.content.BroadcastReceiver mWifiStateReceiver;

    public void <init>(int, java.lang.String)
    {
        android.net.wifi.WifiStateTracker r0;
        int i0;
        java.lang.String r1;
        java.util.concurrent.atomic.AtomicBoolean $r2, $r3, $r4;
        android.net.NetworkInfo$State $r5;
        android.net.SamplingDataTracker $r6;
        android.net.NetworkInfo $r7, $r10;
        android.net.LinkProperties $r8;
        android.net.LinkCapabilities $r9;

        r0 := @this: android.net.wifi.WifiStateTracker;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.BaseNetworkStateTracker: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet> = $r4;

        $r5 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State UNKNOWN>;

        r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo$State mLastState> = $r5;

        $r6 = new android.net.SamplingDataTracker;

        specialinvoke $r6.<android.net.SamplingDataTracker: void <init>()>();

        r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker> = $r6;

        $r7 = new android.net.NetworkInfo;

        specialinvoke $r7.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(i0, 0, r1, "");

        r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo> = $r7;

        $r8 = new android.net.LinkProperties;

        specialinvoke $r8.<android.net.LinkProperties: void <init>()>();

        r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties> = $r8;

        $r9 = new android.net.LinkCapabilities;

        specialinvoke $r9.<android.net.LinkCapabilities: void <init>()>();

        r0.<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities mLinkCapabilities> = $r9;

        $r10 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r10.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        virtualinvoke r0.<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)>(0);

        return;
    }

    static android.net.NetworkInfo$State access$1000(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo$State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo$State mLastState>;

        return $r1;
    }

    static android.net.NetworkInfo$State access$1002(android.net.wifi.WifiStateTracker, android.net.NetworkInfo$State)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo$State r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.NetworkInfo$State;

        r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo$State mLastState> = r1;

        return r1;
    }

    static android.net.NetworkInfo access$102(android.net.wifi.WifiStateTracker, android.net.NetworkInfo)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.NetworkInfo;

        r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo> = r1;

        return r1;
    }

    static android.net.NetworkInfo access$1100(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static android.net.SamplingDataTracker access$1200(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.SamplingDataTracker $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker>;

        return $r1;
    }

    static android.net.NetworkInfo access$1300(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static android.os.Handler access$1400(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.os.Handler mCsHandler>;

        return $r1;
    }

    static android.net.LinkProperties access$1502(android.net.wifi.WifiStateTracker, android.net.LinkProperties)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkProperties r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.LinkProperties;

        r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties> = r1;

        return r1;
    }

    static android.net.NetworkInfo access$1600(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static android.net.LinkProperties access$202(android.net.wifi.WifiStateTracker, android.net.LinkProperties)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkProperties r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.LinkProperties;

        r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties> = r1;

        return r1;
    }

    static android.net.LinkProperties access$300(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkProperties $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties>;

        return $r1;
    }

    static android.net.LinkProperties access$402(android.net.wifi.WifiStateTracker, android.net.LinkProperties)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkProperties r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.LinkProperties;

        r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties> = r1;

        return r1;
    }

    static android.net.LinkCapabilities access$502(android.net.wifi.WifiStateTracker, android.net.LinkCapabilities)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkCapabilities r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.LinkCapabilities;

        r0.<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities mLinkCapabilities> = r1;

        return r1;
    }

    static android.net.LinkCapabilities access$600(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkCapabilities $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities mLinkCapabilities>;

        return $r1;
    }

    static android.net.LinkCapabilities access$702(android.net.wifi.WifiStateTracker, android.net.LinkCapabilities)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkCapabilities r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.LinkCapabilities;

        r0.<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities mLinkCapabilities> = r1;

        return r1;
    }

    static android.net.wifi.WifiInfo access$802(android.net.wifi.WifiStateTracker, android.net.wifi.WifiInfo)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.wifi.WifiInfo r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 := @parameter1: android.net.wifi.WifiInfo;

        r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo> = r1;

        return r1;
    }

    static android.net.NetworkInfo access$900(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    public void addStackedLink(android.net.LinkProperties)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void captivePortalCheckComplete()
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.wifi.WifiManager $r1;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWifiManager>;

        virtualinvoke $r1.<android.net.wifi.WifiManager: void captivePortalCheckComplete()>();

        return;
    }

    public void captivePortalCheckCompleted(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void defaultRouteSet(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public android.net.LinkCapabilities getLinkCapabilities()
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkCapabilities $r1, $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = new android.net.LinkCapabilities;

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities mLinkCapabilities>;

        specialinvoke $r1.<android.net.LinkCapabilities: void <init>(android.net.LinkCapabilities)>($r2);

        return $r1;
    }

    public android.net.LinkProperties getLinkProperties()
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkProperties $r1, $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = new android.net.LinkProperties;

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties>;

        specialinvoke $r1.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r2);

        return $r1;
    }

    public android.net.LinkQualityInfo getLinkQualityInfo()
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.WifiLinkQualityInfo r1, $r5;
        java.lang.Object r2;
        java.lang.Throwable r3, $r16;
        int i0, $i1, $i4;
        android.net.NetworkInfo $r4, $r6;
        android.net.SamplingDataTracker $r7, $r8, $r9, $r10;
        long $l2, $l3;
        android.net.wifi.WifiInfo $r11, $r13, $r14;
        java.lang.String $r12;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r4 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        if $r4 != null goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        $r5 = new android.net.WifiLinkQualityInfo;

        specialinvoke $r5.<android.net.WifiLinkQualityInfo: void <init>()>();

        r1 = $r5;

        $r6 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        $i1 = virtualinvoke $r6.<android.net.NetworkInfo: int getType()>();

        virtualinvoke r1.<android.net.WifiLinkQualityInfo: void setNetworkType(int)>($i1);

        $r7 = r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker>;

        r2 = $r7.<android.net.SamplingDataTracker: java.lang.Object mSamplingDataLock>;

        entermonitor r2;

     label3:
        $r8 = r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker>;

        virtualinvoke $r8.<android.net.SamplingDataTracker: void setCommonLinkQualityInfoFields(android.net.LinkQualityInfo)>(r1);

        $r9 = r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker>;

        $l2 = virtualinvoke $r9.<android.net.SamplingDataTracker: long getSampledTxPacketCount()>();

        virtualinvoke r1.<android.net.WifiLinkQualityInfo: void setTxGood(long)>($l2);

        $r10 = r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker>;

        $l3 = virtualinvoke $r10.<android.net.SamplingDataTracker: long getSampledTxPacketErrorCount()>();

        virtualinvoke r1.<android.net.WifiLinkQualityInfo: void setTxBad(long)>($l3);

        exitmonitor r2;

     label4:
        $r11 = r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        if $r11 == null goto label1;

        $r13 = r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r12 = virtualinvoke $r13.<android.net.wifi.WifiInfo: java.lang.String getBSSID()>();

        virtualinvoke r1.<android.net.WifiLinkQualityInfo: void setBssid(java.lang.String)>($r12);

        $r14 = r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        i0 = virtualinvoke $r14.<android.net.wifi.WifiInfo: int getRssi()>();

        virtualinvoke r1.<android.net.WifiLinkQualityInfo: void setRssi(int)>(i0);

        $i4 = staticinvoke <android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>(i0, 100);

        virtualinvoke r1.<android.net.WifiLinkQualityInfo: void setNormalizedSignalStrength(int)>($i4);

        return r1;

     label5:
        $r16 := @caughtexception;

        r3 = $r16;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.net.NetworkInfo getNetworkInfo()
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo $r1, $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = new android.net.NetworkInfo;

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r1.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r2);

        return $r1;
    }

    public java.lang.String getTcpBufferSizesPropName()
    {
        android.net.wifi.WifiStateTracker r0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        return "net.tcp.buffersize.wifi";
    }

    public boolean isAvailable()
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.NetworkInfo $r1;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r1.<android.net.NetworkInfo: boolean isAvailable()>();

        return $z0;
    }

    public boolean isDefaultRouteSet()
    {
        android.net.wifi.WifiStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isPrivateDnsRouteSet()
    {
        android.net.wifi.WifiStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isTeardownRequested()
    {
        android.net.wifi.WifiStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void privateDnsRouteSet(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public boolean reconnect()
    {
        android.net.wifi.WifiStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        android.net.wifi.WifiManager $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWifiManager>;

        virtualinvoke $r2.<android.net.wifi.WifiManager: boolean startWifi()>();

        return 1;
    }

    public void removeStackedLink(android.net.LinkProperties)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean removeStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void setDependencyMet(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void setPolicyDataEnable(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean setRadio(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;
        android.net.wifi.WifiManager $r1;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWifiManager>;

        virtualinvoke $r1.<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>(z0);

        return 1;
    }

    public void setTeardownRequested(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public void setUserDataEnable(boolean)
    {
        android.net.wifi.WifiStateTracker r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.net.wifi.WifiStateTracker;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ignoring setUserDataEnable(");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WifiStateTracker", $r5);

        return;
    }

    public void startMonitoring(android.content.Context, android.os.Handler)
    {
        android.net.wifi.WifiStateTracker r0;
        android.content.Context r1, $r4, $r10;
        android.os.Handler r2;
        android.content.IntentFilter r3, $r7;
        java.lang.Object $r5;
        android.net.wifi.WifiManager $r6;
        android.net.wifi.WifiStateTracker$WifiStateReceiver $r8;
        android.content.BroadcastReceiver $r9;

        r0 := @this: android.net.wifi.WifiStateTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r0.<android.net.wifi.WifiStateTracker: android.os.Handler mCsHandler> = r2;

        r0.<android.net.wifi.WifiStateTracker: android.content.Context mContext> = r1;

        $r4 = r0.<android.net.wifi.WifiStateTracker: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r6 = (android.net.wifi.WifiManager) $r5;

        r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWifiManager> = $r6;

        $r7 = new android.content.IntentFilter;

        specialinvoke $r7.<android.content.IntentFilter: void <init>()>();

        r3 = $r7;

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.wifi.STATE_CHANGE");

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.wifi.LINK_CONFIGURATION_CHANGED");

        $r8 = new android.net.wifi.WifiStateTracker$WifiStateReceiver;

        specialinvoke $r8.<android.net.wifi.WifiStateTracker$WifiStateReceiver: void <init>(android.net.wifi.WifiStateTracker,android.net.wifi.WifiStateTracker$1)>(r0, null);

        r0.<android.net.wifi.WifiStateTracker: android.content.BroadcastReceiver mWifiStateReceiver> = $r8;

        $r10 = r0.<android.net.wifi.WifiStateTracker: android.content.Context mContext>;

        $r9 = r0.<android.net.wifi.WifiStateTracker: android.content.BroadcastReceiver mWifiStateReceiver>;

        virtualinvoke $r10.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r9, r3);

        return;
    }

    public void startSampling(android.net.SamplingDataTracker$SamplingSnapshot)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.SamplingDataTracker$SamplingSnapshot r1;
        android.net.SamplingDataTracker $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        r1 := @parameter0: android.net.SamplingDataTracker$SamplingSnapshot;

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker>;

        virtualinvoke $r2.<android.net.SamplingDataTracker: void startSampling(android.net.SamplingDataTracker$SamplingSnapshot)>(r1);

        return;
    }

    public void stopSampling(android.net.SamplingDataTracker$SamplingSnapshot)
    {
        android.net.wifi.WifiStateTracker r0;
        android.net.SamplingDataTracker$SamplingSnapshot r1;
        android.net.SamplingDataTracker $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        r1 := @parameter0: android.net.SamplingDataTracker$SamplingSnapshot;

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.SamplingDataTracker mSamplingDataTracker>;

        virtualinvoke $r2.<android.net.SamplingDataTracker: void stopSampling(android.net.SamplingDataTracker$SamplingSnapshot)>(r1);

        return;
    }

    public void supplyMessenger(android.os.Messenger)
    {
        android.net.wifi.WifiStateTracker r0;
        android.os.Messenger r1;

        r0 := @this: android.net.wifi.WifiStateTracker;

        r1 := @parameter0: android.os.Messenger;

        return;
    }

    public boolean teardown()
    {
        android.net.wifi.WifiStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        android.net.wifi.WifiManager $r2;

        r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = r0.<android.net.wifi.WifiStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r2 = r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWifiManager>;

        virtualinvoke $r2.<android.net.wifi.WifiManager: boolean stopWifi()>();

        return 1;
    }

    public static void <clinit>()
    {
        <android.net.wifi.WifiStateTracker: java.lang.String TAG> = "WifiStateTracker";

        <android.net.wifi.WifiStateTracker: java.lang.String NETWORKTYPE> = "WIFI";

        <android.net.wifi.WifiStateTracker: boolean LOGV> = 1;

        return;
    }
}
