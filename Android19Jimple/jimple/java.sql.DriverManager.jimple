public class java.sql.DriverManager extends java.lang.Object
{
    private static final java.sql.SQLPermission logPermission;
    private static int loginTimeout;
    private static final java.util.List theDrivers;
    private static java.io.PrintStream thePrintStream;
    private static java.io.PrintWriter thePrintWriter;

    static void <clinit>()
    {
        java.util.ArrayList $r0;
        java.sql.SQLPermission $r1;

        <java.sql.DriverManager: int loginTimeout> = 0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(10);

        <java.sql.DriverManager: java.util.List theDrivers> = $r0;

        $r1 = new java.sql.SQLPermission;

        specialinvoke $r1.<java.sql.SQLPermission: void <init>(java.lang.String)>("setLog");

        <java.sql.DriverManager: java.sql.SQLPermission logPermission> = $r1;

        staticinvoke <java.sql.DriverManager: void loadInitialDrivers()>();

        return;
    }

    private void <init>()
    {
        java.sql.DriverManager r0;

        r0 := @this: java.sql.DriverManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void deregisterDriver(java.sql.Driver) throws java.sql.SQLException
    {
        java.sql.Driver r0;
        java.util.List r1, $r4;
        java.lang.Throwable r2, $r6;
        java.lang.ClassLoader $r3;
        boolean $z0;
        java.lang.SecurityException $r5;

        r0 := @parameter0: java.sql.Driver;

        if r0 != null goto label1;

        return;

     label1:
        $r3 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        $z0 = staticinvoke <java.sql.DriverManager: boolean isClassFromClassLoader(java.lang.Object,java.lang.ClassLoader)>(r0, $r3);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("calling class not authorized to deregister JDBC driver");

        throw $r5;

     label2:
        r1 = <java.sql.DriverManager: java.util.List theDrivers>;

        entermonitor r1;

     label3:
        $r4 = <java.sql.DriverManager: java.util.List theDrivers>;

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static java.sql.Connection getConnection(java.lang.String) throws java.sql.SQLException
    {
        java.lang.String r0;
        java.util.Properties $r1;
        java.sql.Connection $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        $r2 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties)>(r0, $r1);

        return $r2;
    }

    public static java.sql.Connection getConnection(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        java.lang.String r0, r1, r2;
        java.util.Properties r3, $r4;
        java.sql.Connection $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        r3 = $r4;

        if r1 == null goto label1;

        virtualinvoke r3.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("user", r1);

     label1:
        if r2 == null goto label2;

        virtualinvoke r3.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("password", r2);

     label2:
        $r5 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties)>(r0, r3);

        return $r5;
    }

    public static java.sql.Connection getConnection(java.lang.String, java.util.Properties) throws java.sql.SQLException
    {
        java.lang.String r0;
        java.util.Properties r1;
        java.util.List r2, $r6;
        java.lang.Throwable r3, $r10;
        java.util.Iterator r4;
        java.sql.Connection r5;
        boolean $z0;
        java.sql.SQLException $r7, $r11;
        java.lang.Object $r8;
        java.sql.Driver $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Properties;

        if r0 != null goto label01;

        $r11 = new java.sql.SQLException;

        specialinvoke $r11.<java.sql.SQLException: void <init>(java.lang.String,java.lang.String)>("The url cannot be null", "08001");

        throw $r11;

     label01:
        r2 = <java.sql.DriverManager: java.util.List theDrivers>;

        entermonitor r2;

     label02:
        $r6 = <java.sql.DriverManager: java.util.List theDrivers>;

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.sql.Driver) $r8;

        r5 = interfaceinvoke $r9.<java.sql.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)>(r0, r1);

     label04:
        if r5 == null goto label03;

     label05:
        exitmonitor r2;

     label06:
        return r5;

     label07:
        exitmonitor r2;

     label08:
        $r7 = new java.sql.SQLException;

        specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String,java.lang.String)>("No suitable driver", "08001");

        throw $r7;

     label09:
        $r10 := @caughtexception;

        r3 = $r10;

     label10:
        exitmonitor r2;

     label11:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static java.sql.Driver getDriver(java.lang.String) throws java.sql.SQLException
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        java.util.List r2, $r6;
        java.lang.Throwable r3, $r9;
        java.util.Iterator r4;
        java.sql.Driver r5;
        boolean $z0, $z1, $z2;
        java.sql.SQLException $r7;
        java.lang.Object $r8;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        r2 = <java.sql.DriverManager: java.util.List theDrivers>;

        entermonitor r2;

     label1:
        $r6 = <java.sql.DriverManager: java.util.List theDrivers>;

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.sql.Driver) $r8;

        $z1 = interfaceinvoke r5.<java.sql.Driver: boolean acceptsURL(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <java.sql.DriverManager: boolean isClassFromClassLoader(java.lang.Object,java.lang.ClassLoader)>(r5, r1);

        if $z2 == 0 goto label2;

        exitmonitor r2;

     label3:
        return r5;

     label4:
        exitmonitor r2;

     label5:
        $r7 = new java.sql.SQLException;

        specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String,java.lang.String)>("No suitable driver", "08001");

        throw $r7;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static java.util.Enumeration getDrivers()
    {
        java.lang.ClassLoader r0;
        java.util.List r1, $r8;
        java.util.ArrayList r2, $r7;
        java.lang.Throwable r3, $r10;
        java.util.Iterator r4;
        java.util.Enumeration r5;
        java.sql.Driver r6;
        boolean $z0, $z2;
        java.lang.Object $r9;

        r0 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        r1 = <java.sql.DriverManager: java.util.List theDrivers>;

        entermonitor r1;

     label1:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

        $r8 = <java.sql.DriverManager: java.util.List theDrivers>;

        r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.sql.Driver) $r9;

        $z2 = staticinvoke <java.sql.DriverManager: boolean isClassFromClassLoader(java.lang.Object,java.lang.ClassLoader)>(r6, r0);

        if $z2 == 0 goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label3:
        goto label2;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

     label5:
        exitmonitor r1;

     label6:
        throw r3;

     label7:
        r5 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>(r2);

        exitmonitor r1;

     label8:
        return r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public static java.io.PrintStream getLogStream()
    {
        java.io.PrintStream $r0;

        $r0 = <java.sql.DriverManager: java.io.PrintStream thePrintStream>;

        return $r0;
    }

    public static java.io.PrintWriter getLogWriter()
    {
        java.io.PrintWriter $r0;

        $r0 = <java.sql.DriverManager: java.io.PrintWriter thePrintWriter>;

        return $r0;
    }

    public static int getLoginTimeout()
    {
        int $i0;

        $i0 = <java.sql.DriverManager: int loginTimeout>;

        return $i0;
    }

    private static boolean isClassFromClassLoader(java.lang.Object, java.lang.ClassLoader)
    {
        java.lang.Object r0;
        java.lang.ClassLoader r1;
        boolean z0;
        java.lang.Class r2, r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.ClassLoader;

        z0 = 1;

        if r0 == null goto label1;

        if r1 != null goto label3;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label4:
        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r5, 1, r1);

     label5:
        if r4 == r2 goto label2;

     label6:
        return 0;

     label7:
        $r6 := @caughtexception;

        goto label6;

        catch java.lang.Throwable from label4 to label5 with label7;
    }

    private static void loadInitialDrivers()
    {
        java.lang.String r0, r2;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.ClassLoader $r4;
        java.lang.Throwable $r6;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("jdbc.drivers", null);

        if r0 != null goto label2;

     label1:
        return;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = lengthof r1;

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        r2 = r1[i1];

     label4:
        $r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 1, $r4);

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $r6 := @caughtexception;

        goto label5;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static void println(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintWriter $r1, $r5, $r6;
        java.io.PrintStream $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.sql.DriverManager: java.io.PrintWriter thePrintWriter>;

        if $r1 == null goto label2;

        $r5 = <java.sql.DriverManager: java.io.PrintWriter thePrintWriter>;

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>(r0);

        $r6 = <java.sql.DriverManager: java.io.PrintWriter thePrintWriter>;

        virtualinvoke $r6.<java.io.PrintWriter: void flush()>();

     label1:
        return;

     label2:
        $r2 = <java.sql.DriverManager: java.io.PrintStream thePrintStream>;

        if $r2 == null goto label1;

        $r3 = <java.sql.DriverManager: java.io.PrintStream thePrintStream>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r4 = <java.sql.DriverManager: java.io.PrintStream thePrintStream>;

        virtualinvoke $r4.<java.io.PrintStream: void flush()>();

        return;
    }

    public static void registerDriver(java.sql.Driver) throws java.sql.SQLException
    {
        java.sql.Driver r0;
        java.util.List r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: java.sql.Driver;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("driver == null");

        throw $r4;

     label1:
        r1 = <java.sql.DriverManager: java.util.List theDrivers>;

        entermonitor r1;

     label2:
        $r3 = <java.sql.DriverManager: java.util.List theDrivers>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void setLogStream(java.io.PrintStream)
    {
        java.io.PrintStream r0;

        r0 := @parameter0: java.io.PrintStream;

        <java.sql.DriverManager: java.io.PrintStream thePrintStream> = r0;

        return;
    }

    public static void setLogWriter(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;

        r0 := @parameter0: java.io.PrintWriter;

        <java.sql.DriverManager: java.io.PrintWriter thePrintWriter> = r0;

        return;
    }

    public static void setLoginTimeout(int)
    {
        int i0;

        i0 := @parameter0: int;

        <java.sql.DriverManager: int loginTimeout> = i0;

        return;
    }
}
