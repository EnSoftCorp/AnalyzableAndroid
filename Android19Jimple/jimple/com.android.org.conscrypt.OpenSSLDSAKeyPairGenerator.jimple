public class com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator extends java.security.KeyPairGeneratorSpi
{
    private byte[] g;
    private byte[] p;
    private int primeBits;
    private byte[] q;
    private java.security.SecureRandom random;

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator;

        specialinvoke r0.<java.security.KeyPairGeneratorSpi: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: int primeBits> = 1024;

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: java.security.SecureRandom random> = null;

        return;
    }

    public java.security.KeyPair generateKeyPair()
    {
        com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator r0;
        byte[] r1, $r7, $r8, $r9;
        com.android.org.conscrypt.OpenSSLKey r2, $r6;
        com.android.org.conscrypt.OpenSSLDSAPrivateKey r3, $r10;
        java.security.SecureRandom $r4, $r5;
        int $i0;
        long $l1;
        java.security.KeyPair $r11;
        com.android.org.conscrypt.OpenSSLDSAPublicKey $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: java.security.SecureRandom random>;

        if $r4 != null goto label2;

        r1 = null;

     label1:
        $r6 = new com.android.org.conscrypt.OpenSSLKey;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: int primeBits>;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: byte[] g>;

        $r8 = r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: byte[] p>;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: byte[] q>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long DSA_generate_key(int,byte[],byte[],byte[],byte[])>($i0, r1, $r9, $r8, $r7);

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r2 = $r6;

        $r10 = new com.android.org.conscrypt.OpenSSLDSAPrivateKey;

        specialinvoke $r10.<com.android.org.conscrypt.OpenSSLDSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r2);

        r3 = $r10;

        $r11 = new java.security.KeyPair;

        $r12 = new com.android.org.conscrypt.OpenSSLDSAPublicKey;

        specialinvoke $r12.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r2);

        specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, r3);

        return $r11;

     label2:
        r1 = newarray (byte)[20];

        $r5 = r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: java.security.SecureRandom random>;

        virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        goto label1;
    }

    public void initialize(int, java.security.SecureRandom)
    {
        com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator r0;
        int i0;
        java.security.SecureRandom r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.SecureRandom;

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: int primeBits> = i0;

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: java.security.SecureRandom random> = r1;

        return;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SecureRandom r2;
        java.security.spec.DSAParameterSpec r3;
        java.math.BigInteger r4, r5, r6;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r7;
        byte[] $r8, $r9, $r10;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r2 := @parameter1: java.security.SecureRandom;

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: java.security.SecureRandom random> = r2;

        $z0 = r1 instanceof java.security.spec.DSAParameterSpec;

        if $z0 == 0 goto label4;

        r3 = (java.security.spec.DSAParameterSpec) r1;

        r4 = virtualinvoke r3.<java.security.spec.DSAParameterSpec: java.math.BigInteger getG()>();

        if r4 == null goto label1;

        $r10 = virtualinvoke r4.<java.math.BigInteger: byte[] toByteArray()>();

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: byte[] g> = $r10;

     label1:
        r5 = virtualinvoke r3.<java.security.spec.DSAParameterSpec: java.math.BigInteger getP()>();

        if r5 == null goto label2;

        $r9 = virtualinvoke r5.<java.math.BigInteger: byte[] toByteArray()>();

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: byte[] p> = $r9;

     label2:
        r6 = virtualinvoke r3.<java.security.spec.DSAParameterSpec: java.math.BigInteger getQ()>();

        if r6 == null goto label3;

        $r8 = virtualinvoke r6.<java.math.BigInteger: byte[] toByteArray()>();

        r0.<com.android.org.conscrypt.OpenSSLDSAKeyPairGenerator: byte[] q> = $r8;

     label3:
        return;

     label4:
        if r1 == null goto label3;

        $r7 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Params must be DSAParameterSpec");

        throw $r7;
    }
}
