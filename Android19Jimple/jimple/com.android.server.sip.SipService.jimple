public final class com.android.server.sip.SipService extends android.net.sip.ISipService$Stub
{
    static final boolean DBG;
    private static final int DEFAULT_KEEPALIVE_INTERVAL;
    private static final int DEFAULT_MAX_KEEPALIVE_INTERVAL;
    private static final int EXPIRY_TIME;
    private static final int MIN_EXPIRY_TIME;
    private static final int SHORT_EXPIRY_TIME;
    static final java.lang.String TAG;
    private com.android.server.sip.SipService$ConnectivityReceiver mConnectivityReceiver;
    private android.content.Context mContext;
    private com.android.server.sip.SipService$MyExecutor mExecutor;
    private int mKeepAliveInterval;
    private int mLastGoodKeepAliveInterval;
    private java.lang.String mLocalIp;
    private com.android.server.sip.SipWakeLock mMyWakeLock;
    private int mNetworkType;
    private java.util.Map mPendingSessions;
    private java.util.Map mSipGroups;
    private com.android.server.sip.SipService$SipKeepAliveProcessCallback mSipKeepAliveProcessCallback;
    private boolean mSipOnWifiOnly;
    private com.android.server.sip.SipWakeupTimer mTimer;
    private android.net.wifi.WifiManager$WifiLock mWifiLock;

    private void <init>(android.content.Context)
    {
        com.android.server.sip.SipService r0;
        android.content.Context r1;
        com.android.server.sip.SipService$MyExecutor $r2, $r14;
        java.util.HashMap $r3, $r4;
        com.android.server.sip.SipService$ConnectivityReceiver $r5;
        java.lang.Object $r6, $r11;
        android.net.wifi.WifiManager $r7;
        android.net.wifi.WifiManager$WifiLock $r8, $r9;
        boolean $z0;
        com.android.server.sip.SipWakeLock $r10;
        android.os.PowerManager $r12;
        com.android.server.sip.SipWakeupTimer $r13;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.net.sip.ISipService$Stub: void <init>()>();

        r0.<com.android.server.sip.SipService: int mNetworkType> = -1;

        $r2 = new com.android.server.sip.SipService$MyExecutor;

        specialinvoke $r2.<com.android.server.sip.SipService$MyExecutor: void <init>(com.android.server.sip.SipService)>(r0);

        r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$MyExecutor mExecutor> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.sip.SipService: java.util.Map mSipGroups> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.sip.SipService: java.util.Map mPendingSessions> = $r4;

        r0.<com.android.server.sip.SipService: int mLastGoodKeepAliveInterval> = 10;

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("SipService: started!");

        r0.<com.android.server.sip.SipService: android.content.Context mContext> = r1;

        $r5 = new com.android.server.sip.SipService$ConnectivityReceiver;

        specialinvoke $r5.<com.android.server.sip.SipService$ConnectivityReceiver: void <init>(com.android.server.sip.SipService,com.android.server.sip.SipService$1)>(r0, null);

        r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$ConnectivityReceiver mConnectivityReceiver> = $r5;

        $r6 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r7 = (android.net.wifi.WifiManager) $r6;

        $r8 = virtualinvoke $r7.<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>(1, "SipService");

        r0.<com.android.server.sip.SipService: android.net.wifi.WifiManager$WifiLock mWifiLock> = $r8;

        $r9 = r0.<com.android.server.sip.SipService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        virtualinvoke $r9.<android.net.wifi.WifiManager$WifiLock: void setReferenceCounted(boolean)>(0);

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isSipWifiOnly(android.content.Context)>(r1);

        r0.<com.android.server.sip.SipService: boolean mSipOnWifiOnly> = $z0;

        $r10 = new com.android.server.sip.SipWakeLock;

        $r11 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r12 = (android.os.PowerManager) $r11;

        specialinvoke $r10.<com.android.server.sip.SipWakeLock: void <init>(android.os.PowerManager)>($r12);

        r0.<com.android.server.sip.SipService: com.android.server.sip.SipWakeLock mMyWakeLock> = $r10;

        $r13 = new com.android.server.sip.SipWakeupTimer;

        $r14 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$MyExecutor mExecutor>;

        specialinvoke $r13.<com.android.server.sip.SipWakeupTimer: void <init>(android.content.Context,java.util.concurrent.Executor)>(r1, $r14);

        r0.<com.android.server.sip.SipService: com.android.server.sip.SipWakeupTimer mTimer> = $r13;

        return;
    }

    static int access$1002(com.android.server.sip.SipService, int)
    {
        com.android.server.sip.SipService r0;
        int i0;

        r0 := @parameter0: com.android.server.sip.SipService;

        i0 := @parameter1: int;

        r0.<com.android.server.sip.SipService: int mLastGoodKeepAliveInterval> = i0;

        return i0;
    }

    static void access$1100(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;

        r0 := @parameter0: com.android.server.sip.SipService;

        specialinvoke r0.<com.android.server.sip.SipService: void onKeepAliveIntervalChanged()>();

        return;
    }

    static int access$1200(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        int $i0;

        r0 := @parameter0: com.android.server.sip.SipService;

        $i0 = specialinvoke r0.<com.android.server.sip.SipService: int getKeepAliveInterval()>();

        return $i0;
    }

    static void access$1300(com.android.server.sip.SipService, android.net.sip.SipProfile, int)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        int i0;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: android.net.sip.SipProfile;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.sip.SipService: void restartPortMappingLifetimeMeasurement(android.net.sip.SipProfile,int)>(r1, i0);

        return;
    }

    static void access$1400(com.android.server.sip.SipService, android.net.sip.SipProfile)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: android.net.sip.SipProfile;

        specialinvoke r0.<com.android.server.sip.SipService: void startPortMappingLifetimeMeasurement(android.net.sip.SipProfile)>(r1);

        return;
    }

    static java.lang.String access$1500(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        $r1 = r0.<com.android.server.sip.SipService: java.lang.String mLocalIp>;

        return $r1;
    }

    static boolean access$1600(com.android.server.sip.SipService, java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isBehindNAT(java.lang.String)>(r1);

        return $z0;
    }

    static void access$1700(com.android.server.sip.SipService, android.net.NetworkInfo)
    {
        com.android.server.sip.SipService r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.sip.SipService: void onConnectivityChanged(android.net.NetworkInfo)>(r1);

        return;
    }

    static android.os.Looper access$1800()
    {
        android.os.Looper $r0;

        $r0 = staticinvoke <com.android.server.sip.SipService: android.os.Looper createLooper()>();

        return $r0;
    }

    static void access$1900(com.android.server.sip.SipService, java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>(r1);

        return;
    }

    static com.android.server.sip.SipWakeupTimer access$200(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipWakeupTimer $r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        $r1 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipWakeupTimer mTimer>;

        return $r1;
    }

    static void access$2000(com.android.server.sip.SipService, java.lang.String, java.lang.Throwable)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

    static com.android.server.sip.SipWakeLock access$300(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipWakeLock $r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        $r1 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipWakeLock mMyWakeLock>;

        return $r1;
    }

    static int access$400(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        int $i0;

        r0 := @parameter0: com.android.server.sip.SipService;

        $i0 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        return $i0;
    }

    static boolean access$500(com.android.server.sip.SipService, com.android.server.sip.SipService$SipSessionGroupExt, com.android.server.sip.SipSessionGroup$SipSessionImpl)
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipService$SipSessionGroupExt r1;
        com.android.server.sip.SipSessionGroup$SipSessionImpl r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: com.android.server.sip.SipService$SipSessionGroupExt;

        r2 := @parameter2: com.android.server.sip.SipSessionGroup$SipSessionImpl;

        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean callingSelf(com.android.server.sip.SipService$SipSessionGroupExt,com.android.server.sip.SipSessionGroup$SipSessionImpl)>(r1, r2);

        return $z0;
    }

    static void access$600(com.android.server.sip.SipService, android.net.sip.ISipSession)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.ISipSession r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        r1 := @parameter1: android.net.sip.ISipSession;

        specialinvoke r0.<com.android.server.sip.SipService: void addPendingSession(android.net.sip.ISipSession)>(r1);

        return;
    }

    static android.content.Context access$700(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        $r1 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        return $r1;
    }

    static com.android.server.sip.SipService$MyExecutor access$800(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipService$MyExecutor $r1;

        r0 := @parameter0: com.android.server.sip.SipService;

        $r1 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$MyExecutor mExecutor>;

        return $r1;
    }

    static int access$900(com.android.server.sip.SipService)
    {
        com.android.server.sip.SipService r0;
        int $i0;

        r0 := @parameter0: com.android.server.sip.SipService;

        $i0 = r0.<com.android.server.sip.SipService: int mKeepAliveInterval>;

        return $i0;
    }

    static int access$902(com.android.server.sip.SipService, int)
    {
        com.android.server.sip.SipService r0;
        int i0;

        r0 := @parameter0: com.android.server.sip.SipService;

        i0 := @parameter1: int;

        r0.<com.android.server.sip.SipService: int mKeepAliveInterval> = i0;

        return i0;
    }

    private void addPendingSession(android.net.sip.ISipSession)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.ISipSession r1;
        java.lang.Throwable r2, $r13;
        android.os.RemoteException r3, $r12;
        java.util.Map $r4, $r9;
        java.lang.String $r5, $r11;
        java.lang.StringBuilder $r7, $r8, $r10;
        int $i0;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.ISipSession;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.sip.SipService: void cleanUpPendingSessions()>();

        $r4 = r0.<com.android.server.sip.SipService: java.util.Map mPendingSessions>;

        $r5 = interfaceinvoke r1.<android.net.sip.ISipSession: java.lang.String getCallId()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#pending sess=");

        $r9 = r0.<com.android.server.sip.SipService: java.util.Map mPendingSessions>;

        $i0 = interfaceinvoke $r9.<java.util.Map: int size()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r11);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r12 := @caughtexception;

        r3 = $r12;

     label4:
        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>("addPendingSession()", r3);

     label5:
        goto label2;

     label6:
        $r13 := @caughtexception;

        r2 = $r13;

        exitmonitor r0;

        throw r2;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private boolean callingSelf(com.android.server.sip.SipService$SipSessionGroupExt, com.android.server.sip.SipSessionGroup$SipSessionImpl)
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipService$SipSessionGroupExt r1, r6;
        com.android.server.sip.SipSessionGroup$SipSessionImpl r2;
        java.lang.Throwable r3, $r19;
        java.lang.String r4, $r14, $r18, $r20;
        java.util.Iterator r5;
        boolean z0, $z1, $z2;
        java.util.Map $r7;
        java.util.Collection $r8;
        java.lang.Object $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r16, $r17;
        android.net.sip.SipProfile $r11, $r15;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: com.android.server.sip.SipService$SipSessionGroupExt;

        r2 := @parameter1: com.android.server.sip.SipSessionGroup$SipSessionImpl;

        entermonitor r0;

     label1:
        r4 = virtualinvoke r2.<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getCallId()>();

        $r7 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.android.server.sip.SipService$SipSessionGroupExt) $r9;

     label3:
        if r6 == r1 goto label2;

     label4:
        $z2 = virtualinvoke r6.<com.android.server.sip.SipService$SipSessionGroupExt: boolean containsSession(java.lang.String)>(r4);

        if $z2 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("call self: ");

        $r11 = virtualinvoke r2.<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getLocalProfile()>();

        $r14 = virtualinvoke $r11.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r15 = virtualinvoke r6.<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()>();

        $r18 = virtualinvoke $r15.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r20);

     label5:
        z0 = 1;

     label6:
        exitmonitor r0;

        return z0;

     label7:
        z0 = 0;

        goto label6;

     label8:
        $r19 := @caughtexception;

        r3 = $r19;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
    }

    private void cleanUpPendingSessions() throws android.os.RemoteException
    {
        com.android.server.sip.SipService r0;
        java.util.Map$Entry[] r1, $r6;
        int i0, i1, $i2, $i3;
        java.util.Map$Entry r2;
        java.util.Map $r3, $r5, $r10;
        java.util.Set $r4;
        java.lang.Object[] $r7;
        java.lang.Object $r8, $r11;
        android.net.sip.ISipSession $r9;

        r0 := @this: com.android.server.sip.SipService;

        $r3 = r0.<com.android.server.sip.SipService: java.util.Map mPendingSessions>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = r0.<com.android.server.sip.SipService: java.util.Map mPendingSessions>;

        $i2 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = newarray (java.util.Map$Entry)[$i2];

        $r7 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r1 = (java.util.Map$Entry[]) $r7;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (android.net.sip.ISipSession) $r8;

        $i3 = interfaceinvoke $r9.<android.net.sip.ISipSession: int getState()>();

        if $i3 == 3 goto label2;

        $r10 = r0.<com.android.server.sip.SipService: java.util.Map mPendingSessions>;

        $r11 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile) throws javax.sip.SipException
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        java.lang.String r2;
        com.android.server.sip.SipService$SipSessionGroupExt r3, $r7;
        java.util.Map $r4, $r8;
        java.lang.Object $r5;
        boolean $z0;
        javax.sip.SipException $r6;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r4 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.sip.SipService$SipSessionGroupExt) $r5;

        if r3 != null goto label2;

        $r7 = new com.android.server.sip.SipService$SipSessionGroupExt;

        specialinvoke $r7.<com.android.server.sip.SipService$SipSessionGroupExt: void <init>(com.android.server.sip.SipService,android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>(r0, r1, null, null);

        r3 = $r7;

        $r8 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        specialinvoke r0.<com.android.server.sip.SipService: void notifyProfileAdded(android.net.sip.SipProfile)>(r1);

     label1:
        return r3;

     label2:
        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)>(r3);

        if $z0 != 0 goto label1;

        $r6 = new javax.sip.SipException;

        specialinvoke $r6.<javax.sip.SipException: void <init>(java.lang.String)>("only creator can access the profile");

        throw $r6;
    }

    private com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile, android.app.PendingIntent, android.net.sip.ISipSessionListener) throws javax.sip.SipException
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        android.app.PendingIntent r2;
        android.net.sip.ISipSessionListener r3;
        java.lang.String r4;
        com.android.server.sip.SipService$SipSessionGroupExt r5, r6, $r9;
        java.util.Map $r7, $r10;
        java.lang.Object $r8;
        boolean $z0;
        javax.sip.SipException $r12;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: android.net.sip.ISipSessionListener;

        r4 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r7 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.sip.SipService$SipSessionGroupExt) $r8;

        if r5 == null goto label2;

        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)>(r5);

        if $z0 != 0 goto label1;

        $r12 = new javax.sip.SipException;

        specialinvoke $r12.<javax.sip.SipException: void <init>(java.lang.String)>("only creator can access the profile");

        throw $r12;

     label1:
        virtualinvoke r5.<com.android.server.sip.SipService$SipSessionGroupExt: void setIncomingCallPendingIntent(android.app.PendingIntent)>(r2);

        virtualinvoke r5.<com.android.server.sip.SipService$SipSessionGroupExt: void setListener(android.net.sip.ISipSessionListener)>(r3);

        return r5;

     label2:
        $r9 = new com.android.server.sip.SipService$SipSessionGroupExt;

        specialinvoke $r9.<com.android.server.sip.SipService$SipSessionGroupExt: void <init>(com.android.server.sip.SipService,android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>(r0, r1, r2, r3);

        r6 = $r9;

        $r10 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r6);

        specialinvoke r0.<com.android.server.sip.SipService: void notifyProfileAdded(android.net.sip.SipProfile)>(r1);

        return r6;
    }

    private static android.os.Looper createLooper()
    {
        android.os.HandlerThread r0, $r1;
        android.os.Looper $r2;

        $r1 = new android.os.HandlerThread;

        specialinvoke $r1.<android.os.HandlerThread: void <init>(java.lang.String)>("SipService.Executor");

        r0 = $r1;

        virtualinvoke r0.<android.os.HandlerThread: void start()>();

        $r2 = virtualinvoke r0.<android.os.HandlerThread: android.os.Looper getLooper()>();

        return $r2;
    }

    private java.lang.String determineLocalIp()
    {
        com.android.server.sip.SipService r0;
        java.net.DatagramSocket r1, $r4;
        java.io.IOException r2, $r7;
        java.lang.String r3;
        java.net.InetAddress $r5, $r6;

        r0 := @this: com.android.server.sip.SipService;

     label1:
        $r4 = new java.net.DatagramSocket;

        specialinvoke $r4.<java.net.DatagramSocket: void <init>()>();

        r1 = $r4;

        $r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("192.168.1.1");

        virtualinvoke r1.<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>($r5, 80);

        $r6 = virtualinvoke r1.<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>();

        r3 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label2:
        return r3;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>("determineLocalIp()", r2);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private int getKeepAliveInterval()
    {
        com.android.server.sip.SipService r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.sip.SipService;

        $i0 = r0.<com.android.server.sip.SipService: int mKeepAliveInterval>;

        if $i0 >= 0 goto label1;

        $i2 = r0.<com.android.server.sip.SipService: int mLastGoodKeepAliveInterval>;

        return $i2;

     label1:
        $i1 = r0.<com.android.server.sip.SipService: int mKeepAliveInterval>;

        return $i1;
    }

    private boolean isBehindNAT(java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1, $r8;
        java.net.UnknownHostException r2, $r5;
        byte[] r3;
        byte b0, $b1, $b2, $b4, $b7;
        java.net.InetAddress $r4;
        short $s3, $s5, $s6, $s8;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        r3 = virtualinvoke $r4.<java.net.InetAddress: byte[] getAddress()>();

        $b1 = r3[0];

        if $b1 == 10 goto label4;

        $b2 = r3[0];

        $s3 = 255 & $b2;

        if $s3 != 172 goto label2;

        $b7 = r3[1];

        $s8 = 240 & $b7;

        if $s8 == 16 goto label4;

     label2:
        $b4 = r3[0];

        $s5 = 255 & $b4;

        if $s5 != 192 goto label6;

        b0 = r3[1];

     label3:
        $s6 = b0 & 255;

        if $s6 != 168 goto label6;

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isBehindAT()");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>($r8, r2);

     label6:
        return 0;

        catch java.net.UnknownHostException from label1 to label2 with label5;
        catch java.net.UnknownHostException from label2 to label3 with label5;
    }

    private boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipService$SipSessionGroupExt r1;
        android.net.sip.SipProfile $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: com.android.server.sip.SipService$SipSessionGroupExt;

        $r2 = virtualinvoke r1.<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()>();

        $i0 = virtualinvoke $r2.<android.net.sip.SipProfile: int getCallingUid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isCallerCreatorOrRadio(com.android.server.sip.SipService$SipSessionGroupExt)
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipService$SipSessionGroupExt r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: com.android.server.sip.SipService$SipSessionGroupExt;

        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerRadio()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isCallerRadio()
    {
        com.android.server.sip.SipService r0;
        int $i0;

        r0 := @this: com.android.server.sip.SipService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1001 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void log(java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SipService", r1);

        return;
    }

    private void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SipService", r1, r2);

        return;
    }

    private void notifyProfileAdded(android.net.sip.SipProfile)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        android.content.Intent r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6, $r8;
        android.content.Context $r10;
        java.util.Map $r11;
        int $i0;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notify: profile added: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r6);

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("com.android.phone.SIP_ADD_PHONE");

        r2 = $r7;

        $r8 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android:localSipUri", $r8);

        $r10 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void sendBroadcast(android.content.Intent)>(r2);

        $r11 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $i0 = interfaceinvoke $r11.<java.util.Map: int size()>();

        if $i0 != 1 goto label1;

        specialinvoke r0.<com.android.server.sip.SipService: void registerReceivers()>();

     label1:
        return;
    }

    private void notifyProfileRemoved(android.net.sip.SipProfile)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        android.content.Intent r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6, $r8;
        android.content.Context $r10;
        java.util.Map $r11;
        int $i0;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notify: profile removed: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r6);

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("com.android.phone.SIP_REMOVE_PHONE");

        r2 = $r7;

        $r8 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android:localSipUri", $r8);

        $r10 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void sendBroadcast(android.content.Intent)>(r2);

        $r11 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $i0 = interfaceinvoke $r11.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<com.android.server.sip.SipService: void unregisterReceivers()>();

     label1:
        return;
    }

    private void onConnectivityChanged(android.net.NetworkInfo)
    {
        com.android.server.sip.SipService r0;
        android.net.NetworkInfo r1;
        java.lang.Throwable r2, $r25;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        javax.sip.SipException r3, $r24;
        java.util.Iterator r4, r5;
        android.content.Context $r6;
        java.lang.Object $r7, $r18, $r21;
        android.net.ConnectivityManager $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14, $r16;
        java.util.Map $r15, $r19;
        java.util.Collection $r17, $r22;
        com.android.server.sip.SipService$SipSessionGroupExt $r20, $r23;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.NetworkInfo;

        entermonitor r0;

        if r1 == null goto label02;

     label01:
        $z3 = virtualinvoke r1.<android.net.NetworkInfo: boolean isConnected()>();

        if $z3 != 0 goto label02;

        $i5 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $i6 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        if $i5 == $i6 goto label03;

     label02:
        $r6 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r8 = (android.net.ConnectivityManager) $r7;

        r1 = virtualinvoke $r8.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

     label03:
        if r1 == null goto label10;

     label04:
        $z4 = virtualinvoke r1.<android.net.NetworkInfo: boolean isConnected()>();

        if $z4 == 0 goto label10;

        i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

     label05:
        $z0 = r0.<com.android.server.sip.SipService: boolean mSipOnWifiOnly>;

        if $z0 == 0 goto label07;

     label06:
        if i0 == 1 goto label07;

        i0 = -1;

     label07:
        i1 = r0.<com.android.server.sip.SipService: int mNetworkType>;

     label08:
        if i1 != i0 goto label11;

     label09:
        exitmonitor r0;

        return;

     label10:
        i0 = -1;

        goto label05;

     label11:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onConnectivityChanged: ");

        $i2 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r14);

     label12:
        $i3 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        if $i3 == -1 goto label19;

        r0.<com.android.server.sip.SipService: java.lang.String mLocalIp> = null;

        specialinvoke r0.<com.android.server.sip.SipService: void stopPortMappingMeasurement()>();

        $r19 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r22 = interfaceinvoke $r19.<java.util.Map: java.util.Collection values()>();

        r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label19;

        $r21 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (com.android.server.sip.SipService$SipSessionGroupExt) $r21;

        virtualinvoke $r23.<com.android.server.sip.SipService$SipSessionGroupExt: void onConnectivityChanged(boolean)>(0);

     label14:
        goto label13;

     label15:
        $r24 := @caughtexception;

        r3 = $r24;

     label16:
        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>("onConnectivityChanged()", r3);

     label17:
        goto label09;

     label18:
        $r25 := @caughtexception;

        r2 = $r25;

        exitmonitor r0;

        throw r2;

     label19:
        r0.<com.android.server.sip.SipService: int mNetworkType> = i0;

        $i4 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        if $i4 == -1 goto label22;

        $r16 = specialinvoke r0.<com.android.server.sip.SipService: java.lang.String determineLocalIp()>();

        r0.<com.android.server.sip.SipService: java.lang.String mLocalIp> = $r16;

        r0.<com.android.server.sip.SipService: int mKeepAliveInterval> = -1;

        r0.<com.android.server.sip.SipService: int mLastGoodKeepAliveInterval> = 10;

        $r15 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r17 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label20:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label22;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (com.android.server.sip.SipService$SipSessionGroupExt) $r18;

        virtualinvoke $r20.<com.android.server.sip.SipService$SipSessionGroupExt: void onConnectivityChanged(boolean)>(1);

     label21:
        goto label20;

     label22:
        specialinvoke r0.<com.android.server.sip.SipService: void updateWakeLocks()>();

     label23:
        goto label09;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch javax.sip.SipException from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch javax.sip.SipException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch javax.sip.SipException from label19 to label20 with label15;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch javax.sip.SipException from label20 to label21 with label15;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch javax.sip.SipException from label22 to label23 with label15;
        catch java.lang.Throwable from label22 to label23 with label18;
    }

    private void onKeepAliveIntervalChanged()
    {
        com.android.server.sip.SipService r0;
        java.lang.Throwable r1, $r7;
        java.util.Iterator r2;
        java.util.Map $r3;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.android.server.sip.SipService$SipSessionGroupExt $r6;

        r0 := @this: com.android.server.sip.SipService;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.sip.SipService$SipSessionGroupExt) $r5;

        virtualinvoke $r6.<com.android.server.sip.SipService$SipSessionGroupExt: void onKeepAliveIntervalChanged()>();

     label3:
        goto label2;

     label4:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void registerReceivers()
    {
        com.android.server.sip.SipService r0;
        android.content.IntentFilter $r1;
        android.content.Context $r2;
        com.android.server.sip.SipService$ConnectivityReceiver $r3;

        r0 := @this: com.android.server.sip.SipService;

        $r2 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$ConnectivityReceiver mConnectivityReceiver>;

        $r1 = new android.content.IntentFilter;

        specialinvoke $r1.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        virtualinvoke $r2.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r3, $r1);

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("registerReceivers:");

        return;
    }

    private void restartPortMappingLifetimeMeasurement(android.net.sip.SipProfile, int)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        int i0;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.sip.SipService: void stopPortMappingMeasurement()>();

        r0.<com.android.server.sip.SipService: int mKeepAliveInterval> = -1;

        specialinvoke r0.<com.android.server.sip.SipService: void startPortMappingLifetimeMeasurement(android.net.sip.SipProfile,int)>(r1, i0);

        return;
    }

    private static void slog(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SipService", r0);

        return;
    }

    public static void start(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0;
        com.android.server.sip.SipService $r1;
        android.content.Intent $r2;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isApiSupported(android.content.Context)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new com.android.server.sip.SipService;

        specialinvoke $r1.<com.android.server.sip.SipService: void <init>(android.content.Context)>(r0);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("sip", $r1);

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.net.sip.SIP_SERVICE_UP");

        virtualinvoke r0.<android.content.Context: void sendBroadcast(android.content.Intent)>($r2);

        staticinvoke <com.android.server.sip.SipService: void slog(java.lang.String)>("start:");

     label1:
        return;
    }

    private void startPortMappingLifetimeMeasurement(android.net.sip.SipProfile)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        specialinvoke r0.<com.android.server.sip.SipService: void startPortMappingLifetimeMeasurement(android.net.sip.SipProfile,int)>(r1, 120);

        return;
    }

    private void startPortMappingLifetimeMeasurement(android.net.sip.SipProfile, int)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        int i0, i1, $i2;
        com.android.server.sip.SipService$SipKeepAliveProcessCallback $r2, $r9, $r10;
        java.lang.String $r3, $r6, $r8, $r14;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r7, $r11, $r12, $r13;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipKeepAliveProcessCallback mSipKeepAliveProcessCallback>;

        if $r2 != null goto label2;

        $i2 = r0.<com.android.server.sip.SipService: int mKeepAliveInterval>;

        if $i2 != -1 goto label2;

        $r3 = r0.<com.android.server.sip.SipService: java.lang.String mLocalIp>;

        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isBehindNAT(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startPortMappingLifetimeMeasurement: profile=");

        $r6 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r8);

        i1 = r0.<com.android.server.sip.SipService: int mLastGoodKeepAliveInterval>;

        if i1 < i0 goto label1;

        i1 = 10;

        r0.<com.android.server.sip.SipService: int mLastGoodKeepAliveInterval> = 10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  reset min interval to ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(10);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r14);

     label1:
        $r9 = new com.android.server.sip.SipService$SipKeepAliveProcessCallback;

        specialinvoke $r9.<com.android.server.sip.SipService$SipKeepAliveProcessCallback: void <init>(com.android.server.sip.SipService,android.net.sip.SipProfile,int,int)>(r0, r1, i1, i0);

        r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipKeepAliveProcessCallback mSipKeepAliveProcessCallback> = $r9;

        $r10 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipKeepAliveProcessCallback mSipKeepAliveProcessCallback>;

        virtualinvoke $r10.<com.android.server.sip.SipService$SipKeepAliveProcessCallback: void start()>();

     label2:
        return;
    }

    private void stopPortMappingMeasurement()
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipService$SipKeepAliveProcessCallback $r1, $r2;

        r0 := @this: com.android.server.sip.SipService;

        $r1 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipKeepAliveProcessCallback mSipKeepAliveProcessCallback>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipKeepAliveProcessCallback mSipKeepAliveProcessCallback>;

        virtualinvoke $r2.<com.android.server.sip.SipService$SipKeepAliveProcessCallback: void stop()>();

        r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipKeepAliveProcessCallback mSipKeepAliveProcessCallback> = null;

     label1:
        return;
    }

    private void unregisterReceivers()
    {
        com.android.server.sip.SipService r0;
        com.android.server.sip.SipService$ConnectivityReceiver $r1;
        android.content.Context $r2;
        android.net.wifi.WifiManager$WifiLock $r3;

        r0 := @this: com.android.server.sip.SipService;

        $r2 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        $r1 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$ConnectivityReceiver mConnectivityReceiver>;

        virtualinvoke $r2.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("unregisterReceivers:");

        $r3 = r0.<com.android.server.sip.SipService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        virtualinvoke $r3.<android.net.wifi.WifiManager$WifiLock: void release()>();

        r0.<com.android.server.sip.SipService: int mNetworkType> = -1;

        return;
    }

    private void updateWakeLocks()
    {
        com.android.server.sip.SipService r0;
        java.util.Iterator r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        boolean $z0, $z1;
        android.net.wifi.WifiManager$WifiLock $r4, $r8, $r9;
        com.android.server.sip.SipWakeLock $r5;
        java.lang.Object $r6;
        com.android.server.sip.SipService$SipSessionGroupExt $r7;
        int $i0, $i1;

        r0 := @this: com.android.server.sip.SipService;

        $r2 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.sip.SipService$SipSessionGroupExt) $r6;

        $z1 = virtualinvoke $r7.<com.android.server.sip.SipService$SipSessionGroupExt: boolean isOpenedToReceiveCalls()>();

        if $z1 == 0 goto label1;

        $i0 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        if $i0 == 1 goto label2;

        $i1 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        if $i1 != -1 goto label3;

     label2:
        $r8 = r0.<com.android.server.sip.SipService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        virtualinvoke $r8.<android.net.wifi.WifiManager$WifiLock: void acquire()>();

        return;

     label3:
        $r9 = r0.<com.android.server.sip.SipService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        virtualinvoke $r9.<android.net.wifi.WifiManager$WifiLock: void release()>();

        return;

     label4:
        $r4 = r0.<com.android.server.sip.SipService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        virtualinvoke $r4.<android.net.wifi.WifiManager$WifiLock: void release()>();

        $r5 = r0.<com.android.server.sip.SipService: com.android.server.sip.SipWakeLock mMyWakeLock>;

        virtualinvoke $r5.<com.android.server.sip.SipWakeLock: void reset()>();

        return;
    }

    public void close(java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r11;
        com.android.server.sip.SipService$SipSessionGroupExt r3, r4;
        android.content.Context $r5;
        java.util.Map $r6, $r8;
        java.lang.Object $r7, $r9;
        boolean $z0;
        android.net.sip.SipProfile $r10;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r5 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        $r6 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.sip.SipService$SipSessionGroupExt) $r7;

     label2:
        if r3 != null goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreatorOrRadio(com.android.server.sip.SipService$SipSessionGroupExt)>(r3);

        if $z0 != 0 goto label7;

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("only creator or radio can close this profile");

     label5:
        goto label3;

     label6:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r0;

        throw r2;

     label7:
        $r8 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (com.android.server.sip.SipService$SipSessionGroupExt) $r9;

        $r10 = virtualinvoke r4.<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()>();

        specialinvoke r0.<com.android.server.sip.SipService: void notifyProfileRemoved(android.net.sip.SipProfile)>($r10);

        virtualinvoke r4.<com.android.server.sip.SipService$SipSessionGroupExt: void close()>();

        specialinvoke r0.<com.android.server.sip.SipService: void updateWakeLocks()>();

     label8:
        goto label3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.net.sip.ISipSession createSession(android.net.sip.SipProfile, android.net.sip.ISipSessionListener)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        android.net.sip.ISipSessionListener r2;
        android.net.sip.ISipSession r3, r6;
        java.lang.Throwable r4, $r13;
        javax.sip.SipException r5, $r14;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        android.content.Context $r11;
        int $i0, $i1;
        com.android.server.sip.SipService$SipSessionGroupExt $r12;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.net.sip.ISipSessionListener;

        r3 = null;

        entermonitor r0;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createSession: profile");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r10);

        $r11 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r1.<android.net.sip.SipProfile: void setCallingUid(int)>($i0);

        $i1 = r0.<com.android.server.sip.SipService: int mNetworkType>;

        if $i1 != -1 goto label3;

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("createSession: mNetworkType==-1 ret=null");

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r12 = specialinvoke r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)>(r1);

        r6 = virtualinvoke $r12.<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.ISipSession createSession(android.net.sip.ISipSessionListener)>(r2);

     label4:
        r3 = r6;

        goto label2;

     label5:
        $r14 := @caughtexception;

        r5 = $r14;

     label6:
        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>("createSession;", r5);

     label7:
        r3 = null;

        goto label2;

     label8:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r0;

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch javax.sip.SipException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public android.net.sip.SipProfile[] getListOfProfiles()
    {
        com.android.server.sip.SipService r0;
        java.lang.Throwable r1, $r14;
        boolean z0, $z1, $z3;
        java.util.ArrayList r2, $r7;
        java.util.Iterator r3;
        android.net.sip.SipProfile[] r4, $r11;
        com.android.server.sip.SipService$SipSessionGroupExt r5;
        android.content.Context $r6;
        java.util.Map $r8;
        java.util.Collection $r9;
        int $i0;
        java.lang.Object[] $r10;
        java.lang.Object $r12;
        android.net.sip.SipProfile $r13;

        r0 := @this: com.android.server.sip.SipService;

        entermonitor r0;

     label1:
        $r6 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerRadio()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

        $r8 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.sip.SipService$SipSessionGroupExt) $r12;

     label3:
        if z0 != 0 goto label5;

     label4:
        $z3 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)>(r5);

        if $z3 == 0 goto label2;

     label5:
        $r13 = virtualinvoke r5.<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label6:
        goto label2;

     label7:
        $r14 := @caughtexception;

        r1 = $r14;

        exitmonitor r0;

        throw r1;

     label8:
        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r11 = newarray (android.net.sip.SipProfile)[$i0];

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        r4 = (android.net.sip.SipProfile[]) $r10;

     label9:
        exitmonitor r0;

        return r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.net.sip.ISipSession getPendingSession(java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r7;
        android.net.sip.ISipSession r3;
        android.content.Context $r4;
        java.util.Map $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

     label2:
        r3 = null;

        if r1 != null goto label4;

     label3:
        exitmonitor r0;

        return r3;

     label4:
        $r5 = r0.<com.android.server.sip.SipService: java.util.Map mPendingSessions>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.net.sip.ISipSession) $r6;

     label5:
        goto label3;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public boolean isOpened(java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r7;
        com.android.server.sip.SipService$SipSessionGroupExt r3;
        boolean z0, $z1;
        android.content.Context $r4;
        java.util.Map $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        $r5 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.sip.SipService$SipSessionGroupExt) $r6;

     label2:
        z0 = 0;

        if r3 != null goto label4;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        $z1 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreatorOrRadio(com.android.server.sip.SipService$SipSessionGroupExt)>(r3);

        if $z1 == 0 goto label6;

     label5:
        z0 = 1;

        goto label3;

     label6:
        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("only creator or radio can query on the profile");

     label7:
        z0 = 0;

        goto label3;

     label8:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public boolean isRegistered(java.lang.String)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r7;
        com.android.server.sip.SipService$SipSessionGroupExt r3;
        boolean z0, $z1;
        android.content.Context $r4;
        java.util.Map $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        $r5 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.sip.SipService$SipSessionGroupExt) $r6;

     label2:
        z0 = 0;

        if r3 != null goto label4;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        $z1 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreatorOrRadio(com.android.server.sip.SipService$SipSessionGroupExt)>(r3);

        if $z1 == 0 goto label6;

        z0 = virtualinvoke r3.<com.android.server.sip.SipService$SipSessionGroupExt: boolean isRegistered()>();

     label5:
        goto label3;

     label6:
        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("only creator or radio can query on the profile");

     label7:
        z0 = 0;

        goto label3;

     label8:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void open(android.net.sip.SipProfile)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        java.lang.Throwable r2, $r6;
        javax.sip.SipException r3, $r7;
        android.content.Context $r4;
        int $i0;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r1.<android.net.sip.SipProfile: void setCallingUid(int)>($i0);

     label2:
        specialinvoke r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)>(r1);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

     label5:
        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>("openToMakeCalls()", r3);

     label6:
        goto label3;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch javax.sip.SipException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void open3(android.net.sip.SipProfile, android.app.PendingIntent, android.net.sip.ISipSessionListener)
    {
        com.android.server.sip.SipService r0;
        android.net.sip.SipProfile r1;
        android.app.PendingIntent r2;
        android.net.sip.ISipSessionListener r3;
        java.lang.Throwable r4, $r17;
        javax.sip.SipException r5, $r18;
        com.android.server.sip.SipService$SipSessionGroupExt r6;
        android.content.Context $r7;
        int $i0;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r10, $r16;
        boolean $z0;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: android.net.sip.ISipSessionListener;

        entermonitor r0;

     label01:
        $r7 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r1.<android.net.sip.SipProfile: void setCallingUid(int)>($i0);

     label02:
        if r2 != null goto label05;

     label03:
        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("open3: incomingCallPendingIntent cannot be null; the profile is not opened");

     label04:
        exitmonitor r0;

        return;

     label05:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("open3: ");

        $r10 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>($r16);

     label06:
        r6 = specialinvoke r0.<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>(r1, r2, r3);

        $z0 = virtualinvoke r1.<android.net.sip.SipProfile: boolean getAutoRegistration()>();

        if $z0 == 0 goto label04;

        virtualinvoke r6.<com.android.server.sip.SipService$SipSessionGroupExt: void openToReceiveCalls()>();

        specialinvoke r0.<com.android.server.sip.SipService: void updateWakeLocks()>();

     label07:
        goto label04;

     label08:
        $r18 := @caughtexception;

        r5 = $r18;

     label09:
        specialinvoke r0.<com.android.server.sip.SipService: void loge(java.lang.String,java.lang.Throwable)>("open3:", r5);

     label10:
        goto label04;

     label11:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r0;

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch javax.sip.SipException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void setRegistrationListener(java.lang.String, android.net.sip.ISipSessionListener)
    {
        com.android.server.sip.SipService r0;
        java.lang.String r1;
        android.net.sip.ISipSessionListener r2;
        java.lang.Throwable r3, $r8;
        com.android.server.sip.SipService$SipSessionGroupExt r4;
        android.content.Context $r5;
        java.util.Map $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.sip.SipService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.sip.ISipSessionListener;

        entermonitor r0;

     label1:
        $r5 = r0.<com.android.server.sip.SipService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.USE_SIP", null);

        $r6 = r0.<com.android.server.sip.SipService: java.util.Map mSipGroups>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.sip.SipService$SipSessionGroupExt) $r7;

     label2:
        if r4 != null goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        $z0 = specialinvoke r0.<com.android.server.sip.SipService: boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)>(r4);

        if $z0 == 0 goto label7;

        virtualinvoke r4.<com.android.server.sip.SipService$SipSessionGroupExt: void setListener(android.net.sip.ISipSessionListener)>(r2);

     label5:
        goto label3;

     label6:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r0;

        throw r3;

     label7:
        specialinvoke r0.<com.android.server.sip.SipService: void log(java.lang.String)>("only creator can set listener on the profile");

     label8:
        goto label3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <com.android.server.sip.SipService: java.lang.String TAG> = "SipService";

        <com.android.server.sip.SipService: int SHORT_EXPIRY_TIME> = 10;

        <com.android.server.sip.SipService: int MIN_EXPIRY_TIME> = 60;

        <com.android.server.sip.SipService: int EXPIRY_TIME> = 3600;

        <com.android.server.sip.SipService: int DEFAULT_MAX_KEEPALIVE_INTERVAL> = 120;

        <com.android.server.sip.SipService: int DEFAULT_KEEPALIVE_INTERVAL> = 10;

        <com.android.server.sip.SipService: boolean DBG> = 1;

        return;
    }
}
