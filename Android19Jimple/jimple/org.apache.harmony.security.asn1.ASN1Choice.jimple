public abstract class org.apache.harmony.security.asn1.ASN1Choice extends org.apache.harmony.security.asn1.ASN1Type
{
    private final int[][] identifiers;
    public final org.apache.harmony.security.asn1.ASN1Type[] type;

    public void <init>(org.apache.harmony.security.asn1.ASN1Type[])
    {
        org.apache.harmony.security.asn1.ASN1Choice r0, $r24;
        org.apache.harmony.security.asn1.ASN1Type[] r1;
        java.util.TreeMap r2, $r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r3, $r10, $r18, $r19, $r23, $r27;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.math.BigInteger r6, $r21;
        org.apache.harmony.security.asn1.ASN1Type r7;
        int[][] r8, $r14, $r16, $r20;
        java.lang.Object $r11, $r15, $r17, $r22;
        java.lang.Class $r12, $r30, $r39;
        java.util.Set $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r25, $r34;
        java.lang.StringBuilder $r26, $r28, $r31, $r32, $r33, $r37;
        java.lang.String $r29, $r35, $r36, $r38;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1Type[];

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Type: void <init>(int)>(0);

        $i4 = lengthof r1;

        if $i4 != 0 goto label01;

        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 choice type MUST have at least one alternative: ");

        $r39 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r38 = virtualinvoke $r39.<java.lang.Class: java.lang.String getName()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r34;

     label01:
        $r9 = new java.util.TreeMap;

        specialinvoke $r9.<java.util.TreeMap: void <init>()>();

        r2 = $r9;

        i0 = 0;

     label02:
        $i5 = lengthof r1;

        if i0 >= $i5 goto label08;

        r7 = r1[i0];

        $z1 = r7 instanceof org.apache.harmony.security.asn1.ASN1Any;

        if $z1 == 0 goto label03;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 choice type MUST have alternatives with distinct tags: ");

        $r30 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r35 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r25;

     label03:
        $z0 = r7 instanceof org.apache.harmony.security.asn1.ASN1Choice;

        if $z0 == 0 goto label05;

        $r24 = (org.apache.harmony.security.asn1.ASN1Choice) r7;

        r8 = $r24.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        i3 = 0;

     label04:
        $r23 = r8[0];

        $i11 = lengthof $r23;

        if i3 >= $i11 goto label07;

        $r27 = r8[0];

        $i13 = $r27[i3];

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>(r2, $i13, i0);

        i3 = i3 + 1;

        goto label04;

     label05:
        $i7 = r7.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $z3 = virtualinvoke r7.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i7);

        if $z3 == 0 goto label06;

        $i12 = r7.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>(r2, $i12, i0);

     label06:
        $i10 = r7.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $z2 = virtualinvoke r7.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i10);

        if $z2 == 0 goto label07;

        $i9 = r7.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>(r2, $i9, i0);

     label07:
        i0 = i0 + 1;

        goto label02;

     label08:
        i1 = virtualinvoke r2.<java.util.TreeMap: int size()>();

        $r10 = newarray (int)[2];

        $r10[0] = 2;

        $r10[1] = i1;

        r3 = $r10;

        $r12 = <java.lang.Integer: java.lang.Class TYPE>;

        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r12, r3);

        $r14 = (int[][]) $r11;

        r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers> = $r14;

        $r13 = virtualinvoke r2.<java.util.TreeMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

        i2 = 0;

     label09:
        if i2 >= i1 goto label10;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r15;

        $r17 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.math.BigInteger) $r17;

        $r16 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r18 = $r16[0];

        $i6 = virtualinvoke r6.<java.math.BigInteger: int intValue()>();

        $r18[i2] = $i6;

        $r20 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r19 = $r20[1];

        $r22 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (java.math.BigInteger) $r22;

        $i8 = virtualinvoke $r21.<java.math.BigInteger: int intValue()>();

        $r19[i2] = $i8;

        i2 = i2 + 1;

        goto label09;

     label10:
        r0.<org.apache.harmony.security.asn1.ASN1Choice: org.apache.harmony.security.asn1.ASN1Type[] type> = r1;

        return;
    }

    private void addIdentifier(java.util.TreeMap, int, int)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        java.util.TreeMap r1;
        int i0, i1;
        long $l2, $l3;
        java.math.BigInteger $r2, $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.lang.Class $r8;
        java.lang.String $r9, $r11;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: java.util.TreeMap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = (long) i0;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $l3 = (long) i1;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $r4 = virtualinvoke r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $r4 == null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 choice type MUST have alternatives with distinct tags: ");

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        return;
    }

    public final boolean checkTag(int)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        int i0, i1;
        boolean z0;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r2 = $r1[0];

        i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, i0);

        z0 = 0;

        if i1 < 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerInputStream r1;
        int i0, i1, $i2;
        int[][] $r2, $r4;
        int[] $r3, $r5;
        org.apache.harmony.security.asn1.ASN1Type[] $r6;
        org.apache.harmony.security.asn1.ASN1Type $r7;
        java.lang.Object $r8, $r9;
        boolean $z0;
        org.apache.harmony.security.asn1.ASN1Exception $r10;
        java.lang.StringBuilder $r11, $r12, $r16;
        java.lang.String $r13, $r15;
        java.lang.Class $r14;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerInputStream;

        $r2 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r3 = $r2[0];

        $i2 = r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        i0 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r3, $i2);

        if i0 >= 0 goto label1;

        $r10 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode ASN.1 choice type.  No alternatives were found for ");

        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r15);

        throw $r10;

     label1:
        $r4 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r5 = $r4[1];

        i1 = $r5[i0];

        $r6 = r0.<org.apache.harmony.security.asn1.ASN1Choice: org.apache.harmony.security.asn1.ASN1Type[] type>;

        $r7 = $r6[i1];

        $r8 = virtualinvoke $r7.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r1);

        r1.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = $r8;

        r1.<org.apache.harmony.security.asn1.BerInputStream: int choiceIndex> = i1;

        $z0 = r1.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r9 = virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)>(r1);

        return $r9;
    }

    public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)>(r1);

        return;
    }

    public final void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeChoice(org.apache.harmony.security.asn1.ASN1Choice)>(r0);

        return;
    }

    public abstract int getIndex(java.lang.Object);

    public abstract java.lang.Object getObjectToEncode(java.lang.Object);

    public final void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerOutputStream: void getChoiceLength(org.apache.harmony.security.asn1.ASN1Choice)>(r0);

        return;
    }
}
