final class java.util.logging.Logger$1 extends java.lang.Object implements dalvik.system.DalvikLogHandler
{

    void <init>()
    {
        java.util.logging.Logger$1 r0;

        r0 := @this: java.util.logging.Logger$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void publish(java.util.logging.Logger, java.lang.String, java.util.logging.Level, java.lang.String)
    {
        java.util.logging.Logger$1 r0;
        java.util.logging.Logger r1;
        java.lang.String r2, r4, $r7;
        java.util.logging.Level r3;
        java.util.logging.LogRecord r5, $r6;

        r0 := @this: java.util.logging.Logger$1;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.logging.Level;

        r4 := @parameter3: java.lang.String;

        $r6 = new java.util.logging.LogRecord;

        specialinvoke $r6.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r3, r4);

        r5 = $r6;

        $r7 = staticinvoke <java.util.logging.Logger: java.lang.String access$000(java.util.logging.Logger)>(r1);

        virtualinvoke r5.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r7);

        staticinvoke <java.util.logging.Logger: void access$100(java.util.logging.Logger,java.util.logging.LogRecord)>(r1, r5);

        virtualinvoke r1.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r5);

        return;
    }
}
