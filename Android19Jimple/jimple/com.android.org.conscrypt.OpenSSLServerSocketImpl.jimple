public class com.android.org.conscrypt.OpenSSLServerSocketImpl extends javax.net.ssl.SSLServerSocket
{
    private boolean channelIdEnabled;
    private java.lang.String[] enabledCipherSuites;
    private java.lang.String[] enabledProtocols;
    private final com.android.org.conscrypt.SSLParametersImpl sslParameters;

    protected void <init>(int, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        int i0, i1;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.String[] $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLServerSocket: void <init>(int,int)>(i0, i1);

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledProtocols> = $r2;

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getDefaultCipherSuites()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites> = $r3;

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        return;
    }

    protected void <init>(int, int, java.net.InetAddress, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        int i0, i1;
        java.net.InetAddress r1;
        com.android.org.conscrypt.SSLParametersImpl r2;
        java.lang.String[] $r3, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.net.InetAddress;

        r2 := @parameter3: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLServerSocket: void <init>(int,int,java.net.InetAddress)>(i0, i1, r1);

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledProtocols> = $r3;

        $r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getDefaultCipherSuites()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r2;

        return;
    }

    protected void <init>(int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.String[] $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLServerSocket: void <init>(int)>(i0);

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledProtocols> = $r2;

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getDefaultCipherSuites()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites> = $r3;

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        return;
    }

    protected void <init>(com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.String[] $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLServerSocket: void <init>()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledProtocols> = $r2;

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getDefaultCipherSuites()>();

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites> = $r3;

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        return;
    }

    private void checkEnabledCipherSuites() throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2, r3, $r10;
        javax.net.ssl.SSLException $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.android.org.conscrypt.CipherSuite $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites>;

        i0 = lengthof r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label11;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV");

        if $z0 == 0 goto label03;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        $r5 = staticinvoke <com.android.org.conscrypt.CipherSuite: com.android.org.conscrypt.CipherSuite getByName(java.lang.String)>(r2);

        r3 = virtualinvoke $r5.<com.android.org.conscrypt.CipherSuite: java.lang.String getServerKeyType()>();

        if r3 != null goto label04;

        return;

     label04:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("RSA");

        if $z1 != 0 goto label05;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("DH_RSA");

        if $z3 == 0 goto label06;

     label05:
        $z2 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: boolean checkForPrivateKey(java.lang.String,java.lang.Class)>(r3, class "java/security/interfaces/RSAPrivateKey");

        if $z2 == 0 goto label02;

        return;

     label06:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("DSA");

        if $z4 != 0 goto label07;

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("DH_DSA");

        if $z6 == 0 goto label08;

     label07:
        $z5 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: boolean checkForPrivateKey(java.lang.String,java.lang.Class)>(r3, class "java/security/interfaces/DSAPrivateKey");

        if $z5 == 0 goto label02;

        return;

     label08:
        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("EC");

        if $z8 != 0 goto label09;

        $z10 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("EC_RSA");

        if $z10 != 0 goto label09;

        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("EC_EC");

        if $z9 == 0 goto label10;

     label09:
        $z7 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: boolean checkForPrivateKey(java.lang.String,java.lang.Class)>(r3, class "java/security/interfaces/ECPrivateKey");

        if $z7 == 0 goto label02;

        return;

     label10:
        $r7 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label11:
        $r4 = new javax.net.ssl.SSLException;

        specialinvoke $r4.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Could not find any key store entries to support the enabled cipher suites.");

        throw $r4;
    }

    private boolean checkForPrivateKey(java.lang.String, java.lang.Class)
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String r1, r3;
        java.lang.Class r2, $r9;
        java.security.PrivateKey r4;
        com.android.org.conscrypt.SSLParametersImpl $r5, $r7;
        javax.net.ssl.X509KeyManager $r6, $r8;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r6 = virtualinvoke $r5.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>();

        r3 = interfaceinvoke $r6.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>(r1, null, null);

        if r3 != null goto label2;

     label1:
        return 0;

     label2:
        $r7 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r8 = virtualinvoke $r7.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>();

        r4 = interfaceinvoke $r8.<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>(r3);

        if r4 == null goto label1;

        $r9 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z0 == 0 goto label1;

        return 1;
    }

    public java.net.Socket accept() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        com.android.org.conscrypt.OpenSSLSocketImpl r1, $r3;
        com.android.org.conscrypt.SSLParametersImpl $r2, $r5;
        boolean $z0, $z1;
        java.lang.String[] $r4, $r7, $r8, $r10;
        java.lang.Object $r6, $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: void checkEnabledCipherSuites()>();

     label1:
        $r3 = new com.android.org.conscrypt.OpenSSLSocketImpl;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledProtocols>;

        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (java.lang.String[]) $r6;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites>;

        $r9 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (java.lang.String[]) $r9;

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void <init>(com.android.org.conscrypt.SSLParametersImpl,java.lang.String[],java.lang.String[])>($r5, $r8, $r10);

        r1 = $r3;

        $z1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: boolean channelIdEnabled>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdEnabled(boolean)>($z1);

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: void implAccept(java.net.Socket)>(r1);

        return r1;
    }

    public boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledProtocols>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        return $z0;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedCipherSuites()>();

        return $r1;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        return $r1;
    }

    public boolean getUseClientMode()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        return $z0;
    }

    public boolean isChannelIdEnabled()
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: boolean channelIdEnabled>;

        return $z0;
    }

    public void setChannelIdEnabled(boolean)
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: boolean channelIdEnabled> = z0;

        return;
    }

    public void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setEnableSessionCreation(boolean)>(z0);

        return;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String[] r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledCipherSuites(java.lang.String[])>(r1);

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledCipherSuites> = $r2;

        return;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        java.lang.String[] r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledProtocols(java.lang.String[])>(r1);

        r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: java.lang.String[] enabledProtocols> = $r2;

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setUseClientMode(boolean)>(z0);

        return;
    }

    public void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLServerSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLServerSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLServerSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setWantClientAuth(boolean)>(z0);

        return;
    }
}
