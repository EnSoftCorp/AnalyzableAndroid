public class java.util.zip.DeflaterInputStream extends java.io.FilterInputStream
{
    private static final int DEFAULT_BUFFER_SIZE;
    private boolean available;
    protected final byte[] buf;
    private boolean closed;
    protected final java.util.zip.Deflater def;

    public void <init>(java.io.InputStream)
    {
        java.util.zip.DeflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Deflater $r2;

        r0 := @this: java.util.zip.DeflaterInputStream;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new java.util.zip.Deflater;

        specialinvoke $r2.<java.util.zip.Deflater: void <init>()>();

        specialinvoke r0.<java.util.zip.DeflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Deflater,int)>(r1, $r2, 1024);

        return;
    }

    public void <init>(java.io.InputStream, java.util.zip.Deflater)
    {
        java.util.zip.DeflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Deflater r2;

        r0 := @this: java.util.zip.DeflaterInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.DeflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Deflater,int)>(r1, r2, 1024);

        return;
    }

    public void <init>(java.io.InputStream, java.util.zip.Deflater, int)
    {
        java.util.zip.DeflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Deflater r2;
        int i0;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.NullPointerException $r9, $r10;

        r0 := @this: java.util.zip.DeflaterInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        i0 := @parameter2: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<java.util.zip.DeflaterInputStream: boolean closed> = 0;

        r0.<java.util.zip.DeflaterInputStream: boolean available> = 1;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r10;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("deflater == null");

        throw $r9;

     label2:
        if i0 > 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bufferSize <= 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        r0.<java.util.zip.DeflaterInputStream: java.util.zip.Deflater def> = r2;

        $r3 = newarray (byte)[i0];

        r0.<java.util.zip.DeflaterInputStream: byte[] buf> = $r3;

        return;
    }

    private void checkClosed() throws java.io.IOException
    {
        java.util.zip.DeflaterInputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.DeflaterInputStream;

        $z0 = r0.<java.util.zip.DeflaterInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r1;

     label1:
        return;
    }

    public int available() throws java.io.IOException
    {
        java.util.zip.DeflaterInputStream r0;
        boolean $z0;

        r0 := @this: java.util.zip.DeflaterInputStream;

        specialinvoke r0.<java.util.zip.DeflaterInputStream: void checkClosed()>();

        $z0 = r0.<java.util.zip.DeflaterInputStream: boolean available>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.DeflaterInputStream r0;
        java.util.zip.Deflater $r1;
        java.io.InputStream $r2;

        r0 := @this: java.util.zip.DeflaterInputStream;

        r0.<java.util.zip.DeflaterInputStream: boolean closed> = 1;

        $r1 = r0.<java.util.zip.DeflaterInputStream: java.util.zip.Deflater def>;

        virtualinvoke $r1.<java.util.zip.Deflater: void end()>();

        $r2 = r0.<java.util.zip.DeflaterInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        return;
    }

    public void mark(int)
    {
        java.util.zip.DeflaterInputStream r0;
        int i0;

        r0 := @this: java.util.zip.DeflaterInputStream;

        i0 := @parameter0: int;

        return;
    }

    public boolean markSupported()
    {
        java.util.zip.DeflaterInputStream r0;

        r0 := @this: java.util.zip.DeflaterInputStream;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        java.util.zip.DeflaterInputStream r0;
        int $i0;

        r0 := @this: java.util.zip.DeflaterInputStream;

        $i0 = staticinvoke <libcore.io.Streams: int readSingleByte(java.io.InputStream)>(r0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.DeflaterInputStream r0;
        byte[] r1, $r4, $r5, $r7, $r8, $r11;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2;
        java.util.zip.Deflater $r2, $r3, $r6, $r10, $r12;
        java.io.InputStream $r9;

        r0 := @this: java.util.zip.DeflaterInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.DeflaterInputStream: void checkClosed()>();

        $i5 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i5, i0, i1);

        if i1 != 0 goto label2;

        i2 = 0;

     label1:
        return i2;

     label2:
        $z0 = r0.<java.util.zip.DeflaterInputStream: boolean available>;

        if $z0 != 0 goto label3;

        return -1;

     label3:
        i2 = 0;

     label4:
        if i2 >= i1 goto label6;

        $r2 = r0.<java.util.zip.DeflaterInputStream: java.util.zip.Deflater def>;

        $z1 = virtualinvoke $r2.<java.util.zip.Deflater: boolean finished()>();

        if $z1 != 0 goto label6;

        $r3 = r0.<java.util.zip.DeflaterInputStream: java.util.zip.Deflater def>;

        $z2 = virtualinvoke $r3.<java.util.zip.Deflater: boolean needsInput()>();

        if $z2 == 0 goto label5;

        $r9 = r0.<java.util.zip.DeflaterInputStream: java.io.InputStream in>;

        $r7 = r0.<java.util.zip.DeflaterInputStream: byte[] buf>;

        i4 = virtualinvoke $r9.<java.io.InputStream: int read(byte[])>($r7);

        if i4 != -1 goto label7;

        $r12 = r0.<java.util.zip.DeflaterInputStream: java.util.zip.Deflater def>;

        virtualinvoke $r12.<java.util.zip.Deflater: void finish()>();

     label5:
        $r6 = r0.<java.util.zip.DeflaterInputStream: java.util.zip.Deflater def>;

        $r5 = r0.<java.util.zip.DeflaterInputStream: byte[] buf>;

        $r4 = r0.<java.util.zip.DeflaterInputStream: byte[] buf>;

        $i7 = lengthof $r4;

        $i6 = i1 - i2;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        i3 = virtualinvoke $r6.<java.util.zip.Deflater: int deflate(byte[],int,int)>($r5, 0, $i8);

        if i3 != -1 goto label8;

     label6:
        if i2 != 0 goto label1;

        r0.<java.util.zip.DeflaterInputStream: boolean available> = 0;

        return -1;

     label7:
        $r10 = r0.<java.util.zip.DeflaterInputStream: java.util.zip.Deflater def>;

        $r11 = r0.<java.util.zip.DeflaterInputStream: byte[] buf>;

        virtualinvoke $r10.<java.util.zip.Deflater: void setInput(byte[],int,int)>($r11, 0, i4);

        goto label5;

     label8:
        $r8 = r0.<java.util.zip.DeflaterInputStream: byte[] buf>;

        $i9 = i0 + i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r1, $i9, i3);

        i2 = i2 + i3;

        goto label4;
    }

    public void reset() throws java.io.IOException
    {
        java.util.zip.DeflaterInputStream r0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.DeflaterInputStream;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>()>();

        throw $r1;
    }

    public long skip(long) throws java.io.IOException
    {
        java.util.zip.DeflaterInputStream r0;
        long l0, $l1, $l2;

        r0 := @this: java.util.zip.DeflaterInputStream;

        l0 := @parameter0: long;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, l0);

        $l2 = staticinvoke <libcore.io.Streams: long skipByReading(java.io.InputStream,long)>(r0, $l1);

        return $l2;
    }

    public static void <clinit>()
    {
        <java.util.zip.DeflaterInputStream: int DEFAULT_BUFFER_SIZE> = 1024;

        return;
    }
}
