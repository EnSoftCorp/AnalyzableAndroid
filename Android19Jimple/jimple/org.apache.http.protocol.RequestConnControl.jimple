public class org.apache.http.protocol.RequestConnControl extends java.lang.Object implements org.apache.http.HttpRequestInterceptor
{

    public void <init>()
    {
        org.apache.http.protocol.RequestConnControl r0;

        r0 := @this: org.apache.http.protocol.RequestConnControl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.RequestConnControl r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.protocol.HttpContext r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.protocol.RequestConnControl;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r3;

     label1:
        $z0 = interfaceinvoke r1.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Connection");

        if $z0 != 0 goto label2;

        interfaceinvoke r1.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Connection", "Keep-Alive");

     label2:
        return;
    }
}
