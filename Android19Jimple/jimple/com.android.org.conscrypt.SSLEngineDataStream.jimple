public class com.android.org.conscrypt.SSLEngineDataStream extends java.lang.Object implements com.android.org.conscrypt.DataStream
{
    private int available;
    private int consumed;
    private int limit;
    private int offset;
    private java.nio.ByteBuffer[] srcs;

    protected void <init>()
    {
        com.android.org.conscrypt.SSLEngineDataStream r0;

        r0 := @this: com.android.org.conscrypt.SSLEngineDataStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int available()
    {
        com.android.org.conscrypt.SSLEngineDataStream r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLEngineDataStream;

        $i0 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int available>;

        return $i0;
    }

    protected int consumed()
    {
        com.android.org.conscrypt.SSLEngineDataStream r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLEngineDataStream;

        $i0 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int consumed>;

        return $i0;
    }

    public byte[] getData(int)
    {
        com.android.org.conscrypt.SSLEngineDataStream r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        byte[] r1;
        java.nio.ByteBuffer[] $r2, $r5;
        java.nio.ByteBuffer $r3, $r4;
        boolean $z0;
        byte $b15;

        r0 := @this: com.android.org.conscrypt.SSLEngineDataStream;

        i0 := @parameter0: int;

        $i4 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int available>;

        if i0 >= $i4 goto label5;

        i1 = i0;

     label1:
        $i5 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int available>;

        $i6 = $i5 - i1;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int available> = $i6;

        $i7 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int consumed>;

        $i8 = i1 + $i7;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int consumed> = $i8;

        r1 = newarray (byte)[i1];

        i2 = 0;

     label2:
        $i10 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int offset>;

        $i9 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int limit>;

        if $i10 >= $i9 goto label4;

     label3:
        $r2 = r0.<com.android.org.conscrypt.SSLEngineDataStream: java.nio.ByteBuffer[] srcs>;

        $i11 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int offset>;

        $r3 = $r2[$i11];

        $z0 = virtualinvoke $r3.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label6;

        i3 = i2 + 1;

        $r5 = r0.<com.android.org.conscrypt.SSLEngineDataStream: java.nio.ByteBuffer[] srcs>;

        $i13 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int offset>;

        $r4 = $r5[$i13];

        $b15 = virtualinvoke $r4.<java.nio.ByteBuffer: byte get()>();

        r1[i2] = $b15;

        i1 = i1 + -1;

        if i1 != 0 goto label7;

     label4:
        return r1;

     label5:
        i1 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int available>;

        goto label1;

     label6:
        $i12 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int offset>;

        $i14 = 1 + $i12;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int offset> = $i14;

        goto label2;

     label7:
        i2 = i3;

        goto label3;
    }

    public boolean hasData()
    {
        com.android.org.conscrypt.SSLEngineDataStream r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLEngineDataStream;

        $i0 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int available>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void setSourceBuffers(java.nio.ByteBuffer[], int, int)
    {
        com.android.org.conscrypt.SSLEngineDataStream r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.ByteBuffer $r2, $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.org.conscrypt.SSLEngineDataStream;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: java.nio.ByteBuffer[] srcs> = r1;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int offset> = i0;

        $i3 = i0 + i1;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int limit> = $i3;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int consumed> = 0;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int available> = 0;

        i2 = i0;

     label1:
        $i4 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int limit>;

        if i2 >= $i4 goto label3;

        $r2 = r1[i2];

        if $r2 != null goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

        throw $r4;

     label2:
        $i5 = r0.<com.android.org.conscrypt.SSLEngineDataStream: int available>;

        $r3 = r1[i2];

        $i6 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();

        $i7 = $i5 + $i6;

        r0.<com.android.org.conscrypt.SSLEngineDataStream: int available> = $i7;

        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }
}
