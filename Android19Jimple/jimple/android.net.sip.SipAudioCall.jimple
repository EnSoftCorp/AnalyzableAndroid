public class android.net.sip.SipAudioCall extends java.lang.Object
{
    private static final boolean DBG;
    private static final boolean DONT_RELEASE_SOCKET;
    private static final java.lang.String LOG_TAG;
    private static final boolean RELEASE_SOCKET;
    private static final int SESSION_TIMEOUT;
    private static final int TRANSFER_TIMEOUT;
    private android.net.rtp.AudioGroup mAudioGroup;
    private android.net.rtp.AudioStream mAudioStream;
    private android.content.Context mContext;
    private int mErrorCode;
    private java.lang.String mErrorMessage;
    private boolean mHold;
    private boolean mInCall;
    private android.net.sip.SipAudioCall$Listener mListener;
    private android.net.sip.SipProfile mLocalProfile;
    private boolean mMuted;
    private java.lang.String mPeerSd;
    private long mSessionId;
    private android.net.sip.SipSession mSipSession;
    private android.net.sip.SipSession mTransferringSession;
    private android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock;
    private android.net.wifi.WifiManager mWm;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.net.sip.SipAudioCall: int TRANSFER_TIMEOUT> = 15;

        <android.net.sip.SipAudioCall: int SESSION_TIMEOUT> = 5;

        <android.net.sip.SipAudioCall: boolean RELEASE_SOCKET> = 1;

        <android.net.sip.SipAudioCall: boolean DONT_RELEASE_SOCKET> = 0;

        <android.net.sip.SipAudioCall: boolean DBG> = 1;

        $r0 = class "android/net/sip/SipAudioCall";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.sip.SipAudioCall: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context, android.net.sip.SipProfile)
    {
        android.net.sip.SipAudioCall r0;
        android.content.Context r1;
        android.net.sip.SipProfile r2;
        long $l0;
        java.lang.Object $r3;
        android.net.wifi.WifiManager $r4;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.sip.SipProfile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.net.sip.SipAudioCall: long mSessionId> = $l0;

        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 0;

        r0.<android.net.sip.SipAudioCall: boolean mMuted> = 0;

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 0;

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = 0;

        r0.<android.net.sip.SipAudioCall: android.content.Context mContext> = r1;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipProfile mLocalProfile> = r2;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r4 = (android.net.wifi.WifiManager) $r3;

        r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager mWm> = $r4;

        return;
    }

    static void access$000(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>(r1);

        return;
    }

    static android.net.sip.SipAudioCall$Listener access$100(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipAudioCall$Listener $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipAudioCall$Listener mListener>;

        return $r1;
    }

    static void access$1000(android.net.sip.SipAudioCall, boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.net.sip.SipAudioCall: void close(boolean)>(z0);

        return;
    }

    static int access$1100(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        int $i0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $i0 = r0.<android.net.sip.SipAudioCall: int mErrorCode>;

        return $i0;
    }

    static int access$1102(android.net.sip.SipAudioCall, int)
    {
        android.net.sip.SipAudioCall r0;
        int i0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        i0 := @parameter1: int;

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = i0;

        return i0;
    }

    static java.lang.String access$1202(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage> = r1;

        return r1;
    }

    static void access$1300(android.net.sip.SipAudioCall, int, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>(i0, r1);

        return;
    }

    static android.net.sip.SimpleSessionDescription access$1400(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createOffer()>();

        return $r1;
    }

    static void access$200(android.net.sip.SipAudioCall, java.lang.String, java.lang.Throwable)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

    static android.net.sip.SipSession access$300(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        return $r1;
    }

    static boolean access$400(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        boolean $z0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $z0 = r0.<android.net.sip.SipAudioCall: boolean mInCall>;

        return $z0;
    }

    static android.net.sip.SimpleSessionDescription access$500(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;
        android.net.sip.SimpleSessionDescription $r2;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createAnswer(java.lang.String)>(r1);

        return $r2;
    }

    static java.lang.String access$600(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        return $r1;
    }

    static java.lang.String access$602(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd> = r1;

        return r1;
    }

    static android.net.sip.SipSession access$700(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession>;

        return $r1;
    }

    static android.net.sip.SipSession access$702(android.net.sip.SipAudioCall, android.net.sip.SipSession)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: android.net.sip.SipSession;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession> = r1;

        return r1;
    }

    static void access$800(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        specialinvoke r0.<android.net.sip.SipAudioCall: void transferToNewSession()>();

        return;
    }

    static boolean access$900(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        boolean $z0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        return $z0;
    }

    private void close(boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;
        java.lang.Throwable r1, $r4;
        long $l0;
        android.net.sip.SipSession $r2, $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        z0 := @parameter0: boolean;

        entermonitor r0;

        if z0 == 0 goto label2;

     label1:
        specialinvoke r0.<android.net.sip.SipAudioCall: void stopCall(boolean)>(1);

     label2:
        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 0;

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.net.sip.SipAudioCall: long mSessionId> = $l0;

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = 0;

        r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage> = null;

        $r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r2 == null goto label3;

        $r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r3.<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>(null);

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = null;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private android.net.sip.SimpleSessionDescription createAnswer(java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1, r12, $r15, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38;
        android.net.sip.SimpleSessionDescription r2, r3, $r13, $r14, $r35;
        android.net.rtp.AudioCodec r4;
        android.net.sip.SimpleSessionDescription$Media[] r5;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i11, $i12, $i13, $i14;
        android.net.sip.SimpleSessionDescription$Media r6, r7, r11;
        java.lang.String[] r8;
        int[] r9, r10;
        boolean $z0, $z1, $z2, $z3;
        long $l10;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.IllegalStateException $r21;
        android.net.rtp.AudioStream $r28;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label01;

        $r35 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createOffer()>();

        return $r35;

     label01:
        $r14 = new android.net.sip.SimpleSessionDescription;

        specialinvoke $r14.<android.net.sip.SimpleSessionDescription: void <init>(java.lang.String)>(r1);

        r2 = $r14;

        $r13 = new android.net.sip.SimpleSessionDescription;

        $l10 = r0.<android.net.sip.SipAudioCall: long mSessionId>;

        $r15 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        specialinvoke $r13.<android.net.sip.SimpleSessionDescription: void <init>(long,java.lang.String)>($l10, $r15);

        r3 = $r13;

        r4 = null;

        r5 = virtualinvoke r2.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()>();

        i0 = lengthof r5;

        i1 = 0;

     label02:
        if i1 >= i0 goto label15;

        r6 = r5[i1];

        if r4 != null goto label13;

        $i11 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: int getPort()>();

        if $i11 <= 0 goto label13;

        $r23 = "audio";

        $r24 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>();

        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z2 == 0 goto label13;

        $r27 = "RTP/AVP";

        $r26 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>();

        $z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z1 == 0 goto label13;

        r9 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i4 = lengthof r9;

        i5 = 0;

     label03:
        if i5 >= i4 goto label04;

        i9 = r9[i5];

        $r37 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i9);

        $r38 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>(i9);

        r4 = staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>(i9, $r37, $r38);

        if r4 == null goto label07;

     label04:
        if r4 == null goto label13;

        $r28 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $i12 = virtualinvoke $r28.<android.net.rtp.AudioStream: int getLocalPort()>();

        r11 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>("audio", $i12, 1, "RTP/AVP");

        $i13 = r4.<android.net.rtp.AudioCodec: int type>;

        $r29 = r4.<android.net.rtp.AudioCodec: java.lang.String rtpmap>;

        $r30 = r4.<android.net.rtp.AudioCodec: java.lang.String fmtp>;

        virtualinvoke r11.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>($i13, $r29, $r30);

        r10 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i7 = lengthof r10;

        i6 = 0;

     label05:
        if i6 >= i7 goto label08;

        i8 = r10[i6];

        r12 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i8);

        $i14 = r4.<android.net.rtp.AudioCodec: int type>;

        if i8 == $i14 goto label06;

        if r12 == null goto label06;

        $z3 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("telephone-event");

        if $z3 == 0 goto label06;

        $r36 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>(i8);

        virtualinvoke r11.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>(i8, r12, $r36);

     label06:
        i6 = i6 + 1;

        goto label05;

     label07:
        i5 = i5 + 1;

        goto label03;

     label08:
        $r33 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r33 == null goto label10;

        virtualinvoke r3.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("sendonly", "");

     label09:
        i1 = i1 + 1;

        goto label02;

     label10:
        $r32 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r32 == null goto label11;

        virtualinvoke r3.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("recvonly", "");

        goto label09;

     label11:
        $r31 = virtualinvoke r2.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r31 == null goto label12;

        virtualinvoke r3.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("sendonly", "");

        goto label09;

     label12:
        $r34 = virtualinvoke r2.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r34 == null goto label09;

        virtualinvoke r3.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("recvonly", "");

        goto label09;

     label13:
        $r19 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>();

        $r22 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>();

        r7 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>($r19, 0, 1, $r22);

        r8 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()>();

        i2 = lengthof r8;

        i3 = 0;

     label14:
        if i3 >= i2 goto label09;

        $r25 = r8[i3];

        virtualinvoke r7.<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>($r25, null);

        i3 = i3 + 1;

        goto label14;

     label15:
        if r4 != null goto label16;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String)>("createAnswer: no suitable codes");

        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Reject SDP: no suitable codecs");

        throw $r21;

     label16:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createAnswer: answer=");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r20);

        return r3;
    }

    private android.net.sip.SimpleSessionDescription createContinueOffer()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription r1, $r4;
        android.net.sip.SimpleSessionDescription$Media r2;
        android.net.rtp.AudioCodec r3;
        int i0, $i2, $i3;
        long $l1;
        java.lang.String $r5, $r8, $r9;
        android.net.rtp.AudioStream $r6, $r7, $r10;

        r0 := @this: android.net.sip.SipAudioCall;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>("createContinueOffer");

        $r4 = new android.net.sip.SimpleSessionDescription;

        $l1 = r0.<android.net.sip.SipAudioCall: long mSessionId>;

        $r5 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        specialinvoke $r4.<android.net.sip.SimpleSessionDescription: void <init>(long,java.lang.String)>($l1, $r5);

        r1 = $r4;

        $r6 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $i2 = virtualinvoke $r6.<android.net.rtp.AudioStream: int getLocalPort()>();

        r2 = virtualinvoke r1.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>("audio", $i2, 1, "RTP/AVP");

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        r3 = virtualinvoke $r7.<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>();

        $i3 = r3.<android.net.rtp.AudioCodec: int type>;

        $r9 = r3.<android.net.rtp.AudioCodec: java.lang.String rtpmap>;

        $r8 = r3.<android.net.rtp.AudioCodec: java.lang.String fmtp>;

        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>($i3, $r9, $r8);

        $r10 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        i0 = virtualinvoke $r10.<android.net.rtp.AudioStream: int getDtmfType()>();

        if i0 == -1 goto label1;

        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>(i0, "telephone-event/8000", "0-15");

     label1:
        return r1;
    }

    private android.net.sip.SimpleSessionDescription createHoldOffer()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createContinueOffer()>();

        virtualinvoke r1.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("sendonly", "");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createHoldOffer: offer=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r5);

        return r1;
    }

    private android.net.sip.SipSession$Listener createListener()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipAudioCall$1 $r1;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = new android.net.sip.SipAudioCall$1;

        specialinvoke $r1.<android.net.sip.SipAudioCall$1: void <init>(android.net.sip.SipAudioCall)>(r0);

        return $r1;
    }

    private android.net.sip.SimpleSessionDescription createOffer()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription r1, $r5;
        android.net.sip.SimpleSessionDescription$Media r2;
        android.net.rtp.AudioCodec[] r3;
        int i0, i1, $i3, $i4;
        android.net.rtp.AudioCodec r4;
        long $l2;
        java.lang.String $r6, $r12, $r13, $r14;
        android.net.rtp.AudioStream $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: android.net.sip.SipAudioCall;

        $r5 = new android.net.sip.SimpleSessionDescription;

        $l2 = r0.<android.net.sip.SipAudioCall: long mSessionId>;

        $r6 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        specialinvoke $r5.<android.net.sip.SimpleSessionDescription: void <init>(long,java.lang.String)>($l2, $r6);

        r1 = $r5;

        staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>();

        $r8 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $i3 = virtualinvoke $r8.<android.net.rtp.AudioStream: int getLocalPort()>();

        r2 = virtualinvoke r1.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>("audio", $i3, 1, "RTP/AVP");

        r3 = staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        $i4 = r4.<android.net.rtp.AudioCodec: int type>;

        $r14 = r4.<android.net.rtp.AudioCodec: java.lang.String rtpmap>;

        $r12 = r4.<android.net.rtp.AudioCodec: java.lang.String fmtp>;

        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>($i4, $r14, $r12);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>(127, "telephone-event/8000", "0-15");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createOffer: offer=");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r13);

        return r1;
    }

    private java.lang.String getLocalIp()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession $r1;
        java.lang.String $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r2 = virtualinvoke $r1.<android.net.sip.SipSession: java.lang.String getLocalIp()>();

        return $r2;
    }

    private void grabWifiHighPerfLock()
    {
        android.net.sip.SipAudioCall r0;
        android.net.wifi.WifiManager$WifiLock $r1, $r6, $r7;
        android.content.Context $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        android.net.wifi.WifiManager $r5;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock>;

        if $r1 != null goto label1;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>("grabWifiHighPerfLock:");

        $r2 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r5 = (android.net.wifi.WifiManager) $r3;

        $r4 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>(3, $r4);

        r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock> = $r6;

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock>;

        virtualinvoke $r7.<android.net.wifi.WifiManager$WifiLock: void acquire()>();

     label1:
        return;
    }

    private boolean isSpeakerOn()
    {
        android.net.sip.SipAudioCall r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.media.AudioManager $r3;
        boolean $z0;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r3 = (android.media.AudioManager) $r2;

        $z0 = virtualinvoke $r3.<android.media.AudioManager: boolean isSpeakerphoneOn()>();

        return $z0;
    }

    private boolean isWifiOn()
    {
        android.net.sip.SipAudioCall r0;
        android.net.wifi.WifiManager $r1;
        android.net.wifi.WifiInfo $r2;
        java.lang.String $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager mWm>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>();

        $r3 = virtualinvoke $r2.<android.net.wifi.WifiInfo: java.lang.String getBSSID()>();

        if $r3 != null goto label1;

        return 0;

     label1:
        return 1;
    }

    private void log(java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1, $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1, $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void loge(java.lang.String, java.lang.Throwable)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1, $r3;
        java.lang.Throwable r2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    private void onError(int, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.String r1, $r7, $r11;
        android.net.sip.SipAudioCall$Listener r2;
        java.lang.Throwable r3, r4, $r12, $r13;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10;
        boolean $z0;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onError: ");

        $r7 = staticinvoke <android.net.sip.SipErrorCode: java.lang.String toString(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r11);

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = i0;

        r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage> = r1;

        r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipAudioCall$Listener mListener>;

        if r2 == null goto label02;

     label01:
        virtualinvoke r2.<android.net.sip.SipAudioCall$Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)>(r0, i0, r1);

     label02:
        entermonitor r0;

        if i0 == -10 goto label04;

     label03:
        $z0 = virtualinvoke r0.<android.net.sip.SipAudioCall: boolean isInCall()>();

        if $z0 != 0 goto label05;

     label04:
        specialinvoke r0.<android.net.sip.SipAudioCall: void close(boolean)>(1);

     label05:
        exitmonitor r0;

     label06:
        return;

     label07:
        $r13 := @caughtexception;

        r4 = $r13;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("onError():", r4);

        goto label02;

     label08:
        $r12 := @caughtexception;

        r3 = $r12;

     label09:
        exitmonitor r0;

     label10:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void releaseWifiHighPerfLock()
    {
        android.net.sip.SipAudioCall r0;
        android.net.wifi.WifiManager$WifiLock $r1, $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock>;

        if $r1 == null goto label1;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>("releaseWifiHighPerfLock:");

        $r2 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock>;

        virtualinvoke $r2.<android.net.wifi.WifiManager$WifiLock: void release()>();

        r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock> = null;

     label1:
        return;
    }

    private void setAudioGroupMode()
    {
        android.net.sip.SipAudioCall r0;
        android.net.rtp.AudioGroup r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAudioGroupMode: audioGroup=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r5);

        if r1 == null goto label1;

        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(0);

     label1:
        return;

     label2:
        $z1 = r0.<android.net.sip.SipAudioCall: boolean mMuted>;

        if $z1 == 0 goto label3;

        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(1);

        return;

     label3:
        $z2 = specialinvoke r0.<android.net.sip.SipAudioCall: boolean isSpeakerOn()>();

        if $z2 == 0 goto label4;

        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(3);

        return;

     label4:
        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(2);

        return;
    }

    private void startAudioInternal() throws java.net.UnknownHostException
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r33;
        android.net.sip.SimpleSessionDescription r2, $r17;
        android.net.rtp.AudioStream r3;
        android.net.rtp.AudioCodec r4;
        android.net.sip.SimpleSessionDescription$Media[] r5;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10;
        android.net.sip.SimpleSessionDescription$Media r6;
        int[] r7, r9;
        java.lang.String r8, r11, $r13, $r15, $r18, $r19, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32;
        android.net.rtp.AudioGroup r10, $r20;
        java.lang.StringBuilder $r12, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r21, $r34;
        java.net.InetAddress $r26;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label01:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startAudioInternal: mPeerSd=");

        $r13 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String)>($r15);

        $r18 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        if $r18 != null goto label03;

        $r34 = new java.lang.IllegalStateException;

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("mPeerSd = null");

        throw $r34;

     label02:
        $r33 := @caughtexception;

        r1 = $r33;

        exitmonitor r0;

        throw r1;

     label03:
        specialinvoke r0.<android.net.sip.SipAudioCall: void stopCall(boolean)>(0);

        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 1;

        $r17 = new android.net.sip.SimpleSessionDescription;

        $r19 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        specialinvoke $r17.<android.net.sip.SimpleSessionDescription: void <init>(java.lang.String)>($r19);

        r2 = $r17;

        r3 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

     label04:
        r4 = null;

     label05:
        r5 = virtualinvoke r2.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()>();

        i0 = lengthof r5;

     label06:
        i1 = 0;

     label07:
        if i1 >= i0 goto label27;

     label08:
        r6 = r5[i1];

     label09:
        if r4 != null goto label49;

     label10:
        $i8 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: int getPort()>();

        if $i8 <= 0 goto label49;

        $r23 = "audio";

        $r22 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>();

        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z2 == 0 goto label49;

        $r24 = "RTP/AVP";

        $r25 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>();

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z3 == 0 goto label49;

        r7 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i2 = lengthof r7;

     label11:
        i3 = 0;

     label12:
        if i3 >= i2 goto label15;

     label13:
        i4 = r7[i3];

        $r32 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i4);

        $r31 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>(i4);

        r4 = staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>(i4, $r32, $r31);

     label14:
        if r4 == null goto label48;

     label15:
        if r4 == null goto label49;

     label16:
        r8 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()>();

     label17:
        if r8 != null goto label19;

     label18:
        r8 = virtualinvoke r2.<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()>();

     label19:
        $r26 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r8);

        $i9 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: int getPort()>();

        virtualinvoke r3.<android.net.rtp.AudioStream: void associate(java.net.InetAddress,int)>($r26, $i9);

        virtualinvoke r3.<android.net.rtp.AudioStream: void setDtmfType(int)>(-1);

        virtualinvoke r3.<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)>(r4);

        r9 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i5 = lengthof r9;

     label20:
        i7 = 0;

     label21:
        if i7 >= i5 goto label26;

     label22:
        i6 = r9[i7];

        r11 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i6);

        $i10 = r4.<android.net.rtp.AudioCodec: int type>;

        if i6 == $i10 goto label47;

     label23:
        if r11 == null goto label47;

     label24:
        $z5 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("telephone-event");

        if $z5 == 0 goto label47;

        virtualinvoke r3.<android.net.rtp.AudioStream: void setDtmfType(int)>(i6);

     label25:
        goto label47;

     label26:
        $z4 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z4 == 0 goto label29;

        virtualinvoke r3.<android.net.rtp.AudioStream: void setMode(int)>(0);

     label27:
        if r4 != null goto label39;

     label28:
        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Reject SDP: no suitable codecs");

        throw $r21;

     label29:
        $r29 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r29 == null goto label31;

        virtualinvoke r3.<android.net.rtp.AudioStream: void setMode(int)>(1);

     label30:
        goto label27;

     label31:
        $r28 = virtualinvoke r6.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r28 == null goto label33;

        virtualinvoke r3.<android.net.rtp.AudioStream: void setMode(int)>(2);

     label32:
        goto label27;

     label33:
        $r27 = virtualinvoke r2.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r27 == null goto label35;

        virtualinvoke r3.<android.net.rtp.AudioStream: void setMode(int)>(1);

     label34:
        goto label27;

     label35:
        $r30 = virtualinvoke r2.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r30 == null goto label37;

        virtualinvoke r3.<android.net.rtp.AudioStream: void setMode(int)>(2);

     label36:
        goto label27;

     label37:
        virtualinvoke r3.<android.net.rtp.AudioStream: void setMode(int)>(0);

     label38:
        goto label27;

     label39:
        $z0 = specialinvoke r0.<android.net.sip.SipAudioCall: boolean isWifiOn()>();

        if $z0 == 0 goto label40;

        specialinvoke r0.<android.net.sip.SipAudioCall: void grabWifiHighPerfLock()>();

     label40:
        r10 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

        $z1 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z1 == 0 goto label43;

     label41:
        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

     label42:
        exitmonitor r0;

        return;

     label43:
        if r10 != null goto label45;

     label44:
        $r20 = new android.net.rtp.AudioGroup;

        specialinvoke $r20.<android.net.rtp.AudioGroup: void <init>()>();

        r10 = $r20;

     label45:
        virtualinvoke r3.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(r10);

     label46:
        goto label41;

     label47:
        i7 = i7 + 1;

        goto label21;

     label48:
        i3 = i3 + 1;

        goto label12;

     label49:
        i1 = i1 + 1;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label13 to label14 with label02;
        catch java.lang.Throwable from label16 to label17 with label02;
        catch java.lang.Throwable from label18 to label19 with label02;
        catch java.lang.Throwable from label19 to label20 with label02;
        catch java.lang.Throwable from label22 to label23 with label02;
        catch java.lang.Throwable from label24 to label25 with label02;
        catch java.lang.Throwable from label26 to label27 with label02;
        catch java.lang.Throwable from label28 to label29 with label02;
        catch java.lang.Throwable from label29 to label30 with label02;
        catch java.lang.Throwable from label31 to label32 with label02;
        catch java.lang.Throwable from label33 to label34 with label02;
        catch java.lang.Throwable from label35 to label36 with label02;
        catch java.lang.Throwable from label37 to label38 with label02;
        catch java.lang.Throwable from label39 to label40 with label02;
        catch java.lang.Throwable from label40 to label41 with label02;
        catch java.lang.Throwable from label41 to label42 with label02;
        catch java.lang.Throwable from label44 to label45 with label02;
        catch java.lang.Throwable from label45 to label46 with label02;
    }

    private void stopCall(boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        android.net.rtp.AudioStream $r5, $r6, $r7;

        r0 := @this: android.net.sip.SipAudioCall;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopCall: releaseSocket=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r4);

        specialinvoke r0.<android.net.sip.SipAudioCall: void releaseWifiHighPerfLock()>();

        $r5 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if $r5 == null goto label1;

        $r6 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        virtualinvoke $r6.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(null);

        if z0 == 0 goto label1;

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        virtualinvoke $r7.<android.net.rtp.AudioStream: void release()>();

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = null;

     label1:
        return;
    }

    private void throwSipException(java.lang.Throwable) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1;
        boolean $z0;
        android.net.sip.SipException $r2, $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r1 instanceof android.net.sip.SipException;

        if $z0 == 0 goto label1;

        $r3 = (android.net.sip.SipException) r1;

        throw $r3;

     label1:
        $r2 = new android.net.sip.SipException;

        specialinvoke $r2.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("", r1);

        throw $r2;
    }

    private void transferToNewSession()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, r4, $r11, $r12;
        android.net.sip.SipSession r2, r3, $r5;
        android.net.rtp.AudioStream $r6, $r7, $r10;
        java.lang.String $r8;
        java.net.InetAddress $r9;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label01:
        r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession>;

     label02:
        if r2 != null goto label04;

     label03:
        exitmonitor r0;

        return;

     label04:
        r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r5 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession>;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = $r5;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession> = null;

        $r6 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if $r6 == null goto label10;

        $r10 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        virtualinvoke $r10.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(null);

     label05:
        if r3 == null goto label07;

     label06:
        virtualinvoke r3.<android.net.sip.SipSession: void endCall()>();

     label07:
        virtualinvoke r0.<android.net.sip.SipAudioCall: void startAudio()>();

     label08:
        goto label03;

     label09:
        $r12 := @caughtexception;

        r1 = $r12;

        exitmonitor r0;

        throw r1;

     label10:
        $r7 = new android.net.rtp.AudioStream;

        $r8 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        $r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r8);

        specialinvoke $r7.<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>($r9);

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = $r7;

     label11:
        goto label05;

     label12:
        $r11 := @caughtexception;

        r4 = $r11;

     label13:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("transferToNewSession():", r4);

     label14:
        goto label05;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
    }

    public void answerCall(int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.Throwable r1, $r19;
        java.io.IOException r2, $r21;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8;
        android.net.sip.SipSession $r5, $r10, $r14;
        java.lang.String $r9, $r12, $r15, $r16;
        android.net.rtp.AudioStream $r11;
        java.net.InetAddress $r13;
        android.net.sip.SimpleSessionDescription $r17;
        android.net.sip.SipException $r18, $r20;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("answerCall: mSipSession");

        $r5 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r9);

        entermonitor r0;

     label01:
        $r10 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r10 != null goto label05;

        $r18 = new android.net.sip.SipException;

        specialinvoke $r18.<android.net.sip.SipException: void <init>(java.lang.String)>("No call to answer");

        throw $r18;

     label02:
        $r19 := @caughtexception;

        r1 = $r19;

     label03:
        exitmonitor r0;

     label04:
        throw r1;

     label05:
        $r11 = new android.net.rtp.AudioStream;

        $r12 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        $r13 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r12);

        specialinvoke $r11.<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>($r13);

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = $r11;

        $r14 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r15 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        $r17 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createAnswer(java.lang.String)>($r15);

        $r16 = virtualinvoke $r17.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke $r14.<android.net.sip.SipSession: void answerCall(java.lang.String,int)>($r16, i0);

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r21 := @caughtexception;

        r2 = $r21;

     label09:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("answerCall:", r2);

        $r20 = new android.net.sip.SipException;

        specialinvoke $r20.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("answerCall()", r2);

     label10:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.io.IOException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
    }

    public void attachCall(android.net.sip.SipSession, java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession r1;
        java.lang.String r2, $r8, $r10;
        java.lang.Throwable r3, r4, $r13, $r14;
        android.content.Context $r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r9;
        android.net.sip.SipSession$Listener $r11;
        android.net.sip.SipException $r12;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.net.sip.SipSession;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r5);

        if $z0 != 0 goto label01;

        $r12 = new android.net.sip.SipException;

        specialinvoke $r12.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r12;

     label01:
        entermonitor r0;

     label02:
        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = r1;

        r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd> = r2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attachCall(): ");

        $r8 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r10);

     label03:
        $r11 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession$Listener createListener()>();

        virtualinvoke r1.<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>($r11);

     label04:
        exitmonitor r0;

     label05:
        return;

     label06:
        $r14 := @caughtexception;

        r4 = $r14;

     label07:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("attachCall()", r4);

        specialinvoke r0.<android.net.sip.SipAudioCall: void throwSipException(java.lang.Throwable)>(r4);

     label08:
        goto label04;

     label09:
        $r13 := @caughtexception;

        r3 = $r13;

     label10:
        exitmonitor r0;

     label11:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void close()
    {
        android.net.sip.SipAudioCall r0;

        r0 := @this: android.net.sip.SipAudioCall;

        specialinvoke r0.<android.net.sip.SipAudioCall: void close(boolean)>(1);

        return;
    }

    public void continueCall(int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.Throwable r1, $r12;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        android.net.sip.SipSession $r4, $r9;
        java.lang.String $r8, $r11;
        boolean $z0;
        android.net.sip.SimpleSessionDescription $r10;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("continueCall: mSipSession");

        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r8);

        entermonitor r0;

     label1:
        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z0 != 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r9 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r10 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createContinueOffer()>();

        $r11 = virtualinvoke $r10.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke $r9.<android.net.sip.SipSession: void changeCall(java.lang.String,int)>($r11, i0);

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 0;

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r0;

     label4:
        return;

     label5:
        $r12 := @caughtexception;

        r1 = $r12;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void endCall() throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r9;
        java.lang.StringBuilder $r2, $r3, $r5;
        android.net.sip.SipSession $r4, $r7, $r8;
        java.lang.String $r6;

        r0 := @this: android.net.sip.SipAudioCall;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endCall: mSipSession");

        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r6);

        entermonitor r0;

     label1:
        specialinvoke r0.<android.net.sip.SipAudioCall: void stopCall(boolean)>(1);

        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 0;

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r7 == null goto label2;

        $r8 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r8.<android.net.sip.SipSession: void endCall()>();

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        r1 = $r9;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.net.rtp.AudioGroup getAudioGroup()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r8;
        android.net.rtp.AudioGroup r2, r3, r4, $r5;
        android.net.rtp.AudioStream $r6, $r7;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label01:
        $r5 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup mAudioGroup>;

        if $r5 == null goto label03;

        r4 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup mAudioGroup>;

        exitmonitor r0;

     label02:
        return r4;

     label03:
        $r6 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if $r6 != null goto label10;

     label04:
        r2 = null;

     label05:
        exitmonitor r0;

     label06:
        return r2;

     label07:
        $r8 := @caughtexception;

        r1 = $r8;

     label08:
        exitmonitor r0;

     label09:
        throw r1;

     label10:
        $r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        r3 = virtualinvoke $r7.<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>();

     label11:
        r2 = r3;

        goto label05;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    public android.net.rtp.AudioStream getAudioStream()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r3;
        android.net.rtp.AudioStream r2;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        r2 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.sip.SipProfile getLocalProfile()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r3;
        android.net.sip.SipProfile r2;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipProfile mLocalProfile>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.sip.SipProfile getPeerProfile()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r5;
        android.net.sip.SipProfile r2;
        android.net.sip.SipSession $r3, $r4;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        $r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r3 != null goto label5;

     label2:
        r2 = null;

     label3:
        exitmonitor r0;

     label4:
        return r2;

     label5:
        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        r2 = virtualinvoke $r4.<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()>();

     label6:
        goto label3;

     label7:
        $r5 := @caughtexception;

        r1 = $r5;

     label8:
        exitmonitor r0;

     label9:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.net.sip.SipSession getSipSession()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r3;
        android.net.sip.SipSession r2;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getState()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r4;
        int i0;
        android.net.sip.SipSession $r2, $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        $r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r2 != null goto label3;

        exitmonitor r0;

     label2:
        return 0;

     label3:
        $r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        i0 = virtualinvoke $r3.<android.net.sip.SipSession: int getState()>();

        exitmonitor r0;

     label4:
        return i0;

     label5:
        $r4 := @caughtexception;

        r1 = $r4;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void holdCall(int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.Throwable r1, $r14;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        android.net.sip.SipSession $r4, $r9, $r10;
        java.lang.String $r8, $r12;
        boolean $z0;
        android.net.sip.SimpleSessionDescription $r11;
        android.net.sip.SipException $r13;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("holdCall: mSipSession");

        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r8);

        entermonitor r0;

     label1:
        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z0 == 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r9 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r9 != null goto label7;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String)>("holdCall:");

        $r13 = new android.net.sip.SipException;

        specialinvoke $r13.<android.net.sip.SipException: void <init>(java.lang.String)>("Not in a call to hold call");

        throw $r13;

     label4:
        $r14 := @caughtexception;

        r1 = $r14;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

     label7:
        $r10 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r11 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createHoldOffer()>();

        $r12 = virtualinvoke $r11.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke $r10.<android.net.sip.SipSession: void changeCall(java.lang.String,int)>($r12, i0);

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 1;

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public boolean isInCall()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        z0 = r0.<android.net.sip.SipAudioCall: boolean mInCall>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isMuted()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        z0 = r0.<android.net.sip.SipAudioCall: boolean mMuted>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isOnHold()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void makeCall(android.net.sip.SipProfile, android.net.sip.SipSession, int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipProfile r1;
        android.net.sip.SipSession r2;
        int i0;
        java.lang.Throwable r3, $r20;
        java.io.IOException r4, $r22;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12, $r16, $r19;
        android.content.Context $r13;
        boolean $z0;
        android.net.rtp.AudioStream $r14;
        java.net.InetAddress $r15;
        android.net.sip.SimpleSessionDescription $r17;
        android.net.sip.SipSession$Listener $r18;
        android.net.sip.SipException $r21, $r23;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.net.sip.SipSession;

        i0 := @parameter2: int;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeCall: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" session=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r12);

        $r13 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r13);

        if $z0 != 0 goto label01;

        $r21 = new android.net.sip.SipException;

        specialinvoke $r21.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r21;

     label01:
        entermonitor r0;

     label02:
        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = r2;

     label03:
        $r14 = new android.net.rtp.AudioStream;

        $r16 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        $r15 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r16);

        specialinvoke $r14.<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>($r15);

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = $r14;

        $r18 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession$Listener createListener()>();

        virtualinvoke r2.<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>($r18);

        $r17 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createOffer()>();

        $r19 = virtualinvoke $r17.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke r2.<android.net.sip.SipSession: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>(r1, $r19, i0);

     label04:
        exitmonitor r0;

     label05:
        return;

     label06:
        $r22 := @caughtexception;

        r4 = $r22;

     label07:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("makeCall:", r4);

        $r23 = new android.net.sip.SipException;

        specialinvoke $r23.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("makeCall()", r4);

        throw $r23;

     label08:
        $r20 := @caughtexception;

        r3 = $r20;

     label09:
        exitmonitor r0;

     label10:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void sendDtmf(int)
    {
        android.net.sip.SipAudioCall r0;
        int i0;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>(i0, null);

        return;
    }

    public void sendDtmf(int, android.os.Message)
    {
        android.net.sip.SipAudioCall r0;
        int i0, $i1;
        android.os.Message r1;
        java.lang.Throwable r2, $r10;
        android.net.rtp.AudioGroup r3;
        android.net.sip.SipSession $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r11;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        entermonitor r0;

     label01:
        r3 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

     label02:
        if r3 == null goto label04;

     label03:
        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r4 == null goto label04;

        $i1 = virtualinvoke r0.<android.net.sip.SipAudioCall: int getState()>();

        if 8 != $i1 goto label04;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendDtmf: code=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" result=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r11);

        virtualinvoke r3.<android.net.rtp.AudioGroup: void sendDtmf(int)>(i0);

     label04:
        if r1 == null goto label06;

     label05:
        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

        r2 = $r10;

     label09:
        exitmonitor r0;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setAudioGroup(android.net.rtp.AudioGroup)
    {
        android.net.sip.SipAudioCall r0;
        android.net.rtp.AudioGroup r1, $r9;
        java.lang.Throwable r2, $r11;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        android.net.rtp.AudioStream $r7, $r8, $r10;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.net.rtp.AudioGroup;

        entermonitor r0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAudioGroup: group=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r6);

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if $r7 == null goto label2;

        $r8 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $r9 = virtualinvoke $r8.<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>();

        if $r9 == null goto label2;

        $r10 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        virtualinvoke $r10.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(r1);

     label2:
        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup mAudioGroup> = r1;

        exitmonitor r0;

     label3:
        return;

     label4:
        $r11 := @caughtexception;

        r2 = $r11;

     label5:
        exitmonitor r0;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setListener(android.net.sip.SipAudioCall$Listener)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipAudioCall$Listener r1;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.net.sip.SipAudioCall$Listener;

        virtualinvoke r0.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener,boolean)>(r1, 0);

        return;
    }

    public void setListener(android.net.sip.SipAudioCall$Listener, boolean)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipAudioCall$Listener r1;
        boolean z0, $z1, $z2;
        java.lang.Throwable r2, $r5;
        int $i0, $i1, $i2;
        android.net.sip.SipProfile $r3;
        java.lang.String $r4;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.net.sip.SipAudioCall$Listener;

        z0 := @parameter1: boolean;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipAudioCall$Listener mListener> = r1;

        if r1 == null goto label01;

        if z0 != 0 goto label02;

     label01:
        return;

     label02:
        $i0 = r0.<android.net.sip.SipAudioCall: int mErrorCode>;

        if $i0 == 0 goto label05;

        $i2 = r0.<android.net.sip.SipAudioCall: int mErrorCode>;

        $r4 = r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage>;

        virtualinvoke r1.<android.net.sip.SipAudioCall$Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)>(r0, $i2, $r4);

     label03:
        return;

     label04:
        $r5 := @caughtexception;

        r2 = $r5;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("setListener()", r2);

        return;

     label05:
        $z1 = r0.<android.net.sip.SipAudioCall: boolean mInCall>;

        if $z1 == 0 goto label09;

        $z2 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z2 == 0 goto label07;

        virtualinvoke r1.<android.net.sip.SipAudioCall$Listener: void onCallHeld(android.net.sip.SipAudioCall)>(r0);

     label06:
        return;

     label07:
        virtualinvoke r1.<android.net.sip.SipAudioCall$Listener: void onCallEstablished(android.net.sip.SipAudioCall)>(r0);

     label08:
        return;

     label09:
        $i1 = virtualinvoke r0.<android.net.sip.SipAudioCall: int getState()>();

        tableswitch($i1)
        {
            case 0: goto label10;
            case 1: goto label18;
            case 2: goto label18;
            case 3: goto label12;
            case 4: goto label18;
            case 5: goto label14;
            case 6: goto label16;
            default: goto label18;
        };

     label10:
        virtualinvoke r1.<android.net.sip.SipAudioCall$Listener: void onReadyToCall(android.net.sip.SipAudioCall)>(r0);

     label11:
        return;

     label12:
        $r3 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>();

        virtualinvoke r1.<android.net.sip.SipAudioCall$Listener: void onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)>(r0, $r3);

     label13:
        return;

     label14:
        virtualinvoke r1.<android.net.sip.SipAudioCall$Listener: void onCalling(android.net.sip.SipAudioCall)>(r0);

     label15:
        return;

     label16:
        virtualinvoke r1.<android.net.sip.SipAudioCall$Listener: void onRingingBack(android.net.sip.SipAudioCall)>(r0);

     label17:
        return;

     label18:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
        catch java.lang.Throwable from label16 to label17 with label04;
    }

    public void setSpeakerMode(boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;
        java.lang.Throwable r1, $r5;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.media.AudioManager $r4;

        r0 := @this: android.net.sip.SipAudioCall;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r4 = (android.media.AudioManager) $r3;

        virtualinvoke $r4.<android.media.AudioManager: void setSpeakerphoneOn(boolean)>(z0);

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void startAudio()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r5;
        java.net.UnknownHostException r2, $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.net.sip.SipAudioCall;

     label1:
        specialinvoke r0.<android.net.sip.SipAudioCall: void startAudioInternal()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = virtualinvoke r2.<java.net.UnknownHostException: java.lang.String getMessage()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>(-7, $r4);

        return;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>(-4, $r6);

        return;

        catch java.net.UnknownHostException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void toggleMute()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1, $r2;
        boolean z0, $z1;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label1:
        $z1 = r0.<android.net.sip.SipAudioCall: boolean mMuted>;

        if $z1 != 0 goto label8;

     label2:
        z0 = 1;

     label3:
        r0.<android.net.sip.SipAudioCall: boolean mMuted> = z0;

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r0;

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        r1 = $r2;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
