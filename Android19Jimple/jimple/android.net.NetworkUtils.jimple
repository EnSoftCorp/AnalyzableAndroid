public class android.net.NetworkUtils extends java.lang.Object
{
    public static final int RESET_ALL_ADDRESSES;
    public static final int RESET_IPV4_ADDRESSES;
    public static final int RESET_IPV6_ADDRESSES;
    private static final java.lang.String TAG;

    public void <init>()
    {
        android.net.NetworkUtils r0;

        r0 := @this: android.net.NetworkUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean addressTypeMatches(java.net.InetAddress, java.net.InetAddress)
    {
        java.net.InetAddress r0, r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.InetAddress;

        $z0 = r0 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        $z3 = r1 instanceof java.net.Inet4Address;

        if $z3 != 0 goto label2;

     label1:
        $z1 = r0 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label3;

        $z2 = r1 instanceof java.net.Inet6Address;

        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static native int disableInterface(java.lang.String);

    public static native int enableInterface(java.lang.String);

    public static native java.lang.String getDhcpError();

    public static java.net.InetAddress getNetworkPart(java.net.InetAddress, int)
    {
        java.net.InetAddress r0, r3;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] r1;
        byte b2, $b11, $b12, $b13;
        java.net.UnknownHostException r2, $r7;
        java.lang.RuntimeException $r4, $r5, $r6;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11, $r12;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("getNetworkPart doesn\'t accept null address");

        throw $r5;

     label1:
        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        if i0 < 0 goto label2;

        $i4 = lengthof r1;

        $i5 = 8 * $i4;

        if i0 <= $i5 goto label3;

     label2:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("getNetworkPart - bad prefixLength");

        throw $r4;

     label3:
        i1 = i0 / 8;

        $i6 = i0 % 8;

        $i7 = 8 - $i6;

        $i8 = 255 << $i7;

        b2 = (byte) $i8;

        $i9 = lengthof r1;

        if i1 >= $i9 goto label4;

        $b12 = r1[i1];

        $b11 = b2 & $b12;

        $b13 = (byte) $b11;

        r1[i1] = $b13;

     label4:
        i3 = i1 + 1;

     label5:
        $i10 = lengthof r1;

        if i3 >= $i10 goto label6;

        r1[i3] = 0;

        i3 = i3 + 1;

        goto label5;

     label6:
        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label7:
        return r3;

     label8:
        $r7 := @caughtexception;

        r2 = $r7;

        $r6 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getNetworkPart error - ");

        $r11 = virtualinvoke r2.<java.net.UnknownHostException: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r6;

        catch java.net.UnknownHostException from label6 to label7 with label8;
    }

    public static java.net.InetAddress hexToInet6Address(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r19;
        java.lang.Exception r1, $r15;
        java.util.Locale r2;
        java.lang.Object[] r3;
        java.net.InetAddress r4;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r20;
        java.lang.IllegalArgumentException $r21;

        r0 := @parameter0: java.lang.String;

     label1:
        r2 = <java.util.Locale: java.util.Locale US>;

        r3 = newarray (java.lang.Object)[8];

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        r3[0] = $r5;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 8);

        r3[1] = $r6;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(8, 12);

        r3[2] = $r7;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(12, 16);

        r3[3] = $r8;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(16, 20);

        r3[4] = $r9;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(20, 24);

        r3[5] = $r10;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(24, 28);

        r3[6] = $r11;

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(28, 32);

        r3[7] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r2, "%s:%s:%s:%s:%s:%s:%s:%s", r3);

        r4 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>($r13);

     label2:
        return r4;

     label3:
        $r15 := @caughtexception;

        r1 = $r15;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error in hexToInet6Address(");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkUtils", $r19);

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r1);

        throw $r21;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static int inetAddressToInt(java.net.Inet4Address) throws java.lang.IllegalArgumentException
    {
        java.net.Inet4Address r0;
        byte[] r1;
        byte $b0, $b2, $b6, $b10;
        short $s1, $s3, $s7, $s11;
        int $i4, $i5, $i8, $i9, $i12, $i13;

        r0 := @parameter0: java.net.Inet4Address;

        r1 = virtualinvoke r0.<java.net.Inet4Address: byte[] getAddress()>();

        $b0 = r1[3];

        $s1 = 255 & $b0;

        $i5 = $s1 << 24;

        $b2 = r1[2];

        $s3 = 255 & $b2;

        $i4 = $s3 << 16;

        $i9 = $i5 | $i4;

        $b6 = r1[1];

        $s7 = 255 & $b6;

        $i8 = $s7 << 8;

        $i12 = $i9 | $i8;

        $b10 = r1[0];

        $s11 = 255 & $b10;

        $i13 = $i12 | $s11;

        return $i13;
    }

    public static java.net.InetAddress intToInetAddress(int)
    {
        int i0, $i1, $i3, $i4, $i6, $i7, $i9, $i10;
        byte[] r0;
        java.net.InetAddress r2;
        byte $b2, $b5, $b8, $b11;
        java.lang.AssertionError $r3;
        java.net.UnknownHostException $r4;

        i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        $i1 = i0 & 255;

        $b2 = (byte) $i1;

        r0[0] = $b2;

        $i3 = i0 >> 8;

        $i4 = 255 & $i3;

        $b5 = (byte) $i4;

        r0[1] = $b5;

        $i6 = i0 >> 16;

        $i7 = 255 & $i6;

        $b8 = (byte) $i7;

        r0[2] = $b8;

        $i9 = i0 >> 24;

        $i10 = 255 & $i9;

        $b11 = (byte) $i10;

        r0[3] = $b11;

     label1:
        r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public static java.lang.String[] makeStrings(java.util.Collection)
    {
        java.util.Collection r0;
        java.lang.String[] r1;
        int i0, i1, $i2;
        java.util.Iterator r2;
        java.net.InetAddress r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.util.Collection;

        $i2 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (java.lang.String)[$i2];

        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.net.InetAddress) $r4;

        i1 = i0 + 1;

        $r5 = virtualinvoke r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r1[i0] = $r5;

        i0 = i1;

        goto label1;

     label2:
        return r1;
    }

    public static native void markSocket(int, int);

    public static int netmaskIntToPrefixLength(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        return $i1;
    }

    public static java.net.InetAddress numericToInetAddress(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.net.InetAddress $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r0);

        return $r1;
    }

    public static int prefixLengthToNetmaskInt(int) throws java.lang.IllegalArgumentException
    {
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 32 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid prefix length (0 <= prefix <= 32)");

        throw $r0;

     label2:
        $i1 = 32 - i0;

        $i2 = -1 << $i1;

        $i3 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i2);

        return $i3;
    }

    public static native boolean releaseDhcpLease(java.lang.String);

    public static native int resetConnections(java.lang.String, int);

    public static native boolean runDhcp(java.lang.String, android.net.DhcpResults);

    public static native boolean runDhcpRenew(java.lang.String, android.net.DhcpResults);

    public static native boolean stopDhcp(java.lang.String);

    public static java.lang.String trimV4AddrZeros(java.lang.String)
    {
        java.lang.String r0, $r5, $r6, $r7;
        java.lang.String[] r1;
        java.lang.StringBuilder r2, $r4;
        int i0, $i1, $i2, $i3;
        java.lang.NumberFormatException $r10;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label2;

        r0 = null;

     label1:
        return r0;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i1 = lengthof r1;

        if $i1 != 4 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(16);

        r2 = $r4;

        i0 = 0;

     label3:
        if i0 >= 4 goto label8;

     label4:
        $r6 = r1[i0];

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 > 3 goto label1;

        $r7 = r1[i0];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

     label5:
        if i0 >= 3 goto label6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label6:
        i0 = i0 + 1;

        goto label3;

     label7:
        $r10 := @caughtexception;

        return r0;

     label8:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

        catch java.lang.NumberFormatException from label4 to label5 with label7;
    }

    public static void <clinit>()
    {
        <android.net.NetworkUtils: java.lang.String TAG> = "NetworkUtils";

        <android.net.NetworkUtils: int RESET_IPV6_ADDRESSES> = 2;

        <android.net.NetworkUtils: int RESET_IPV4_ADDRESSES> = 1;

        <android.net.NetworkUtils: int RESET_ALL_ADDRESSES> = 3;

        return;
    }
}
