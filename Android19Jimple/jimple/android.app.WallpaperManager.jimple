public class android.app.WallpaperManager extends java.lang.Object
{
    public static final java.lang.String ACTION_CHANGE_LIVE_WALLPAPER;
    public static final java.lang.String ACTION_CROP_AND_SET_WALLPAPER;
    public static final java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER;
    public static final java.lang.String COMMAND_DROP;
    public static final java.lang.String COMMAND_SECONDARY_TAP;
    public static final java.lang.String COMMAND_TAP;
    private static boolean DEBUG;
    public static final java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT;
    private static java.lang.String TAG;
    public static final java.lang.String WALLPAPER_PREVIEW_META_DATA;
    private static android.app.WallpaperManager$Globals sGlobals;
    private static final java.lang.Object sSync;
    private final android.content.Context mContext;
    private float mWallpaperXStep;
    private float mWallpaperYStep;

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        <android.app.WallpaperManager: java.lang.String WALLPAPER_PREVIEW_META_DATA> = "android.wallpaper.preview";

        <android.app.WallpaperManager: java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT> = "android.service.wallpaper.extra.LIVE_WALLPAPER_COMPONENT";

        <android.app.WallpaperManager: java.lang.String COMMAND_TAP> = "android.wallpaper.tap";

        <android.app.WallpaperManager: java.lang.String COMMAND_SECONDARY_TAP> = "android.wallpaper.secondaryTap";

        <android.app.WallpaperManager: java.lang.String COMMAND_DROP> = "android.home.drop";

        <android.app.WallpaperManager: java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER> = "android.service.wallpaper.LIVE_WALLPAPER_CHOOSER";

        <android.app.WallpaperManager: java.lang.String ACTION_CROP_AND_SET_WALLPAPER> = "android.service.wallpaper.CROP_AND_SET_WALLPAPER";

        <android.app.WallpaperManager: java.lang.String ACTION_CHANGE_LIVE_WALLPAPER> = "android.service.wallpaper.CHANGE_LIVE_WALLPAPER";

        <android.app.WallpaperManager: java.lang.String TAG> = "WallpaperManager";

        <android.app.WallpaperManager: boolean DEBUG> = 0;

        $r0 = newarray (java.lang.Object)[0];

        <android.app.WallpaperManager: java.lang.Object sSync> = $r0;

        return;
    }

    void <init>(android.content.Context, android.os.Handler)
    {
        android.app.WallpaperManager r0;
        android.content.Context r1;
        android.os.Handler r2;
        android.os.Looper $r3;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.WallpaperManager: float mWallpaperXStep> = -1.0F;

        r0.<android.app.WallpaperManager: float mWallpaperYStep> = -1.0F;

        r0.<android.app.WallpaperManager: android.content.Context mContext> = r1;

        $r3 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        staticinvoke <android.app.WallpaperManager: void initGlobals(android.os.Looper)>($r3);

        return;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <android.app.WallpaperManager: java.lang.String TAG>;

        return $r0;
    }

    public static android.app.WallpaperManager getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.app.WallpaperManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wallpaper");

        $r2 = (android.app.WallpaperManager) $r1;

        return $r2;
    }

    private static android.graphics.RectF getMaxCropRect(int, int, int, int, float, float)
    {
        int i0, i1, i2, i3;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29;
        android.graphics.RectF r0, $r1;
        byte $b4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        $r1 = new android.graphics.RectF;

        specialinvoke $r1.<android.graphics.RectF: void <init>()>();

        r0 = $r1;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f9 = $f5 / $f4;

        $f7 = (float) i2;

        $f6 = (float) i3;

        $f8 = $f7 / $f6;

        $b4 = $f9 cmpl $f8;

        if $b4 <= 0 goto label1;

        r0.<android.graphics.RectF: float top> = 0.0F;

        $f19 = (float) i1;

        r0.<android.graphics.RectF: float bottom> = $f19;

        $f23 = (float) i2;

        $f21 = (float) i1;

        $f22 = (float) i3;

        $f24 = $f21 / $f22;

        f3 = $f23 * $f24;

        $f27 = (float) i0;

        $f28 = $f27 - f3;

        $f25 = f0 * $f28;

        r0.<android.graphics.RectF: float left> = $f25;

        $f26 = r0.<android.graphics.RectF: float left>;

        $f29 = f3 + $f26;

        r0.<android.graphics.RectF: float right> = $f29;

        return r0;

     label1:
        r0.<android.graphics.RectF: float left> = 0.0F;

        $f10 = (float) i0;

        r0.<android.graphics.RectF: float right> = $f10;

        $f13 = (float) i3;

        $f11 = (float) i0;

        $f12 = (float) i2;

        $f14 = $f11 / $f12;

        f2 = $f13 * $f14;

        $f16 = (float) i1;

        $f15 = $f16 - f2;

        $f18 = f1 * $f15;

        r0.<android.graphics.RectF: float top> = $f18;

        $f17 = r0.<android.graphics.RectF: float top>;

        $f20 = f2 + $f17;

        r0.<android.graphics.RectF: float bottom> = $f20;

        return r0;
    }

    static void initGlobals(android.os.Looper)
    {
        android.os.Looper r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        android.app.WallpaperManager$Globals $r3, $r4;

        r0 := @parameter0: android.os.Looper;

        r1 = <android.app.WallpaperManager: java.lang.Object sSync>;

        entermonitor r1;

     label1:
        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        if $r3 != null goto label2;

        $r4 = new android.app.WallpaperManager$Globals;

        specialinvoke $r4.<android.app.WallpaperManager$Globals: void <init>(android.os.Looper)>(r0);

        <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals> = $r4;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setWallpaper(java.io.InputStream, java.io.FileOutputStream) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        java.io.InputStream r1;
        java.io.FileOutputStream r2;
        byte[] r3;
        int i0;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.FileOutputStream;

        r3 = newarray (byte)[32768];

     label1:
        i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3);

        if i0 <= 0 goto label2;

        virtualinvoke r2.<java.io.FileOutputStream: void write(byte[],int,int)>(r3, 0, i0);

        goto label1;

     label2:
        return;
    }

    public void clear() throws java.io.IOException
    {
        android.app.WallpaperManager r0;

        r0 := @this: android.app.WallpaperManager;

        virtualinvoke r0.<android.app.WallpaperManager: void setResource(int)>(17302048);

        return;
    }

    public void clearWallpaperOffsets(android.os.IBinder)
    {
        android.app.WallpaperManager r0;
        android.os.IBinder r1;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.os.IBinder;

     label1:
        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r3.<android.view.IWindowSession: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>(r1, -1.0F, -1.0F, -1.0F, -1.0F);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forgetLoadedWallpaper()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        virtualinvoke $r1.<android.app.WallpaperManager$Globals: void forgetLoadedWallpaper()>();

        return;
    }

    public android.graphics.Bitmap getBitmap()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1;
        android.app.WallpaperManager$Globals $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r1, 1);

        return $r3;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = virtualinvoke r0.<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float)>(0, 0, 0, 0.0F, 0.0F);

        return $r1;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable(int, int, boolean, float, float)
    {
        android.app.WallpaperManager r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29;
        boolean z0;
        float f0, f1, f2, f3, f4, f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        android.content.res.Resources r1;
        java.io.BufferedInputStream r2, r4, r12, $r27, $r31, $r45;
        android.graphics.BitmapFactory$Options r3, r9, r15, $r30, $r49, $r50;
        android.graphics.RectF r5, r13, r14, $r34, $r36, $r40;
        android.graphics.Rect r6, $r33;
        android.graphics.BitmapRegionDecoder r8, r22;
        android.graphics.Bitmap r10, r11, r19, $r24;
        android.graphics.Matrix r16, $r38;
        android.graphics.Canvas r17, $r41;
        android.graphics.Paint r18, $r42;
        android.app.WallpaperManager$Globals $r20;
        android.app.IWallpaperManager $r21;
        android.content.Context $r23;
        android.graphics.drawable.BitmapDrawable $r25, $r37;
        java.io.InputStream $r26, $r32, $r44;
        java.lang.String $r28, $r35, $r46, $r47, $r48, $r52;
        android.graphics.Matrix$ScaleToFit $r39;
        android.graphics.Bitmap$Config $r43;
        java.io.IOException $r51;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        $r20 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r21 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r20);

        if $r21 != null goto label01;

        $r47 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r47, "WallpaperService not running");

        return null;

     label01:
        $r23 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r23.<android.content.Context: android.content.res.Resources getResources()>();

        $f7 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, f0);

        f2 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f7);

        $f8 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, f1);

        f3 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f8);

        $r27 = new java.io.BufferedInputStream;

        $r26 = virtualinvoke r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(17302048);

        specialinvoke $r27.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r26);

        r2 = $r27;

        if r2 != null goto label02;

        $r48 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r48, "default wallpaper input stream is null");

        return null;

     label02:
        if i0 <= 0 goto label03;

        if i1 > 0 goto label04;

     label03:
        $r25 = new android.graphics.drawable.BitmapDrawable;

        $r24 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r2, null, null);

        specialinvoke $r25.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r1, $r24);

        return $r25;

     label04:
        $r30 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r30.<android.graphics.BitmapFactory$Options: void <init>()>();

        r3 = $r30;

        r3.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r2, null, r3);

        $i11 = r3.<android.graphics.BitmapFactory$Options: int outWidth>;

        if $i11 == 0 goto label07;

        $i14 = r3.<android.graphics.BitmapFactory$Options: int outHeight>;

        if $i14 == 0 goto label07;

        i2 = r3.<android.graphics.BitmapFactory$Options: int outWidth>;

        i3 = r3.<android.graphics.BitmapFactory$Options: int outHeight>;

        $r31 = new java.io.BufferedInputStream;

        $r32 = virtualinvoke r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(17302048);

        specialinvoke $r31.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r32);

        r4 = $r31;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i0);

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, i1);

        if z0 == 0 goto label08;

        r5 = staticinvoke <android.app.WallpaperManager: android.graphics.RectF getMaxCropRect(int,int,int,int,float,float)>(i2, i3, i5, i4, f2, f3);

     label05:
        $r33 = new android.graphics.Rect;

        specialinvoke $r33.<android.graphics.Rect: void <init>()>();

        r6 = $r33;

        virtualinvoke r5.<android.graphics.RectF: void roundOut(android.graphics.Rect)>(r6);

        $i15 = virtualinvoke r6.<android.graphics.Rect: int width()>();

        if $i15 <= 0 goto label06;

        $i22 = virtualinvoke r6.<android.graphics.Rect: int height()>();

        if $i22 > 0 goto label09;

     label06:
        $r35 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r35, "crop has bad values for full size image");

        return null;

     label07:
        $r28 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r28, "default wallpaper dimensions are 0");

        return null;

     label08:
        $i12 = i2 - i5;

        $f9 = (float) $i12;

        f5 = f2 * $f9;

        $f12 = (float) i5;

        f4 = f5 + $f12;

        $i16 = i3 - i4;

        $f13 = (float) $i16;

        f6 = f3 * $f13;

        $r34 = new android.graphics.RectF;

        $f10 = (float) i4;

        $f11 = f6 + $f10;

        specialinvoke $r34.<android.graphics.RectF: void <init>(float,float,float,float)>(f5, f6, f4, $f11);

        r5 = $r34;

        goto label05;

     label09:
        $i21 = virtualinvoke r6.<android.graphics.Rect: int width()>();

        $i18 = $i21 / i5;

        $i17 = virtualinvoke r6.<android.graphics.Rect: int height()>();

        $i19 = $i17 / i4;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i19);

     label10:
        r22 = staticinvoke <android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>(r4, 1);

     label11:
        r8 = r22;

     label12:
        r10 = null;

        if r8 == null goto label14;

        $r49 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r49.<android.graphics.BitmapFactory$Options: void <init>()>();

        r9 = $r49;

        if i6 <= 1 goto label13;

        r9.<android.graphics.BitmapFactory$Options: int inSampleSize> = i6;

     label13:
        r10 = virtualinvoke r8.<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r6, r9);

        virtualinvoke r8.<android.graphics.BitmapRegionDecoder: void recycle()>();

     label14:
        if r10 != null goto label17;

        $r45 = new java.io.BufferedInputStream;

        $r44 = virtualinvoke r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(17302048);

        specialinvoke $r45.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r44);

        r12 = $r45;

        r11 = null;

        if r12 == null goto label16;

        $r50 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r50.<android.graphics.BitmapFactory$Options: void <init>()>();

        r15 = $r50;

        if i6 <= 1 goto label15;

        r15.<android.graphics.BitmapFactory$Options: int inSampleSize> = i6;

     label15:
        r11 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r12, null, r15);

     label16:
        if r11 == null goto label17;

        i9 = r6.<android.graphics.Rect: int left>;

        i7 = r6.<android.graphics.Rect: int top>;

        i8 = virtualinvoke r6.<android.graphics.Rect: int width()>();

        i10 = virtualinvoke r6.<android.graphics.Rect: int height()>();

        r10 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r11, i9, i7, i8, i10);

     label17:
        if r10 != null goto label19;

        $r46 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r46, "cannot decode default wallpaper");

        return null;

     label18:
        $r51 := @caughtexception;

        $r52 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r52, "cannot open region decoder for default wallpaper");

        r8 = null;

        goto label12;

     label19:
        if i5 <= 0 goto label21;

        if i4 <= 0 goto label21;

        $i24 = virtualinvoke r10.<android.graphics.Bitmap: int getWidth()>();

        if $i24 != i5 goto label20;

        $i29 = virtualinvoke r10.<android.graphics.Bitmap: int getHeight()>();

        if $i29 == i4 goto label21;

     label20:
        $r38 = new android.graphics.Matrix;

        specialinvoke $r38.<android.graphics.Matrix: void <init>()>();

        r16 = $r38;

        $r36 = new android.graphics.RectF;

        $i23 = virtualinvoke r10.<android.graphics.Bitmap: int getWidth()>();

        $f17 = (float) $i23;

        $i25 = virtualinvoke r10.<android.graphics.Bitmap: int getHeight()>();

        $f16 = (float) $i25;

        specialinvoke $r36.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f17, $f16);

        r13 = $r36;

        $r40 = new android.graphics.RectF;

        $f15 = (float) i5;

        $f14 = (float) i4;

        specialinvoke $r40.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f15, $f14);

        r14 = $r40;

        $r39 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r16.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r13, r14, $r39);

        $f19 = virtualinvoke r14.<android.graphics.RectF: float width()>();

        $i27 = (int) $f19;

        $f18 = virtualinvoke r14.<android.graphics.RectF: float height()>();

        $i26 = (int) $f18;

        $r43 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r19 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i27, $i26, $r43);

        if r19 == null goto label21;

        $r41 = new android.graphics.Canvas;

        specialinvoke $r41.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r19);

        r17 = $r41;

        $r42 = new android.graphics.Paint;

        specialinvoke $r42.<android.graphics.Paint: void <init>()>();

        r18 = $r42;

        virtualinvoke r18.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

        virtualinvoke r17.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r10, r16, r18);

        r10 = r19;

     label21:
        $r37 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r37.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r1, r10);

        return $r37;

        catch java.io.IOException from label10 to label11 with label18;
    }

    public android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)
    {
        android.app.WallpaperManager r0;
        android.net.Uri r1;
        android.content.pm.PackageManager r2;
        android.content.Intent r3, $r8, $r10, $r11;
        android.content.pm.ResolveInfo r4;
        java.lang.String $r5, $r6, $r15;
        boolean $z0;
        android.content.Context $r7;
        java.util.List $r12, $r17;
        java.lang.IllegalArgumentException $r14, $r19;
        int $i0, $i1;
        android.content.pm.ActivityInfo $r16;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.net.Uri;

        $r5 = "content";

        $r6 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image URI must be of the content scheme type");

        throw $r19;

     label1:
        $r7 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r2 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.service.wallpaper.CROP_AND_SET_WALLPAPER", r1);

        r3 = $r8;

        virtualinvoke r3.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        $r11 = virtualinvoke $r10.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        r4 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>($r11, 65536);

        if r4 == null goto label3;

        $r16 = r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r15 = $r16.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r15);

        $r17 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>(r3, 0);

        $i1 = interfaceinvoke $r17.<java.util.List: int size()>();

        if $i1 <= 0 goto label3;

     label2:
        return r3;

     label3:
        virtualinvoke r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("com.android.wallpapercropper");

        $r12 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>(r3, 0);

        $i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        if $i0 > 0 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use passed URI to set wallpaper; check that the type returned by ContentProvider matches image/*");

        throw $r14;
    }

    public int getDesiredMinimumHeight()
    {
        android.app.WallpaperManager r0;
        int i0;
        android.app.WallpaperManager$Globals $r2, $r4;
        android.app.IWallpaperManager $r3, $r5;
        java.lang.String $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r2);

        if $r3 != null goto label1;

        $r6 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

        return 0;

     label1:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r4);

        i0 = interfaceinvoke $r5.<android.app.IWallpaperManager: int getHeightHint()>();

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDesiredMinimumWidth()
    {
        android.app.WallpaperManager r0;
        int i0;
        android.app.WallpaperManager$Globals $r2, $r4;
        android.app.IWallpaperManager $r3, $r5;
        java.lang.String $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r2);

        if $r3 != null goto label1;

        $r6 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

        return 0;

     label1:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r4);

        i0 = interfaceinvoke $r5.<android.app.IWallpaperManager: int getWidthHint()>();

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable getDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable r2, $r5;
        android.content.Context $r3, $r6;
        android.app.WallpaperManager$Globals $r4;
        android.content.res.Resources $r7;

        r0 := @this: android.app.WallpaperManager;

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r3, 1);

        if r1 == null goto label1;

        $r5 = new android.graphics.drawable.BitmapDrawable;

        $r6 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r7, r1);

        r2 = $r5;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(0);

        return r2;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getFastDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.content.Context $r2;
        android.app.WallpaperManager$Globals $r3;
        android.app.WallpaperManager$FastBitmapDrawable $r4;

        r0 := @this: android.app.WallpaperManager;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r2, 1);

        if r1 == null goto label1;

        $r4 = new android.app.WallpaperManager$FastBitmapDrawable;

        specialinvoke $r4.<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)>(r1, null);

        return $r4;

     label1:
        return null;
    }

    public android.app.IWallpaperManager getIWallpaperManager()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r1;
        android.app.IWallpaperManager $r2;

        r0 := @this: android.app.WallpaperManager;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r1);

        return $r2;
    }

    public android.app.WallpaperInfo getWallpaperInfo()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperInfo r2;
        android.app.WallpaperManager$Globals $r3, $r5;
        android.app.IWallpaperManager $r4, $r6;
        java.lang.String $r7;
        android.os.RemoteException $r8;

        r0 := @this: android.app.WallpaperManager;

     label1:
        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r4 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r3);

        if $r4 != null goto label3;

        $r7 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "WallpaperService not running");

     label2:
        return null;

     label3:
        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r5);

        r2 = interfaceinvoke $r6.<android.app.IWallpaperManager: android.app.WallpaperInfo getWallpaperInfo()>();

     label4:
        return r2;

     label5:
        $r8 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean hasResourceWallpaper(int)
    {
        android.app.WallpaperManager r0;
        int i0;
        android.content.res.Resources r2;
        java.lang.String r3, $r9, $r13;
        boolean z0;
        android.app.WallpaperManager$Globals $r4, $r11;
        android.app.IWallpaperManager $r5, $r12;
        android.content.Context $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        android.os.RemoteException $r14;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r4);

        if $r5 != null goto label1;

        $r13 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r13, "WallpaperService not running");

        return 0;

     label1:
        $r6 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r2 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("res:");

        $r9 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r12 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r11);

        z0 = interfaceinvoke $r12.<android.app.IWallpaperManager: boolean hasNamedWallpaper(java.lang.String)>(r3);

     label2:
        return z0;

     label3:
        $r14 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable peekDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable r2, $r5;
        android.content.Context $r3, $r6;
        android.app.WallpaperManager$Globals $r4;
        android.content.res.Resources $r7;

        r0 := @this: android.app.WallpaperManager;

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r3, 0);

        if r1 == null goto label1;

        $r5 = new android.graphics.drawable.BitmapDrawable;

        $r6 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r7, r1);

        r2 = $r5;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(0);

        return r2;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable peekFastDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.content.Context $r2;
        android.app.WallpaperManager$Globals $r3;
        android.app.WallpaperManager$FastBitmapDrawable $r4;

        r0 := @this: android.app.WallpaperManager;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r2, 0);

        if r1 == null goto label1;

        $r4 = new android.app.WallpaperManager$FastBitmapDrawable;

        specialinvoke $r4.<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)>(r1, null);

        return $r4;

     label1:
        return null;
    }

    public void sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)
    {
        android.app.WallpaperManager r0;
        android.os.IBinder r1;
        java.lang.String r2;
        int i0, i1, i2;
        android.os.Bundle r3;
        android.view.IWindowSession $r5;
        android.os.RemoteException $r7;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

     label1:
        $r5 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r5.<android.view.IWindowSession: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>(r1, r2, i0, i1, i2, r3, 0);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBitmap(android.graphics.Bitmap) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.os.ParcelFileDescriptor r3;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r4, r6, $r11;
        java.lang.Throwable r5, $r14, $r16;
        android.app.WallpaperManager$Globals $r7, $r9;
        android.app.IWallpaperManager $r8, $r10;
        android.graphics.Bitmap$CompressFormat $r12;
        java.lang.String $r13;
        android.os.RemoteException $r15;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.graphics.Bitmap;

        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r7);

        if $r8 != null goto label02;

        $r13 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r13, "WallpaperService not running");

     label01:
        return;

     label02:
        $r9 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r10 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r9);

        r3 = interfaceinvoke $r10.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>(null);

     label03:
        if r3 == null goto label01;

     label04:
        $r11 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r11.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r3);

        r4 = $r11;

     label05:
        $r12 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r1.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r12, 90, r4);

     label06:
        if r4 == null goto label01;

     label07:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label08:
        return;

     label09:
        if r6 == null goto label11;

     label10:
        virtualinvoke r6.<java.io.FileOutputStream: void close()>();

     label11:
        throw r5;

     label12:
        $r14 := @caughtexception;

        r5 = $r14;

        r6 = r4;

        goto label09;

     label13:
        $r15 := @caughtexception;

        return;

     label14:
        $r16 := @caughtexception;

        r5 = $r16;

        r6 = null;

        goto label09;

        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    public void setResource(int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        int i0;
        android.content.res.Resources r2;
        android.os.ParcelFileDescriptor r3;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r4, r6, $r18;
        java.lang.Throwable r5, $r20, $r21;
        android.app.WallpaperManager$Globals $r7, $r10;
        android.app.IWallpaperManager $r8, $r11;
        android.content.Context $r9;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15, $r16, $r19;
        java.io.InputStream $r17;
        android.os.RemoteException $r22;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r7);

        if $r8 != null goto label02;

        $r19 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r19, "WallpaperService not running");

     label01:
        return;

     label02:
        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r2 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r10 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r11 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r10);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("res:");

        $r15 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = interfaceinvoke $r11.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>($r16);

     label03:
        if r3 == null goto label01;

     label04:
        $r18 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r18.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r3);

        r4 = $r18;

     label05:
        $r17 = virtualinvoke r2.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

        specialinvoke r0.<android.app.WallpaperManager: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)>($r17, r4);

     label06:
        if r4 == null goto label01;

     label07:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label08:
        return;

     label09:
        if r6 == null goto label11;

     label10:
        virtualinvoke r6.<java.io.FileOutputStream: void close()>();

     label11:
        throw r5;

     label12:
        $r20 := @caughtexception;

        r5 = $r20;

        r6 = r4;

        goto label09;

     label13:
        $r22 := @caughtexception;

        return;

     label14:
        $r21 := @caughtexception;

        r5 = $r21;

        r6 = null;

        goto label09;

        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    public void setStream(java.io.InputStream) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        java.io.InputStream r1;
        android.os.ParcelFileDescriptor r3;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r4, r6, $r11;
        java.lang.Throwable r5, $r14, $r15;
        android.app.WallpaperManager$Globals $r7, $r9;
        android.app.IWallpaperManager $r8, $r10;
        java.lang.String $r12;
        android.os.RemoteException $r13;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: java.io.InputStream;

        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r7);

        if $r8 != null goto label02;

        $r12 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r12, "WallpaperService not running");

     label01:
        return;

     label02:
        $r9 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r10 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r9);

        r3 = interfaceinvoke $r10.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>(null);

     label03:
        if r3 == null goto label01;

     label04:
        $r11 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r11.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r3);

        r4 = $r11;

     label05:
        specialinvoke r0.<android.app.WallpaperManager: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)>(r1, r4);

     label06:
        if r4 == null goto label01;

     label07:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label08:
        return;

     label09:
        if r6 == null goto label11;

     label10:
        virtualinvoke r6.<java.io.FileOutputStream: void close()>();

     label11:
        throw r5;

     label12:
        $r14 := @caughtexception;

        r5 = $r14;

        r6 = r4;

        goto label09;

     label13:
        $r13 := @caughtexception;

        return;

     label14:
        $r15 := @caughtexception;

        r5 = $r15;

        r6 = null;

        goto label09;

        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    public void setWallpaperOffsetSteps(float, float)
    {
        android.app.WallpaperManager r0;
        float f0, f1;

        r0 := @this: android.app.WallpaperManager;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.app.WallpaperManager: float mWallpaperXStep> = f0;

        r0.<android.app.WallpaperManager: float mWallpaperYStep> = f1;

        return;
    }

    public void setWallpaperOffsets(android.os.IBinder, float, float)
    {
        android.app.WallpaperManager r0;
        android.os.IBinder r1;
        float f0, f1, $f2, $f3;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

     label1:
        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        $f3 = r0.<android.app.WallpaperManager: float mWallpaperXStep>;

        $f2 = r0.<android.app.WallpaperManager: float mWallpaperYStep>;

        interfaceinvoke $r3.<android.view.IWindowSession: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>(r1, f0, f1, $f3, $f2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void suggestDesiredDimensions(int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1;
        android.app.WallpaperManager$Globals $r2, $r4;
        android.app.IWallpaperManager $r3, $r5;
        java.lang.String $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r2);

        if $r3 != null goto label3;

        $r6 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

     label2:
        return;

     label3:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>($r4);

        interfaceinvoke $r5.<android.app.IWallpaperManager: void setDimensionHints(int,int)>(i0, i1);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }
}
