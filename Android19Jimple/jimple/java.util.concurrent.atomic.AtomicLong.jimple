public class java.util.concurrent.atomic.AtomicLong extends java.lang.Number implements java.io.Serializable
{
    static final boolean VM_SUPPORTS_LONG_CAS;
    private static final long serialVersionUID;
    private static final sun.misc.Unsafe unsafe;
    private static final long valueOffset;
    private volatile long value;

    static void <clinit>()
    {
        java.lang.Exception r0, $r5;
        sun.misc.Unsafe $r1, $r3;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        <java.util.concurrent.atomic.AtomicLong: long serialVersionUID> = 1927816293512124184L;

        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe> = $r1;

        $z0 = staticinvoke <java.util.concurrent.atomic.AtomicLong: boolean VMSupportsCS8()>();

        <java.util.concurrent.atomic.AtomicLong: boolean VM_SUPPORTS_LONG_CAS> = $z0;

     label1:
        $r3 = <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe>;

        $r2 = class "java/util/concurrent/atomic/AtomicLong";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.atomic.AtomicLong: long valueOffset> = $l0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong r0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        return;
    }

    public void <init>(long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.util.concurrent.atomic.AtomicLong: long value> = l0;

        return;
    }

    private static native boolean VMSupportsCS8();

    public final long addAndGet(long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

     label1:
        l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l2 = l1 + l0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l1, l2);

        if $z0 == 0 goto label1;

        return l2;
    }

    public final boolean compareAndSet(long, long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, l1, $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe>;

        $l2 = <java.util.concurrent.atomic.AtomicLong: long valueOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l2, l0, l1);

        return $z0;
    }

    public final long decrementAndGet()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l1 = l0 - 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l0, l1);

        if $z0 == 0 goto label1;

        return l1;
    }

    public double doubleValue()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;
        double $d0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $d0 = (double) $l0;

        return $d0;
    }

    public float floatValue()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;
        float $f0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $f0 = (float) $l0;

        return $f0;
    }

    public final long get()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        $l0 = r0.<java.util.concurrent.atomic.AtomicLong: long value>;

        return $l0;
    }

    public final long getAndAdd(long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, l1, $l2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

     label1:
        l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l2 = l1 + l0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l1, $l2);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndDecrement()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, $l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = l0 - 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l0, $l1);

        if $z0 == 0 goto label1;

        return l0;
    }

    public final long getAndIncrement()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, $l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = l0 + 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l0, $l1);

        if $z0 == 0 goto label1;

        return l0;
    }

    public final long getAndSet(long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

     label1:
        l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l1, l0);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long incrementAndGet()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l1 = l0 + 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l0, l1);

        if $z0 == 0 goto label1;

        return l1;
    }

    public int intValue()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public final void lazySet(long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, $l1;
        sun.misc.Unsafe $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

        $r1 = <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe>;

        $l1 = <java.util.concurrent.atomic.AtomicLong: long valueOffset>;

        virtualinvoke $r1.<sun.misc.Unsafe: void putOrderedLong(java.lang.Object,long,long)>(r0, $l1, l0);

        return;
    }

    public long longValue()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public final void set(long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

        r0.<java.util.concurrent.atomic.AtomicLong: long value> = l0;

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        return $r1;
    }

    public final boolean weakCompareAndSet(long, long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long l0, l1, $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe>;

        $l2 = <java.util.concurrent.atomic.AtomicLong: long valueOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l2, l0, l1);

        return $z0;
    }
}
