class com.android.server.am.ActivityManagerService$CpuBinder extends android.os.Binder
{
    com.android.server.am.ActivityManagerService mActivityManagerService;

    void <init>(com.android.server.am.ActivityManagerService)
    {
        com.android.server.am.ActivityManagerService$CpuBinder r0;
        com.android.server.am.ActivityManagerService r1;

        r0 := @this: com.android.server.am.ActivityManagerService$CpuBinder;

        r1 := @parameter0: com.android.server.am.ActivityManagerService;

        specialinvoke r0.<android.os.Binder: void <init>()>();

        r0.<com.android.server.am.ActivityManagerService$CpuBinder: com.android.server.am.ActivityManagerService mActivityManagerService> = r1;

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.am.ActivityManagerService$CpuBinder r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Thread r4;
        java.lang.Throwable r5, $r22;
        com.android.server.am.ActivityManagerService $r6, $r7, $r8, $r11;
        int $i0, $i2, $i3;
        com.android.internal.os.ProcessCpuTracker $r9, $r12;
        java.lang.String $r10, $r13, $r20;
        long $l1;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r21;

        r0 := @this: com.android.server.am.ActivityManagerService$CpuBinder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r6 = r0.<com.android.server.am.ActivityManagerService$CpuBinder: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $i0 = virtualinvoke $r6.<com.android.server.am.ActivityManagerService: int checkCallingPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump cpuinfo from from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.DUMP");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        return;

     label1:
        $r7 = r0.<com.android.server.am.ActivityManagerService$CpuBinder: com.android.server.am.ActivityManagerService mActivityManagerService>;

        r4 = $r7.<com.android.server.am.ActivityManagerService: java.lang.Thread mProcessCpuThread>;

        entermonitor r4;

     label2:
        $r8 = r0.<com.android.server.am.ActivityManagerService$CpuBinder: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r9 = $r8.<com.android.server.am.ActivityManagerService: com.android.internal.os.ProcessCpuTracker mProcessCpuTracker>;

        $r10 = virtualinvoke $r9.<com.android.internal.os.ProcessCpuTracker: java.lang.String printCurrentLoad()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r10);

        $r11 = r0.<com.android.server.am.ActivityManagerService$CpuBinder: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r12 = $r11.<com.android.server.am.ActivityManagerService: com.android.internal.os.ProcessCpuTracker mProcessCpuTracker>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r13 = virtualinvoke $r12.<com.android.internal.os.ProcessCpuTracker: java.lang.String printCurrentState(long)>($l1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r13);

        exitmonitor r4;

     label3:
        return;

     label4:
        $r22 := @caughtexception;

        r5 = $r22;

     label5:
        exitmonitor r4;

     label6:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
