public class gov.nist.javax.sip.parser.ContactParser extends gov.nist.javax.sip.parser.AddressParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ContactParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ContactParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer> = r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ContactParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ContactParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ContactParser r0;
        gov.nist.javax.sip.header.ContactList r1, $r3;
        gov.nist.javax.sip.header.Contact r2, $r4;
        char c0, c1, $c2;
        gov.nist.core.LexerCore $r5, $r6, $r7, $r10, $r11, $r12, $r13;
        java.text.ParseException $r8;

        r0 := @this: gov.nist.javax.sip.parser.ContactParser;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ContactParser: void headerName(int)>(2087);

        $r3 = new gov.nist.javax.sip.header.ContactList;

        specialinvoke $r3.<gov.nist.javax.sip.header.ContactList: void <init>()>();

        r1 = $r3;

     label1:
        $r4 = new gov.nist.javax.sip.header.Contact;

        specialinvoke $r4.<gov.nist.javax.sip.header.Contact: void <init>()>();

        r2 = $r4;

        $r5 = r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r5.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 != 42 goto label5;

        $r11 = r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer>;

        c1 = virtualinvoke $r11.<gov.nist.core.LexerCore: char lookAhead(int)>(1);

        if c1 == 32 goto label2;

        if c1 == 9 goto label2;

        if c1 == 13 goto label2;

        if c1 != 10 goto label4;

     label2:
        $r13 = r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(42);

        virtualinvoke r2.<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>(1);

     label3:
        virtualinvoke r1.<gov.nist.javax.sip.header.ContactList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r2);

        $r6 = r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        $r7 = r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c0 != 44 goto label6;

        $r10 = r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r12 = r0.<gov.nist.javax.sip.parser.ContactParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: void SPorHT()>();

        goto label1;

     label4:
        specialinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void parse(gov.nist.javax.sip.header.AddressParametersHeader)>(r2);

        goto label3;

     label5:
        specialinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void parse(gov.nist.javax.sip.header.AddressParametersHeader)>(r2);

        goto label3;

     label6:
        if c0 == 10 goto label7;

        if c0 != 0 goto label8;

     label7:
        return r1;

     label8:
        $r8 = virtualinvoke r0.<gov.nist.javax.sip.parser.ContactParser: java.text.ParseException createParseException(java.lang.String)>("unexpected char");

        throw $r8;
    }
}
