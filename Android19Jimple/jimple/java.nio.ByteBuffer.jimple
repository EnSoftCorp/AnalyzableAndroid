public abstract class java.nio.ByteBuffer extends java.nio.Buffer implements java.lang.Comparable
{
    java.nio.ByteOrder order;

    void <init>(int, java.nio.MemoryBlock)
    {
        java.nio.ByteBuffer r0;
        int i0;
        java.nio.MemoryBlock r1;
        java.nio.ByteOrder $r2;

        r0 := @this: java.nio.ByteBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.MemoryBlock;

        specialinvoke r0.<java.nio.Buffer: void <init>(int,int,java.nio.MemoryBlock)>(0, i0, r1);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        r0.<java.nio.ByteBuffer: java.nio.ByteOrder order> = $r2;

        return;
    }

    public static java.nio.ByteBuffer allocate(int)
    {
        int i0;
        java.nio.ByteArrayBuffer $r0;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r0 = new java.nio.ByteArrayBuffer;

        $r1 = newarray (byte)[i0];

        specialinvoke $r0.<java.nio.ByteArrayBuffer: void <init>(byte[])>($r1);

        return $r0;
    }

    public static java.nio.ByteBuffer allocateDirect(int)
    {
        int i0;
        java.nio.DirectByteBuffer $r0;
        java.nio.MemoryBlock $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r0 = new java.nio.DirectByteBuffer;

        $r1 = staticinvoke <java.nio.MemoryBlock: java.nio.MemoryBlock allocate(int)>(i0);

        specialinvoke $r0.<java.nio.DirectByteBuffer: void <init>(java.nio.MemoryBlock,int,int,boolean,java.nio.channels.FileChannel$MapMode)>($r1, i0, 0, 0, null);

        return $r0;
    }

    public static java.nio.ByteBuffer wrap(byte[])
    {
        byte[] r0;
        java.nio.ByteArrayBuffer $r1;

        r0 := @parameter0: byte[];

        $r1 = new java.nio.ByteArrayBuffer;

        specialinvoke $r1.<java.nio.ByteArrayBuffer: void <init>(byte[])>(r0);

        return $r1;
    }

    public static java.nio.ByteBuffer wrap(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3;
        java.nio.ByteArrayBuffer r1, $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r2 = new java.nio.ByteArrayBuffer;

        specialinvoke $r2.<java.nio.ByteArrayBuffer: void <init>(byte[])>(r0);

        r1 = $r2;

        r1.<java.nio.ByteBuffer: int position> = i0;

        $i3 = i0 + i1;

        r1.<java.nio.ByteBuffer: int limit> = $i3;

        return r1;
    }

    public volatile java.lang.Object array()
    {
        java.nio.ByteBuffer r0;
        byte[] $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        return $r1;
    }

    public final byte[] array()
    {
        java.nio.ByteBuffer r0;
        byte[] $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] protectedArray()>();

        return $r1;
    }

    public final int arrayOffset()
    {
        java.nio.ByteBuffer r0;
        int $i0;

        r0 := @this: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int protectedArrayOffset()>();

        return $i0;
    }

    public abstract java.nio.CharBuffer asCharBuffer();

    public abstract java.nio.DoubleBuffer asDoubleBuffer();

    public abstract java.nio.FloatBuffer asFloatBuffer();

    public abstract java.nio.IntBuffer asIntBuffer();

    public abstract java.nio.LongBuffer asLongBuffer();

    public abstract java.nio.ByteBuffer asReadOnlyBuffer();

    public abstract java.nio.ShortBuffer asShortBuffer();

    public abstract java.nio.ByteBuffer compact();

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.ByteBuffer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.nio.ByteBuffer) r1;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>($r2);

        return $i0;
    }

    public int compareTo(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9;
        byte b3, b4;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i5 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i5 >= $i6 goto label3;

        i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

     label1:
        i1 = r0.<java.nio.ByteBuffer: int position>;

        i2 = r1.<java.nio.ByteBuffer: int position>;

     label2:
        if i0 <= 0 goto label6;

        b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>(i1);

        b4 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>(i2);

        if b3 == b4 goto label5;

        if b3 >= b4 goto label4;

        return -1;

     label3:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        goto label1;

     label4:
        return 1;

     label5:
        i1 = i1 + 1;

        i2 = i2 + 1;

        i0 = i0 + -1;

        goto label2;

     label6:
        $i7 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $i8 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i9 = $i7 - $i8;

        return $i9;
    }

    public abstract java.nio.ByteBuffer duplicate();

    public boolean equals(java.lang.Object)
    {
        java.nio.ByteBuffer r0, r2;
        java.lang.Object r1;
        int i0, i1, i2, i3, i4, i6, $i7, $i8, $i9;
        boolean z0, $z1;
        byte b5, $b10;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.lang.Object;

        $z1 = r1 instanceof java.nio.ByteBuffer;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.nio.ByteBuffer) r1;

        $i7 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $i8 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        if $i7 != $i8 goto label1;

        i0 = r0.<java.nio.ByteBuffer: int position>;

        i1 = r2.<java.nio.ByteBuffer: int position>;

        z0 = 1;

        i2 = i1;

        i3 = i0;

     label3:
        if z0 == 0 goto label6;

        $i9 = r0.<java.nio.ByteBuffer: int limit>;

        if i3 >= $i9 goto label6;

        i4 = i3 + 1;

        b5 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>(i3);

        i6 = i2 + 1;

        $b10 = virtualinvoke r2.<java.nio.ByteBuffer: byte get(int)>(i2);

        if b5 != $b10 goto label5;

        z0 = 1;

     label4:
        i2 = i6;

        i3 = i4;

        goto label3;

     label5:
        z0 = 0;

        goto label4;

     label6:
        return z0;
    }

    public abstract byte get();

    public abstract byte get(int);

    public java.nio.ByteBuffer get(byte[])
    {
        java.nio.ByteBuffer r0, $r2;
        byte[] r1;
        int $i0;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.nio.ByteBuffer get(byte[], int, int)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        byte $b6;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if i1 <= $i4 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        i2 = i0;

     label2:
        $i5 = i0 + i1;

        if i2 >= $i5 goto label3;

        $b6 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        r1[i2] = $b6;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r0;
    }

    public abstract char getChar();

    public abstract char getChar(int);

    public abstract double getDouble();

    public abstract double getDouble(int);

    public abstract float getFloat();

    public abstract float getFloat(int);

    public abstract int getInt();

    public abstract int getInt(int);

    public abstract long getLong();

    public abstract long getLong(int);

    public abstract short getShort();

    public abstract short getShort(int);

    public final boolean hasArray()
    {
        java.nio.ByteBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean protectedHasArray()>();

        return $z0;
    }

    public int hashCode()
    {
        java.nio.ByteBuffer r0;
        int i0, i1, i2, $i3;
        byte $b4;

        r0 := @this: java.nio.ByteBuffer;

        i0 = r0.<java.nio.ByteBuffer: int position>;

        i1 = 0;

     label1:
        $i3 = r0.<java.nio.ByteBuffer: int limit>;

        if i0 >= $i3 goto label2;

        i2 = i0 + 1;

        $b4 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>(i0);

        i1 = i1 + $b4;

        i0 = i2;

        goto label1;

     label2:
        return i1;
    }

    public abstract boolean isDirect();

    public final java.nio.ByteBuffer order(java.nio.ByteOrder)
    {
        java.nio.ByteBuffer r0;
        java.nio.ByteOrder r1;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.nio.ByteOrder;

        if r1 != null goto label1;

        r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

     label1:
        r0.<java.nio.ByteBuffer: java.nio.ByteOrder order> = r1;

        return r0;
    }

    public final java.nio.ByteOrder order()
    {
        java.nio.ByteBuffer r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.ByteBuffer;

        $r1 = r0.<java.nio.ByteBuffer: java.nio.ByteOrder order>;

        return $r1;
    }

    abstract byte[] protectedArray();

    abstract int protectedArrayOffset();

    abstract boolean protectedHasArray();

    public abstract java.nio.ByteBuffer put(byte);

    public abstract java.nio.ByteBuffer put(int, byte);

    public java.nio.ByteBuffer put(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9;
        java.lang.Object r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l5;
        java.lang.IllegalArgumentException $r6;
        java.nio.BufferOverflowException $r7;
        java.nio.ReadOnlyBufferException $r8;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r8 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r8.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r8;

     label1:
        if r1 != r0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("src == this");

        throw $r6;

     label2:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if i0 <= $i3 goto label3;

        $r7 = new java.nio.BufferOverflowException;

        specialinvoke $r7.<java.nio.BufferOverflowException: void <init>()>();

        throw $r7;

     label3:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 == 0 goto label8;

        r2 = r1;

     label4:
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z2 != 0 goto label5;

        $i8 = staticinvoke <java.nio.NioUtils: int unsafeArrayOffset(java.nio.ByteBuffer)>(r1);

        i1 = i1 + $i8;

     label5:
        $z3 = virtualinvoke r0.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z3 == 0 goto label9;

        r3 = r0;

     label6:
        i2 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $z4 = virtualinvoke r0.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z4 != 0 goto label7;

        $i9 = staticinvoke <java.nio.NioUtils: int unsafeArrayOffset(java.nio.ByteBuffer)>(r0);

        i2 = i2 + $i9;

     label7:
        $l5 = (long) i0;

        staticinvoke <libcore.io.Memory: void memmove(java.lang.Object,int,java.lang.Object,int,long)>(r3, i2, r2, i1, $l5);

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        $i6 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i7 = i0 + $i6;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i7);

        return r0;

     label8:
        r2 = staticinvoke <java.nio.NioUtils: byte[] unsafeArray(java.nio.ByteBuffer)>(r1);

        goto label4;

     label9:
        r3 = staticinvoke <java.nio.NioUtils: byte[] unsafeArray(java.nio.ByteBuffer)>(r0);

        goto label6;
    }

    public final java.nio.ByteBuffer put(byte[])
    {
        java.nio.ByteBuffer r0, $r2;
        byte[] r1;
        int $i0;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.nio.ByteBuffer put(byte[], int, int)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        byte $b6;
        java.nio.BufferOverflowException $r3;

        r0 := @this: java.nio.ByteBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if i1 <= $i4 goto label1;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label1:
        i2 = i0;

     label2:
        $i5 = i0 + i1;

        if i2 >= $i5 goto label3;

        $b6 = r1[i2];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b6);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r0;
    }

    public abstract java.nio.ByteBuffer putChar(char);

    public abstract java.nio.ByteBuffer putChar(int, char);

    public abstract java.nio.ByteBuffer putDouble(double);

    public abstract java.nio.ByteBuffer putDouble(int, double);

    public abstract java.nio.ByteBuffer putFloat(float);

    public abstract java.nio.ByteBuffer putFloat(int, float);

    public abstract java.nio.ByteBuffer putInt(int);

    public abstract java.nio.ByteBuffer putInt(int, int);

    public abstract java.nio.ByteBuffer putLong(int, long);

    public abstract java.nio.ByteBuffer putLong(long);

    public abstract java.nio.ByteBuffer putShort(int, short);

    public abstract java.nio.ByteBuffer putShort(short);

    public abstract java.nio.ByteBuffer slice();
}
