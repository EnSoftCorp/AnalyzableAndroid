public abstract class com.android.org.chromium.base.CommandLine extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    private static final java.util.concurrent.atomic.AtomicReference sCommandLine;

    static void <clinit>()
    {
        boolean z0, $z1;
        java.lang.Class $r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        $r0 = class "com/android/org/chromium/base/CommandLine";

        $z1 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z1 != 0 goto label2;

        z0 = 1;

     label1:
        <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled> = z0;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine> = $r1;

        return;

     label2:
        z0 = 0;

        goto label1;
    }

    private void <init>()
    {
        com.android.org.chromium.base.CommandLine r0;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(com.android.org.chromium.base.CommandLine$1)
    {
        com.android.org.chromium.base.CommandLine r0;
        com.android.org.chromium.base.CommandLine$1 r1;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        r1 := @parameter0: com.android.org.chromium.base.CommandLine$1;

        specialinvoke r0.<com.android.org.chromium.base.CommandLine: void <init>()>();

        return;
    }

    static boolean access$300(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.android.org.chromium.base.CommandLine: boolean nativeHasSwitch(java.lang.String)>(r0);

        return $z0;
    }

    static java.lang.String access$400(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.org.chromium.base.CommandLine: java.lang.String nativeGetSwitchValue(java.lang.String)>(r0);

        return $r1;
    }

    static void access$500(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.org.chromium.base.CommandLine: void nativeAppendSwitch(java.lang.String)>(r0);

        return;
    }

    public static void enableNativeProxy()
    {
        com.android.org.chromium.base.CommandLine$NativeCommandLine $r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        $r1 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r0 = new com.android.org.chromium.base.CommandLine$NativeCommandLine;

        specialinvoke $r0.<com.android.org.chromium.base.CommandLine$NativeCommandLine: void <init>(com.android.org.chromium.base.CommandLine$1)>(null);

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r0);

        return;
    }

    public static com.android.org.chromium.base.CommandLine getInstance()
    {
        com.android.org.chromium.base.CommandLine r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.AssertionError $r3;

        $r1 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r0 = (com.android.org.chromium.base.CommandLine) $r2;

        $z0 = <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        return r0;
    }

    public static java.lang.String[] getJavaSwitchesOrNull()
    {
        com.android.org.chromium.base.CommandLine r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        com.android.org.chromium.base.CommandLine$JavaCommandLine $r3;
        java.lang.String[] $r4;
        java.lang.AssertionError $r5;

        $r1 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r0 = (com.android.org.chromium.base.CommandLine) $r2;

        if r0 == null goto label2;

        $z0 = <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.org.chromium.base.CommandLine: boolean isNativeImplementation()>();

        if $z1 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r3 = (com.android.org.chromium.base.CommandLine$JavaCommandLine) r0;

        $r4 = staticinvoke <com.android.org.chromium.base.CommandLine$JavaCommandLine: java.lang.String[] access$100(com.android.org.chromium.base.CommandLine$JavaCommandLine)>($r3);

        return $r4;

     label2:
        return null;
    }

    public static void init(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.org.chromium.base.CommandLine$JavaCommandLine $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new com.android.org.chromium.base.CommandLine$JavaCommandLine;

        specialinvoke $r1.<com.android.org.chromium.base.CommandLine$JavaCommandLine: void <init>(java.lang.String[])>(r0);

        staticinvoke <com.android.org.chromium.base.CommandLine: void setInstance(com.android.org.chromium.base.CommandLine)>($r1);

        return;
    }

    public static void initFromFile(java.lang.String)
    {
        java.lang.String r0;
        char[] r1;
        java.lang.String[] r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.android.org.chromium.base.CommandLine: char[] readUtf8FileFully(java.lang.String,int)>(r0, 8192);

        if r1 != null goto label2;

        r2 = null;

     label1:
        staticinvoke <com.android.org.chromium.base.CommandLine: void init(java.lang.String[])>(r2);

        return;

     label2:
        r2 = staticinvoke <com.android.org.chromium.base.CommandLine: java.lang.String[] tokenizeQuotedAruments(char[])>(r1);

        goto label1;
    }

    public static boolean isInitialized()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;

        $r0 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private static native void nativeAppendSwitch(java.lang.String);

    private static native void nativeAppendSwitchWithValue(java.lang.String, java.lang.String);

    private static native void nativeAppendSwitchesAndArguments(java.lang.String[]);

    private static native java.lang.String nativeGetSwitchValue(java.lang.String);

    private static native boolean nativeHasSwitch(java.lang.String);

    private static native void nativeReset();

    private static char[] readUtf8FileFully(java.lang.String, int)
    {
        java.lang.String r0, $r25;
        int i0, i2, i3, $i7;
        java.io.InputStreamReader r1, r4, r12, $r18;
        java.io.File r2, $r15;
        long l1, $l6;
        java.io.IOException r5, r7, r9, r14, $r28, $r29, $r31, $r33, $r35, $r37;
        java.lang.Throwable r6, $r30, $r34;
        char[] r10, r16;
        byte $b4, $b5;
        java.io.FileInputStream $r17;
        boolean $z0, $z1;
        java.lang.StringBuilder $r19, $r21, $r22, $r23, $r24, $r26, $r27;
        java.lang.AssertionError $r20;
        java.io.FileNotFoundException $r32, $r36;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = null;

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r0);

        r2 = $r15;

        l1 = virtualinvoke r2.<java.io.File: long length()>();

        $b4 = l1 cmp 0L;

        if $b4 != 0 goto label01;

        return null;

     label01:
        $l6 = (long) i0;

        $b5 = l1 cmp $l6;

        if $b5 <= 0 goto label02;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds limit ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CommandLine", $r25);

        return null;

     label02:
        i2 = (int) l1;

     label03:
        r10 = newarray (char)[i2];

        $r18 = new java.io.InputStreamReader;

        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r18.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r17, "UTF-8");

        r12 = $r18;

     label04:
        i3 = virtualinvoke r12.<java.io.Reader: int read(char[])>(r10);

        $z0 = <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled>;

        if $z0 != 0 goto label09;

        $z1 = virtualinvoke r12.<java.io.Reader: boolean ready()>();

        if $z1 == 0 goto label09;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label05:
        $r36 := @caughtexception;

        r4 = r12;

     label06:
        if r4 == null goto label08;

     label07:
        virtualinvoke r4.<java.io.Reader: void close()>();

     label08:
        return null;

     label09:
        $i7 = lengthof r10;

        if i3 >= $i7 goto label11;

        r16 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(r10, 0, i3);

     label10:
        r10 = r16;

     label11:
        if r12 == null goto label13;

     label12:
        virtualinvoke r12.<java.io.Reader: void close()>();

     label13:
        return r10;

     label14:
        $r33 := @caughtexception;

        r14 = $r33;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r14);

        goto label13;

     label15:
        $r35 := @caughtexception;

        r5 = $r35;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r5);

        goto label08;

     label16:
        $r28 := @caughtexception;

     label17:
        if r1 == null goto label19;

     label18:
        virtualinvoke r1.<java.io.Reader: void close()>();

     label19:
        return null;

     label20:
        $r37 := @caughtexception;

        r9 = $r37;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r9);

        goto label19;

     label21:
        $r30 := @caughtexception;

        r6 = $r30;

     label22:
        if r1 == null goto label24;

     label23:
        virtualinvoke r1.<java.io.Reader: void close()>();

     label24:
        throw r6;

     label25:
        $r29 := @caughtexception;

        r7 = $r29;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r7);

        goto label24;

     label26:
        $r34 := @caughtexception;

        r6 = $r34;

        r1 = r12;

        goto label22;

     label27:
        $r31 := @caughtexception;

        r1 = r12;

        goto label17;

     label28:
        $r32 := @caughtexception;

        r4 = null;

        goto label06;

        catch java.io.FileNotFoundException from label03 to label04 with label28;
        catch java.io.IOException from label03 to label04 with label16;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.io.FileNotFoundException from label04 to label05 with label05;
        catch java.io.IOException from label04 to label05 with label27;
        catch java.lang.Throwable from label04 to label05 with label26;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.io.FileNotFoundException from label09 to label10 with label05;
        catch java.io.IOException from label09 to label10 with label27;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.io.IOException from label23 to label24 with label25;
    }

    private static void setInstance(com.android.org.chromium.base.CommandLine)
    {
        com.android.org.chromium.base.CommandLine r0, r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: com.android.org.chromium.base.CommandLine;

        $r2 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(r0);

        r1 = (com.android.org.chromium.base.CommandLine) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.org.chromium.base.CommandLine: boolean isNativeImplementation()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.android.org.chromium.base.CommandLine: void nativeReset()>();

     label1:
        return;
    }

    public static java.lang.String[] tokenizeQuotedAruments(char[])
    {
        char[] r0;
        java.util.ArrayList r1, $r3;
        java.lang.StringBuilder r2, $r8, $r9, $r10, $r12;
        char c0, c3, $c8;
        int i1, i2, $i4, $i6, $i7, $i9, $i10, $i11;
        java.lang.String[] $r4, $r6;
        java.lang.Object[] $r5;
        java.lang.String $r7, $r11, $r14;
        boolean $z1;

        r0 := @parameter0: char[];

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        r2 = null;

        c0 = 0;

        i1 = lengthof r0;

        i2 = 0;

     label01:
        if i2 >= i1 goto label11;

        c3 = r0[i2];

        if c0 != 0 goto label02;

        if c3 == 39 goto label03;

        if c3 == 34 goto label03;

     label02:
        if c3 != c0 goto label08;

     label03:
        if r2 == null goto label05;

        $i6 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        if $i6 <= 0 goto label05;

        $i7 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        $i9 = -1 + $i7;

        $c8 = virtualinvoke r2.<java.lang.StringBuilder: char charAt(int)>($i9);

        if $c8 != 92 goto label05;

        $i11 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        $i10 = -1 + $i11;

        virtualinvoke r2.<java.lang.StringBuilder: void setCharAt(int,char)>($i10, c3);

     label04:
        i2 = i2 + 1;

        goto label01;

     label05:
        if c0 != 0 goto label07;

        c0 = c3;

     label06:
        goto label04;

     label07:
        c0 = 0;

        goto label06;

     label08:
        if c0 != 0 goto label09;

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c3);

        if $z1 == 0 goto label09;

        if r2 == null goto label04;

        $r14 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        r2 = null;

        goto label04;

     label09:
        if r2 != null goto label10;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        r2 = $r12;

     label10:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        goto label04;

     label11:
        if r2 == null goto label13;

        if c0 == 0 goto label12;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unterminated quoted string: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CommandLine", $r11);

     label12:
        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label13:
        $i4 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r4 = newarray (java.lang.String)[$i4];

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public abstract void appendSwitch(java.lang.String);

    public abstract java.lang.String getSwitchValue(java.lang.String);

    public java.lang.String getSwitchValue(java.lang.String, java.lang.String)
    {
        com.android.org.chromium.base.CommandLine r0;
        java.lang.String r1, r2, r3;
        boolean $z0;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<com.android.org.chromium.base.CommandLine: java.lang.String getSwitchValue(java.lang.String)>(r1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        return r3;
    }

    public abstract boolean hasSwitch(java.lang.String);

    public boolean isNativeImplementation()
    {
        com.android.org.chromium.base.CommandLine r0;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        return 0;
    }
}
