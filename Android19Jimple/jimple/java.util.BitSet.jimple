public class java.util.BitSet extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    private static final long ALL_ONES;
    private static final long serialVersionUID;
    private long[] bits;
    private transient int longCount;

    public void <init>()
    {
        java.util.BitSet r0;
        long[] $r1;

        r0 := @this: java.util.BitSet;

        $r1 = newarray (long)[1];

        specialinvoke r0.<java.util.BitSet: void <init>(long[])>($r1);

        return;
    }

    public void <init>(int)
    {
        java.util.BitSet r0;
        int i0;
        long[] $r1;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.BitSet: long[] arrayForBits(int)>(i0);

        r0.<java.util.BitSet: long[] bits> = $r1;

        r0.<java.util.BitSet: int longCount> = 0;

        return;
    }

    private void <init>(long[])
    {
        java.util.BitSet r0;
        long[] r1;
        int $i0;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: long[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.BitSet: long[] bits> = r1;

        $i0 = lengthof r1;

        r0.<java.util.BitSet: int longCount> = $i0;

        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;
    }

    private static long[] arrayForBits(int)
    {
        int i0, $i1, $i2;
        long[] $r0;

        i0 := @parameter0: int;

        $i1 = i0 + 63;

        $i2 = $i1 / 64;

        $r0 = newarray (long)[$i2];

        return $r0;
    }

    private void checkIndex(int)
    {
        java.util.BitSet r0;
        int i0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index < 0: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private void checkRange(int, int)
    {
        java.util.BitSet r0;
        int i0, i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 | i1;

        if $i2 < 0 goto label1;

        if i1 >= i0 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" toIndex=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        return;
    }

    private void ensureCapacity(int)
    {
        java.util.BitSet r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        long[] r1, $r2, $r3, $r4;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        $r2 = r0.<java.util.BitSet: long[] bits>;

        $i1 = lengthof $r2;

        if i0 > $i1 goto label1;

        return;

     label1:
        $r3 = r0.<java.util.BitSet: long[] bits>;

        $i2 = lengthof $r3;

        $i3 = 2 * $i2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i3);

        r1 = newarray (long)[$i4];

        $r4 = r0.<java.util.BitSet: long[] bits>;

        $i5 = r0.<java.util.BitSet: int longCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i5);

        r0.<java.util.BitSet: long[] bits> = r1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.BitSet r0;
        java.io.ObjectInputStream r1;
        long[] $r2;
        int $i0;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<java.util.BitSet: long[] bits>;

        $i0 = lengthof $r2;

        r0.<java.util.BitSet: int longCount> = $i0;

        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;
    }

    private void shrinkSize()
    {
        java.util.BitSet r0;
        int i0, $i1, $i2;
        long[] $r1;
        long $l3;
        byte $b4;

        r0 := @this: java.util.BitSet;

        $i1 = r0.<java.util.BitSet: int longCount>;

        i0 = -1 + $i1;

     label1:
        if i0 < 0 goto label2;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $l3 = $r1[i0];

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        i0 = i0 + -1;

        goto label1;

     label2:
        $i2 = i0 + 1;

        r0.<java.util.BitSet: int longCount> = $i2;

        return;
    }

    public static java.util.BitSet valueOf(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1, $r3;
        long[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i10;
        java.nio.ByteOrder $r4;
        boolean $z0;
        java.util.BitSet $r5;
        long $l6, $l7, $l9, $l11, $l12, $l13;
        byte $b8;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r3 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r1 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i4 = 8 * $i3;

        r2 = staticinvoke <java.util.BitSet: long[] arrayForBits(int)>($i4);

        i0 = 0;

     label1:
        $i5 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i5 < 8 goto label2;

        i2 = i0 + 1;

        $l13 = virtualinvoke r1.<java.nio.ByteBuffer: long getLong()>();

        r2[i0] = $l13;

        i0 = i2;

        goto label1;

     label2:
        i1 = 0;

     label3:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label4;

        $l6 = r2[i0];

        $b8 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();

        $l7 = (long) $b8;

        $l9 = 255L & $l7;

        $i10 = i1 * 8;

        $l12 = $l9 << $i10;

        $l11 = $l6 | $l12;

        r2[i0] = $l11;

        i1 = i1 + 1;

        goto label3;

     label4:
        $r5 = staticinvoke <java.util.BitSet: java.util.BitSet valueOf(long[])>(r2);

        return $r5;
    }

    public static java.util.BitSet valueOf(java.nio.LongBuffer)
    {
        java.nio.LongBuffer r0;
        long[] r1;
        int i0, $i1, $i2, $i3, $i4;
        java.util.BitSet $r2;
        long $l5;

        r0 := @parameter0: java.nio.LongBuffer;

        $i1 = virtualinvoke r0.<java.nio.LongBuffer: int remaining()>();

        r1 = newarray (long)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label2;

        $i3 = virtualinvoke r0.<java.nio.LongBuffer: int position()>();

        $i4 = i0 + $i3;

        $l5 = virtualinvoke r0.<java.nio.LongBuffer: long get(int)>($i4);

        r1[i0] = $l5;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.BitSet: java.util.BitSet valueOf(long[])>(r1);

        return $r2;
    }

    public static java.util.BitSet valueOf(byte[])
    {
        byte[] r0;
        java.nio.ByteBuffer $r1;
        java.util.BitSet $r2;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $r2 = staticinvoke <java.util.BitSet: java.util.BitSet valueOf(java.nio.ByteBuffer)>($r1);

        return $r2;
    }

    public static java.util.BitSet valueOf(long[])
    {
        long[] r0, $r3;
        java.util.BitSet $r1;
        java.lang.Object $r2;

        r0 := @parameter0: long[];

        $r1 = new java.util.BitSet;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (long[]) $r2;

        specialinvoke $r1.<java.util.BitSet: void <init>(long[])>($r3);

        return $r1;
    }

    public void and(java.util.BitSet)
    {
        java.util.BitSet r0, r1;
        int i0, i1, $i2, $i3, $i4;
        long[] r2, $r3, $r4;
        long $l5, $l6, $l7;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: java.util.BitSet;

        $i3 = r0.<java.util.BitSet: int longCount>;

        $i2 = r1.<java.util.BitSet: int longCount>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r0.<java.util.BitSet: long[] bits>;

        $l6 = r2[i1];

        $r4 = r1.<java.util.BitSet: long[] bits>;

        $l5 = $r4[i1];

        $l7 = $l6 & $l5;

        r2[i1] = $l7;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<java.util.BitSet: long[] bits>;

        $i4 = r0.<java.util.BitSet: int longCount>;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r3, i0, $i4, 0L);

        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;
    }

    public void andNot(java.util.BitSet)
    {
        java.util.BitSet r0, r1;
        int i0, i1, $i2, $i3;
        long[] r2, $r3;
        long $l4, $l5, $l6, $l7;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: java.util.BitSet;

        $i3 = r0.<java.util.BitSet: int longCount>;

        $i2 = r1.<java.util.BitSet: int longCount>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r0.<java.util.BitSet: long[] bits>;

        $l6 = r2[i1];

        $r3 = r1.<java.util.BitSet: long[] bits>;

        $l4 = $r3[i1];

        $l5 = -1L ^ $l4;

        $l7 = $l6 & $l5;

        r2[i1] = $l7;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;
    }

    public int cardinality()
    {
        java.util.BitSet r0;
        int i0, i1, $i2, $i4;
        long[] $r1;
        long $l3;

        r0 := @this: java.util.BitSet;

        i0 = 0;

        i1 = 0;

     label1:
        $i2 = r0.<java.util.BitSet: int longCount>;

        if i1 >= $i2 goto label2;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $l3 = $r1[i1];

        $i4 = staticinvoke <java.lang.Long: int bitCount(long)>($l3);

        i0 = i0 + $i4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i0;
    }

    public void clear()
    {
        java.util.BitSet r0;
        int $i0;
        long[] $r1;

        r0 := @this: java.util.BitSet;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $i0 = r0.<java.util.BitSet: int longCount>;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r1, 0, $i0, 0L);

        r0.<java.util.BitSet: int longCount> = 0;

        return;
    }

    public void clear(int)
    {
        java.util.BitSet r0;
        int i0, i1, $i2;
        long[] r1;
        long $l3, $l4, $l5, $l6;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

     label1:
        i1 = i0 / 64;

        $i2 = r0.<java.util.BitSet: int longCount>;

        if i1 < $i2 goto label2;

        return;

     label2:
        r1 = r0.<java.util.BitSet: long[] bits>;

        $l5 = r1[i1];

        $l3 = 1L << i0;

        $l4 = -1L ^ $l3;

        $l6 = $l5 & $l4;

        r1[i1] = $l6;

        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;
    }

    public void clear(int, int)
    {
        java.util.BitSet r0;
        int i0, i1, i2, i3, i4, i7, i8, $i9, $i10, $i11, $i13;
        long l5, l6, $l12, $l14, $l15, $l16, $l18, $l19, $l20, $l21, $l22, $l23;
        long[] r1, r2, r3, r4;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.BitSet: void checkRange(int,int)>(i0, i1);

        if i0 == i1 goto label1;

        $i9 = r0.<java.util.BitSet: int longCount>;

        if $i9 != 0 goto label2;

     label1:
        return;

     label2:
        $i11 = r0.<java.util.BitSet: int longCount>;

        i2 = 64 * $i11;

        if i0 >= i2 goto label1;

        if i1 <= i2 goto label3;

        i1 = i2;

     label3:
        i3 = i0 / 64;

        $i10 = i1 - 1;

        i4 = $i10 / 64;

        l5 = -1L << i0;

        $i13 = neg i1;

        l6 = -1L >>> $i13;

        if i3 != i4 goto label5;

        r4 = r0.<java.util.BitSet: long[] bits>;

        $l23 = r4[i3];

        $l21 = l5 & l6;

        $l20 = -1L ^ $l21;

        $l22 = $l23 & $l20;

        r4[i3] = $l22;

     label4:
        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;

     label5:
        r1 = r0.<java.util.BitSet: long[] bits>;

        i7 = i3 + 1;

        $l15 = r1[i3];

        $l12 = -1L ^ l5;

        $l14 = $l15 & $l12;

        r1[i3] = $l14;

     label6:
        if i7 >= i4 goto label7;

        r3 = r0.<java.util.BitSet: long[] bits>;

        i8 = i7 + 1;

        r3[i7] = 0L;

        i7 = i8;

        goto label6;

     label7:
        r2 = r0.<java.util.BitSet: long[] bits>;

        $l19 = r2[i7];

        $l16 = -1L ^ l6;

        $l18 = $l19 & $l16;

        r2[i7] = $l18;

        goto label4;
    }

    public java.lang.Object clone()
    {
        java.util.BitSet r0, r2;
        java.lang.CloneNotSupportedException r1, $r7;
        java.lang.Object $r3, $r5;
        long[] $r4, $r6;
        java.lang.AssertionError $r8;

        r0 := @this: java.util.BitSet;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.util.BitSet) $r3;

        $r4 = r0.<java.util.BitSet: long[] bits>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (long[]) $r5;

        r2.<java.util.BitSet: long[] bits> = $r6;

        specialinvoke r2.<java.util.BitSet: void shrinkSize()>();

     label2:
        return r2;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r8;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.BitSet r0, r2;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        long[] $r3, $r4;
        long $l4, $l5;
        byte $b6;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.util.BitSet;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (java.util.BitSet) r1;

        $i2 = r0.<java.util.BitSet: int longCount>;

        $i1 = r2.<java.util.BitSet: int longCount>;

        if $i2 == $i1 goto label4;

        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = r0.<java.util.BitSet: int longCount>;

        if i0 >= $i3 goto label1;

        $r3 = r0.<java.util.BitSet: long[] bits>;

        $l5 = $r3[i0];

        $r4 = r2.<java.util.BitSet: long[] bits>;

        $l4 = $r4[i0];

        $b6 = $l5 cmp $l4;

        if $b6 == 0 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public void flip(int)
    {
        java.util.BitSet r0;
        int i0, i1, $i2, $i6, $i7, $i8, $i9;
        long[] r1, $r2;
        long $l3, $l4, $l5;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

     label1:
        i1 = i0 / 64;

        $r2 = r0.<java.util.BitSet: long[] bits>;

        $i2 = lengthof $r2;

        if i1 < $i2 goto label2;

        $i9 = i1 + 1;

        specialinvoke r0.<java.util.BitSet: void ensureCapacity(int)>($i9);

     label2:
        r1 = r0.<java.util.BitSet: long[] bits>;

        $l4 = r1[i1];

        $l3 = 1L << i0;

        $l5 = $l4 ^ $l3;

        r1[i1] = $l5;

        $i7 = r0.<java.util.BitSet: int longCount>;

        $i6 = i1 + 1;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        r0.<java.util.BitSet: int longCount> = $i8;

        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;
    }

    public void flip(int, int)
    {
        java.util.BitSet r0;
        int i0, i1, i2, i3, i6, i7, $i8, $i9, $i10, $i15, $i17, $i18, $i24;
        long l4, l5, $l11, $l12, $l13, $l16, $l19, $l20, $l21, $l22, $l23;
        long[] r1, r2, r3, r4, $r5;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.BitSet: void checkRange(int,int)>(i0, i1);

        if i0 != i1 goto label1;

        return;

     label1:
        i2 = i0 / 64;

        $i8 = i1 - 1;

        i3 = $i8 / 64;

        $r5 = r0.<java.util.BitSet: long[] bits>;

        $i10 = lengthof $r5;

        if i3 < $i10 goto label2;

        $i24 = i3 + 1;

        specialinvoke r0.<java.util.BitSet: void ensureCapacity(int)>($i24);

     label2:
        l4 = -1L << i0;

        $i9 = neg i1;

        l5 = -1L >>> $i9;

        if i2 != i3 goto label4;

        r4 = r0.<java.util.BitSet: long[] bits>;

        $l21 = r4[i2];

        $l22 = l4 & l5;

        $l23 = $l21 ^ $l22;

        r4[i2] = $l23;

     label3:
        $i18 = r0.<java.util.BitSet: int longCount>;

        $i15 = i3 + 1;

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>($i18, $i15);

        r0.<java.util.BitSet: int longCount> = $i17;

        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;

     label4:
        r1 = r0.<java.util.BitSet: long[] bits>;

        i6 = i2 + 1;

        $l12 = r1[i2];

        $l11 = l4 ^ $l12;

        r1[i2] = $l11;

     label5:
        if i6 >= i3 goto label6;

        r3 = r0.<java.util.BitSet: long[] bits>;

        i7 = i6 + 1;

        $l20 = r3[i6];

        $l19 = -1L ^ $l20;

        r3[i6] = $l19;

        i6 = i7;

        goto label5;

     label6:
        r2 = r0.<java.util.BitSet: long[] bits>;

        $l13 = r2[i6];

        $l16 = l5 ^ $l13;

        r2[i6] = $l16;

        goto label3;
    }

    public java.util.BitSet get(int, int)
    {
        java.util.BitSet r0, $r2, $r5, $r8, $r10;
        int i0, i1, i2, i3, i4, i7, i8, i9, $i11, $i12, $i13, $i14, $i15, $i17, $i20, $i22, $i23, $i25, $i26, $i30, $i35, $i38;
        long l5, l6, l10, $l16, $l18, $l19, $l21, $l27, $l28, $l31, $l33, $l34, $l36, $l37, $l39, $l40, $l41, $l42;
        long[] r1, $r3, $r4, $r6, $r7, $r9;
        byte $b32, $b43;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.BitSet: void checkRange(int,int)>(i0, i1);

        $i11 = r0.<java.util.BitSet: int longCount>;

        i2 = 64 * $i11;

        if i0 >= i2 goto label01;

        if i0 != i1 goto label02;

     label01:
        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>(0);

        return $r2;

     label02:
        if i1 <= i2 goto label03;

        i1 = i2;

     label03:
        i3 = i0 / 64;

        $i13 = i1 - 1;

        i4 = $i13 / 64;

        l5 = -1L << i0;

        $i12 = neg i1;

        l6 = -1L >>> $i12;

        if i3 != i4 goto label05;

        $r7 = r0.<java.util.BitSet: long[] bits>;

        $l41 = $r7[i3];

        $l42 = l5 & l6;

        $l40 = $l41 & $l42;

        l10 = $l40 >>> i0;

        $b43 = l10 cmp 0L;

        if $b43 != 0 goto label04;

        $r8 = new java.util.BitSet;

        specialinvoke $r8.<java.util.BitSet: void <init>(int)>(0);

        return $r8;

     label04:
        $r10 = new java.util.BitSet;

        $r9 = newarray (long)[1];

        $r9[0] = l10;

        specialinvoke $r10.<java.util.BitSet: void <init>(long[])>($r9);

        return $r10;

     label05:
        $i15 = i4 - i3;

        $i14 = 1 + $i15;

        r1 = newarray (long)[$i14];

        $r3 = r0.<java.util.BitSet: long[] bits>;

        $l16 = $r3[i3];

        $l18 = l5 & $l16;

        r1[0] = $l18;

        $i17 = lengthof r1;

        $i20 = -1 + $i17;

        $r4 = r0.<java.util.BitSet: long[] bits>;

        $l19 = $r4[i4];

        $l21 = l6 & $l19;

        r1[$i20] = $l21;

        i7 = 1;

     label06:
        $i23 = i4 - i3;

        if i7 >= $i23 goto label07;

        $r6 = r0.<java.util.BitSet: long[] bits>;

        $i38 = i3 + i7;

        $l37 = $r6[$i38];

        r1[i7] = $l37;

        i7 = i7 + 1;

        goto label06;

     label07:
        i8 = i0 % 64;

        if i8 == 0 goto label11;

        i9 = 0;

     label08:
        $i22 = lengthof r1;

        if i9 >= $i22 goto label11;

        $l27 = r1[i9];

        $l28 = $l27 >>> i8;

        r1[i9] = $l28;

        $i25 = lengthof r1;

        $i26 = -1 + $i25;

        if i9 == $i26 goto label09;

        $l34 = r1[i9];

        $i30 = i9 + 1;

        $l36 = r1[$i30];

        $i35 = neg i8;

        $l33 = $l36 << $i35;

        $l39 = $l34 | $l33;

        r1[i9] = $l39;

     label09:
        $l31 = r1[i9];

        $b32 = $l31 cmp 0L;

        if $b32 == 0 goto label10;

     label10:
        i9 = i9 + 1;

        goto label08;

     label11:
        $r5 = new java.util.BitSet;

        specialinvoke $r5.<java.util.BitSet: void <init>(long[])>(r1);

        return $r5;
    }

    public boolean get(int)
    {
        java.util.BitSet r0;
        int i0, i1, $i2;
        long[] $r1;
        long $l3, $l4, $l5;
        byte $b6;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

     label1:
        i1 = i0 / 64;

        $i2 = r0.<java.util.BitSet: int longCount>;

        if i1 < $i2 goto label3;

     label2:
        return 0;

     label3:
        $r1 = r0.<java.util.BitSet: long[] bits>;

        $l4 = $r1[i1];

        $l3 = 1L << i0;

        $l5 = $l4 & $l3;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label2;

        return 1;
    }

    public int hashCode()
    {
        java.util.BitSet r0;
        long l0, $l3, $l4, $l7, $l8, $l9;
        int i1, $i2, $i5, $i6;
        long[] $r1;

        r0 := @this: java.util.BitSet;

        l0 = 1234L;

        i1 = 0;

     label1:
        $i2 = r0.<java.util.BitSet: int longCount>;

        if i1 >= $i2 goto label2;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $l8 = $r1[i1];

        $i6 = i1 + 1;

        $l7 = (long) $i6;

        $l9 = $l8 * $l7;

        l0 = l0 ^ $l9;

        i1 = i1 + 1;

        goto label1;

     label2:
        $l3 = l0 >> 32;

        $l4 = l0 ^ $l3;

        $i5 = (int) $l4;

        return $i5;
    }

    public boolean intersects(java.util.BitSet)
    {
        java.util.BitSet r0, r1;
        long[] r2, $r3;
        int i0, i1, $i2, $i3;
        long $l4, $l5, $l6;
        byte $b7;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: java.util.BitSet;

        r2 = r1.<java.util.BitSet: long[] bits>;

        $i3 = r0.<java.util.BitSet: int longCount>;

        $i2 = r1.<java.util.BitSet: int longCount>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<java.util.BitSet: long[] bits>;

        $l5 = $r3[i1];

        $l4 = r2[i1];

        $l6 = $l5 & $l4;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isEmpty()
    {
        java.util.BitSet r0;
        int $i0;

        r0 := @this: java.util.BitSet;

        $i0 = r0.<java.util.BitSet: int longCount>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int length()
    {
        java.util.BitSet r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9;
        long[] $r1;
        long $l5;

        r0 := @this: java.util.BitSet;

        $i0 = r0.<java.util.BitSet: int longCount>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<java.util.BitSet: int longCount>;

        $i2 = -1 + $i1;

        $i6 = 64 * $i2;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $i3 = r0.<java.util.BitSet: int longCount>;

        $i4 = -1 + $i3;

        $l5 = $r1[$i4];

        $i7 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l5);

        $i8 = 64 - $i7;

        $i9 = $i6 + $i8;

        return $i9;
    }

    public int nextClearBit(int)
    {
        java.util.BitSet r0;
        int i0, i1, $i3, $i8, $i9, $i12, $i13, $i14, $i15, $i16, $i22, $i23, $i24;
        long l2, $l4, $l5, $l6, $l10, $l11, $l18, $l19, $l20, $l21;
        long[] $r1, $r2, $r3, $r4;
        byte $b7, $b17;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

        i1 = i0 / 64;

        $i3 = r0.<java.util.BitSet: int longCount>;

        if i1 < $i3 goto label1;

        return i0;

     label1:
        l2 = -1L << i0;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $l4 = $r1[i1];

        $l5 = -1L ^ $l4;

        $l6 = l2 & $l5;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label2;

        $i23 = i1 * 64;

        $r4 = r0.<java.util.BitSet: long[] bits>;

        $l19 = $r4[i1];

        $l21 = -1L ^ $l19;

        $l20 = l2 & $l21;

        $i22 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l20);

        $i24 = $i23 + $i22;

        return $i24;

     label2:
        i1 = i1 + 1;

        $i8 = r0.<java.util.BitSet: int longCount>;

        if i1 >= $i8 goto label3;

        $r3 = r0.<java.util.BitSet: long[] bits>;

        $l18 = $r3[i1];

        $b17 = $l18 cmp -1L;

        if $b17 == 0 goto label2;

     label3:
        $i9 = r0.<java.util.BitSet: int longCount>;

        if i1 != $i9 goto label4;

        $i14 = r0.<java.util.BitSet: int longCount>;

        $i16 = 64 * $i14;

        return $i16;

     label4:
        $i13 = i1 * 64;

        $r2 = r0.<java.util.BitSet: long[] bits>;

        $l10 = $r2[i1];

        $l11 = -1L ^ $l10;

        $i12 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l11);

        $i15 = $i13 + $i12;

        return $i15;
    }

    public int nextSetBit(int)
    {
        java.util.BitSet r0;
        int i0, i1, $i3, $i7, $i8, $i10, $i11, $i12, $i16, $i18, $i19;
        long l2, $l4, $l5, $l9, $l14, $l15, $l17;
        long[] $r1, $r2, $r3, $r4;
        byte $b6, $b13;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

        i1 = i0 / 64;

        $i3 = r0.<java.util.BitSet: int longCount>;

        if i1 < $i3 goto label2;

     label1:
        return -1;

     label2:
        l2 = -1L << i0;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $l4 = $r1[i1];

        $l5 = l2 & $l4;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label3;

        $i16 = i1 * 64;

        $r4 = r0.<java.util.BitSet: long[] bits>;

        $l15 = $r4[i1];

        $l17 = l2 & $l15;

        $i19 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l17);

        $i18 = $i16 + $i19;

        return $i18;

     label3:
        i1 = i1 + 1;

        $i7 = r0.<java.util.BitSet: int longCount>;

        if i1 >= $i7 goto label4;

        $r3 = r0.<java.util.BitSet: long[] bits>;

        $l14 = $r3[i1];

        $b13 = $l14 cmp 0L;

        if $b13 == 0 goto label3;

     label4:
        $i8 = r0.<java.util.BitSet: int longCount>;

        if i1 == $i8 goto label1;

        $i10 = i1 * 64;

        $r2 = r0.<java.util.BitSet: long[] bits>;

        $l9 = $r2[i1];

        $i11 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l9);

        $i12 = $i10 + $i11;

        return $i12;
    }

    public void or(java.util.BitSet)
    {
        java.util.BitSet r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        long[] r2, $r3, $r4, $r5;
        long $l9, $l10, $l11;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: java.util.BitSet;

        $i4 = r0.<java.util.BitSet: int longCount>;

        $i3 = r1.<java.util.BitSet: int longCount>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $i6 = r0.<java.util.BitSet: int longCount>;

        $i5 = r1.<java.util.BitSet: int longCount>;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i5);

        specialinvoke r0.<java.util.BitSet: void ensureCapacity(int)>(i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = r0.<java.util.BitSet: long[] bits>;

        $l11 = r2[i2];

        $r5 = r1.<java.util.BitSet: long[] bits>;

        $l9 = $r5[i2];

        $l10 = $l11 | $l9;

        r2[i2] = $l10;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i7 = r1.<java.util.BitSet: int longCount>;

        if $i7 <= i0 goto label3;

        $r4 = r1.<java.util.BitSet: long[] bits>;

        $r3 = r0.<java.util.BitSet: long[] bits>;

        $i8 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, i0, $i8);

     label3:
        r0.<java.util.BitSet: int longCount> = i1;

        return;
    }

    public int previousClearBit(int)
    {
        java.util.BitSet r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        if i0 != -1 goto label2;

        i1 = -1;

     label1:
        return i1;

     label2:
        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

        i1 = i0;

     label3:
        if i1 < 0 goto label4;

        $z0 = virtualinvoke r0.<java.util.BitSet: boolean get(int)>(i1);

        if $z0 == 0 goto label1;

        i1 = i1 + -1;

        goto label3;

     label4:
        return -1;
    }

    public int previousSetBit(int)
    {
        java.util.BitSet r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        if i0 != -1 goto label2;

        i1 = -1;

     label1:
        return i1;

     label2:
        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

        i1 = i0;

     label3:
        if i1 < 0 goto label4;

        $z0 = virtualinvoke r0.<java.util.BitSet: boolean get(int)>(i1);

        if $z0 != 0 goto label1;

        i1 = i1 + -1;

        goto label3;

     label4:
        return -1;
    }

    public void set(int)
    {
        java.util.BitSet r0;
        int i0, i1, $i2, $i6, $i7, $i8, $i9;
        long[] r1, $r2;
        long $l3, $l4, $l5;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        specialinvoke r0.<java.util.BitSet: void checkIndex(int)>(i0);

     label1:
        i1 = i0 / 64;

        $r2 = r0.<java.util.BitSet: long[] bits>;

        $i2 = lengthof $r2;

        if i1 < $i2 goto label2;

        $i9 = i1 + 1;

        specialinvoke r0.<java.util.BitSet: void ensureCapacity(int)>($i9);

     label2:
        r1 = r0.<java.util.BitSet: long[] bits>;

        $l4 = r1[i1];

        $l3 = 1L << i0;

        $l5 = $l4 | $l3;

        r1[i1] = $l5;

        $i7 = r0.<java.util.BitSet: int longCount>;

        $i6 = i1 + 1;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        r0.<java.util.BitSet: int longCount> = $i8;

        return;
    }

    public void set(int, int)
    {
        java.util.BitSet r0;
        int i0, i1, i2, i3, i6, i7, $i8, $i9, $i10, $i15, $i17, $i18, $i24;
        long l4, l5, $l11, $l12, $l13, $l16, $l19, $l20, $l21, $l22, $l23;
        long[] r1, r2, r3, r4, $r5;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.BitSet: void checkRange(int,int)>(i0, i1);

        if i0 != i1 goto label1;

        return;

     label1:
        i2 = i0 / 64;

        $i8 = i1 - 1;

        i3 = $i8 / 64;

        $r5 = r0.<java.util.BitSet: long[] bits>;

        $i10 = lengthof $r5;

        if i3 < $i10 goto label2;

        $i24 = i3 + 1;

        specialinvoke r0.<java.util.BitSet: void ensureCapacity(int)>($i24);

     label2:
        l4 = -1L << i0;

        $i9 = neg i1;

        l5 = -1L >>> $i9;

        if i2 != i3 goto label4;

        r4 = r0.<java.util.BitSet: long[] bits>;

        $l21 = r4[i2];

        $l22 = l4 & l5;

        $l23 = $l21 | $l22;

        r4[i2] = $l23;

     label3:
        $i18 = r0.<java.util.BitSet: int longCount>;

        $i15 = i3 + 1;

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>($i18, $i15);

        r0.<java.util.BitSet: int longCount> = $i17;

        return;

     label4:
        r1 = r0.<java.util.BitSet: long[] bits>;

        i6 = i2 + 1;

        $l12 = r1[i2];

        $l11 = l4 | $l12;

        r1[i2] = $l11;

     label5:
        if i6 >= i3 goto label6;

        r3 = r0.<java.util.BitSet: long[] bits>;

        i7 = i6 + 1;

        $l20 = r3[i6];

        $l19 = -1L | $l20;

        r3[i6] = $l19;

        i6 = i7;

        goto label5;

     label6:
        r2 = r0.<java.util.BitSet: long[] bits>;

        $l13 = r2[i6];

        $l16 = l5 | $l13;

        r2[i6] = $l16;

        goto label3;
    }

    public void set(int, int, boolean)
    {
        java.util.BitSet r0;
        int i0, i1;
        boolean z0;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<java.util.BitSet: void set(int,int)>(i0, i1);

        return;

     label1:
        virtualinvoke r0.<java.util.BitSet: void clear(int,int)>(i0, i1);

        return;
    }

    public void set(int, boolean)
    {
        java.util.BitSet r0;
        int i0;
        boolean z0;

        r0 := @this: java.util.BitSet;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<java.util.BitSet: void set(int)>(i0);

        return;

     label1:
        virtualinvoke r0.<java.util.BitSet: void clear(int)>(i0);

        return;
    }

    public int size()
    {
        java.util.BitSet r0;
        long[] $r1;
        int $i0, $i1;

        r0 := @this: java.util.BitSet;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $i0 = lengthof $r1;

        $i1 = 64 * $i0;

        return $i1;
    }

    public byte[] toByteArray()
    {
        java.util.BitSet r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i9;
        long[] $r2;
        long $l7, $l8;
        byte $b10;

        r0 := @this: java.util.BitSet;

        $i3 = virtualinvoke r0.<java.util.BitSet: int length()>();

        $i4 = 7 + $i3;

        $i5 = $i4 / 8;

        r1 = newarray (byte)[$i5];

        i0 = 0;

     label1:
        $i6 = lengthof r1;

        if i0 >= $i6 goto label2;

        i1 = i0 * 8;

        i2 = i1 / 64;

        $r2 = r0.<java.util.BitSet: long[] bits>;

        $l7 = $r2[i2];

        $l8 = $l7 >>> i1;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        r1[i0] = $b10;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    public long[] toLongArray()
    {
        java.util.BitSet r0;
        int $i0;
        long[] $r1, $r2;

        r0 := @this: java.util.BitSet;

        $r1 = r0.<java.util.BitSet: long[] bits>;

        $i0 = r0.<java.util.BitSet: int longCount>;

        $r2 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r1, $i0);

        return $r2;
    }

    public java.lang.String toString()
    {
        java.util.BitSet r0;
        java.lang.StringBuilder r1, $r2;
        boolean z0;
        int i0, i1, $i2, $i3, $i4, $i11, $i12;
        java.lang.String $r5;
        long[] $r6, $r7;
        long $l5, $l7, $l8, $l10;
        byte $b6, $b9;

        r0 := @this: java.util.BitSet;

        $r2 = new java.lang.StringBuilder;

        $i2 = r0.<java.util.BitSet: int longCount>;

        $i3 = $i2 / 2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        z0 = 0;

        i0 = 0;

     label1:
        $i4 = r0.<java.util.BitSet: int longCount>;

        if i0 >= $i4 goto label7;

        $r6 = r0.<java.util.BitSet: long[] bits>;

        $l5 = $r6[i0];

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label6;

        i1 = 0;

     label2:
        if i1 >= 64 goto label6;

        $r7 = r0.<java.util.BitSet: long[] bits>;

        $l7 = $r7[i0];

        $l8 = 1L << i1;

        $l10 = $l7 & $l8;

        $b9 = $l10 cmp 0L;

        if $b9 == 0 goto label4;

        if z0 == 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $i12 = i0 * 64;

        $i11 = i1 + $i12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        z0 = 1;

        goto label3;

     label6:
        i0 = i0 + 1;

        goto label1;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void xor(java.util.BitSet)
    {
        java.util.BitSet r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        long[] r2, $r3, $r4, $r5;
        long $l9, $l10, $l11;

        r0 := @this: java.util.BitSet;

        r1 := @parameter0: java.util.BitSet;

        $i4 = r0.<java.util.BitSet: int longCount>;

        $i3 = r1.<java.util.BitSet: int longCount>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $i6 = r0.<java.util.BitSet: int longCount>;

        $i5 = r1.<java.util.BitSet: int longCount>;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i5);

        specialinvoke r0.<java.util.BitSet: void ensureCapacity(int)>(i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = r0.<java.util.BitSet: long[] bits>;

        $l11 = r2[i2];

        $r5 = r1.<java.util.BitSet: long[] bits>;

        $l9 = $r5[i2];

        $l10 = $l11 ^ $l9;

        r2[i2] = $l10;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i7 = r1.<java.util.BitSet: int longCount>;

        if $i7 <= i0 goto label3;

        $r4 = r1.<java.util.BitSet: long[] bits>;

        $r3 = r0.<java.util.BitSet: long[] bits>;

        $i8 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, i0, $i8);

     label3:
        r0.<java.util.BitSet: int longCount> = i1;

        specialinvoke r0.<java.util.BitSet: void shrinkSize()>();

        return;
    }

    public static void <clinit>()
    {
        <java.util.BitSet: long serialVersionUID> = 7997698588986878753L;

        <java.util.BitSet: long ALL_ONES> = -1L;

        return;
    }
}
