public class android.filterpacks.imageproc.BitmapSource extends android.filterfw.core.Filter
{
    private android.graphics.Bitmap mBitmap;
    private android.filterfw.core.Frame mImageFrame;
    private boolean mRecycleBitmap;
    boolean mRepeatFrame;
    private int mTarget;
    java.lang.String mTargetString;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.BitmapSource r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.imageproc.BitmapSource;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.BitmapSource: boolean mRecycleBitmap> = 1;

        r0.<android.filterpacks.imageproc.BitmapSource: boolean mRepeatFrame> = 0;

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.BitmapSource r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        boolean $z0, $z1;
        android.filterfw.core.Frame $r3, $r4;

        r0 := @this: android.filterpacks.imageproc.BitmapSource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("bitmap");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("target");

        if $z1 == 0 goto label2;

     label1:
        $r3 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        if $r3 == null goto label2;

        $r4 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        virtualinvoke $r4.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame> = null;

     label2:
        return;
    }

    public void loadImage(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.BitmapSource r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.MutableFrameFormat r2;
        java.lang.String $r3;
        int $i0, $i1, $i2, $i3;
        android.graphics.Bitmap $r4, $r5, $r8, $r11;
        android.filterfw.core.FrameManager $r6;
        android.filterfw.core.Frame $r7, $r9, $r10;
        boolean $z0;

        r0 := @this: android.filterpacks.imageproc.BitmapSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r3 = r0.<android.filterpacks.imageproc.BitmapSource: java.lang.String mTargetString>;

        $i0 = staticinvoke <android.filterfw.core.FrameFormat: int readTargetString(java.lang.String)>($r3);

        r0.<android.filterpacks.imageproc.BitmapSource: int mTarget> = $i0;

        $r4 = r0.<android.filterpacks.imageproc.BitmapSource: android.graphics.Bitmap mBitmap>;

        $i1 = virtualinvoke $r4.<android.graphics.Bitmap: int getWidth()>();

        $r5 = r0.<android.filterpacks.imageproc.BitmapSource: android.graphics.Bitmap mBitmap>;

        $i2 = virtualinvoke $r5.<android.graphics.Bitmap: int getHeight()>();

        $i3 = r0.<android.filterpacks.imageproc.BitmapSource: int mTarget>;

        r2 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>($i1, $i2, 3, $i3);

        $r6 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r7 = virtualinvoke $r6.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r2);

        r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame> = $r7;

        $r9 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        $r8 = r0.<android.filterpacks.imageproc.BitmapSource: android.graphics.Bitmap mBitmap>;

        virtualinvoke $r9.<android.filterfw.core.Frame: void setBitmap(android.graphics.Bitmap)>($r8);

        $r10 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        virtualinvoke $r10.<android.filterfw.core.Frame: void setTimestamp(long)>(-1L);

        $z0 = r0.<android.filterpacks.imageproc.BitmapSource: boolean mRecycleBitmap>;

        if $z0 == 0 goto label1;

        $r11 = r0.<android.filterpacks.imageproc.BitmapSource: android.graphics.Bitmap mBitmap>;

        virtualinvoke $r11.<android.graphics.Bitmap: void recycle()>();

     label1:
        r0.<android.filterpacks.imageproc.BitmapSource: android.graphics.Bitmap mBitmap> = null;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.BitmapSource r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame $r2, $r3;
        boolean $z0;

        r0 := @this: android.filterpacks.imageproc.BitmapSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        if $r2 != null goto label1;

        virtualinvoke r0.<android.filterpacks.imageproc.BitmapSource: void loadImage(android.filterfw.core.FilterContext)>(r1);

     label1:
        $r3 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        virtualinvoke r0.<android.filterpacks.imageproc.BitmapSource: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", $r3);

        $z0 = r0.<android.filterpacks.imageproc.BitmapSource: boolean mRepeatFrame>;

        if $z0 != 0 goto label2;

        virtualinvoke r0.<android.filterpacks.imageproc.BitmapSource: void closeOutputPort(java.lang.String)>("image");

     label2:
        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.BitmapSource r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.BitmapSource;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 0);

        virtualinvoke r0.<android.filterpacks.imageproc.BitmapSource: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        return;
    }

    public void tearDown(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.BitmapSource r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame $r2, $r3;

        r0 := @this: android.filterpacks.imageproc.BitmapSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        if $r2 == null goto label1;

        $r3 = r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame>;

        virtualinvoke $r3.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        r0.<android.filterpacks.imageproc.BitmapSource: android.filterfw.core.Frame mImageFrame> = null;

     label1:
        return;
    }
}
