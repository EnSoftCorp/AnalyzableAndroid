public class org.apache.http.message.BasicHeader extends java.lang.Object implements org.apache.http.Header, java.lang.Cloneable
{
    private final java.lang.String name;
    private final java.lang.String value;

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.http.message.BasicHeader r0;
        java.lang.String r1, r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.message.BasicHeader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r3;

     label1:
        r0.<org.apache.http.message.BasicHeader: java.lang.String name> = r1;

        r0.<org.apache.http.message.BasicHeader: java.lang.String value> = r2;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.message.BasicHeader r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.message.BasicHeader;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public org.apache.http.HeaderElement[] getElements() throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicHeader r0;
        java.lang.String $r1, $r3;
        org.apache.http.HeaderElement[] $r2, $r4;

        r0 := @this: org.apache.http.message.BasicHeader;

        $r1 = r0.<org.apache.http.message.BasicHeader: java.lang.String value>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.http.message.BasicHeader: java.lang.String value>;

        $r4 = staticinvoke <org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)>($r3, null);

        return $r4;

     label1:
        $r2 = newarray (org.apache.http.HeaderElement)[0];

        return $r2;
    }

    public java.lang.String getName()
    {
        org.apache.http.message.BasicHeader r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.message.BasicHeader;

        $r1 = r0.<org.apache.http.message.BasicHeader: java.lang.String name>;

        return $r1;
    }

    public java.lang.String getValue()
    {
        org.apache.http.message.BasicHeader r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.message.BasicHeader;

        $r1 = r0.<org.apache.http.message.BasicHeader: java.lang.String value>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.http.message.BasicHeader r0;
        org.apache.http.message.BasicLineFormatter $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.http.message.BasicHeader;

        $r1 = <org.apache.http.message.BasicLineFormatter: org.apache.http.message.BasicLineFormatter DEFAULT>;

        $r2 = virtualinvoke $r1.<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>(null, r0);

        $r3 = virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r3;
    }
}
