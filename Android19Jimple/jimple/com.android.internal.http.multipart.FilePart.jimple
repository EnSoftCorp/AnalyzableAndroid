public class com.android.internal.http.multipart.FilePart extends com.android.internal.http.multipart.PartBase
{
    public static final java.lang.String DEFAULT_CHARSET;
    public static final java.lang.String DEFAULT_CONTENT_TYPE;
    public static final java.lang.String DEFAULT_TRANSFER_ENCODING;
    protected static final java.lang.String FILE_NAME;
    private static final byte[] FILE_NAME_BYTES;
    private static final org.apache.commons.logging.Log LOG;
    private com.android.internal.http.multipart.PartSource source;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        byte[] $r1;

        <com.android.internal.http.multipart.FilePart: java.lang.String FILE_NAME> = "; filename=";

        <com.android.internal.http.multipart.FilePart: java.lang.String DEFAULT_TRANSFER_ENCODING> = "binary";

        <com.android.internal.http.multipart.FilePart: java.lang.String DEFAULT_CONTENT_TYPE> = "application/octet-stream";

        <com.android.internal.http.multipart.FilePart: java.lang.String DEFAULT_CHARSET> = "ISO-8859-1";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "com/android/internal/http/multipart/FilePart");

        <com.android.internal.http.multipart.FilePart: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("; filename=");

        <com.android.internal.http.multipart.FilePart: byte[] FILE_NAME_BYTES> = $r1;

        return;
    }

    public void <init>(java.lang.String, com.android.internal.http.multipart.PartSource)
    {
        com.android.internal.http.multipart.FilePart r0;
        java.lang.String r1;
        com.android.internal.http.multipart.PartSource r2;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.http.multipart.PartSource;

        specialinvoke r0.<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)>(r1, r2, null, null);

        return;
    }

    public void <init>(java.lang.String, com.android.internal.http.multipart.PartSource, java.lang.String, java.lang.String)
    {
        com.android.internal.http.multipart.FilePart r0;
        java.lang.String r1, r3, r4;
        com.android.internal.http.multipart.PartSource r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.http.multipart.PartSource;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        if r3 != null goto label1;

        r3 = "application/octet-stream";

     label1:
        if r4 != null goto label2;

        r4 = "ISO-8859-1";

     label2:
        specialinvoke r0.<com.android.internal.http.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r3, r4, "binary");

        if r2 != null goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source may not be null");

        throw $r5;

     label3:
        r0.<com.android.internal.http.multipart.FilePart: com.android.internal.http.multipart.PartSource source> = r2;

        return;
    }

    public void <init>(java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        com.android.internal.http.multipart.FilePart r0;
        java.lang.String r1;
        java.io.File r2;
        com.android.internal.http.multipart.FilePartSource $r3;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.File;

        $r3 = new com.android.internal.http.multipart.FilePartSource;

        specialinvoke $r3.<com.android.internal.http.multipart.FilePartSource: void <init>(java.io.File)>(r2);

        specialinvoke r0.<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r3, null, null);

        return;
    }

    public void <init>(java.lang.String, java.io.File, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.http.multipart.FilePart r0;
        java.lang.String r1, r3, r4;
        java.io.File r2;
        com.android.internal.http.multipart.FilePartSource $r5;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = new com.android.internal.http.multipart.FilePartSource;

        specialinvoke $r5.<com.android.internal.http.multipart.FilePartSource: void <init>(java.io.File)>(r2);

        specialinvoke r0.<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r5, r3, r4);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        com.android.internal.http.multipart.FilePart r0;
        java.lang.String r1, r2;
        java.io.File r3;
        com.android.internal.http.multipart.FilePartSource $r4;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.File;

        $r4 = new com.android.internal.http.multipart.FilePartSource;

        specialinvoke $r4.<com.android.internal.http.multipart.FilePartSource: void <init>(java.lang.String,java.io.File)>(r2, r3);

        specialinvoke r0.<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r4, null, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.io.File, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.http.multipart.FilePart r0;
        java.lang.String r1, r2, r4, r5;
        java.io.File r3;
        com.android.internal.http.multipart.FilePartSource $r6;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.File;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r6 = new com.android.internal.http.multipart.FilePartSource;

        specialinvoke $r6.<com.android.internal.http.multipart.FilePartSource: void <init>(java.lang.String,java.io.File)>(r2, r3);

        specialinvoke r0.<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r6, r4, r5);

        return;
    }

    protected com.android.internal.http.multipart.PartSource getSource()
    {
        com.android.internal.http.multipart.FilePart r0;
        org.apache.commons.logging.Log $r1;
        com.android.internal.http.multipart.PartSource $r2;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        $r1 = <com.android.internal.http.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter getSource()");

        $r2 = r0.<com.android.internal.http.multipart.FilePart: com.android.internal.http.multipart.PartSource source>;

        return $r2;
    }

    protected long lengthOfData()
    {
        com.android.internal.http.multipart.FilePart r0;
        org.apache.commons.logging.Log $r1;
        com.android.internal.http.multipart.PartSource $r2;
        long $l0;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        $r1 = <com.android.internal.http.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter lengthOfData()");

        $r2 = r0.<com.android.internal.http.multipart.FilePart: com.android.internal.http.multipart.PartSource source>;

        $l0 = interfaceinvoke $r2.<com.android.internal.http.multipart.PartSource: long getLength()>();

        return $l0;
    }

    protected void sendData(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.FilePart r0;
        java.io.OutputStream r1;
        byte[] r2;
        java.io.InputStream r3;
        java.lang.Throwable r4, $r8;
        int i0;
        org.apache.commons.logging.Log $r5, $r7;
        long $l1;
        byte $b2;
        com.android.internal.http.multipart.PartSource $r6;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.io.OutputStream;

        $r5 = <com.android.internal.http.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendData(OutputStream out)");

        $l1 = virtualinvoke r0.<com.android.internal.http.multipart.FilePart: long lengthOfData()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r7 = <com.android.internal.http.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No data to send.");

        return;

     label1:
        r2 = newarray (byte)[4096];

        $r6 = r0.<com.android.internal.http.multipart.FilePart: com.android.internal.http.multipart.PartSource source>;

        r3 = interfaceinvoke $r6.<com.android.internal.http.multipart.PartSource: java.io.InputStream createInputStream()>();

     label2:
        i0 = virtualinvoke r3.<java.io.InputStream: int read(byte[])>(r2);

     label3:
        if i0 < 0 goto label7;

     label4:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0);

     label5:
        goto label2;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        virtualinvoke r3.<java.io.InputStream: void close()>();

        throw r4;

     label7:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    protected void sendDispositionHeader(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.FilePart r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        org.apache.commons.logging.Log $r3;
        com.android.internal.http.multipart.PartSource $r4;
        byte[] $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.http.multipart.FilePart;

        r1 := @parameter0: java.io.OutputStream;

        $r3 = <com.android.internal.http.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendDispositionHeader(OutputStream out)");

        specialinvoke r0.<com.android.internal.http.multipart.PartBase: void sendDispositionHeader(java.io.OutputStream)>(r1);

        $r4 = r0.<com.android.internal.http.multipart.FilePart: com.android.internal.http.multipart.PartSource source>;

        r2 = interfaceinvoke $r4.<com.android.internal.http.multipart.PartSource: java.lang.String getFileName()>();

        if r2 == null goto label1;

        $r5 = <com.android.internal.http.multipart.FilePart: byte[] FILE_NAME_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r5);

        $r6 = <com.android.internal.http.multipart.FilePart: byte[] QUOTE_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r7);

        $r8 = <com.android.internal.http.multipart.FilePart: byte[] QUOTE_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r8);

     label1:
        return;
    }
}
