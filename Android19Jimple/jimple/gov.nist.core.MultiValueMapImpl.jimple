public class gov.nist.core.MultiValueMapImpl extends java.lang.Object implements gov.nist.core.MultiValueMap, java.lang.Cloneable
{
    private static final long serialVersionUID;
    private java.util.HashMap map;

    public void <init>()
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.HashMap $r1;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map> = $r1;

        return;
    }

    public void clear()
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.Iterator r1;
        java.util.HashMap $r2, $r4;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6, $r7;
        java.util.ArrayList $r9, $r10;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        $r2 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.ArrayList) $r8;

        $r10 = (java.util.ArrayList) $r9;

        virtualinvoke $r10.<java.util.ArrayList: void clear()>();

        goto label1;

     label2:
        $r4 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        return;
    }

    public java.lang.Object clone()
    {
        gov.nist.core.MultiValueMapImpl r0, r1, $r2;
        java.util.HashMap $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        $r2 = new gov.nist.core.MultiValueMapImpl;

        specialinvoke $r2.<gov.nist.core.MultiValueMapImpl: void <init>()>();

        r1 = $r2;

        $r3 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object clone()>();

        $r5 = (java.util.HashMap) $r4;

        r1.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map> = $r5;

        return r1;
    }

    public boolean containsKey(java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1, $r5, $r8;
        java.util.Set r2;
        java.util.Iterator r3;
        java.util.HashMap $r4;
        boolean $z0, $z1;
        java.util.Map$Entry $r6, $r7;
        java.util.ArrayList $r9, $r10;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        r2 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        if r2 != null goto label1;

        return 0;

     label1:
        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.ArrayList) $r8;

        $r10 = (java.util.ArrayList) $r9;

        $z1 = virtualinvoke $r10.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public java.util.Set entrySet()
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.HashMap $r1;
        java.util.Set $r2;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        $r1 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        return $r2;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<gov.nist.core.MultiValueMapImpl: java.util.List get(java.lang.Object)>(r1);

        return $r2;
    }

    public java.util.List get(java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;
        java.util.List $r4;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public boolean isEmpty()
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.HashMap $r1;
        boolean $z0;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        $r1 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.HashMap $r1;
        java.util.Set $r2;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        $r1 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        return $r2;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1, r2;
        java.util.List $r3, $r5;
        java.lang.String $r4;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.util.List) r2;

        $r5 = virtualinvoke r0.<gov.nist.core.MultiValueMapImpl: java.util.List put(java.lang.String,java.util.List)>($r4, $r3);

        return $r5;
    }

    public java.util.List put(java.lang.String, java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.String r1;
        java.lang.Object r2, $r5;
        java.util.ArrayList r3, $r6;
        java.util.HashMap $r4, $r7;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.ArrayList) $r5;

        if r3 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(10);

        r3 = $r6;

        $r7 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label1:
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return r3;
    }

    public java.util.List put(java.lang.String, java.util.List)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.String r1;
        java.util.List r2, $r6;
        java.util.ArrayList $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r4 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r3 = (java.util.ArrayList) r2;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public void putAll(java.util.Map)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.ArrayList r4, $r7;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r8;
        java.util.Collection $r9;
        java.util.HashMap $r10;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.util.Map;

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r4 = $r7;

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r9 = (java.util.Collection) $r8;

        virtualinvoke r4.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r9);

        $r10 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<gov.nist.core.MultiValueMapImpl: java.util.List remove(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1, r2, $r4;
        java.lang.String $r3;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r1;

        $r4 = virtualinvoke r0.<gov.nist.core.MultiValueMapImpl: java.lang.Object remove(java.lang.String,java.lang.Object)>($r3, r2);

        return $r4;
    }

    public java.lang.Object remove(java.lang.String, java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.String r1;
        java.lang.Object r2, $r5;
        java.util.ArrayList r3;
        java.util.HashMap $r4;
        boolean $z0;
        java.lang.Boolean $r6;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.ArrayList) $r5;

        if r3 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r6;
    }

    public java.util.List remove(java.lang.Object)
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;
        java.util.List $r4;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public int size()
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        $r1 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        gov.nist.core.MultiValueMapImpl r0;
        java.util.ArrayList r1, $r4, $r12, $r13;
        java.util.Iterator r2;
        java.lang.Object[] r3;
        int i0, $i1, $i2;
        java.util.HashMap $r5, $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r11, $r14;
        java.util.Map$Entry $r9, $r10;

        r0 := @this: gov.nist.core.MultiValueMapImpl;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $i1 = virtualinvoke $r5.<java.util.HashMap: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        r1 = $r4;

        $r6 = r0.<gov.nist.core.MultiValueMapImpl: java.util.HashMap map>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r8;

        $r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.util.ArrayList) $r11;

        $r12 = (java.util.ArrayList) $r13;

        r3 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object[] toArray()>();

        i0 = 0;

     label2:
        $i2 = lengthof r3;

        if i0 >= $i2 goto label1;

        $r14 = r3[i0];

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        i0 = i0 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static void <clinit>()
    {
        <gov.nist.core.MultiValueMapImpl: long serialVersionUID> = 4275505380960964605L;

        return;
    }
}
