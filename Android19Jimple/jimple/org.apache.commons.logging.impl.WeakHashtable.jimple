public final class org.apache.commons.logging.impl.WeakHashtable extends java.util.Hashtable
{
    private static final int MAX_CHANGES_BEFORE_PURGE;
    private static final int PARTIAL_PURGE_COUNT;
    private int changeCount;
    private java.lang.ref.ReferenceQueue queue;

    public void <init>()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<java.util.Hashtable: void <init>()>();

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue> = $r1;

        r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = 0;

        return;
    }

    private void purge()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.ref.ReferenceQueue r1, $r4;
        java.lang.Throwable r2, $r8;
        org.apache.commons.logging.impl.WeakHashtable$WeakKey r3;
        java.lang.ref.Reference $r5;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r6;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        r1 = r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        entermonitor r1;

     label1:
        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        $r5 = virtualinvoke $r4.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        r3 = (org.apache.commons.logging.impl.WeakHashtable$WeakKey) $r5;

     label2:
        if r3 == null goto label8;

     label3:
        $r6 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>(r3);

        specialinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r6);

     label4:
        goto label1;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        exitmonitor r1;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    private void purgeOne()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.ref.ReferenceQueue r1, $r4;
        java.lang.Throwable r2, $r8;
        org.apache.commons.logging.impl.WeakHashtable$WeakKey r3;
        java.lang.ref.Reference $r5;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r6;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        r1 = r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        entermonitor r1;

     label1:
        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        $r5 = virtualinvoke $r4.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        r3 = (org.apache.commons.logging.impl.WeakHashtable$WeakKey) $r5;

     label2:
        if r3 == null goto label4;

     label3:
        $r6 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>(r3);

        specialinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r6);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.Object r1;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r1, null);

        $z0 = specialinvoke r0.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public java.util.Enumeration elements()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.util.Enumeration $r1;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r1 = specialinvoke r0.<java.util.Hashtable: java.util.Enumeration elements()>();

        return $r1;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.util.Set r1;
        java.util.HashSet r2, $r7;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Object r5, r6, $r8, $r9;
        boolean $z0;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r10;
        org.apache.commons.logging.impl.WeakHashtable$Entry $r11;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        r1 = specialinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r2 = $r7;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (org.apache.commons.logging.impl.WeakHashtable$Referenced) $r9;

        r5 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>($r10);

        r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        if r5 == null goto label1;

        $r11 = new org.apache.commons.logging.impl.WeakHashtable$Entry;

        specialinvoke $r11.<org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r5, r6, null);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        return r2;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.Object r1, $r3;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r2;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r1, null);

        $r3 = specialinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        return $r3;
    }

    public boolean isEmpty()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $z0 = specialinvoke r0.<java.util.Hashtable: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.util.Set r1;
        java.util.HashSet r2, $r5;
        java.util.Iterator r3;
        java.lang.Object r4, $r6;
        boolean $z0;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r7;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        r1 = specialinvoke r0.<java.util.Hashtable: java.util.Set keySet()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.commons.logging.impl.WeakHashtable$Referenced) $r6;

        r4 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>($r7);

        if r4 == null goto label1;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

        goto label1;

     label2:
        return r2;
    }

    public java.util.Enumeration keys()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        org.apache.commons.logging.impl.WeakHashtable$1 $r1;
        java.util.Enumeration $r2;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r1 = new org.apache.commons.logging.impl.WeakHashtable$1;

        $r2 = specialinvoke r0.<java.util.Hashtable: java.util.Enumeration keys()>();

        specialinvoke $r1.<org.apache.commons.logging.impl.WeakHashtable$1: void <init>(org.apache.commons.logging.impl.WeakHashtable,java.util.Enumeration)>(r0, $r2);

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.Object r1, r2, $r5;
        int i0, $i1, $i2, $i3;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r3;
        java.lang.ref.ReferenceQueue $r4;
        java.lang.NullPointerException $r6, $r7;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null keys are not allowed");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null values are not allowed");

        throw $r6;

     label2:
        i0 = r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i1 = i0 + 1;

        r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = $i1;

        if i0 <= 100 goto label4;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = 0;

     label3:
        $r3 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r3.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$1)>(r1, $r4, null);

        $r5 = specialinvoke r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        return $r5;

     label4:
        $i2 = r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i3 = $i2 % 10;

        if $i3 != 0 goto label3;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>();

        goto label3;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        r1 := @parameter0: java.util.Map;

        if r1 == null goto label2;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    protected void rehash()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        specialinvoke r0.<java.util.Hashtable: void rehash()>();

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.Object r1, $r3;
        int i0, $i1, $i2, $i3;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r2;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        r1 := @parameter0: java.lang.Object;

        i0 = r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i1 = i0 + 1;

        r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = $i1;

        if i0 <= 100 goto label2;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = 0;

     label1:
        $r2 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>(r1, null);

        $r3 = specialinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r2);

        return $r3;

     label2:
        $i2 = r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i3 = $i2 % 10;

        if $i3 != 0 goto label1;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>();

        goto label1;
    }

    public int size()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        int $i0;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $i0 = specialinvoke r0.<java.util.Hashtable: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r1 = specialinvoke r0.<java.util.Hashtable: java.lang.String toString()>();

        return $r1;
    }

    public java.util.Collection values()
    {
        org.apache.commons.logging.impl.WeakHashtable r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r1 = specialinvoke r0.<java.util.Hashtable: java.util.Collection values()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.logging.impl.WeakHashtable: int PARTIAL_PURGE_COUNT> = 10;

        <org.apache.commons.logging.impl.WeakHashtable: int MAX_CHANGES_BEFORE_PURGE> = 100;

        return;
    }
}
