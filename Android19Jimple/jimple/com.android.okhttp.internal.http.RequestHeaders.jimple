public final class com.android.okhttp.internal.http.RequestHeaders extends java.lang.Object
{
    private java.lang.String acceptEncoding;
    private java.lang.String connection;
    private long contentLength;
    private java.lang.String contentType;
    private boolean hasAuthorization;
    private final com.android.okhttp.internal.http.RawHeaders headers;
    private java.lang.String host;
    private java.lang.String ifModifiedSince;
    private java.lang.String ifNoneMatch;
    private int maxAgeSeconds;
    private int maxStaleSeconds;
    private int minFreshSeconds;
    private boolean noCache;
    private boolean onlyIfCached;
    private java.lang.String proxyAuthorization;
    private java.lang.String transferEncoding;
    private final java.net.URI uri;
    private java.lang.String userAgent;

    public void <init>(java.net.URI, com.android.okhttp.internal.http.RawHeaders)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.net.URI r1;
        com.android.okhttp.internal.http.RawHeaders r2;
        com.android.okhttp.internal.http.RequestHeaders$1 r3, $r7;
        int i0, $i1, $i2;
        java.lang.String r4, r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        long $l3;
        java.lang.NumberFormatException $r21;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: com.android.okhttp.internal.http.RawHeaders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.http.RequestHeaders: int maxAgeSeconds> = -1;

        r0.<com.android.okhttp.internal.http.RequestHeaders: int maxStaleSeconds> = -1;

        r0.<com.android.okhttp.internal.http.RequestHeaders: int minFreshSeconds> = -1;

        r0.<com.android.okhttp.internal.http.RequestHeaders: long contentLength> = -1L;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.net.URI uri> = r1;

        r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers> = r2;

        $r7 = new com.android.okhttp.internal.http.RequestHeaders$1;

        specialinvoke $r7.<com.android.okhttp.internal.http.RequestHeaders$1: void <init>(com.android.okhttp.internal.http.RequestHeaders)>(r0);

        r3 = $r7;

        i0 = 0;

     label01:
        $i1 = virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        if i0 >= $i1 goto label18;

        r4 = virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getFieldName(int)>(i0);

        r5 = virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getValue(int)>(i0);

        $r8 = "Cache-Control";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z0 == 0 goto label03;

        staticinvoke <com.android.okhttp.internal.http.HeaderParser: void parseCacheControl(java.lang.String,com.android.okhttp.internal.http.HeaderParser$CacheControlHandler)>(r5, r3);

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $r9 = "Pragma";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label04;

        $r22 = "no-cache";

        $z13 = virtualinvoke $r22.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z13 == 0 goto label02;

        r0.<com.android.okhttp.internal.http.RequestHeaders: boolean noCache> = 1;

        goto label02;

     label04:
        $r10 = "If-None-Match";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z2 == 0 goto label05;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifNoneMatch> = r5;

        goto label02;

     label05:
        $r11 = "If-Modified-Since";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z3 == 0 goto label06;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifModifiedSince> = r5;

        goto label02;

     label06:
        $r12 = "Authorization";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z4 == 0 goto label07;

        r0.<com.android.okhttp.internal.http.RequestHeaders: boolean hasAuthorization> = 1;

        goto label02;

     label07:
        $r13 = "Content-Length";

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z5 == 0 goto label11;

     label08:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

        $l3 = (long) $i2;

        r0.<com.android.okhttp.internal.http.RequestHeaders: long contentLength> = $l3;

     label09:
        goto label02;

     label10:
        $r21 := @caughtexception;

        goto label02;

     label11:
        $r14 = "Transfer-Encoding";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z6 == 0 goto label12;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String transferEncoding> = r5;

        goto label02;

     label12:
        $r15 = "User-Agent";

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z7 == 0 goto label13;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String userAgent> = r5;

        goto label02;

     label13:
        $r16 = "Host";

        $z8 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z8 == 0 goto label14;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String host> = r5;

        goto label02;

     label14:
        $r17 = "Connection";

        $z9 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z9 == 0 goto label15;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String connection> = r5;

        goto label02;

     label15:
        $r19 = "Accept-Encoding";

        $z11 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z11 == 0 goto label16;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String acceptEncoding> = r5;

        goto label02;

     label16:
        $r18 = "Content-Type";

        $z10 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z10 == 0 goto label17;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String contentType> = r5;

        goto label02;

     label17:
        $r20 = "Proxy-Authorization";

        $z12 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z12 == 0 goto label02;

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String proxyAuthorization> = r5;

        goto label02;

     label18:
        return;

        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    static boolean access$002(com.android.okhttp.internal.http.RequestHeaders, boolean)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.http.RequestHeaders;

        z0 := @parameter1: boolean;

        r0.<com.android.okhttp.internal.http.RequestHeaders: boolean noCache> = z0;

        return z0;
    }

    static int access$102(com.android.okhttp.internal.http.RequestHeaders, int)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        int i0;

        r0 := @parameter0: com.android.okhttp.internal.http.RequestHeaders;

        i0 := @parameter1: int;

        r0.<com.android.okhttp.internal.http.RequestHeaders: int maxAgeSeconds> = i0;

        return i0;
    }

    static int access$202(com.android.okhttp.internal.http.RequestHeaders, int)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        int i0;

        r0 := @parameter0: com.android.okhttp.internal.http.RequestHeaders;

        i0 := @parameter1: int;

        r0.<com.android.okhttp.internal.http.RequestHeaders: int maxStaleSeconds> = i0;

        return i0;
    }

    static int access$302(com.android.okhttp.internal.http.RequestHeaders, int)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        int i0;

        r0 := @parameter0: com.android.okhttp.internal.http.RequestHeaders;

        i0 := @parameter1: int;

        r0.<com.android.okhttp.internal.http.RequestHeaders: int minFreshSeconds> = i0;

        return i0;
    }

    static boolean access$402(com.android.okhttp.internal.http.RequestHeaders, boolean)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.http.RequestHeaders;

        z0 := @parameter1: boolean;

        r0.<com.android.okhttp.internal.http.RequestHeaders: boolean onlyIfCached> = z0;

        return z0;
    }

    public void addCookies(java.util.Map)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.String r4, $r8, $r12;
        java.util.Set $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r7, $r10;
        com.android.okhttp.internal.http.RawHeaders $r9;
        java.util.List $r11;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.util.Map;

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (java.lang.String) $r7;

        $r8 = "Cookie";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 != 0 goto label2;

        $r12 = "Cookie2";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z2 == 0 goto label1;

     label2:
        $r9 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.util.List) $r10;

        virtualinvoke $r9.<com.android.okhttp.internal.http.RawHeaders: void addAll(java.lang.String,java.util.List)>(r4, $r11);

        goto label1;

     label3:
        return;
    }

    public java.lang.String getAcceptEncoding()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String acceptEncoding>;

        return $r1;
    }

    public java.lang.String getConnection()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String connection>;

        return $r1;
    }

    public long getContentLength()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $l0 = r0.<com.android.okhttp.internal.http.RequestHeaders: long contentLength>;

        return $l0;
    }

    public java.lang.String getContentType()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String contentType>;

        return $r1;
    }

    public com.android.okhttp.internal.http.RawHeaders getHeaders()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        com.android.okhttp.internal.http.RawHeaders $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        return $r1;
    }

    public java.lang.String getHost()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String host>;

        return $r1;
    }

    public java.lang.String getIfModifiedSince()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifModifiedSince>;

        return $r1;
    }

    public java.lang.String getIfNoneMatch()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifNoneMatch>;

        return $r1;
    }

    public int getMaxAgeSeconds()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $i0 = r0.<com.android.okhttp.internal.http.RequestHeaders: int maxAgeSeconds>;

        return $i0;
    }

    public int getMaxStaleSeconds()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $i0 = r0.<com.android.okhttp.internal.http.RequestHeaders: int maxStaleSeconds>;

        return $i0;
    }

    public int getMinFreshSeconds()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $i0 = r0.<com.android.okhttp.internal.http.RequestHeaders: int minFreshSeconds>;

        return $i0;
    }

    public java.lang.String getProxyAuthorization()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String proxyAuthorization>;

        return $r1;
    }

    public java.lang.String getTransferEncoding()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String transferEncoding>;

        return $r1;
    }

    public java.net.URI getUri()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.net.URI $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.net.URI uri>;

        return $r1;
    }

    public java.lang.String getUserAgent()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String userAgent>;

        return $r1;
    }

    public boolean hasAuthorization()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $z0 = r0.<com.android.okhttp.internal.http.RequestHeaders: boolean hasAuthorization>;

        return $z0;
    }

    public boolean hasConditions()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifModifiedSince>;

        if $r1 != null goto label1;

        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifNoneMatch>;

        if $r2 == null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean hasConnectionClose()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r2 = "close";

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String connection>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isChunked()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r2 = "chunked";

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String transferEncoding>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isNoCache()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $z0 = r0.<com.android.okhttp.internal.http.RequestHeaders: boolean noCache>;

        return $z0;
    }

    public boolean isOnlyIfCached()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $z0 = r0.<com.android.okhttp.internal.http.RequestHeaders: boolean onlyIfCached>;

        return $z0;
    }

    public void setAcceptEncoding(java.lang.String)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String r1, $r2;
        com.android.okhttp.internal.http.RawHeaders $r3, $r4;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String acceptEncoding>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Accept-Encoding");

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Accept-Encoding", r1);

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String acceptEncoding> = r1;

        return;
    }

    public void setChunked()
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String $r1;
        com.android.okhttp.internal.http.RawHeaders $r2, $r3;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String transferEncoding>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Transfer-Encoding");

     label1:
        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r2.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Transfer-Encoding", "chunked");

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String transferEncoding> = "chunked";

        return;
    }

    public void setConnection(java.lang.String)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String r1, $r2;
        com.android.okhttp.internal.http.RawHeaders $r3, $r4;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String connection>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Connection");

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Connection", r1);

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String connection> = r1;

        return;
    }

    public void setContentLength(long)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        long l0, $l1;
        byte $b2;
        com.android.okhttp.internal.http.RawHeaders $r1, $r3;
        java.lang.String $r2;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.okhttp.internal.http.RequestHeaders: long contentLength>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label1;

        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Content-Length");

     label1:
        $r1 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke $r1.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Content-Length", $r2);

        r0.<com.android.okhttp.internal.http.RequestHeaders: long contentLength> = l0;

        return;
    }

    public void setContentType(java.lang.String)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String r1, $r2;
        com.android.okhttp.internal.http.RawHeaders $r3, $r4;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String contentType>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Content-Type");

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Content-Type", r1);

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String contentType> = r1;

        return;
    }

    public void setHost(java.lang.String)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String r1, $r2;
        com.android.okhttp.internal.http.RawHeaders $r3, $r4;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String host>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Host");

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Host", r1);

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String host> = r1;

        return;
    }

    public void setIfModifiedSince(java.util.Date)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.util.Date r1;
        java.lang.String r2, $r3;
        com.android.okhttp.internal.http.RawHeaders $r4, $r5;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.util.Date;

        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifModifiedSince>;

        if $r3 == null goto label1;

        $r5 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r5.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("If-Modified-Since");

     label1:
        r2 = staticinvoke <com.android.okhttp.internal.http.HttpDate: java.lang.String format(java.util.Date)>(r1);

        $r4 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("If-Modified-Since", r2);

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifModifiedSince> = r2;

        return;
    }

    public void setIfNoneMatch(java.lang.String)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String r1, $r2;
        com.android.okhttp.internal.http.RawHeaders $r3, $r4;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifNoneMatch>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("If-None-Match");

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("If-None-Match", r1);

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String ifNoneMatch> = r1;

        return;
    }

    public void setUserAgent(java.lang.String)
    {
        com.android.okhttp.internal.http.RequestHeaders r0;
        java.lang.String r1, $r2;
        com.android.okhttp.internal.http.RawHeaders $r3, $r4;

        r0 := @this: com.android.okhttp.internal.http.RequestHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String userAgent>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("User-Agent");

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("User-Agent", r1);

        r0.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String userAgent> = r1;

        return;
    }
}
