public final enum class dalvik.system.profiler.BinaryHprof$ControlSettings extends java.lang.Enum
{
    private static final dalvik.system.profiler.BinaryHprof$ControlSettings[] $VALUES;
    public static final enum dalvik.system.profiler.BinaryHprof$ControlSettings ALLOC_TRACES;
    public static final enum dalvik.system.profiler.BinaryHprof$ControlSettings CPU_SAMPLING;
    public final int bitmask;

    static void <clinit>()
    {
        dalvik.system.profiler.BinaryHprof$ControlSettings[] r0;
        dalvik.system.profiler.BinaryHprof$ControlSettings $r1, $r2, $r3, $r4;

        $r1 = new dalvik.system.profiler.BinaryHprof$ControlSettings;

        specialinvoke $r1.<dalvik.system.profiler.BinaryHprof$ControlSettings: void <init>(java.lang.String,int,int)>("ALLOC_TRACES", 0, 1);

        <dalvik.system.profiler.BinaryHprof$ControlSettings: dalvik.system.profiler.BinaryHprof$ControlSettings ALLOC_TRACES> = $r1;

        $r2 = new dalvik.system.profiler.BinaryHprof$ControlSettings;

        specialinvoke $r2.<dalvik.system.profiler.BinaryHprof$ControlSettings: void <init>(java.lang.String,int,int)>("CPU_SAMPLING", 1, 2);

        <dalvik.system.profiler.BinaryHprof$ControlSettings: dalvik.system.profiler.BinaryHprof$ControlSettings CPU_SAMPLING> = $r2;

        r0 = newarray (dalvik.system.profiler.BinaryHprof$ControlSettings)[2];

        $r3 = <dalvik.system.profiler.BinaryHprof$ControlSettings: dalvik.system.profiler.BinaryHprof$ControlSettings ALLOC_TRACES>;

        r0[0] = $r3;

        $r4 = <dalvik.system.profiler.BinaryHprof$ControlSettings: dalvik.system.profiler.BinaryHprof$ControlSettings CPU_SAMPLING>;

        r0[1] = $r4;

        <dalvik.system.profiler.BinaryHprof$ControlSettings: dalvik.system.profiler.BinaryHprof$ControlSettings[] $VALUES> = r0;

        return;
    }

    private void <init>(java.lang.String, int, int)
    {
        dalvik.system.profiler.BinaryHprof$ControlSettings r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: dalvik.system.profiler.BinaryHprof$ControlSettings;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<dalvik.system.profiler.BinaryHprof$ControlSettings: int bitmask> = i1;

        return;
    }

    public static dalvik.system.profiler.BinaryHprof$ControlSettings valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        dalvik.system.profiler.BinaryHprof$ControlSettings $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "dalvik/system/profiler/BinaryHprof$ControlSettings", r0);

        $r2 = (dalvik.system.profiler.BinaryHprof$ControlSettings) $r1;

        return $r2;
    }

    public static dalvik.system.profiler.BinaryHprof$ControlSettings[] values()
    {
        dalvik.system.profiler.BinaryHprof$ControlSettings[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <dalvik.system.profiler.BinaryHprof$ControlSettings: dalvik.system.profiler.BinaryHprof$ControlSettings[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (dalvik.system.profiler.BinaryHprof$ControlSettings[]) $r1;

        return $r2;
    }
}
