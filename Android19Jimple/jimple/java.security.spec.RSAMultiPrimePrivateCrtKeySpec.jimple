public class java.security.spec.RSAMultiPrimePrivateCrtKeySpec extends java.security.spec.RSAPrivateKeySpec
{
    private final java.math.BigInteger crtCoefficient;
    private final java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo;
    private final java.math.BigInteger primeExponentP;
    private final java.math.BigInteger primeExponentQ;
    private final java.math.BigInteger primeP;
    private final java.math.BigInteger primeQ;
    private final java.math.BigInteger publicExponent;

    public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.security.spec.RSAOtherPrimeInfo[])
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.math.BigInteger r1, r2, r3, r4, r5, r6, r7, r8;
        java.security.spec.RSAOtherPrimeInfo[] r9, $r10, $r11, $r12;
        int $i0, $i1, $i2;
        java.lang.NullPointerException $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.math.BigInteger;

        r3 := @parameter2: java.math.BigInteger;

        r4 := @parameter3: java.math.BigInteger;

        r5 := @parameter4: java.math.BigInteger;

        r6 := @parameter5: java.math.BigInteger;

        r7 := @parameter6: java.math.BigInteger;

        r8 := @parameter7: java.math.BigInteger;

        r9 := @parameter8: java.security.spec.RSAOtherPrimeInfo[];

        specialinvoke r0.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>(r1, r3);

        if r1 != null goto label01;

        $r21 = new java.lang.NullPointerException;

        specialinvoke $r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("modulus == null");

        throw $r21;

     label01:
        if r3 != null goto label02;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("privateExponent == null");

        throw $r19;

     label02:
        if r2 != null goto label03;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("publicExponent == null");

        throw $r20;

     label03:
        if r4 != null goto label04;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("primeP == null");

        throw $r17;

     label04:
        if r5 != null goto label05;

        $r18 = new java.lang.NullPointerException;

        specialinvoke $r18.<java.lang.NullPointerException: void <init>(java.lang.String)>("primeQ == null");

        throw $r18;

     label05:
        if r6 != null goto label06;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("primeExponentP == null");

        throw $r15;

     label06:
        if r7 != null goto label07;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("primeExponentQ == null");

        throw $r16;

     label07:
        if r8 != null goto label08;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("crtCoefficient == null");

        throw $r13;

     label08:
        if r9 == null goto label11;

        $i0 = lengthof r9;

        if $i0 != 0 goto label09;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("otherPrimeInfo.length == 0");

        throw $r14;

     label09:
        $i1 = lengthof r9;

        $r10 = newarray (java.security.spec.RSAOtherPrimeInfo)[$i1];

        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo> = $r10;

        $r12 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo>;

        $r11 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo>;

        $i2 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, $r12, 0, $i2);

     label10:
        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger publicExponent> = r2;

        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeP> = r4;

        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeQ> = r5;

        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeExponentP> = r6;

        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeExponentQ> = r7;

        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger crtCoefficient> = r8;

        return;

     label11:
        r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo> = null;

        goto label10;
    }

    public java.math.BigInteger getCrtCoefficient()
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        $r1 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger crtCoefficient>;

        return $r1;
    }

    public java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo()
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.security.spec.RSAOtherPrimeInfo[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        $r2 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo>;

        $i0 = lengthof $r3;

        r1 = newarray (java.security.spec.RSAOtherPrimeInfo)[$i0];

        $r4 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public java.math.BigInteger getPrimeExponentP()
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        $r1 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeExponentP>;

        return $r1;
    }

    public java.math.BigInteger getPrimeExponentQ()
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        $r1 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeExponentQ>;

        return $r1;
    }

    public java.math.BigInteger getPrimeP()
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        $r1 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeP>;

        return $r1;
    }

    public java.math.BigInteger getPrimeQ()
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        $r1 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger primeQ>;

        return $r1;
    }

    public java.math.BigInteger getPublicExponent()
    {
        java.security.spec.RSAMultiPrimePrivateCrtKeySpec r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.RSAMultiPrimePrivateCrtKeySpec;

        $r1 = r0.<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger publicExponent>;

        return $r1;
    }
}
