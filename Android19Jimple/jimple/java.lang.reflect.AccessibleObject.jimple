public class java.lang.reflect.AccessibleObject extends java.lang.Object implements java.lang.reflect.AnnotatedElement
{
    private boolean flag;

    protected void <init>()
    {
        java.lang.reflect.AccessibleObject r0;

        r0 := @this: java.lang.reflect.AccessibleObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.reflect.AccessibleObject: boolean flag> = 0;

        return;
    }

    public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean)
    {
        java.lang.reflect.AccessibleObject[] r0;
        boolean z0;
        int i0, i1;
        java.lang.reflect.AccessibleObject $r1;

        r0 := @parameter0: java.lang.reflect.AccessibleObject[];

        z0 := @parameter1: boolean;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0[i1];

        $r1.<java.lang.reflect.AccessibleObject: boolean flag> = z0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.annotation.Annotation[] $r1;

        r0 := @this: java.lang.reflect.AccessibleObject;

        $r1 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()>();

        return $r1;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.lang.reflect.AccessibleObject;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isAccessible()
    {
        java.lang.reflect.AccessibleObject r0;
        boolean $z0;

        r0 := @this: java.lang.reflect.AccessibleObject;

        $z0 = r0.<java.lang.reflect.AccessibleObject: boolean flag>;

        return $z0;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setAccessible(boolean)
    {
        java.lang.reflect.AccessibleObject r0;
        boolean z0;

        r0 := @this: java.lang.reflect.AccessibleObject;

        z0 := @parameter0: boolean;

        r0.<java.lang.reflect.AccessibleObject: boolean flag> = z0;

        return;
    }
}
