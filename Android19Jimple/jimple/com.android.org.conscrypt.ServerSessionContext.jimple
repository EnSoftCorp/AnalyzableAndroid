public class com.android.org.conscrypt.ServerSessionContext extends com.android.org.conscrypt.AbstractSessionContext
{
    private com.android.org.conscrypt.SSLServerSessionCache persistentCache;

    public void <init>()
    {
        com.android.org.conscrypt.ServerSessionContext r0;
        byte[] $r1;
        long $l0;

        r0 := @this: com.android.org.conscrypt.ServerSessionContext;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void <init>(int,int)>(100, 0);

        $l0 = r0.<com.android.org.conscrypt.ServerSessionContext: long sslCtxNativePointer>;

        $r1 = newarray (byte)[1];

        $r1[0] = 32;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_CTX_set_session_id_context(long,byte[])>($l0, $r1);

        return;
    }

    public javax.net.ssl.SSLSession getSession(byte[])
    {
        com.android.org.conscrypt.ServerSessionContext r0;
        byte[] r1, r5;
        javax.net.ssl.SSLSession r2, r4, r6;
        com.android.org.conscrypt.SSLServerSessionCache r3, $r7;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.ServerSessionContext;

        r1 := @parameter0: byte[];

        r2 = specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: javax.net.ssl.SSLSession getSession(byte[])>(r1);

        if r2 == null goto label2;

        r4 = r2;

     label1:
        return r4;

     label2:
        r3 = r0.<com.android.org.conscrypt.ServerSessionContext: com.android.org.conscrypt.SSLServerSessionCache persistentCache>;

        r4 = null;

        if r3 == null goto label1;

        $r7 = r0.<com.android.org.conscrypt.ServerSessionContext: com.android.org.conscrypt.SSLServerSessionCache persistentCache>;

        r5 = interfaceinvoke $r7.<com.android.org.conscrypt.SSLServerSessionCache: byte[] getSessionData(byte[])>(r1);

        r4 = null;

        if r5 == null goto label1;

        r6 = virtualinvoke r0.<com.android.org.conscrypt.ServerSessionContext: javax.net.ssl.SSLSession toSession(byte[],java.lang.String,int)>(r5, null, -1);

        r4 = null;

        if r6 == null goto label1;

        z0 = interfaceinvoke r6.<javax.net.ssl.SSLSession: boolean isValid()>();

        r4 = null;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>(r6);

        return r6;
    }

    void putSession(javax.net.ssl.SSLSession)
    {
        com.android.org.conscrypt.ServerSessionContext r0;
        javax.net.ssl.SSLSession r1;
        byte[] r2;
        com.android.org.conscrypt.SSLServerSessionCache $r3, $r4;

        r0 := @this: com.android.org.conscrypt.ServerSessionContext;

        r1 := @parameter0: javax.net.ssl.SSLSession;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>(r1);

        $r3 = r0.<com.android.org.conscrypt.ServerSessionContext: com.android.org.conscrypt.SSLServerSessionCache persistentCache>;

        if $r3 == null goto label1;

        r2 = virtualinvoke r0.<com.android.org.conscrypt.ServerSessionContext: byte[] toBytes(javax.net.ssl.SSLSession)>(r1);

        if r2 == null goto label1;

        $r4 = r0.<com.android.org.conscrypt.ServerSessionContext: com.android.org.conscrypt.SSLServerSessionCache persistentCache>;

        interfaceinvoke $r4.<com.android.org.conscrypt.SSLServerSessionCache: void putSessionData(javax.net.ssl.SSLSession,byte[])>(r1, r2);

     label1:
        return;
    }

    protected void sessionRemoved(javax.net.ssl.SSLSession)
    {
        com.android.org.conscrypt.ServerSessionContext r0;
        javax.net.ssl.SSLSession r1;

        r0 := @this: com.android.org.conscrypt.ServerSessionContext;

        r1 := @parameter0: javax.net.ssl.SSLSession;

        return;
    }

    public void setPersistentCache(com.android.org.conscrypt.SSLServerSessionCache)
    {
        com.android.org.conscrypt.ServerSessionContext r0;
        com.android.org.conscrypt.SSLServerSessionCache r1;

        r0 := @this: com.android.org.conscrypt.ServerSessionContext;

        r1 := @parameter0: com.android.org.conscrypt.SSLServerSessionCache;

        r0.<com.android.org.conscrypt.ServerSessionContext: com.android.org.conscrypt.SSLServerSessionCache persistentCache> = r1;

        return;
    }

    public volatile void setSessionTimeout(int) throws java.lang.IllegalArgumentException
    {
        com.android.org.conscrypt.ServerSessionContext r0;
        int i0;

        r0 := @this: com.android.org.conscrypt.ServerSessionContext;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void setSessionTimeout(int)>(i0);

        return;
    }
}
