class android.view.HardwareRenderer$Gl20Renderer extends android.view.HardwareRenderer$GlRenderer
{
    private static javax.microedition.khronos.egl.EGLSurface sPbuffer;
    private static final java.lang.Object[] sPbufferLock;
    private android.util.DisplayMetrics mDisplayMetrics;
    private android.view.GLES20Canvas mGlCanvas;

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <android.view.HardwareRenderer$Gl20Renderer: java.lang.Object[] sPbufferLock> = $r0;

        return;
    }

    void <init>(boolean)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        boolean z0;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void <init>(int,boolean)>(2, z0);

        return;
    }

    static void access$500(javax.microedition.khronos.egl.EGLContext)
    {
        javax.microedition.khronos.egl.EGLContext r0;

        r0 := @parameter0: javax.microedition.khronos.egl.EGLContext;

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void usePbufferSurface(javax.microedition.khronos.egl.EGLContext)>(r0);

        return;
    }

    static javax.microedition.khronos.egl.EGLSurface access$600()
    {
        javax.microedition.khronos.egl.EGLSurface $r0;

        $r0 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLSurface sPbuffer>;

        return $r0;
    }

    static javax.microedition.khronos.egl.EGLSurface access$602(javax.microedition.khronos.egl.EGLSurface)
    {
        javax.microedition.khronos.egl.EGLSurface r0;

        r0 := @parameter0: javax.microedition.khronos.egl.EGLSurface;

        <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLSurface sPbuffer> = r0;

        return r0;
    }

    static void access$700(android.view.View)
    {
        android.view.View r0;

        r0 := @parameter0: android.view.View;

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void destroyHardwareLayer(android.view.View)>(r0);

        return;
    }

    static void access$800(android.view.View)
    {
        android.view.View r0;

        r0 := @parameter0: android.view.View;

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void destroyResources(android.view.View)>(r0);

        return;
    }

    static android.view.HardwareRenderer create(boolean)
    {
        boolean z0, $z1;
        android.view.HardwareRenderer$Gl20Renderer $r0;

        z0 := @parameter0: boolean;

        $z1 = staticinvoke <android.view.GLES20Canvas: boolean isAvailable()>();

        if $z1 == 0 goto label1;

        $r0 = new android.view.HardwareRenderer$Gl20Renderer;

        specialinvoke $r0.<android.view.HardwareRenderer$Gl20Renderer: void <init>(boolean)>(z0);

        return $r0;

     label1:
        return null;
    }

    private static void destroyHardwareLayer(android.view.View)
    {
        android.view.View r0, $r2;
        android.view.ViewGroup r1;
        int i0, i1;
        boolean $z1;

        r0 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: boolean destroyLayer(boolean)>(1);

        $z1 = r0 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label2;

        r1 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void destroyHardwareLayer(android.view.View)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void destroyResources(android.view.View)
    {
        android.view.View r0, $r2;
        android.view.ViewGroup r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: void destroyHardwareResources()>();

        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r1 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void destroyResources(android.view.View)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void drawCurrentFrame(int, int)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.Paint $r1, $r9, $r19;
        android.view.HardwareRenderer$GraphDataProvider $r2;
        float[][] $r3, $r5, $r7, $r10, $r12, $r15, $r16;
        float[] $r4, $r6, $r8, $r13, $r14, $r17, $r18;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.view.GLES20Canvas $r11, $r20;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 0 goto label1;

        $r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider>;

        $r1 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r2.<android.view.HardwareRenderer$GraphDataProvider: void setupCurrentFramePaint(android.graphics.Paint)>($r1);

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r20 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        $r10 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r13 = $r10[2];

        $f5 = $r13[i1];

        $r12 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r14 = $r12[2];

        $i4 = i1 + 1;

        $f7 = $r14[$i4];

        $r15 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r17 = $r15[2];

        $i5 = i1 + 2;

        $f6 = $r17[$i5];

        $r16 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r18 = $r16[0];

        $i6 = i1 + 3;

        $f4 = $r18[$i6];

        $r19 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r20.<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f5, $f7, $f6, $f4, $r19);

        return;

     label3:
        $r11 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        $r3 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r4 = $r3[2];

        $f2 = $r4[i1];

        $r5 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r6 = $r5[2];

        $i2 = i1 + 1;

        $f3 = $r6[$i2];

        $r7 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r8 = $r7[2];

        $f1 = $r8[i1];

        $i3 = r0.<android.view.HardwareRenderer$Gl20Renderer: int mHeight>;

        $f0 = (float) $i3;

        $r9 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r11.<android.view.GLES20Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f2, $f3, $f1, $f0, $r9);

        return;
    }

    private void drawGraph(int, int)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        int i0, i1, i2, $i3, $i4, $i5;
        float[][] $r1, $r4, $r8;
        android.graphics.Paint $r2, $r5, $r9;
        android.view.HardwareRenderer$GraphDataProvider $r3;
        float[] $r6, $r11;
        android.view.GLES20Canvas $r7, $r10;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = 0;

     label1:
        $r1 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $i3 = lengthof $r1;

        if i2 >= $i3 goto label5;

        $r3 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider>;

        $r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r3.<android.view.HardwareRenderer$GraphDataProvider: void setupGraphPaint(android.graphics.Paint,int)>($r2, i2);

        tableswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label2;
        };

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r10 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        $r8 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r11 = $r8[i2];

        $i5 = i1 * 4;

        $r9 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r10.<android.view.GLES20Canvas: void drawRects(float[],int,android.graphics.Paint)>($r11, $i5, $r9);

        goto label2;

     label4:
        $r7 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        $r4 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $r6 = $r4[i2];

        $i4 = i1 * 4;

        $r5 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r7.<android.view.GLES20Canvas: void drawLines(float[],int,int,android.graphics.Paint)>($r6, 0, $i4, $r5);

        goto label2;

     label5:
        return;
    }

    private void drawThreshold(int, int)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        int i0, i1, i2, $i4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.view.HardwareRenderer$GraphDataProvider $r1, $r3;
        byte $b3;
        android.graphics.Paint $r2, $r4;
        android.view.GLES20Canvas $r5;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider>;

        f0 = virtualinvoke $r1.<android.view.HardwareRenderer$GraphDataProvider: float getThreshold()>();

        $b3 = f0 cmpl 0.0F;

        if $b3 <= 0 goto label1;

        $r3 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider>;

        $r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r3.<android.view.HardwareRenderer$GraphDataProvider: void setupThresholdPaint(android.graphics.Paint)>($r2);

        $i4 = r0.<android.view.HardwareRenderer$Gl20Renderer: int mHeight>;

        $f3 = (float) $i4;

        $f1 = (float) i1;

        $f2 = f0 * $f1;

        $f4 = $f3 - $f2;

        i2 = (int) $f4;

        $r5 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        $f7 = (float) i2;

        $f5 = (float) i0;

        $f6 = (float) i2;

        $r4 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r5.<android.view.GLES20Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>(0.0F, $f7, $f5, $f6, $r4);

     label1:
        return;
    }

    static void endTrimMemory()
    {
        javax.microedition.khronos.egl.EGL10 $r0, $r6;
        javax.microedition.khronos.egl.EGLDisplay $r1, $r5;
        javax.microedition.khronos.egl.EGLContext $r2;
        javax.microedition.khronos.egl.EGLSurface $r3, $r4;

        $r0 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        if $r0 == null goto label1;

        $r1 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        if $r1 == null goto label1;

        $r6 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r5 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r4 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r3 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r2 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        interfaceinvoke $r6.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r5, $r4, $r3, $r2);

     label1:
        return;
    }

    private void initProfileDrawData(android.view.View$AttachInfo, android.view.HardwareRenderer$GraphDataProvider)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.View$AttachInfo r1;
        android.view.HardwareRenderer$GraphDataProvider r2;
        int i0, i1, i2, $i3, $i4;
        float[][] $r3, $r11, $r13;
        android.graphics.Paint $r4, $r10, $r12;
        android.util.DisplayMetrics $r5, $r6, $r8, $r9;
        android.view.Display $r7;
        float[] $r14;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.View$AttachInfo;

        r2 := @parameter1: android.view.HardwareRenderer$GraphDataProvider;

        $r3 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        if $r3 != null goto label3;

        i0 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getElementCount()>();

        i1 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getFrameCount()>();

        $r11 = newarray (float[])[i0];

        r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes> = $r11;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r13 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        $i4 = i1 * 4;

        $r14 = newarray (float)[$i4];

        $r13[i2] = $r14;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r12 = new android.graphics.Paint;

        specialinvoke $r12.<android.graphics.Paint: void <init>()>();

        r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint> = $r12;

     label3:
        $r4 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r4.<android.graphics.Paint: void reset()>();

        $i3 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getGraphType()>();

        if $i3 != 1 goto label4;

        $r10 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.graphics.Paint mProfilePaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

     label4:
        $r5 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.util.DisplayMetrics mDisplayMetrics>;

        if $r5 != null goto label5;

        $r9 = new android.util.DisplayMetrics;

        specialinvoke $r9.<android.util.DisplayMetrics: void <init>()>();

        r0.<android.view.HardwareRenderer$Gl20Renderer: android.util.DisplayMetrics mDisplayMetrics> = $r9;

     label5:
        $r7 = r1.<android.view.View$AttachInfo: android.view.Display mDisplay>;

        $r6 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.util.DisplayMetrics mDisplayMetrics>;

        virtualinvoke $r7.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>($r6);

        $r8 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.util.DisplayMetrics mDisplayMetrics>;

        virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: void prepare(android.util.DisplayMetrics)>($r8);

        return;
    }

    static void startTrimMemory(int)
    {
        int i0;
        android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext r0;
        javax.microedition.khronos.egl.EGL10 $r1;
        javax.microedition.khronos.egl.EGLConfig $r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        javax.microedition.khronos.egl.EGLContext $r5;

        i0 := @parameter0: int;

        $r1 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        if $r1 == null goto label1;

        $r2 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLConfig sEglConfig>;

        if $r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = <android.view.HardwareRenderer$Gl20Renderer: java.lang.ThreadLocal sEglContextStorage>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext) $r4;

        if r0 == null goto label1;

        $r5 = virtualinvoke r0.<android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext: javax.microedition.khronos.egl.EGLContext getContext()>();

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void usePbufferSurface(javax.microedition.khronos.egl.EGLContext)>($r5);

        if i0 < 80 goto label3;

        staticinvoke <android.view.GLES20Canvas: void flushCaches(int)>(2);

        return;

     label3:
        if i0 < 20 goto label1;

        staticinvoke <android.view.GLES20Canvas: void flushCaches(int)>(1);

        return;
    }

    private static void usePbufferSurface(javax.microedition.khronos.egl.EGLContext)
    {
        javax.microedition.khronos.egl.EGLContext r0;
        java.lang.Object[] r1;
        java.lang.Throwable r2, $r13;
        javax.microedition.khronos.egl.EGLSurface $r3, $r4, $r5, $r12;
        javax.microedition.khronos.egl.EGLDisplay $r6, $r10;
        javax.microedition.khronos.egl.EGL10 $r7, $r11;
        int[] $r8;
        javax.microedition.khronos.egl.EGLConfig $r9;

        r0 := @parameter0: javax.microedition.khronos.egl.EGLContext;

        r1 = <android.view.HardwareRenderer$Gl20Renderer: java.lang.Object[] sPbufferLock>;

        entermonitor r1;

     label1:
        $r3 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLSurface sPbuffer>;

        if $r3 != null goto label2;

        $r11 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r10 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r9 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLConfig sEglConfig>;

        $r8 = newarray (int)[5];

        $r8[0] = 12375;

        $r8[1] = 1;

        $r8[2] = 12374;

        $r8[3] = 1;

        $r8[4] = 12344;

        $r12 = interfaceinvoke $r11.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>($r10, $r9, $r8);

        <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLSurface sPbuffer> = $r12;

     label2:
        exitmonitor r1;

     label3:
        $r7 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r6 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r5 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLSurface sPbuffer>;

        $r4 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLSurface sPbuffer>;

        interfaceinvoke $r7.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r6, $r5, $r4, r0);

        return;

     label4:
        $r13 := @caughtexception;

        r2 = $r13;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    boolean canDraw()
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        boolean $z0;
        android.view.GLES20Canvas $r1;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        $z0 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean canDraw()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    void cancelLayerUpdate(android.view.HardwareLayer)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.HardwareLayer r1;
        android.view.GLES20Canvas $r2;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.HardwareLayer;

        $r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        virtualinvoke $r2.<android.view.GLES20Canvas: void cancelLayerUpdate(android.view.HardwareLayer)>(r1);

        return;
    }

    void countOverdraw(android.view.HardwareCanvas)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.HardwareCanvas r1;
        android.view.GLES20Canvas $r2;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.HardwareCanvas;

        $r2 = (android.view.GLES20Canvas) r1;

        virtualinvoke $r2.<android.view.GLES20Canvas: void setCountOverdrawEnabled(boolean)>(1);

        return;
    }

    android.view.HardwareCanvas createCanvas()
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.GLES20Canvas r1, $r2;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        $r2 = new android.view.GLES20Canvas;

        $z0 = r0.<android.view.HardwareRenderer$Gl20Renderer: boolean mTranslucent>;

        specialinvoke $r2.<android.view.GLES20Canvas: void <init>(boolean)>($z0);

        r1 = $r2;

        r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas> = r1;

        return r1;
    }

    public android.view.DisplayList createDisplayList(java.lang.String)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        java.lang.String r1;
        android.view.GLES20DisplayList $r2;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.view.GLES20DisplayList;

        specialinvoke $r2.<android.view.GLES20DisplayList: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    public android.view.HardwareLayer createHardwareLayer(int, int, boolean)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        int i0, i1;
        boolean z0;
        android.view.GLES20RenderLayer $r1;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = new android.view.GLES20RenderLayer;

        specialinvoke $r1.<android.view.GLES20RenderLayer: void <init>(int,int,boolean)>(i0, i1, z0);

        return $r1;
    }

    android.view.HardwareLayer createHardwareLayer(boolean)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        boolean z0;
        android.view.GLES20TextureLayer $r1;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        z0 := @parameter0: boolean;

        $r1 = new android.view.GLES20TextureLayer;

        specialinvoke $r1.<android.view.GLES20TextureLayer: void <init>(boolean)>(z0);

        return $r1;
    }

    android.opengl.ManagedEGLContext createManagedContext(javax.microedition.khronos.egl.EGLContext)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        javax.microedition.khronos.egl.EGLContext r1, $r3;
        android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext $r2;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: javax.microedition.khronos.egl.EGLContext;

        $r2 = new android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext;

        $r3 = r0.<android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        specialinvoke $r2.<android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext: void <init>(javax.microedition.khronos.egl.EGLContext)>($r3);

        return $r2;
    }

    public android.graphics.SurfaceTexture createSurfaceTexture(android.view.HardwareLayer)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.HardwareLayer r1;
        android.view.GLES20TextureLayer $r2;
        android.graphics.SurfaceTexture $r3;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.HardwareLayer;

        $r2 = (android.view.GLES20TextureLayer) r1;

        $r3 = virtualinvoke $r2.<android.view.GLES20TextureLayer: android.graphics.SurfaceTexture getSurfaceTexture()>();

        return $r3;
    }

    void destroy(boolean)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.view.GLES20Canvas $r2, $r4;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        z0 := @parameter0: boolean;

     label1:
        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void destroy(boolean)>(z0);

     label2:
        if z0 == 0 goto label3;

        $r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        if $r2 == null goto label3;

        r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas> = null;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

        if z0 == 0 goto label5;

        $r4 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        if $r4 == null goto label5;

        r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas> = null;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    void destroyHardwareResources(android.view.View)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.View r1;
        android.view.HardwareRenderer$Gl20Renderer$2 $r2;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.View;

        if r1 == null goto label1;

        $r2 = new android.view.HardwareRenderer$Gl20Renderer$2;

        specialinvoke $r2.<android.view.HardwareRenderer$Gl20Renderer$2: void <init>(android.view.HardwareRenderer$Gl20Renderer,android.view.View)>(r0, r1);

        virtualinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: boolean safelyRun(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    void destroyLayers(android.view.View)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.View r1;
        android.view.HardwareRenderer$Gl20Renderer$1 $r2;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.View;

        if r1 == null goto label1;

        $r2 = new android.view.HardwareRenderer$Gl20Renderer$1;

        specialinvoke $r2.<android.view.HardwareRenderer$Gl20Renderer$1: void <init>(android.view.HardwareRenderer$Gl20Renderer,android.view.View)>(r0, r1);

        virtualinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: boolean safelyRun(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    void drawProfileData(android.view.View$AttachInfo)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.View$AttachInfo r1;
        android.view.HardwareRenderer$GraphDataProvider r2, $r5;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        float[] r3, r4, r6;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26;
        byte $b22;
        float[][] $r7, $r8;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.View$AttachInfo;

        $r5 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider>;

        if $r5 == null goto label04;

        r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider>;

        specialinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: void initProfileDrawData(android.view.View$AttachInfo,android.view.HardwareRenderer$GraphDataProvider)>(r1, r2);

        i0 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getVerticalUnitSize()>();

        i1 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getHorizontaUnitMargin()>();

        i2 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getHorizontalUnitSize()>();

        i3 = 0;

        i4 = 0;

        i5 = 0;

        r3 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: float[] getData()>();

        i6 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getElementCount()>();

        i7 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getGraphType()>();

        $i20 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getFrameCount()>();

        i8 = i6 * $i20;

        if i7 != 1 goto label01;

        i8 = i8 - i6;

     label01:
        i9 = 0;

     label02:
        if i9 >= i8 goto label03;

        $f1 = r3[i9];

        $b22 = $f1 cmpg 0.0F;

        if $b22 >= 0 goto label05;

     label03:
        i10 = i3 + i1;

        specialinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: void drawGraph(int,int)>(i7, i4);

        specialinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: void drawCurrentFrame(int,int)>(i7, i5);

        specialinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: void drawThreshold(int,int)>(i10, i0);

     label04:
        return;

     label05:
        i11 = i4 * 4;

        $i23 = virtualinvoke r2.<android.view.HardwareRenderer$GraphDataProvider: int getCurrentFrame()>();

        $i21 = i6 * $i23;

        if i9 != $i21 goto label06;

        i5 = i11;

     label06:
        i13 = i3 + i1;

        i12 = i13 + i2;

        i15 = r0.<android.view.HardwareRenderer$Gl20Renderer: int mHeight>;

        $f3 = (float) i15;

        $f5 = r3[i9];

        $f2 = (float) i0;

        $f6 = $f5 * $f2;

        $f4 = $f3 - $f6;

        i14 = (int) $f4;

        tableswitch(i7)
        {
            case 0: goto label08;
            case 1: goto label11;
            default: goto label07;
        };

     label07:
        i3 = i13 + i2;

        i4 = i4 + 1;

        i9 = i9 + i6;

        goto label02;

     label08:
        i18 = 0;

     label09:
        if i18 >= i6 goto label07;

        $r8 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        r6 = $r8[i18];

        $f19 = (float) i13;

        r6[i11] = $f19;

        $i34 = i11 + 1;

        $f20 = (float) i14;

        r6[$i34] = $f20;

        $i31 = i11 + 2;

        $f21 = (float) i12;

        r6[$i31] = $f21;

        $i32 = i11 + 3;

        $f18 = (float) i15;

        r6[$i32] = $f18;

        i15 = i14;

        $i33 = i6 - 1;

        if i18 >= $i33 goto label10;

        $f23 = (float) i15;

        $i35 = i9 + i18;

        $i36 = 1 + $i35;

        $f26 = r3[$i36];

        $f25 = (float) i0;

        $f22 = $f26 * $f25;

        $f24 = $f23 - $f22;

        i14 = (int) $f24;

     label10:
        i18 = i18 + 1;

        goto label09;

     label11:
        i16 = 0;

     label12:
        if i16 >= i6 goto label07;

        $r7 = r0.<android.view.HardwareRenderer$Gl20Renderer: float[][] mProfileShapes>;

        r4 = $r7[i16];

        $i24 = i13 + i12;

        $f7 = (float) $i24;

        $f8 = 0.5F * $f7;

        r4[i11] = $f8;

        i17 = i11 + 1;

        if i11 != 0 goto label15;

        f0 = (float) i14;

     label13:
        r4[i17] = f0;

        $i28 = i11 + 2;

        $f10 = r4[i11];

        $f11 = (float) i2;

        $f9 = $f10 + $f11;

        r4[$i28] = $f9;

        $i27 = i11 + 3;

        $f12 = (float) i14;

        r4[$i27] = $f12;

        i19 = i14;

        $i26 = i6 - 1;

        if i16 >= $i26 goto label14;

        $f16 = (float) i19;

        $i30 = i9 + i16;

        $i29 = 1 + $i30;

        $f13 = r3[$i29];

        $f14 = (float) i0;

        $f17 = $f13 * $f14;

        $f15 = $f16 - $f17;

        i14 = (int) $f15;

     label14:
        i16 = i16 + 1;

        goto label12;

     label15:
        $i25 = i11 - 1;

        f0 = r4[$i25];

        goto label13;
    }

    void flushLayerUpdates()
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.GLES20Canvas $r1;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        $r1 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        virtualinvoke $r1.<android.view.GLES20Canvas: void flushLayerUpdates()>();

        return;
    }

    int[] getConfig(boolean)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        boolean z0;
        int i0;
        short s1, $s2;
        int[] r1;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        z0 := @parameter0: boolean;

        i0 = staticinvoke <android.view.GLES20Canvas: int getStencilSize()>();

        if z0 == 0 goto label2;

        s1 = 1024;

     label1:
        r1 = newarray (int)[19];

        r1[0] = 12352;

        r1[1] = 4;

        r1[2] = 12324;

        r1[3] = 8;

        r1[4] = 12323;

        r1[5] = 8;

        r1[6] = 12322;

        r1[7] = 8;

        r1[8] = 12321;

        r1[9] = 8;

        r1[10] = 12325;

        r1[11] = 0;

        r1[12] = 12327;

        r1[13] = 12344;

        r1[14] = 12326;

        r1[15] = i0;

        r1[16] = 12339;

        $s2 = s1 | 4;

        r1[17] = $s2;

        r1[18] = 12344;

        return r1;

     label2:
        s1 = 0;

        goto label1;
    }

    float getOverdraw(android.view.HardwareCanvas)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.HardwareCanvas r1;
        android.view.GLES20Canvas $r2;
        float $f0;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.HardwareCanvas;

        $r2 = (android.view.GLES20Canvas) r1;

        $f0 = virtualinvoke $r2.<android.view.GLES20Canvas: float getOverdraw()>();

        return $f0;
    }

    void initAtlas()
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.os.IBinder r1;
        android.view.IAssetAtlas r2;
        android.os.RemoteException r3, $r8;
        android.view.GraphicBuffer r4;
        int[] r5;
        int $i0;
        boolean $z0;
        java.lang.Class $r6, $r7;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("assetatlas");

        if r1 != null goto label02;

     label01:
        return;

     label02:
        r2 = staticinvoke <android.view.IAssetAtlas$Stub: android.view.IAssetAtlas asInterface(android.os.IBinder)>(r1);

     label03:
        $i0 = staticinvoke <android.os.Process: int myPpid()>();

        $z0 = interfaceinvoke r2.<android.view.IAssetAtlas: boolean isCompatible(int)>($i0);

        if $z0 == 0 goto label01;

        r4 = interfaceinvoke r2.<android.view.IAssetAtlas: android.view.GraphicBuffer getBuffer()>();

     label04:
        if r4 == null goto label01;

     label05:
        r5 = interfaceinvoke r2.<android.view.IAssetAtlas: int[] getMap()>();

     label06:
        if r5 == null goto label08;

     label07:
        staticinvoke <android.view.GLES20Canvas: void initAtlas(android.view.GraphicBuffer,int[])>(r4, r5);

     label08:
        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r6 == $r7 goto label01;

        virtualinvoke r4.<android.view.GraphicBuffer: void destroy()>();

     label09:
        return;

     label10:
        $r8 := @caughtexception;

        r3 = $r8;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HardwareRenderer", "Could not acquire atlas", r3);

        return;

        catch android.os.RemoteException from label03 to label04 with label10;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    void initCaches()
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean initCaches()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: void initAtlas()>();

     label1:
        return;
    }

    void onPostDraw()
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.GLES20Canvas $r1;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        $r1 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        virtualinvoke $r1.<android.view.GLES20Canvas: void onPostDraw()>();

        return;
    }

    int onPreDraw(android.graphics.Rect)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.graphics.Rect r1;
        android.view.GLES20Canvas $r2;
        int $i0;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        $i0 = virtualinvoke $r2.<android.view.GLES20Canvas: int onPreDraw(android.graphics.Rect)>(r1);

        return $i0;
    }

    void pushLayerUpdate(android.view.HardwareLayer)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.HardwareLayer r1;
        android.view.GLES20Canvas $r2;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.HardwareLayer;

        $r2 = r0.<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas mGlCanvas>;

        virtualinvoke $r2.<android.view.GLES20Canvas: void pushLayerUpdate(android.view.HardwareLayer)>(r1);

        return;
    }

    boolean safelyRun(java.lang.Runnable)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        java.lang.Runnable r1;
        boolean z0, $z1;
        java.lang.Throwable r2, $r13;
        android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext r3;
        javax.microedition.khronos.egl.EGLContext $r4, $r11, $r12;
        javax.microedition.khronos.egl.EGLSurface $r5, $r6, $r14, $r15;
        javax.microedition.khronos.egl.EGLDisplay $r7, $r17;
        javax.microedition.khronos.egl.EGL10 $r8, $r16;
        java.lang.ThreadLocal $r9;
        java.lang.Object $r10;
        int $i0;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: java.lang.Runnable;

        $z1 = virtualinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r0.<android.view.HardwareRenderer$Gl20Renderer: int checkRenderContext()>();

        if $i0 != 0 goto label3;

     label1:
        z0 = 1;

     label2:
        if z0 == 0 goto label5;

        $r9 = <android.view.HardwareRenderer$Gl20Renderer: java.lang.ThreadLocal sEglContextStorage>;

        $r10 = virtualinvoke $r9.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext) $r10;

        if r3 != null goto label4;

        return 0;

     label3:
        z0 = 0;

        goto label2;

     label4:
        $r11 = virtualinvoke r3.<android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext: javax.microedition.khronos.egl.EGLContext getContext()>();

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void usePbufferSurface(javax.microedition.khronos.egl.EGLContext)>($r11);

     label5:
        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label6:
        if z0 == 0 goto label7;

        $r8 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r7 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r6 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r5 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r4 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        interfaceinvoke $r8.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r7, $r6, $r5, $r4);

     label7:
        return 1;

     label8:
        $r13 := @caughtexception;

        r2 = $r13;

        if z0 == 0 goto label9;

        $r16 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r17 = <android.view.HardwareRenderer$Gl20Renderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r14 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r15 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r12 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        interfaceinvoke $r16.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r17, $r14, $r15, $r12);

     label9:
        throw r2;

        catch java.lang.Throwable from label5 to label6 with label8;
    }

    void setSurfaceTexture(android.view.HardwareLayer, android.graphics.SurfaceTexture)
    {
        android.view.HardwareRenderer$Gl20Renderer r0;
        android.view.HardwareLayer r1;
        android.graphics.SurfaceTexture r2;
        android.view.GLES20TextureLayer $r3;

        r0 := @this: android.view.HardwareRenderer$Gl20Renderer;

        r1 := @parameter0: android.view.HardwareLayer;

        r2 := @parameter1: android.graphics.SurfaceTexture;

        $r3 = (android.view.GLES20TextureLayer) r1;

        virtualinvoke $r3.<android.view.GLES20TextureLayer: void setSurfaceTexture(android.graphics.SurfaceTexture)>(r2);

        return;
    }
}
