public final class org.apache.harmony.security.asn1.ASN1GeneralizedTime extends org.apache.harmony.security.asn1.ASN1Time
{
    private static final org.apache.harmony.security.asn1.ASN1GeneralizedTime ASN1;
    private static final java.lang.String GEN_PATTERN;

    static void <clinit>()
    {
        org.apache.harmony.security.asn1.ASN1GeneralizedTime $r0;

        <org.apache.harmony.security.asn1.ASN1GeneralizedTime: java.lang.String GEN_PATTERN> = "yyyyMMddHHmmss.SSS";

        $r0 = new org.apache.harmony.security.asn1.ASN1GeneralizedTime;

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1GeneralizedTime: void <init>()>();

        <org.apache.harmony.security.asn1.ASN1GeneralizedTime: org.apache.harmony.security.asn1.ASN1GeneralizedTime ASN1> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.security.asn1.ASN1GeneralizedTime r0;

        r0 := @this: org.apache.harmony.security.asn1.ASN1GeneralizedTime;

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Time: void <init>(int)>(24);

        return;
    }

    public static org.apache.harmony.security.asn1.ASN1GeneralizedTime getInstance()
    {
        org.apache.harmony.security.asn1.ASN1GeneralizedTime $r0;

        $r0 = <org.apache.harmony.security.asn1.ASN1GeneralizedTime: org.apache.harmony.security.asn1.ASN1GeneralizedTime ASN1>;

        return $r0;
    }

    public java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1GeneralizedTime r0;
        org.apache.harmony.security.asn1.BerInputStream r1;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: org.apache.harmony.security.asn1.ASN1GeneralizedTime;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerInputStream;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerInputStream: void readGeneralizedTime()>();

        $z0 = r1.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1GeneralizedTime: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)>(r1);

        return $r2;
    }

    public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1GeneralizedTime r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.ASN1GeneralizedTime;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeGeneralizedTime()>();

        return;
    }

    public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1GeneralizedTime r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;
        java.text.SimpleDateFormat r2, $r4;
        java.lang.String r3, $r10;
        int i0, i1, $i2, $i4;
        boolean z0, z1, $z2;
        java.util.Locale $r5;
        java.util.TimeZone $r6;
        java.lang.Object $r7, $r15;
        char $c3;
        java.lang.StringBuilder $r8, $r9, $r11;
        byte[] $r12, $r14, $r16;
        java.nio.charset.Charset $r13;

        r0 := @this: org.apache.harmony.security.asn1.ASN1GeneralizedTime;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        $r4 = new java.text.SimpleDateFormat;

        $r5 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyyMMddHHmmss.SSS", $r5);

        r2 = $r4;

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke r2.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r6);

        $r7 = r1.<org.apache.harmony.security.asn1.BerOutputStream: java.lang.Object content>;

        r3 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.lang.Object)>($r7);

     label1:
        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        i0 = -1 + $i2;

        i1 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int,int)>(48, i0);

        if i1 == -1 goto label4;

        z0 = 1;

     label2:
        if i1 != i0 goto label5;

        z1 = 1;

     label3:
        $z2 = z1 & z0;

        if $z2 == 0 goto label6;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        goto label1;

     label4:
        z0 = 0;

        goto label2;

     label5:
        z1 = 0;

        goto label3;

     label6:
        $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i0);

        if $c3 != 46 goto label7;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label7:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Z");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r13);

        r1.<org.apache.harmony.security.asn1.BerOutputStream: java.lang.Object content> = $r12;

        $r15 = r1.<org.apache.harmony.security.asn1.BerOutputStream: java.lang.Object content>;

        $r14 = (byte[]) $r15;

        $r16 = (byte[]) $r14;

        $i4 = lengthof $r16;

        r1.<org.apache.harmony.security.asn1.BerOutputStream: int length> = $i4;

        return;
    }
}
