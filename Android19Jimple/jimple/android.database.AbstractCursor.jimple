public abstract class android.database.AbstractCursor extends java.lang.Object implements android.database.CrossProcessCursor
{
    private static final java.lang.String TAG;
    protected boolean mClosed;
    private final android.database.ContentObservable mContentObservable;
    protected android.content.ContentResolver mContentResolver;
    protected java.lang.Long mCurrentRowID;
    private final android.database.DataSetObservable mDataSetObservable;
    private android.os.Bundle mExtras;
    private android.net.Uri mNotifyUri;
    protected int mPos;
    protected int mRowIdColumnIndex;
    private android.database.ContentObserver mSelfObserver;
    private final java.lang.Object mSelfObserverLock;
    private boolean mSelfObserverRegistered;
    protected java.util.HashMap mUpdatedRows;

    public void <init>()
    {
        android.database.AbstractCursor r0;
        java.lang.Object $r1;
        android.database.DataSetObservable $r2;
        android.database.ContentObservable $r3;
        android.os.Bundle $r4;
        java.util.HashMap $r5;

        r0 := @this: android.database.AbstractCursor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.database.AbstractCursor: java.lang.Object mSelfObserverLock> = $r1;

        $r2 = new android.database.DataSetObservable;

        specialinvoke $r2.<android.database.DataSetObservable: void <init>()>();

        r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable> = $r2;

        $r3 = new android.database.ContentObservable;

        specialinvoke $r3.<android.database.ContentObservable: void <init>()>();

        r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable> = $r3;

        $r4 = <android.os.Bundle: android.os.Bundle EMPTY>;

        r0.<android.database.AbstractCursor: android.os.Bundle mExtras> = $r4;

        r0.<android.database.AbstractCursor: int mPos> = -1;

        r0.<android.database.AbstractCursor: int mRowIdColumnIndex> = -1;

        r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID> = null;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows> = $r5;

        return;
    }

    protected void checkPosition()
    {
        android.database.AbstractCursor r0;
        int $i0, $i1, $i2, $i3, $i4;
        android.database.CursorIndexOutOfBoundsException $r1;

        r0 := @this: android.database.AbstractCursor;

        $i0 = r0.<android.database.AbstractCursor: int mPos>;

        if -1 == $i0 goto label1;

        $i3 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        $i4 = r0.<android.database.AbstractCursor: int mPos>;

        if $i3 != $i4 goto label2;

     label1:
        $r1 = new android.database.CursorIndexOutOfBoundsException;

        $i1 = r0.<android.database.AbstractCursor: int mPos>;

        $i2 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        specialinvoke $r1.<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)>($i1, $i2);

        throw $r1;

     label2:
        return;
    }

    public void close()
    {
        android.database.AbstractCursor r0;
        android.database.ContentObservable $r1;

        r0 := @this: android.database.AbstractCursor;

        r0.<android.database.AbstractCursor: boolean mClosed> = 1;

        $r1 = r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r1.<android.database.ContentObservable: void unregisterAll()>();

        virtualinvoke r0.<android.database.AbstractCursor: void onDeactivateOrClose()>();

        return;
    }

    public void copyStringToBuffer(int, android.database.CharArrayBuffer)
    {
        android.database.AbstractCursor r0;
        int i0, $i1, $i2, $i3, $i4;
        android.database.CharArrayBuffer r1;
        java.lang.String r2;
        char[] r3, $r4;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        r1 := @parameter1: android.database.CharArrayBuffer;

        r2 = virtualinvoke r0.<android.database.AbstractCursor: java.lang.String getString(int)>(i0);

        if r2 == null goto label4;

        r3 = r1.<android.database.CharArrayBuffer: char[] data>;

        if r3 == null goto label1;

        $i2 = lengthof r3;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label3;

     label1:
        $r4 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        r1.<android.database.CharArrayBuffer: char[] data> = $r4;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        r1.<android.database.CharArrayBuffer: int sizeCopied> = $i1;

        return;

     label3:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i4, r3, 0);

        goto label2;

     label4:
        r1.<android.database.CharArrayBuffer: int sizeCopied> = 0;

        return;
    }

    public void deactivate()
    {
        android.database.AbstractCursor r0;

        r0 := @this: android.database.AbstractCursor;

        virtualinvoke r0.<android.database.AbstractCursor: void onDeactivateOrClose()>();

        return;
    }

    public void fillWindow(int, android.database.CursorWindow)
    {
        android.database.AbstractCursor r0;
        int i0;
        android.database.CursorWindow r1;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        r1 := @parameter1: android.database.CursorWindow;

        staticinvoke <android.database.DatabaseUtils: void cursorFillWindow(android.database.Cursor,int,android.database.CursorWindow)>(r0, i0, r1);

        return;
    }

    protected void finalize()
    {
        android.database.AbstractCursor r0;
        android.database.ContentObserver $r2, $r3;
        boolean $z0, $z1;
        android.content.ContentResolver $r4;
        java.lang.Exception $r5;

        r0 := @this: android.database.AbstractCursor;

        $r2 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r2 == null goto label1;

        $z1 = r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered>;

        if $z1 != 1 goto label1;

        $r4 = r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r3 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r4.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r3);

     label1:
        $z0 = r0.<android.database.AbstractCursor: boolean mClosed>;

        if $z0 != 0 goto label2;

        virtualinvoke r0.<android.database.AbstractCursor: void close()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public byte[] getBlob(int)
    {
        android.database.AbstractCursor r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getBlob is not supported");

        throw $r1;
    }

    public int getColumnCount()
    {
        android.database.AbstractCursor r0;
        java.lang.String[] $r1;
        int $i0;

        r0 := @this: android.database.AbstractCursor;

        $r1 = virtualinvoke r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getColumnIndex(java.lang.String)
    {
        android.database.AbstractCursor r0;
        java.lang.String r1, $r4, $r8;
        int i0, i1, i2, $i3;
        java.lang.Exception r2, $r5;
        java.lang.String[] r3;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label1;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>()>();

        r2 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requesting column name with table name -- ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Cursor", $r8, r2);

        $i3 = i0 + 1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i3);

     label1:
        r3 = virtualinvoke r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        i1 = lengthof r3;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $r4 = r3[i2];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        return i2;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return -1;
    }

    public int getColumnIndexOrThrow(java.lang.String)
    {
        android.database.AbstractCursor r0;
        java.lang.String r1, $r7;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<android.database.AbstractCursor: int getColumnIndex(java.lang.String)>(r1);

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return i0;
    }

    public java.lang.String getColumnName(int)
    {
        android.database.AbstractCursor r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $r2 = $r1[i0];

        return $r2;
    }

    public abstract java.lang.String[] getColumnNames();

    public abstract int getCount();

    public abstract double getDouble(int);

    public android.os.Bundle getExtras()
    {
        android.database.AbstractCursor r0;
        android.os.Bundle $r1;

        r0 := @this: android.database.AbstractCursor;

        $r1 = r0.<android.database.AbstractCursor: android.os.Bundle mExtras>;

        return $r1;
    }

    public abstract float getFloat(int);

    public abstract int getInt(int);

    public abstract long getLong(int);

    public android.net.Uri getNotificationUri()
    {
        android.database.AbstractCursor r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        android.net.Uri r3;

        r0 := @this: android.database.AbstractCursor;

        r1 = r0.<android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor r1;

     label1:
        r3 = r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final int getPosition()
    {
        android.database.AbstractCursor r0;
        int $i0;

        r0 := @this: android.database.AbstractCursor;

        $i0 = r0.<android.database.AbstractCursor: int mPos>;

        return $i0;
    }

    public abstract short getShort(int);

    public abstract java.lang.String getString(int);

    public int getType(int)
    {
        android.database.AbstractCursor r0;
        int i0;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        return 3;
    }

    protected java.lang.Object getUpdatedField(int)
    {
        android.database.AbstractCursor r0;
        int i0;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        return null;
    }

    public boolean getWantsAllOnMoveCalls()
    {
        android.database.AbstractCursor r0;

        r0 := @this: android.database.AbstractCursor;

        return 0;
    }

    public android.database.CursorWindow getWindow()
    {
        android.database.AbstractCursor r0;

        r0 := @this: android.database.AbstractCursor;

        return null;
    }

    public final boolean isAfterLast()
    {
        android.database.AbstractCursor r0;
        int $i0, $i1, $i2;

        r0 := @this: android.database.AbstractCursor;

        $i0 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $i1 = r0.<android.database.AbstractCursor: int mPos>;

        $i2 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        if $i1 == $i2 goto label1;

        return 0;
    }

    public final boolean isBeforeFirst()
    {
        android.database.AbstractCursor r0;
        int $i0, $i1;

        r0 := @this: android.database.AbstractCursor;

        $i0 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $i1 = r0.<android.database.AbstractCursor: int mPos>;

        if $i1 == -1 goto label1;

        return 0;
    }

    public boolean isClosed()
    {
        android.database.AbstractCursor r0;
        boolean $z0;

        r0 := @this: android.database.AbstractCursor;

        $z0 = r0.<android.database.AbstractCursor: boolean mClosed>;

        return $z0;
    }

    protected boolean isFieldUpdated(int)
    {
        android.database.AbstractCursor r0;
        int i0;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        return 0;
    }

    public final boolean isFirst()
    {
        android.database.AbstractCursor r0;
        int $i0, $i1;

        r0 := @this: android.database.AbstractCursor;

        $i0 = r0.<android.database.AbstractCursor: int mPos>;

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isLast()
    {
        android.database.AbstractCursor r0;
        int i0, $i1, $i2;

        r0 := @this: android.database.AbstractCursor;

        i0 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        $i2 = r0.<android.database.AbstractCursor: int mPos>;

        $i1 = i0 - 1;

        if $i2 != $i1 goto label1;

        if i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract boolean isNull(int);

    public final boolean move(int)
    {
        android.database.AbstractCursor r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        $i1 = r0.<android.database.AbstractCursor: int mPos>;

        $i2 = i0 + $i1;

        $z0 = virtualinvoke r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i2);

        return $z0;
    }

    public final boolean moveToFirst()
    {
        android.database.AbstractCursor r0;
        boolean $z0;

        r0 := @this: android.database.AbstractCursor;

        $z0 = virtualinvoke r0.<android.database.AbstractCursor: boolean moveToPosition(int)>(0);

        return $z0;
    }

    public final boolean moveToLast()
    {
        android.database.AbstractCursor r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.database.AbstractCursor;

        $i0 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        $i1 = -1 + $i0;

        $z0 = virtualinvoke r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i1);

        return $z0;
    }

    public final boolean moveToNext()
    {
        android.database.AbstractCursor r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.database.AbstractCursor;

        $i0 = r0.<android.database.AbstractCursor: int mPos>;

        $i1 = 1 + $i0;

        $z0 = virtualinvoke r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i1);

        return $z0;
    }

    public final boolean moveToPosition(int)
    {
        android.database.AbstractCursor r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0;
        long $l6;
        java.lang.Long $r1;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        z0 = 0;

        i1 = virtualinvoke r0.<android.database.AbstractCursor: int getCount()>();

        if i0 < i1 goto label2;

        r0.<android.database.AbstractCursor: int mPos> = i1;

     label1:
        return z0;

     label2:
        if i0 >= 0 goto label3;

        r0.<android.database.AbstractCursor: int mPos> = -1;

        return 0;

     label3:
        $i2 = r0.<android.database.AbstractCursor: int mPos>;

        if i0 != $i2 goto label4;

        return 1;

     label4:
        $i3 = r0.<android.database.AbstractCursor: int mPos>;

        z0 = virtualinvoke r0.<android.database.AbstractCursor: boolean onMove(int,int)>($i3, i0);

        if z0 != 0 goto label5;

        r0.<android.database.AbstractCursor: int mPos> = -1;

        return z0;

     label5:
        r0.<android.database.AbstractCursor: int mPos> = i0;

        $i4 = r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        if $i4 == -1 goto label1;

        $i5 = r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        $l6 = virtualinvoke r0.<android.database.AbstractCursor: long getLong(int)>($i5);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID> = $r1;

        return z0;
    }

    public final boolean moveToPrevious()
    {
        android.database.AbstractCursor r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.database.AbstractCursor;

        $i0 = r0.<android.database.AbstractCursor: int mPos>;

        $i1 = -1 + $i0;

        $z0 = virtualinvoke r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i1);

        return $z0;
    }

    protected void onChange(boolean)
    {
        android.database.AbstractCursor r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r8;
        android.database.ContentObservable $r3;
        android.net.Uri $r4, $r6;
        android.database.ContentObserver $r5;
        android.content.ContentResolver $r7;

        r0 := @this: android.database.AbstractCursor;

        z0 := @parameter0: boolean;

        r1 = r0.<android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r3.<android.database.ContentObservable: void dispatchChange(boolean,android.net.Uri)>(z0, null);

        $r4 = r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        if $r4 == null goto label4;

     label2:
        if z0 == 0 goto label4;

     label3:
        $r7 = r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r6 = r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r5 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r7.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r6, $r5);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected void onDeactivateOrClose()
    {
        android.database.AbstractCursor r0;
        android.database.ContentObserver $r1, $r3;
        android.database.DataSetObservable $r2;
        android.content.ContentResolver $r4;

        r0 := @this: android.database.AbstractCursor;

        $r1 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r1 == null goto label1;

        $r4 = r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r3 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r4.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r3);

        r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered> = 0;

     label1:
        $r2 = r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.DataSetObservable: void notifyInvalidated()>();

        return;
    }

    public boolean onMove(int, int)
    {
        android.database.AbstractCursor r0;
        int i0, i1;

        r0 := @this: android.database.AbstractCursor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return 1;
    }

    public void registerContentObserver(android.database.ContentObserver)
    {
        android.database.AbstractCursor r0;
        android.database.ContentObserver r1;
        android.database.ContentObservable $r2;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.database.ContentObserver;

        $r2 = r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r2.<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>(r1);

        return;
    }

    public void registerDataSetObserver(android.database.DataSetObserver)
    {
        android.database.AbstractCursor r0;
        android.database.DataSetObserver r1;
        android.database.DataSetObservable $r2;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.database.DataSetObserver;

        $r2 = r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.DataSetObservable: void registerObserver(java.lang.Object)>(r1);

        return;
    }

    public boolean requery()
    {
        android.database.AbstractCursor r0;
        android.database.ContentObserver $r1, $r3;
        android.database.DataSetObservable $r2;
        boolean $z0;
        android.net.Uri $r4;
        android.content.ContentResolver $r5;

        r0 := @this: android.database.AbstractCursor;

        $r1 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r1 == null goto label1;

        $z0 = r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered>;

        if $z0 != 0 goto label1;

        $r5 = r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r4 = r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r3 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r5.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r4, 1, $r3);

        r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered> = 1;

     label1:
        $r2 = r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.DataSetObservable: void notifyChanged()>();

        return 1;
    }

    public android.os.Bundle respond(android.os.Bundle)
    {
        android.database.AbstractCursor r0;
        android.os.Bundle r1, $r2;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.os.Bundle;

        $r2 = <android.os.Bundle: android.os.Bundle EMPTY>;

        return $r2;
    }

    public void setExtras(android.os.Bundle)
    {
        android.database.AbstractCursor r0;
        android.os.Bundle r1;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.os.Bundle;

        if r1 != null goto label1;

        r1 = <android.os.Bundle: android.os.Bundle EMPTY>;

     label1:
        r0.<android.database.AbstractCursor: android.os.Bundle mExtras> = r1;

        return;
    }

    public void setNotificationUri(android.content.ContentResolver, android.net.Uri)
    {
        android.database.AbstractCursor r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        int $i0;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.net.Uri;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r0.<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri,int)>(r1, r2, $i0);

        return;
    }

    public void setNotificationUri(android.content.ContentResolver, android.net.Uri, int)
    {
        android.database.AbstractCursor r0;
        android.content.ContentResolver r1, $r9, $r11;
        android.net.Uri r2, $r8;
        int i0;
        java.lang.Object r3;
        java.lang.Throwable r4, $r12;
        android.database.ContentObserver $r5, $r7, $r10;
        android.database.AbstractCursor$SelfContentObserver $r6;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        r3 = r0.<android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor r3;

     label1:
        r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri> = r2;

        r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver> = r1;

        $r5 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r5 == null goto label2;

        $r11 = r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r10 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r11.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r10);

     label2:
        $r6 = new android.database.AbstractCursor$SelfContentObserver;

        specialinvoke $r6.<android.database.AbstractCursor$SelfContentObserver: void <init>(android.database.AbstractCursor)>(r0);

        r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver> = $r6;

        $r9 = r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r8 = r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r7 = r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r9.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r8, 1, $r7, i0);

        r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered> = 1;

        exitmonitor r3;

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

     label5:
        exitmonitor r3;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void unregisterContentObserver(android.database.ContentObserver)
    {
        android.database.AbstractCursor r0;
        android.database.ContentObserver r1;
        boolean $z0;
        android.database.ContentObservable $r2;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.database.ContentObserver;

        $z0 = r0.<android.database.AbstractCursor: boolean mClosed>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r2.<android.database.ContentObservable: void unregisterObserver(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void unregisterDataSetObserver(android.database.DataSetObserver)
    {
        android.database.AbstractCursor r0;
        android.database.DataSetObserver r1;
        android.database.DataSetObservable $r2;

        r0 := @this: android.database.AbstractCursor;

        r1 := @parameter0: android.database.DataSetObserver;

        $r2 = r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.DataSetObservable: void unregisterObserver(java.lang.Object)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <android.database.AbstractCursor: java.lang.String TAG> = "Cursor";

        return;
    }
}
