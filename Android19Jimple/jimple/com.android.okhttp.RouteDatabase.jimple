public final class com.android.okhttp.RouteDatabase extends java.lang.Object
{
    private final java.util.Set failedRoutes;

    public void <init>()
    {
        com.android.okhttp.RouteDatabase r0;
        java.util.LinkedHashSet $r1;

        r0 := @this: com.android.okhttp.RouteDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.android.okhttp.RouteDatabase: java.util.Set failedRoutes> = $r1;

        return;
    }

    public void connected(com.android.okhttp.Route)
    {
        com.android.okhttp.RouteDatabase r0;
        com.android.okhttp.Route r1;
        java.lang.Throwable r2, $r4;
        java.util.Set $r3;

        r0 := @this: com.android.okhttp.RouteDatabase;

        r1 := @parameter0: com.android.okhttp.Route;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.okhttp.RouteDatabase: java.util.Set failedRoutes>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void failed(com.android.okhttp.Route, java.io.IOException)
    {
        com.android.okhttp.RouteDatabase r0;
        com.android.okhttp.Route r1, $r6;
        java.io.IOException r2;
        java.lang.Throwable r3, $r7;
        java.util.Set $r4, $r5;
        boolean $z1;

        r0 := @this: com.android.okhttp.RouteDatabase;

        r1 := @parameter0: com.android.okhttp.Route;

        r2 := @parameter1: java.io.IOException;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.okhttp.RouteDatabase: java.util.Set failedRoutes>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $z1 = r2 instanceof javax.net.ssl.SSLHandshakeException;

        if $z1 != 0 goto label2;

        $r5 = r0.<com.android.okhttp.RouteDatabase: java.util.Set failedRoutes>;

        $r6 = virtualinvoke r1.<com.android.okhttp.Route: com.android.okhttp.Route flipTlsMode()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int failedRoutesCount()
    {
        com.android.okhttp.RouteDatabase r0;
        java.lang.Throwable r1, $r3;
        int i0;
        java.util.Set $r2;

        r0 := @this: com.android.okhttp.RouteDatabase;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.okhttp.RouteDatabase: java.util.Set failedRoutes>;

        i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean shouldPostpone(com.android.okhttp.Route)
    {
        com.android.okhttp.RouteDatabase r0;
        com.android.okhttp.Route r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        java.util.Set $r3;

        r0 := @this: com.android.okhttp.RouteDatabase;

        r1 := @parameter0: com.android.okhttp.Route;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.okhttp.RouteDatabase: java.util.Set failedRoutes>;

        z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
