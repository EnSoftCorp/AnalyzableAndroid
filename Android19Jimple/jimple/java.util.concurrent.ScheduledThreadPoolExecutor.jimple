public class java.util.concurrent.ScheduledThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor implements java.util.concurrent.ScheduledExecutorService
{
    private static final java.util.concurrent.atomic.AtomicLong sequencer;
    private volatile boolean continueExistingPeriodicTasksAfterShutdown;
    private volatile boolean executeExistingDelayedTasksAfterShutdown;
    private volatile boolean removeOnCancel;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.atomic.AtomicLong sequencer> = $r0;

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        int i0;
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue $r1;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        i0 := @parameter0: int;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r1 = new java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        specialinvoke $r1.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(i0, 2147483647, 0L, $r2, $r1);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean executeExistingDelayedTasksAfterShutdown> = 1;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean removeOnCancel> = 0;

        return;
    }

    public void <init>(int, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        int i0;
        java.util.concurrent.RejectedExecutionHandler r1;
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue $r2;
        java.util.concurrent.TimeUnit $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.RejectedExecutionHandler;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r2 = new java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        specialinvoke $r2.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler)>(i0, 2147483647, 0L, $r3, $r2, r1);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean executeExistingDelayedTasksAfterShutdown> = 1;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean removeOnCancel> = 0;

        return;
    }

    public void <init>(int, java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        int i0;
        java.util.concurrent.ThreadFactory r1;
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue $r2;
        java.util.concurrent.TimeUnit $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.ThreadFactory;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r2 = new java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        specialinvoke $r2.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(i0, 2147483647, 0L, $r3, $r2, r1);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean executeExistingDelayedTasksAfterShutdown> = 1;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean removeOnCancel> = 0;

        return;
    }

    public void <init>(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        int i0;
        java.util.concurrent.ThreadFactory r1;
        java.util.concurrent.RejectedExecutionHandler r2;
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue $r3;
        java.util.concurrent.TimeUnit $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.ThreadFactory;

        r2 := @parameter2: java.util.concurrent.RejectedExecutionHandler;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r3 = new java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        specialinvoke $r3.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, 2147483647, 0L, $r4, $r3, r1, r2);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean executeExistingDelayedTasksAfterShutdown> = 1;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean removeOnCancel> = 0;

        return;
    }

    static java.util.concurrent.atomic.AtomicLong access$000()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.atomic.AtomicLong sequencer>;

        return $r0;
    }

    static boolean access$100(java.util.concurrent.ScheduledThreadPoolExecutor)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        $z0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean removeOnCancel>;

        return $z0;
    }

    private void delayedExecute(java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.concurrent.RunnableScheduledFuture r1;
        boolean $z0, $z2, $z3, $z4, $z5;
        java.util.concurrent.BlockingQueue $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.RunnableScheduledFuture;

        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean isShutdown()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void reject(java.lang.Runnable)>(r1);

        return;

     label1:
        $r2 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>(r1);

        $z2 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean isShutdown()>();

        if $z2 == 0 goto label2;

        $z3 = interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: boolean isPeriodic()>();

        $z4 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean canRunInCurrentRunState(boolean)>($z3);

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean remove(java.lang.Runnable)>(r1);

        if $z5 == 0 goto label2;

        interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: boolean cancel(boolean)>(0);

        return;

     label2:
        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void ensurePrestart()>();

        return;
    }

    private long overflowFree(long)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        long l0, l1, $l3;
        java.util.concurrent.Delayed r1;
        java.util.concurrent.BlockingQueue $r2;
        java.lang.Object $r3;
        java.util.concurrent.TimeUnit $r4;
        byte $b2, $b4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        l0 := @parameter0: long;

        $r2 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: java.lang.Object peek()>();

        r1 = (java.util.concurrent.Delayed) $r3;

        if r1 == null goto label1;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l1 = interfaceinvoke r1.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r4);

        $b2 = l1 cmp 0L;

        if $b2 >= 0 goto label1;

        $l3 = l0 - l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        l0 = 9223372036854775807L + l1;

     label1:
        return l0;
    }

    private long triggerTime(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        long l0, $l2, $l3;
        java.util.concurrent.TimeUnit r1;
        byte $b1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        l0 = 0L;

     label1:
        $l2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $l3 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: long triggerTime(long)>($l2);

        return $l3;
    }

    boolean canRunInCurrentRunState(boolean)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean z0, z1, $z2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        z1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean continueExistingPeriodicTasksAfterShutdown>;

     label1:
        $z2 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean isRunningOrShutdown(boolean)>(z1);

        return $z2;

     label2:
        z1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean executeExistingDelayedTasksAfterShutdown>;

        goto label1;
    }

    protected java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.util.concurrent.RunnableScheduledFuture r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.concurrent.RunnableScheduledFuture;

        return r2;
    }

    protected java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable, java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.RunnableScheduledFuture r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: java.util.concurrent.RunnableScheduledFuture;

        return r2;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r1, 0L, $r2);

        return;
    }

    public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        $z0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean continueExistingPeriodicTasksAfterShutdown>;

        return $z0;
    }

    public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        $z0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean executeExistingDelayedTasksAfterShutdown>;

        return $z0;
    }

    public java.util.concurrent.BlockingQueue getQueue()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.concurrent.BlockingQueue $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        $r1 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        return $r1;
    }

    public boolean getRemoveOnCancelPolicy()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        $z0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean removeOnCancel>;

        return $z0;
    }

    final long now()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        long $l0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        return $l0;
    }

    void onShutdown()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.concurrent.BlockingQueue r1;
        boolean z0, z1, $z2, $z3, $z5, $z6, $z7;
        java.lang.Object[] r2, r5;
        int i0, i1, i2, i3;
        java.lang.Object r3, r6;
        java.util.concurrent.RunnableScheduledFuture r4, $r7;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()>();

        z1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()>();

        if z0 != 0 goto label05;

        if z1 != 0 goto label05;

        r5 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray()>();

        i2 = lengthof r5;

        i3 = 0;

     label01:
        if i3 >= i2 goto label03;

        r6 = r5[i3];

        $z7 = r6 instanceof java.util.concurrent.RunnableScheduledFuture;

        if $z7 == 0 goto label02;

        $r7 = (java.util.concurrent.RunnableScheduledFuture) r6;

        interfaceinvoke $r7.<java.util.concurrent.RunnableScheduledFuture: boolean cancel(boolean)>(0);

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        interfaceinvoke r1.<java.util.concurrent.BlockingQueue: void clear()>();

     label04:
        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void tryTerminate()>();

        return;

     label05:
        r2 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray()>();

        i0 = lengthof r2;

        i1 = 0;

     label06:
        if i1 >= i0 goto label04;

        r3 = r2[i1];

        $z3 = r3 instanceof java.util.concurrent.RunnableScheduledFuture;

        if $z3 == 0 goto label08;

        r4 = (java.util.concurrent.RunnableScheduledFuture) r3;

        $z2 = interfaceinvoke r4.<java.util.concurrent.RunnableScheduledFuture: boolean isPeriodic()>();

        if $z2 == 0 goto label09;

        if z1 != 0 goto label10;

     label07:
        $z5 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(r4);

        if $z5 == 0 goto label08;

        interfaceinvoke r4.<java.util.concurrent.RunnableScheduledFuture: boolean cancel(boolean)>(0);

     label08:
        i1 = i1 + 1;

        goto label06;

     label09:
        if z0 == 0 goto label07;

     label10:
        $z6 = interfaceinvoke r4.<java.util.concurrent.RunnableScheduledFuture: boolean isCancelled()>();

        if $z6 == 0 goto label08;

        goto label07;
    }

    void reExecutePeriodic(java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.concurrent.RunnableScheduledFuture r1;
        boolean $z0, $z2, $z3;
        java.util.concurrent.BlockingQueue $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.RunnableScheduledFuture;

        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean canRunInCurrentRunState(boolean)>(1);

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>(r1);

        $z2 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean canRunInCurrentRunState(boolean)>(1);

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean remove(java.lang.Runnable)>(r1);

        if $z3 == 0 goto label2;

        interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: boolean cancel(boolean)>(0);

     label1:
        return;

     label2:
        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void ensurePrestart()>();

        return;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.RunnableScheduledFuture r3;
        java.lang.NullPointerException $r4;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label2:
        $r5 = new java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        $l1 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: long triggerTime(long,java.util.concurrent.TimeUnit)>(l0, r2);

        specialinvoke $r5.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: void <init>(java.util.concurrent.ScheduledThreadPoolExecutor,java.lang.Runnable,java.lang.Object,long)>(r0, r1, null, $l1);

        r3 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture)>(r1, $r5);

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>(r3);

        return r3;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.concurrent.Callable r1;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.RunnableScheduledFuture r3;
        java.lang.NullPointerException $r4;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label2:
        $r5 = new java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        $l1 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: long triggerTime(long,java.util.concurrent.TimeUnit)>(l0, r2);

        specialinvoke $r5.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: void <init>(java.util.concurrent.ScheduledThreadPoolExecutor,java.util.concurrent.Callable,long)>(r0, r1, $l1);

        r3 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable,java.util.concurrent.RunnableScheduledFuture)>(r1, $r5);

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>(r3);

        return r3;
    }

    public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        long l0, l1, $l3, $l4;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r3, $r6;
        java.util.concurrent.RunnableScheduledFuture r4;
        java.lang.NullPointerException $r5;
        byte $b2;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.util.concurrent.TimeUnit;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label2:
        $b2 = l1 cmp 0L;

        if $b2 > 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label3:
        $r6 = new java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        $l3 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: long triggerTime(long,java.util.concurrent.TimeUnit)>(l0, r2);

        $l4 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l1);

        specialinvoke $r6.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: void <init>(java.util.concurrent.ScheduledThreadPoolExecutor,java.lang.Runnable,java.lang.Object,long,long)>(r0, r1, null, $l3, $l4);

        r3 = $r6;

        r4 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture)>(r1, r3);

        r3.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture outerTask> = r4;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>(r4);

        return r4;
    }

    public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        long l0, l1, $l3, $l4, $l5;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r3, $r6;
        java.util.concurrent.RunnableScheduledFuture r4;
        java.lang.NullPointerException $r5;
        byte $b2;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.util.concurrent.TimeUnit;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label2:
        $b2 = l1 cmp 0L;

        if $b2 > 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label3:
        $r6 = new java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        $l3 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: long triggerTime(long,java.util.concurrent.TimeUnit)>(l0, r2);

        $l4 = neg l1;

        $l5 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>($l4);

        specialinvoke $r6.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: void <init>(java.util.concurrent.ScheduledThreadPoolExecutor,java.lang.Runnable,java.lang.Object,long,long)>(r0, r1, null, $l3, $l5);

        r3 = $r6;

        r4 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture)>(r1, r3);

        r3.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture outerTask> = r4;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>(r4);

        return r4;
    }

    public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean z0, $z1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        z0 := @parameter0: boolean;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean continueExistingPeriodicTasksAfterShutdown> = z0;

        if z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean isShutdown()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void onShutdown()>();

     label1:
        return;
    }

    public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean z0, $z1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        z0 := @parameter0: boolean;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean executeExistingDelayedTasksAfterShutdown> = z0;

        if z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean isShutdown()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void onShutdown()>();

     label1:
        return;
    }

    public void setRemoveOnCancelPolicy(boolean)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        boolean z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        z0 := @parameter0: boolean;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean removeOnCancel> = z0;

        return;
    }

    public void shutdown()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        return;
    }

    public java.util.List shutdownNow()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.List $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        $r1 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

        return $r1;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ScheduledFuture $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r3 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r1, 0L, $r2);

        return $r3;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.ScheduledFuture $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>(r1, r2);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r5 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>($r3, 0L, $r4);

        return $r5;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ScheduledFuture $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r3 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>(r1, 0L, $r2);

        return $r3;
    }

    long triggerTime(long)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor r0;
        long l0, l1, $l3;
        byte $b2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: long now()>();

        $b2 = l0 cmp 4611686018427387903L;

        if $b2 >= 0 goto label2;

     label1:
        $l3 = l1 + l0;

        return $l3;

     label2:
        l0 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: long overflowFree(long)>(l0);

        goto label1;
    }
}
