class java.util.zip.ZipFile$RAFStream extends java.io.InputStream
{
    private long endOffset;
    private long offset;
    private final java.io.RandomAccessFile sharedRaf;

    public void <init>(java.io.RandomAccessFile, long) throws java.io.IOException
    {
        java.util.zip.ZipFile$RAFStream r0;
        java.io.RandomAccessFile r1;
        long l0, $l1;

        r0 := @this: java.util.zip.ZipFile$RAFStream;

        r1 := @parameter0: java.io.RandomAccessFile;

        l0 := @parameter1: long;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.util.zip.ZipFile$RAFStream: java.io.RandomAccessFile sharedRaf> = r1;

        r0.<java.util.zip.ZipFile$RAFStream: long offset> = l0;

        $l1 = virtualinvoke r1.<java.io.RandomAccessFile: long length()>();

        r0.<java.util.zip.ZipFile$RAFStream: long endOffset> = $l1;

        return;
    }

    static long access$102(java.util.zip.ZipFile$RAFStream, long)
    {
        java.util.zip.ZipFile$RAFStream r0;
        long l0;

        r0 := @parameter0: java.util.zip.ZipFile$RAFStream;

        l0 := @parameter1: long;

        r0.<java.util.zip.ZipFile$RAFStream: long endOffset> = l0;

        return l0;
    }

    static long access$200(java.util.zip.ZipFile$RAFStream)
    {
        java.util.zip.ZipFile$RAFStream r0;
        long $l0;

        r0 := @parameter0: java.util.zip.ZipFile$RAFStream;

        $l0 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        return $l0;
    }

    public int available() throws java.io.IOException
    {
        java.util.zip.ZipFile$RAFStream r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.util.zip.ZipFile$RAFStream;

        $l1 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        $l0 = r0.<java.util.zip.ZipFile$RAFStream: long endOffset>;

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int fill(java.util.zip.Inflater, int) throws java.io.IOException
    {
        java.util.zip.ZipFile$RAFStream r0;
        java.util.zip.Inflater r1;
        int i0, i1, $i5, $i7;
        java.io.RandomAccessFile r2, $r4;
        java.lang.Throwable r3, $r6;
        long $l2, $l3, $l4, $l6, $l9;
        java.io.FileDescriptor $r5;

        r0 := @this: java.util.zip.ZipFile$RAFStream;

        r1 := @parameter0: java.util.zip.Inflater;

        i0 := @parameter1: int;

        r2 = r0.<java.util.zip.ZipFile$RAFStream: java.io.RandomAccessFile sharedRaf>;

        entermonitor r2;

     label1:
        $l3 = r0.<java.util.zip.ZipFile$RAFStream: long endOffset>;

        $l2 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        $l4 = $l3 - $l2;

        $i5 = (int) $l4;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i0);

        $r4 = r0.<java.util.zip.ZipFile$RAFStream: java.io.RandomAccessFile sharedRaf>;

        $r5 = virtualinvoke $r4.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        $l6 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        $i7 = virtualinvoke r1.<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)>($r5, $l6, i0);

        $l9 = (long) $i7;

        virtualinvoke r0.<java.util.zip.ZipFile$RAFStream: long skip(long)>($l9);

        exitmonitor r2;

     label2:
        return i1;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int read() throws java.io.IOException
    {
        java.util.zip.ZipFile$RAFStream r0;
        int $i0;

        r0 := @this: java.util.zip.ZipFile$RAFStream;

        $i0 = staticinvoke <libcore.io.Streams: int readSingleByte(java.io.InputStream)>(r0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.ZipFile$RAFStream r0;
        byte[] r1;
        int i0, i1, i3;
        java.io.RandomAccessFile r2, $r4, $r5;
        java.lang.Throwable r3, $r6;
        long l2, $l4, $l5, $l6, $l8, $l9, $l10, $l11;
        byte $b7;

        r0 := @this: java.util.zip.ZipFile$RAFStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<java.util.zip.ZipFile$RAFStream: java.io.RandomAccessFile sharedRaf>;

        entermonitor r2;

     label01:
        $l5 = r0.<java.util.zip.ZipFile$RAFStream: long endOffset>;

        $l4 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        l2 = $l5 - $l4;

     label02:
        $l6 = (long) i1;

        $b7 = $l6 cmp l2;

        if $b7 <= 0 goto label03;

        i1 = (int) l2;

     label03:
        $r4 = r0.<java.util.zip.ZipFile$RAFStream: java.io.RandomAccessFile sharedRaf>;

        $l8 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>($l8);

        $r5 = r0.<java.util.zip.ZipFile$RAFStream: java.io.RandomAccessFile sharedRaf>;

        i3 = virtualinvoke $r5.<java.io.RandomAccessFile: int read(byte[],int,int)>(r1, i0, i1);

     label04:
        if i3 <= 0 goto label07;

     label05:
        $l11 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        $l9 = (long) i3;

        $l10 = $l11 + $l9;

        r0.<java.util.zip.ZipFile$RAFStream: long offset> = $l10;

        exitmonitor r2;

     label06:
        return i3;

     label07:
        exitmonitor r2;

     label08:
        return -1;

     label09:
        $r6 := @caughtexception;

        r3 = $r6;

     label10:
        exitmonitor r2;

     label11:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public long skip(long) throws java.io.IOException
    {
        java.util.zip.ZipFile$RAFStream r0;
        long l0, $l1, $l2, $l3, $l5, $l6, $l7, $l8;
        byte $b4;

        r0 := @this: java.util.zip.ZipFile$RAFStream;

        l0 := @parameter0: long;

        $l2 = r0.<java.util.zip.ZipFile$RAFStream: long endOffset>;

        $l1 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        $l3 = $l2 - $l1;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label1;

        $l8 = r0.<java.util.zip.ZipFile$RAFStream: long endOffset>;

        $l7 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        l0 = $l8 - $l7;

     label1:
        $l5 = r0.<java.util.zip.ZipFile$RAFStream: long offset>;

        $l6 = l0 + $l5;

        r0.<java.util.zip.ZipFile$RAFStream: long offset> = $l6;

        return l0;
    }
}
