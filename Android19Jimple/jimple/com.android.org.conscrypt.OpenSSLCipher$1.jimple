class com.android.org.conscrypt.OpenSSLCipher$1 extends java.lang.Object
{
    static final int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode;
    static final int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Padding;

    static void <clinit>()
    {
        com.android.org.conscrypt.OpenSSLCipher$Padding[] $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] $r11, $r13, $r14, $r17, $r18, $r21, $r22, $r26, $r27, $r28, $r32, $r35;
        com.android.org.conscrypt.OpenSSLCipher$Padding $r12, $r15;
        com.android.org.conscrypt.OpenSSLCipher$Mode[] $r16;
        com.android.org.conscrypt.OpenSSLCipher$Mode $r19, $r20, $r23, $r24, $r25, $r29, $r30, $r31;
        java.lang.NoSuchFieldError $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding[] values()>();

        $i0 = lengthof $r10;

        $r11 = newarray (int)[$i0];

        <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Padding> = $r11;

     label01:
        $r13 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Padding>;

        $r12 = <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding NOPADDING>;

        $i1 = virtualinvoke $r12.<com.android.org.conscrypt.OpenSSLCipher$Padding: int ordinal()>();

        $r13[$i1] = 1;

     label02:
        $r14 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Padding>;

        $r15 = <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding PKCS5PADDING>;

        $i2 = virtualinvoke $r15.<com.android.org.conscrypt.OpenSSLCipher$Padding: int ordinal()>();

        $r14[$i2] = 2;

     label03:
        $r16 = staticinvoke <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode[] values()>();

        $i3 = lengthof $r16;

        $r17 = newarray (int)[$i3];

        <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode> = $r17;

     label04:
        $r18 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r19 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode CBC>;

        $i4 = virtualinvoke $r19.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r18[$i4] = 1;

     label05:
        $r21 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r20 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode CFB>;

        $i5 = virtualinvoke $r20.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r21[$i5] = 2;

     label06:
        $r22 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r23 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode CFB1>;

        $i6 = virtualinvoke $r23.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r22[$i6] = 3;

     label07:
        $r27 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r24 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode CFB8>;

        $i7 = virtualinvoke $r24.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r27[$i7] = 4;

     label08:
        $r26 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r25 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode CFB128>;

        $i9 = virtualinvoke $r25.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r26[$i9] = 5;

     label09:
        $r28 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r29 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode CTR>;

        $i8 = virtualinvoke $r29.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r28[$i8] = 6;

     label10:
        $r32 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r31 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode ECB>;

        $i10 = virtualinvoke $r31.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r32[$i10] = 7;

     label11:
        $r35 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $r30 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode OFB>;

        $i11 = virtualinvoke $r30.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $r35[$i11] = 8;

     label12:
        return;

     label13:
        $r41 := @caughtexception;

        return;

     label14:
        $r38 := @caughtexception;

        goto label11;

     label15:
        $r42 := @caughtexception;

        goto label10;

     label16:
        $r37 := @caughtexception;

        goto label09;

     label17:
        $r39 := @caughtexception;

        goto label08;

     label18:
        $r36 := @caughtexception;

        goto label07;

     label19:
        $r34 := @caughtexception;

        goto label06;

     label20:
        $r33 := @caughtexception;

        goto label05;

     label21:
        $r40 := @caughtexception;

        goto label03;

     label22:
        $r43 := @caughtexception;

        goto label02;

        catch java.lang.NoSuchFieldError from label01 to label02 with label22;
        catch java.lang.NoSuchFieldError from label02 to label03 with label21;
        catch java.lang.NoSuchFieldError from label04 to label05 with label20;
        catch java.lang.NoSuchFieldError from label05 to label06 with label19;
        catch java.lang.NoSuchFieldError from label06 to label07 with label18;
        catch java.lang.NoSuchFieldError from label07 to label08 with label17;
        catch java.lang.NoSuchFieldError from label08 to label09 with label16;
        catch java.lang.NoSuchFieldError from label09 to label10 with label15;
        catch java.lang.NoSuchFieldError from label10 to label11 with label14;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
    }
}
