class com.android.server.MountService extends android.os.storage.IMountService$Stub implements com.android.server.INativeDaemonConnectorCallbacks, com.android.server.Watchdog$Monitor
{
    private static final int CRYPTO_ALGORITHM_KEY_SIZE;
    private static final boolean DEBUG_EVENTS;
    private static final boolean DEBUG_OBB;
    private static final boolean DEBUG_UNMOUNT;
    static final android.content.ComponentName DEFAULT_CONTAINER_COMPONENT;
    private static final int H_SYSTEM_READY;
    private static final int H_UNMOUNT_MS;
    private static final int H_UNMOUNT_PM_DONE;
    private static final int H_UNMOUNT_PM_UPDATE;
    private static final boolean LOCAL_LOGD;
    private static final int MAX_CONTAINERS;
    private static final int MAX_UNMOUNT_RETRIES;
    private static final int OBB_FLUSH_MOUNT_STATE;
    private static final int OBB_MCS_BOUND;
    private static final int OBB_MCS_RECONNECT;
    private static final int OBB_MCS_UNBIND;
    private static final int OBB_RUN_ACTION;
    private static final int PBKDF2_HASH_ROUNDS;
    private static final int RETRY_UNMOUNT_DELAY;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_STORAGE;
    private static final java.lang.String TAG_STORAGE_LIST;
    private static final java.lang.String VOLD_TAG;
    private static final boolean WATCHDOG_ENABLE;
    private final java.util.HashSet mAsecMountSet;
    private final java.util.concurrent.CountDownLatch mAsecsScanned;
    private final java.util.concurrent.CountDownLatch mConnectedSignal;
    private com.android.server.NativeDaemonConnector mConnector;
    private com.android.internal.app.IMediaContainerService mContainerService;
    private android.content.Context mContext;
    private final com.android.server.MountService$DefaultContainerConnection mDefContainerConn;
    private android.os.storage.StorageVolume mEmulatedTemplate;
    private final android.os.Handler mHandler;
    private final android.content.BroadcastReceiver mIdleMaintenanceReceiver;
    private final java.util.ArrayList mListeners;
    private final com.android.server.MountService$ObbActionHandler mObbActionHandler;
    private final java.util.Map mObbMounts;
    private final java.util.Map mObbPathToStateMap;
    private com.android.server.pm.PackageManagerService mPms;
    private boolean mSendUmsConnectedOnBoot;
    private volatile boolean mSystemReady;
    private boolean mUmsAvailable;
    private boolean mUmsEnabling;
    private final android.content.BroadcastReceiver mUsbReceiver;
    private final android.content.BroadcastReceiver mUserReceiver;
    private final java.util.HashMap mVolumeStates;
    private final java.util.ArrayList mVolumes;
    private final java.util.HashMap mVolumesByPath;
    private final java.lang.Object mVolumesLock;

    static void <clinit>()
    {
        android.content.ComponentName $r0;

        <com.android.server.MountService: java.lang.String VOLD_TAG> = "VoldConnector";

        <com.android.server.MountService: java.lang.String TAG_STORAGE_LIST> = "StorageList";

        <com.android.server.MountService: java.lang.String TAG_STORAGE> = "storage";

        <com.android.server.MountService: java.lang.String TAG> = "MountService";

        <com.android.server.MountService: int RETRY_UNMOUNT_DELAY> = 30;

        <com.android.server.MountService: int PBKDF2_HASH_ROUNDS> = 1024;

        <com.android.server.MountService: int OBB_RUN_ACTION> = 1;

        <com.android.server.MountService: int OBB_MCS_UNBIND> = 3;

        <com.android.server.MountService: int OBB_MCS_RECONNECT> = 4;

        <com.android.server.MountService: int OBB_MCS_BOUND> = 2;

        <com.android.server.MountService: int OBB_FLUSH_MOUNT_STATE> = 5;

        <com.android.server.MountService: int MAX_UNMOUNT_RETRIES> = 4;

        <com.android.server.MountService: int MAX_CONTAINERS> = 250;

        <com.android.server.MountService: boolean LOCAL_LOGD> = 0;

        <com.android.server.MountService: int H_UNMOUNT_PM_UPDATE> = 1;

        <com.android.server.MountService: int H_UNMOUNT_PM_DONE> = 2;

        <com.android.server.MountService: int H_UNMOUNT_MS> = 3;

        <com.android.server.MountService: int H_SYSTEM_READY> = 4;

        <com.android.server.MountService: boolean DEBUG_UNMOUNT> = 0;

        <com.android.server.MountService: boolean DEBUG_OBB> = 0;

        <com.android.server.MountService: boolean DEBUG_EVENTS> = 0;

        <com.android.server.MountService: int CRYPTO_ALGORITHM_KEY_SIZE> = 128;

        $r0 = new android.content.ComponentName;

        specialinvoke $r0.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.defcontainer", "com.android.defcontainer.DefaultContainerService");

        <com.android.server.MountService: android.content.ComponentName DEFAULT_CONTAINER_COMPONENT> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.MountService r0;
        android.content.Context r1, $r31, $r38, $r45;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, $r47;
        android.os.HandlerThread r4, $r23;
        android.content.IntentFilter r5, r7, $r28, $r34, $r46;
        android.os.storage.StorageVolume r6;
        java.util.ArrayList $r9, $r12;
        java.util.HashMap $r10, $r11, $r15, $r18;
        java.util.concurrent.CountDownLatch $r13, $r14;
        java.util.HashSet $r16;
        com.android.server.MountService$DefaultContainerConnection $r17;
        com.android.server.MountService$2 $r19;
        com.android.server.MountService$1 $r20;
        com.android.server.MountService$3 $r21;
        android.os.IBinder $r22;
        com.android.server.pm.PackageManagerService $r24;
        android.os.Looper $r25, $r42;
        com.android.server.MountService$MountServiceHandler $r26;
        android.os.Handler $r27, $r35, $r49;
        android.content.BroadcastReceiver $r30, $r33, $r44;
        android.os.UserHandle $r32;
        com.android.server.MountService$ObbActionHandler $r36;
        com.android.server.IoThread $r37;
        java.lang.Thread $r40;
        com.android.server.NativeDaemonConnector $r41, $r43;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.storage.IMountService$Stub: void <init>()>();

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.MountService: java.lang.Object mVolumesLock> = $r8;

        $r9 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.android.server.MountService: java.util.ArrayList mVolumes> = $r9;

        $r10 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath> = $r10;

        $r11 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.MountService: java.util.HashMap mVolumeStates> = $r11;

        r0.<com.android.server.MountService: boolean mSystemReady> = 0;

        r0.<com.android.server.MountService: boolean mUmsAvailable> = 0;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.MountService: java.util.ArrayList mListeners> = $r12;

        $r13 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r13.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mConnectedSignal> = $r13;

        $r14 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r14.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mAsecsScanned> = $r14;

        r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot> = 0;

        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet> = $r16;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.MountService: java.util.Map mObbMounts> = $r15;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap> = $r18;

        $r17 = new com.android.server.MountService$DefaultContainerConnection;

        specialinvoke $r17.<com.android.server.MountService$DefaultContainerConnection: void <init>(com.android.server.MountService)>(r0);

        r0.<com.android.server.MountService: com.android.server.MountService$DefaultContainerConnection mDefContainerConn> = $r17;

        r0.<com.android.server.MountService: com.android.internal.app.IMediaContainerService mContainerService> = null;

        $r20 = new com.android.server.MountService$1;

        specialinvoke $r20.<com.android.server.MountService$1: void <init>(com.android.server.MountService)>(r0);

        r0.<com.android.server.MountService: android.content.BroadcastReceiver mUserReceiver> = $r20;

        $r19 = new com.android.server.MountService$2;

        specialinvoke $r19.<com.android.server.MountService$2: void <init>(com.android.server.MountService)>(r0);

        r0.<com.android.server.MountService: android.content.BroadcastReceiver mUsbReceiver> = $r19;

        $r21 = new com.android.server.MountService$3;

        specialinvoke $r21.<com.android.server.MountService$3: void <init>(com.android.server.MountService)>(r0);

        r0.<com.android.server.MountService: android.content.BroadcastReceiver mIdleMaintenanceReceiver> = $r21;

        r0.<com.android.server.MountService: android.content.Context mContext> = r1;

        r2 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.MountService: void readStorageListLocked()>();

        exitmonitor r2;

     label2:
        $r22 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("package");

        $r24 = (com.android.server.pm.PackageManagerService) $r22;

        r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms> = $r24;

        $r23 = new android.os.HandlerThread;

        specialinvoke $r23.<android.os.HandlerThread: void <init>(java.lang.String)>("MountService");

        r4 = $r23;

        virtualinvoke r4.<android.os.HandlerThread: void start()>();

        $r26 = new com.android.server.MountService$MountServiceHandler;

        $r25 = virtualinvoke r4.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r26.<com.android.server.MountService$MountServiceHandler: void <init>(com.android.server.MountService,android.os.Looper)>(r0, $r25);

        r0.<com.android.server.MountService: android.os.Handler mHandler> = $r26;

        $r28 = new android.content.IntentFilter;

        specialinvoke $r28.<android.content.IntentFilter: void <init>()>();

        r5 = $r28;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r31 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r30 = r0.<com.android.server.MountService: android.content.BroadcastReceiver mUserReceiver>;

        $r27 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        virtualinvoke $r31.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r30, r5, null, $r27);

        r6 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r6 == null goto label3;

        $z0 = virtualinvoke r6.<android.os.storage.StorageVolume: boolean allowMassStorage()>();

        if $z0 == 0 goto label3;

        $r45 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r44 = r0.<com.android.server.MountService: android.content.BroadcastReceiver mUsbReceiver>;

        $r46 = new android.content.IntentFilter;

        specialinvoke $r46.<android.content.IntentFilter: void <init>(java.lang.String)>("android.hardware.usb.action.USB_STATE");

        $r49 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        virtualinvoke $r45.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r44, $r46, null, $r49);

     label3:
        $r34 = new android.content.IntentFilter;

        specialinvoke $r34.<android.content.IntentFilter: void <init>()>();

        r7 = $r34;

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.ACTION_IDLE_MAINTENANCE_START");

        $r38 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r33 = r0.<com.android.server.MountService: android.content.BroadcastReceiver mIdleMaintenanceReceiver>;

        $r32 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r35 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        virtualinvoke $r38.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r33, $r32, r7, null, $r35);

        $r36 = new com.android.server.MountService$ObbActionHandler;

        $r37 = staticinvoke <com.android.server.IoThread: com.android.server.IoThread get()>();

        $r42 = virtualinvoke $r37.<com.android.server.IoThread: android.os.Looper getLooper()>();

        specialinvoke $r36.<com.android.server.MountService$ObbActionHandler: void <init>(com.android.server.MountService,android.os.Looper)>(r0, $r42);

        r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler> = $r36;

        $r43 = new com.android.server.NativeDaemonConnector;

        specialinvoke $r43.<com.android.server.NativeDaemonConnector: void <init>(com.android.server.INativeDaemonConnectorCallbacks,java.lang.String,int,java.lang.String,int)>(r0, "vold", 500, "VoldConnector", 25);

        r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector> = $r43;

        $r40 = new java.lang.Thread;

        $r41 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        specialinvoke $r40.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r41, "VoldConnector");

        virtualinvoke $r40.<java.lang.Thread: void start()>();

        return;

     label4:
        $r47 := @caughtexception;

        r3 = $r47;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static com.android.server.MountService$ObbActionHandler access$000(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbActionHandler $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        return $r1;
    }

    static int access$100(com.android.server.MountService, java.lang.String, boolean, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        boolean z0, z1;
        int $i0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $i0 = specialinvoke r0.<com.android.server.MountService: int doUnmountVolume(java.lang.String,boolean,boolean)>(r1, z0, z1);

        return $i0;
    }

    static void access$1000(com.android.server.MountService, boolean)
    {
        com.android.server.MountService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.MountService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.MountService: void notifyShareAvailabilityChange(boolean)>(z0);

        return;
    }

    static void access$1100(com.android.server.MountService)
    {
        com.android.server.MountService r0;

        r0 := @parameter0: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        return;
    }

    static com.android.server.NativeDaemonConnector access$1200(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonConnector $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        return $r1;
    }

    static java.util.ArrayList access$1300(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        return $r1;
    }

    static java.util.HashMap access$1400(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        return $r1;
    }

    static void access$1500(com.android.server.MountService, android.os.storage.StorageVolume, java.lang.String)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: android.os.storage.StorageVolume;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r1, r2);

        return;
    }

    static android.os.storage.StorageVolume access$1600(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        return $r1;
    }

    static java.util.concurrent.CountDownLatch access$1700(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mConnectedSignal>;

        return $r1;
    }

    static java.util.concurrent.CountDownLatch access$1800(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mAsecsScanned>;

        return $r1;
    }

    static int access$1900(com.android.server.MountService, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r1);

        return $i0;
    }

    static void access$200(com.android.server.MountService, java.lang.String, java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.MountService: void doShareUnshareVolume(java.lang.String,java.lang.String,boolean)>(r1, r2, z0);

        return;
    }

    static com.android.internal.app.IMediaContainerService access$2000(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.internal.app.IMediaContainerService $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.internal.app.IMediaContainerService mContainerService>;

        return $r1;
    }

    static com.android.internal.app.IMediaContainerService access$2002(com.android.server.MountService, com.android.internal.app.IMediaContainerService)
    {
        com.android.server.MountService r0;
        com.android.internal.app.IMediaContainerService r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: com.android.internal.app.IMediaContainerService;

        r0.<com.android.server.MountService: com.android.internal.app.IMediaContainerService mContainerService> = r1;

        return r1;
    }

    static java.util.Map access$2100(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        return $r1;
    }

    static java.util.Map access$2200(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        return $r1;
    }

    static void access$2300(com.android.server.MountService, com.android.server.MountService$ObbState)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: com.android.server.MountService$ObbState;

        specialinvoke r0.<com.android.server.MountService: void removeObbStateLocked(com.android.server.MountService$ObbState)>(r1);

        return;
    }

    static com.android.server.MountService$DefaultContainerConnection access$2400(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$DefaultContainerConnection $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.MountService$DefaultContainerConnection mDefContainerConn>;

        return $r1;
    }

    static android.content.Context access$2500(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.content.Context mContext>;

        return $r1;
    }

    static void access$2600(com.android.server.MountService)
    {
        com.android.server.MountService r0;

        r0 := @parameter0: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        return;
    }

    static boolean access$2700(com.android.server.MountService, java.lang.String, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean isUidOwnerOfPackageOrSystem(java.lang.String,int)>(r1, i0);

        return $z0;
    }

    static void access$2800(com.android.server.MountService, com.android.server.MountService$ObbState) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: com.android.server.MountService$ObbState;

        specialinvoke r0.<com.android.server.MountService: void addObbStateLocked(com.android.server.MountService$ObbState)>(r1);

        return;
    }

    static com.android.server.pm.PackageManagerService access$300(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.pm.PackageManagerService $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        return $r1;
    }

    static android.os.Handler access$400(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$500(com.android.server.MountService)
    {
        com.android.server.MountService r0;

        r0 := @parameter0: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void handleSystemReady()>();

        return;
    }

    static java.lang.Object access$600(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        return $r1;
    }

    static void access$700(com.android.server.MountService, android.os.UserHandle)
    {
        com.android.server.MountService r0;
        android.os.UserHandle r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<com.android.server.MountService: void createEmulatedVolumeForUserLocked(android.os.UserHandle)>(r1);

        return;
    }

    static java.util.ArrayList access$800(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        return $r1;
    }

    static void access$900(com.android.server.MountService, android.os.storage.StorageVolume)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: android.os.storage.StorageVolume;

        specialinvoke r0.<com.android.server.MountService: void removeVolumeLocked(android.os.storage.StorageVolume)>(r1);

        return;
    }

    private void addObbStateLocked(com.android.server.MountService$ObbState) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1, $r11;
        android.os.IBinder r2;
        java.util.List r3;
        android.os.RemoteException r4, $r18;
        java.util.Iterator r5;
        java.util.Map $r6, $r10, $r16, $r20;
        java.lang.Object $r7, $r12;
        boolean $z0, $z2, $z3;
        java.lang.String $r8, $r13, $r14;
        java.lang.IllegalStateException $r15;
        java.util.ArrayList $r17;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: com.android.server.MountService$ObbState;

        r2 = virtualinvoke r1.<com.android.server.MountService$ObbState: android.os.IBinder getBinder()>();

        $r6 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.util.List) $r7;

        if r3 != null goto label4;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r3 = $r17;

        $r16 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label1:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        virtualinvoke r1.<com.android.server.MountService$ObbState: void link()>();

     label3:
        $r10 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r8 = r1.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r1);

        return;

     label4:
        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.MountService$ObbState) $r12;

        $r13 = $r11.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        $r14 = r1.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label5;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Attempt to add ObbState twice. This indicates an error in the MountService logic.");

        throw $r15;

     label6:
        $r18 := @caughtexception;

        r4 = $r18;

        interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $z3 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label7;

        $r20 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label7:
        throw r4;

        catch android.os.RemoteException from label2 to label3 with label6;
    }

    private void addVolumeLocked(android.os.storage.StorageVolume)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1, r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r11, $r14, $r15, $r16, $r18;
        java.lang.String $r6, $r9, $r13, $r17;
        java.util.ArrayList $r7;
        java.util.HashMap $r8;
        java.lang.Object $r10;
        java.lang.IllegalStateException $r12;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.StorageVolume;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addVolumeLocked() ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r6);

        $r7 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r8 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r9 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1);

        r2 = (android.os.storage.StorageVolume) $r10;

        if r2 == null goto label1;

        $r12 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Volume at ");

        $r13 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists: ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label1:
        return;
    }

    public static java.lang.String buildObbPath(java.lang.String, int, boolean)
    {
        java.lang.String r0, r1, r3, r4, r5, r6, $r14, $r15, $r17, $r20, $r23;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, $z1, $z2, $z3, $z4;
        android.os.Environment$UserEnvironment r2, $r7, $r21;
        java.io.File $r8, $r9, $r10, $r11, $r13, $r16, $r18, $r19, $r24, $r25;
        java.io.File[] $r12, $r22;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z1 != 0 goto label2;

     label1:
        return r0;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r7 = new android.os.Environment$UserEnvironment;

        specialinvoke $r7.<android.os.Environment$UserEnvironment: void <init>(int)>(i0);

        r2 = $r7;

        $r8 = virtualinvoke r2.<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()>();

        r3 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = staticinvoke <android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>();

        r4 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z3 == 0 goto label4;

        $i5 = virtualinvoke r3.<java.lang.String: int length()>();

        $i6 = 1 + $i5;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i6);

     label3:
        $z4 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("Android/obb");

        if $z4 == 0 goto label6;

        $r17 = "Android/obb";

        $i3 = virtualinvoke $r17.<java.lang.String: int length()>();

        $i4 = 1 + $i3;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i4);

        if z0 == 0 goto label5;

        $r24 = new java.io.File;

        $r25 = staticinvoke <android.os.Environment: java.io.File getEmulatedStorageObbSource()>();

        specialinvoke $r24.<java.io.File: void <init>(java.io.File,java.lang.String)>($r25, r6);

        $r23 = virtualinvoke $r24.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r23;

     label4:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r4);

        if $z2 == 0 goto label1;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = 1 + $i1;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        goto label3;

     label5:
        $r18 = new java.io.File;

        $r21 = new android.os.Environment$UserEnvironment;

        specialinvoke $r21.<android.os.Environment$UserEnvironment: void <init>(int)>(0);

        $r22 = virtualinvoke $r21.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAndroidObbDirs()>();

        $r19 = $r22[0];

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r19, r6);

        $r20 = virtualinvoke $r18.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r20;

     label6:
        if z0 == 0 goto label7;

        $r13 = new java.io.File;

        $r16 = staticinvoke <android.os.Environment: java.io.File getEmulatedStorageSource(int)>(i0);

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, r5);

        $r15 = virtualinvoke $r13.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r15;

     label7:
        $r10 = new java.io.File;

        $r12 = virtualinvoke r2.<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirsForApp()>();

        $r11 = $r12[0];

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, r5);

        $r14 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r14;
    }

    private void createEmulatedVolumeForUserLocked(android.os.UserHandle)
    {
        com.android.server.MountService r0;
        android.os.UserHandle r1;
        java.io.File r2;
        android.os.storage.StorageVolume r3, $r4, $r6;
        android.os.Environment$UserEnvironment $r5;
        int $i0;
        boolean $z0;
        java.util.HashMap $r7;
        java.lang.String $r8;
        java.lang.IllegalStateException $r10;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.UserHandle;

        $r4 = r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate>;

        if $r4 != null goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing emulated volume multi-user template");

        throw $r10;

     label1:
        $r5 = new android.os.Environment$UserEnvironment;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke $r5.<android.os.Environment$UserEnvironment: void <init>(int)>($i0);

        r2 = virtualinvoke $r5.<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()>();

        $r6 = r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate>;

        r3 = staticinvoke <android.os.storage.StorageVolume: android.os.storage.StorageVolume fromTemplate(android.os.storage.StorageVolume,java.io.File,android.os.UserHandle)>($r6, r2, r1);

        virtualinvoke r3.<android.os.storage.StorageVolume: void setStorageId(int)>(0);

        specialinvoke r0.<com.android.server.MountService: void addVolumeLocked(android.os.storage.StorageVolume)>(r3);

        $z0 = r0.<com.android.server.MountService: boolean mSystemReady>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r3, "mounted");

        return;

     label2:
        $r7 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r8 = virtualinvoke r3.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "mounted");

        virtualinvoke r3.<android.os.storage.StorageVolume: void setState(java.lang.String)>("mounted");

        return;
    }

    private int doFormatVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r6;
        int i0;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "format";

        $r3[1] = r1;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r3);

     label2:
        return 0;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        i0 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 401 goto label4;

        return -2;

     label4:
        if i0 != 403 goto label5;

        return -4;

     label5:
        return -1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean doGetVolumeShared(java.lang.String, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, $r7, $r13;
        com.android.server.NativeDaemonEvent r4;
        int i0;
        boolean z0;
        java.lang.Object[] $r5;
        com.android.server.NativeDaemonConnector $r6;
        com.android.server.NativeDaemonConnectorException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r6 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "shared";

        $r5[1] = r1;

        $r5[2] = r2;

        r4 = virtualinvoke $r6.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r5);

     label2:
        i0 = virtualinvoke r4.<com.android.server.NativeDaemonEvent: int getCode()>();

        z0 = 0;

        if i0 != 212 goto label3;

        $r7 = virtualinvoke r4.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        z0 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>("enabled");

     label3:
        return z0;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read response to volume shared ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r13);

        return 0;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label4;
    }

    private int doMountVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r6;
        byte b0;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, $r12;
        android.os.storage.StorageVolume r4;
        com.android.server.NativeDaemonConnectorException r5, $r13;
        int i1;
        java.util.HashMap $r7;
        java.lang.Object[] $r9;
        com.android.server.NativeDaemonConnector $r10;
        android.os.UserHandle $r14;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        b0 = 0;

        r2 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r2;

     label01:
        $r7 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.os.storage.StorageVolume) $r8;

        exitmonitor r2;

     label02:
        $r10 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "mount";

        $r9[1] = r1;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r9);

     label03:
        return b0;

     label04:
        $r12 := @caughtexception;

        r3 = $r12;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        $r13 := @caughtexception;

        r5 = $r13;

        r6 = null;

        i1 = virtualinvoke r5.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i1 != 401 goto label09;

        b0 = -2;

     label08:
        if r6 == null goto label03;

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>(r6, r4, $r14);

        return b0;

     label09:
        if i1 != 402 goto label10;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r4, "nofs");

        r6 = "android.intent.action.MEDIA_NOFS";

        b0 = -3;

        goto label08;

     label10:
        if i1 != 403 goto label11;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r4, "unmountable");

        r6 = "android.intent.action.MEDIA_UNMOUNTABLE";

        b0 = -4;

        goto label08;

     label11:
        b0 = -1;

        r6 = null;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch com.android.server.NativeDaemonConnectorException from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label04;
    }

    private void doShareUnshareVolume(java.lang.String, java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r6, $r10;
        boolean z0, $z1;
        com.android.server.NativeDaemonConnectorException r3, $r11;
        com.android.server.NativeDaemonConnector r4;
        java.lang.Object[] r5, $r9;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("ums");

        if $z1 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r2;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method %s not supported", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label1:
        r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r5 = newarray (java.lang.Object)[3];

     label2:
        if z0 == 0 goto label5;

        r6 = "share";

     label3:
        r5[0] = r6;

        r5[1] = r1;

        r5[2] = r2;

        virtualinvoke r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", r5);

     label4:
        return;

     label5:
        r6 = "unshare";

        goto label3;

     label6:
        $r11 := @caughtexception;

        r3 = $r11;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Failed to share/unshare", r3);

        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label6;
        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label6;
    }

    private int doUnmountVolume(java.lang.String, boolean, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r6;
        boolean z0, z1, $z2;
        com.android.server.NativeDaemonConnector$Command r2, $r9;
        com.android.server.NativeDaemonConnectorException r3, $r16;
        int i0;
        java.util.HashSet r4, $r13;
        java.lang.Throwable r5, $r17;
        java.lang.Runtime $r7;
        com.android.server.pm.PackageManagerService $r8;
        com.android.server.NativeDaemonConnector $r10;
        java.lang.Object[] $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r6 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r1);

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z2 != 0 goto label01;

        return 404;

     label01:
        $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r7.<java.lang.Runtime: void gc()>();

        $r8 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        virtualinvoke $r8.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>(0, 0);

     label02:
        $r9 = new com.android.server.NativeDaemonConnector$Command;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "unmount";

        $r11[1] = r1;

        specialinvoke $r9.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("volume", $r11);

        r2 = $r9;

     label03:
        if z1 == 0 goto label08;

     label04:
        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force_and_revert");

     label05:
        $r10 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r2);

        r4 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r4;

     label06:
        $r13 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r13.<java.util.HashSet: void clear()>();

        exitmonitor r4;

     label07:
        return 0;

     label08:
        if z0 == 0 goto label05;

     label09:
        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force");

     label10:
        goto label05;

     label11:
        $r16 := @caughtexception;

        r3 = $r16;

        i0 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 404 goto label15;

        return -5;

     label12:
        $r17 := @caughtexception;

        r5 = $r17;

     label13:
        exitmonitor r4;

     label14:
        throw r5;

     label15:
        if i0 != 405 goto label16;

        return -7;

     label16:
        return -1;

        catch com.android.server.NativeDaemonConnectorException from label02 to label03 with label11;
        catch com.android.server.NativeDaemonConnectorException from label04 to label05 with label11;
        catch com.android.server.NativeDaemonConnectorException from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch com.android.server.NativeDaemonConnectorException from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch com.android.server.NativeDaemonConnectorException from label14 to label15 with label11;
    }

    private android.os.storage.StorageVolume getPrimaryPhysicalVolume()
    {
        com.android.server.MountService r0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, $r7;
        java.util.Iterator r3;
        android.os.storage.StorageVolume r4;
        java.util.ArrayList $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.MountService;

        r1 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.os.storage.StorageVolume) $r6;

        $z1 = virtualinvoke r4.<android.os.storage.StorageVolume: boolean isPrimary()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r4.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z2 != 0 goto label2;

        exitmonitor r1;

     label3:
        return r4;

     label4:
        exitmonitor r1;

     label5:
        return null;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private boolean getUmsEnabling()
    {
        com.android.server.MountService r0;
        java.util.ArrayList r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: com.android.server.MountService;

        r1 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.MountService: boolean mUmsEnabling>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleSystemReady()
    {
        com.android.server.MountService r0;
        java.lang.Object r1, r5, $r17, $r18, $r19, $r20;
        java.util.HashMap r2, $r13, $r14;
        java.lang.Throwable r3, r6, $r23, $r24;
        java.util.Iterator r4, r7;
        android.os.storage.StorageVolume r8;
        java.util.Map$Entry r9;
        java.lang.String r10, r11, $r21;
        int i0;
        java.lang.Object[] r12;
        java.util.Set $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.ArrayList $r16;
        java.lang.Integer $r22;

        r0 := @this: com.android.server.MountService;

        r1 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r1;

     label01:
        $r13 = new java.util.HashMap;

        $r14 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        specialinvoke $r13.<java.util.HashMap: void <init>(java.util.Map)>($r14);

        r2 = $r13;

        exitmonitor r1;

     label02:
        $r15 = virtualinvoke r2.<java.util.HashMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r18;

        $r20 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (java.lang.String) $r20;

        $r19 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (java.lang.String) $r19;

        $z4 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("unmounted");

        if $z4 == 0 goto label07;

        i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r10);

        if i0 == 0 goto label03;

        r12 = newarray (java.lang.Object)[1];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r12[0] = $r22;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Boot-time mount failed (%d)", r12);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r21);

        goto label03;

     label04:
        $r24 := @caughtexception;

        r3 = $r24;

     label05:
        exitmonitor r1;

     label06:
        throw r3;

     label07:
        $z5 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("shared");

        if $z5 == 0 goto label03;

        specialinvoke r0.<com.android.server.MountService: void notifyVolumeStateChange(java.lang.String,java.lang.String,int,int)>(null, r10, 0, 7);

        goto label03;

     label08:
        r5 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r5;

     label09:
        $r16 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r7 = virtualinvoke $r16.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r17 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.os.storage.StorageVolume) $r17;

        $z3 = virtualinvoke r8.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z3 == 0 goto label10;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r8, "mounted");

     label11:
        goto label10;

     label12:
        $r23 := @caughtexception;

        r6 = $r23;

     label13:
        exitmonitor r5;

     label14:
        throw r6;

     label15:
        exitmonitor r5;

     label16:
        $z2 = r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot>;

        if $z2 == 0 goto label17;

        specialinvoke r0.<com.android.server.MountService: void sendUmsIntent(boolean)>(1);

        r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot> = 0;

     label17:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label15 to label16 with label12;
    }

    private boolean isUidOwnerOfPackageOrSystem(java.lang.String, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        com.android.server.pm.PackageManagerService $r2;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 1000 goto label2;

     label1:
        return 1;

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        $r2 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i2 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>(r1, $i1);

        if i0 == $i2 goto label1;

        return 0;
    }

    public static java.lang.String maybeTranslatePathForVold(java.lang.String, java.io.File[], java.io.File[])
    {
        java.lang.String r0, r3, r4, $r7, $r12;
        java.io.File[] r1, r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r5, $r8, $r9, $r13, $r14, $r15;
        java.io.File $r6, $r10, $r11;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File[];

        r2 := @parameter2: java.io.File[];

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label1;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Paths must be 1:1 mapping");

        throw $r16;

     label1:
        i0 = 0;

     label2:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label5;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r1[i0];

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z0 == 0 goto label4;

        $r11 = new java.io.File;

        $r10 = r2[i0];

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, $r12);

        r4 = virtualinvoke $r11.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 != 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r4;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        return null;
    }

    private void notifyShareAvailabilityChange(boolean)
    {
        com.android.server.MountService r0;
        boolean z0, $z1, $z2;
        java.util.ArrayList r1, $r7, $r14, $r18;
        java.lang.Throwable r2, $r15;
        int i0, $i1;
        com.android.server.MountService$MountServiceBinderListener r3;
        java.lang.Exception r4, $r17;
        android.os.storage.StorageVolume r6;
        java.lang.String $r8, $r9, $r10, $r12;
        com.android.server.MountService$6 $r11;
        java.lang.Object $r13;
        android.os.storage.IMountServiceListener $r16;
        android.os.RemoteException $r19;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        entermonitor r1;

     label01:
        r0.<com.android.server.MountService: boolean mUmsAvailable> = z0;

        $r7 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        i0 = -1 + $i1;

     label02:
        if i0 < 0 goto label15;

     label03:
        $r14 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $r13 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.MountService$MountServiceBinderListener) $r13;

     label04:
        $r16 = r3.<com.android.server.MountService$MountServiceBinderListener: android.os.storage.IMountServiceListener mListener>;

        interfaceinvoke $r16.<android.os.storage.IMountServiceListener: void onUsbMassStorageConnectionChanged(boolean)>(z0);

     label05:
        i0 = i0 + -1;

        goto label02;

     label06:
        $r19 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Listener dead");

        $r18 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        virtualinvoke $r18.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label08:
        goto label05;

     label09:
        $r15 := @caughtexception;

        r2 = $r15;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        $r17 := @caughtexception;

        r4 = $r17;

     label13:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Listener failed", r4);

     label14:
        goto label05;

     label15:
        exitmonitor r1;

     label16:
        $z1 = r0.<com.android.server.MountService: boolean mSystemReady>;

        if $z1 != 1 goto label19;

        specialinvoke r0.<com.android.server.MountService: void sendUmsIntent(boolean)>(z0);

     label17:
        r6 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if z0 != 0 goto label18;

        if r6 == null goto label18;

        $r8 = "shared";

        $r10 = virtualinvoke r6.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r9 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>($r10);

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label18;

        $r11 = new com.android.server.MountService$6;

        $r12 = virtualinvoke r6.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        specialinvoke $r11.<com.android.server.MountService$6: void <init>(com.android.server.MountService,java.lang.String,java.lang.String)>(r0, "MountService#AvailabilityChange", $r12);

        virtualinvoke $r11.<com.android.server.MountService$6: void start()>();

     label18:
        return;

     label19:
        r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot> = z0;

        goto label17;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
    }

    private void notifyVolumeStateChange(java.lang.String, java.lang.String, int, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r6, r7, $r14;
        int i0, i1;
        java.lang.Object r3, $r9;
        java.lang.Throwable r4, $r18;
        android.os.storage.StorageVolume r5;
        boolean z0, z1, z2, z3;
        java.util.HashMap $r8;
        android.os.UserHandle $r10, $r16, $r17;
        java.lang.StringBuilder $r11, $r12, $r13, $r15;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r3;

     label01:
        $r8 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (android.os.storage.StorageVolume) $r9;

        r6 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r2);

        exitmonitor r3;

     label02:
        if i0 != 7 goto label03;

        if i1 == i0 goto label03;

        $r17 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("android.intent.action.MEDIA_UNSHARED", r5, $r17);

     label03:
        r7 = null;

        if i1 != -1 goto label09;

     label04:
        if r7 == null goto label05;

        $r10 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>(r7, r5, $r10);

     label05:
        return;

     label06:
        $r18 := @caughtexception;

        r4 = $r18;

     label07:
        exitmonitor r3;

     label08:
        throw r4;

     label09:
        r7 = null;

        if i1 == 0 goto label04;

        if i1 != 1 goto label10;

        z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("bad_removal");

        r7 = null;

        if z0 != 0 goto label04;

        z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("nofs");

        r7 = null;

        if z1 != 0 goto label04;

        z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("unmountable");

        r7 = null;

        if z2 != 0 goto label04;

        z3 = specialinvoke r0.<com.android.server.MountService: boolean getUmsEnabling()>();

        r7 = null;

        if z3 != 0 goto label04;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r5, "unmounted");

        r7 = "android.intent.action.MEDIA_UNMOUNTED";

        goto label04;

     label10:
        r7 = null;

        if i1 == 2 goto label04;

        if i1 != 3 goto label11;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r5, "checking");

        r7 = "android.intent.action.MEDIA_CHECKING";

        goto label04;

     label11:
        if i1 != 4 goto label12;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r5, "mounted");

        r7 = "android.intent.action.MEDIA_MOUNTED";

        goto label04;

     label12:
        if i1 != 5 goto label13;

        r7 = "android.intent.action.MEDIA_EJECT";

        goto label04;

     label13:
        r7 = null;

        if i1 == 6 goto label04;

        if i1 != 7 goto label14;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r5, "unmounted");

        $r16 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("android.intent.action.MEDIA_UNMOUNTED", r5, $r16);

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r5, "shared");

        r7 = "android.intent.action.MEDIA_SHARED";

        goto label04;

     label14:
        if i1 != 8 goto label15;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Live shared mounts not supported yet!");

        return;

     label15:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled VolumeState {");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r14);

        r7 = null;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    private void readStorageListLocked()
    {
        com.android.server.MountService r0;
        android.content.res.Resources r1;
        android.content.res.XmlResourceParser r2;
        android.util.AttributeSet r3;
        java.io.IOException r4, $r56;
        java.lang.Throwable r5, $r55;
        int i0, i1, i2, i3, i5, i6, $i9;
        java.util.Iterator r6, r13, r15;
        android.os.storage.StorageVolume r7, r14, r16, $r37, $r48;
        org.xmlpull.v1.XmlPullParserException r8, $r59;
        java.lang.String r9, r11, $r20, $r42, $r46;
        android.content.res.TypedArray r10;
        java.lang.CharSequence r12;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        long l4, $l7, $l8;
        android.content.Context $r17;
        java.util.ArrayList $r18, $r52, $r54;
        java.util.HashMap $r19, $r39;
        int[] $r21;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r40, $r41;
        java.io.File $r38;
        java.util.List $r43;
        java.lang.Object $r44, $r49, $r53;
        com.android.server.pm.UserManagerService $r47;
        android.os.UserHandle $r50;
        android.content.pm.UserInfo $r51;
        java.lang.RuntimeException $r57, $r58;

        r0 := @this: com.android.server.MountService;

        $r18 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        virtualinvoke $r18.<java.util.ArrayList: void clear()>();

        $r19 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        virtualinvoke $r19.<java.util.HashMap: void clear()>();

        $r17 = r0.<com.android.server.MountService: android.content.Context mContext>;

        r1 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke r1.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(17760272);

        r3 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r2);

     label01:
        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "StorageList");

     label02:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r2);

        r9 = interfaceinvoke r2.<android.content.res.XmlResourceParser: java.lang.String getName()>();

     label03:
        if r9 != null goto label06;

        $z8 = virtualinvoke r0.<com.android.server.MountService: boolean isExternalStorageEmulated()>();

        if $z8 == 0 goto label27;

        i5 = 1;

     label04:
        $r52 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r15 = virtualinvoke $r52.<java.util.ArrayList: java.util.Iterator iterator()>();

     label05:
        $z6 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label25;

        $r49 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (android.os.storage.StorageVolume) $r49;

        $z7 = virtualinvoke r16.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z7 != 0 goto label05;

        i6 = i5 + 1;

        virtualinvoke r16.<android.os.storage.StorageVolume: void setStorageId(int)>(i5);

        i5 = i6;

        goto label05;

     label06:
        $r20 = "storage";

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z4 == 0 goto label02;

        $r21 = <com.android.internal.R$styleable: int[] Storage>;

        r10 = virtualinvoke r1.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r3, $r21);

        r11 = virtualinvoke r10.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        i2 = virtualinvoke r10.<android.content.res.TypedArray: int getResourceId(int,int)>(1, -1);

        r12 = virtualinvoke r10.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(1);

        z1 = virtualinvoke r10.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, 0);

        z0 = virtualinvoke r10.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 0);

        z2 = virtualinvoke r10.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        i3 = virtualinvoke r10.<android.content.res.TypedArray: int getInt(int,int)>(5, 0);

        z3 = virtualinvoke r10.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(6, 0);

        $i9 = virtualinvoke r10.<android.content.res.TypedArray: int getInt(int,int)>(7, 0);

        $l8 = (long) $i9;

        $l7 = 1024L * $l8;

        l4 = 1024L * $l7;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got storage path: ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" description: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" primary: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r33 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" removable: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" emulated: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r29 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mtpReserve: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allowMassStorage: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r40 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxFileSize: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r42);

     label07:
        if z2 == 0 goto label16;

     label08:
        $r48 = new android.os.storage.StorageVolume;

        specialinvoke $r48.<android.os.storage.StorageVolume: void <init>(java.io.File,int,boolean,boolean,boolean,int,boolean,long,android.os.UserHandle)>(null, i2, 1, 0, 1, i3, 0, l4, null);

        r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate> = $r48;

        $r47 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        $r43 = virtualinvoke $r47.<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>(0);

        r13 = interfaceinvoke $r43.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z5 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label18;

        $r44 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r51 = (android.content.pm.UserInfo) $r44;

        $r50 = virtualinvoke $r51.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        specialinvoke r0.<com.android.server.MountService: void createEmulatedVolumeForUserLocked(android.os.UserHandle)>($r50);

     label10:
        goto label09;

     label11:
        $r59 := @caughtexception;

        r8 = $r59;

     label12:
        $r58 = new java.lang.RuntimeException;

        specialinvoke $r58.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r8);

        throw $r58;

     label13:
        $r55 := @caughtexception;

        r5 = $r55;

        $z10 = virtualinvoke r0.<com.android.server.MountService: boolean isExternalStorageEmulated()>();

        if $z10 == 0 goto label26;

        i0 = 1;

     label14:
        $r54 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r6 = virtualinvoke $r54.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z9 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label24;

        $r53 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.os.storage.StorageVolume) $r53;

        $z11 = virtualinvoke r7.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z11 != 0 goto label15;

        i1 = i0 + 1;

        virtualinvoke r7.<android.os.storage.StorageVolume: void setStorageId(int)>(i0);

        i0 = i1;

        goto label15;

     label16:
        if r11 == null goto label17;

        if r12 != null goto label22;

     label17:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Missing storage path or description in readStorageList");

     label18:
        virtualinvoke r10.<android.content.res.TypedArray: void recycle()>();

     label19:
        goto label02;

     label20:
        $r56 := @caughtexception;

        r4 = $r56;

     label21:
        $r57 = new java.lang.RuntimeException;

        specialinvoke $r57.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r57;

     label22:
        $r37 = new android.os.storage.StorageVolume;

        $r38 = new java.io.File;

        specialinvoke $r38.<java.io.File: void <init>(java.lang.String)>(r11);

        specialinvoke $r37.<android.os.storage.StorageVolume: void <init>(java.io.File,int,boolean,boolean,boolean,int,boolean,long,android.os.UserHandle)>($r38, i2, z1, z0, z2, i3, z3, l4, null);

        r14 = $r37;

        specialinvoke r0.<com.android.server.MountService: void addVolumeLocked(android.os.storage.StorageVolume)>(r14);

        $r39 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r46 = virtualinvoke r14.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r39.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, "unmounted");

        virtualinvoke r14.<android.os.storage.StorageVolume: void setState(java.lang.String)>("unmounted");

     label23:
        goto label18;

     label24:
        interfaceinvoke r2.<android.content.res.XmlResourceParser: void close()>();

        throw r5;

     label25:
        interfaceinvoke r2.<android.content.res.XmlResourceParser: void close()>();

        return;

     label26:
        i0 = 0;

        goto label14;

     label27:
        i5 = 0;

        goto label04;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label11;
        catch java.io.IOException from label01 to label02 with label20;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label11;
        catch java.io.IOException from label02 to label03 with label20;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label11;
        catch java.io.IOException from label06 to label07 with label20;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label11;
        catch java.io.IOException from label08 to label09 with label20;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label11;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label11;
        catch java.io.IOException from label17 to label18 with label20;
        catch java.lang.Throwable from label17 to label18 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label11;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label13;
        catch java.lang.Throwable from label21 to label22 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label11;
        catch java.io.IOException from label22 to label23 with label20;
        catch java.lang.Throwable from label22 to label23 with label13;
    }

    private void removeObbStateLocked(com.android.server.MountService$ObbState)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1;
        android.os.IBinder r2;
        java.util.List r3;
        java.util.Map $r4, $r7, $r9;
        java.lang.Object $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: com.android.server.MountService$ObbState;

        r2 = virtualinvoke r1.<com.android.server.MountService$ObbState: android.os.IBinder getBinder()>();

        $r4 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.util.List) $r5;

        if r3 == null goto label2;

        $z0 = interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.android.server.MountService$ObbState: void unlink()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r9 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        $r7 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r6 = r1.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        return;
    }

    private void removeVolumeLocked(android.os.storage.StorageVolume)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r8, $r11;
        java.util.ArrayList $r6;
        java.util.HashMap $r7, $r10;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.StorageVolume;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeVolumeLocked() ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r5);

        $r6 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r7 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r8 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r8);

        $r10 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r11 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r11);

        return;
    }

    private void sendStorageIntent(java.lang.String, android.os.storage.StorageVolume, android.os.UserHandle)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r8, $r10, $r17;
        android.os.storage.StorageVolume r2;
        android.os.UserHandle r3;
        android.content.Intent r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r13, $r14, $r15, $r16, $r18;
        android.net.Uri $r11;
        android.content.Context $r19;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.storage.StorageVolume;

        r3 := @parameter2: android.os.UserHandle;

        $r5 = new android.content.Intent;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $r8 = virtualinvoke r2.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r10);

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>(r1, $r11);

        r4 = $r5;

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("storage_volume", r2);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendStorageIntent ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r17);

        $r19 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r19.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r4, r3);

        return;
    }

    private void sendUmsIntent(boolean)
    {
        com.android.server.MountService r0;
        boolean z0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.Intent $r3;
        android.os.UserHandle $r4;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.MountService: android.content.Context mContext>;

        if z0 == 0 goto label2;

        r2 = "android.intent.action.UMS_CONNECTED";

     label1:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>(r2);

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r1.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r3, $r4);

        return;

     label2:
        r2 = "android.intent.action.UMS_DISCONNECTED";

        goto label1;
    }

    private void setUmsEnabling(boolean)
    {
        com.android.server.MountService r0;
        boolean z0;
        java.util.ArrayList r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        entermonitor r1;

     label1:
        r0.<com.android.server.MountService: boolean mUmsEnabling> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void updatePublicVolumeState(android.os.storage.StorageVolume, java.lang.String)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.String r2, r3, r6, $r22, $r26, $r30, $r34;
        java.lang.Object r4, $r13, $r25;
        java.lang.Throwable r5, r8, $r36, $r37;
        java.util.ArrayList r7, $r23, $r24, $r39;
        int i0, $i2;
        com.android.server.MountService$MountServiceBinderListener r9;
        java.lang.Exception r10, $r41;
        java.util.HashMap $r12;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.os.storage.IMountServiceListener $r27;
        com.android.server.pm.PackageManagerService $r28, $r29;
        android.os.Message $r31;
        com.android.server.MountService$ObbActionHandler $r32, $r33;
        java.lang.Object[] $r35;
        android.os.RemoteException $r40;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.StorageVolume;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        r4 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r4;

     label01:
        $r12 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        r6 = (java.lang.String) $r13;

        virtualinvoke r1.<android.os.storage.StorageVolume: void setState(java.lang.String)>(r2);

        exitmonitor r4;

     label02:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label06;

        $r35 = newarray (java.lang.Object)[3];

        $r35[0] = r2;

        $r35[1] = r2;

        $r35[2] = r3;

        $r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Duplicate state transition (%s -> %s) for %s", $r35);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r34);

        return;

     label03:
        $r37 := @caughtexception;

        r5 = $r37;

     label04:
        exitmonitor r4;

     label05:
        throw r5;

     label06:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("volume state changed for ");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r22);

        $z1 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isPrimary()>();

        if $z1 == 0 goto label07;

        $z3 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z3 != 0 goto label07;

        $r26 = "unmounted";

        $z2 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label13;

        $r29 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        virtualinvoke $r29.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>(0, 0);

        $r32 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r33 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r31 = virtualinvoke $r33.<com.android.server.MountService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r3);

        virtualinvoke $r32.<com.android.server.MountService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r31);

     label07:
        r7 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        entermonitor r7;

     label08:
        $r23 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $i2 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        i0 = -1 + $i2;

     label09:
        if i0 < 0 goto label23;

     label10:
        $r24 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $r25 = virtualinvoke $r24.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r9 = (com.android.server.MountService$MountServiceBinderListener) $r25;

     label11:
        $r27 = r9.<com.android.server.MountService$MountServiceBinderListener: android.os.storage.IMountServiceListener mListener>;

        interfaceinvoke $r27.<android.os.storage.IMountServiceListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>(r3, r6, r2);

     label12:
        i0 = i0 + -1;

        goto label09;

     label13:
        $r30 = "mounted";

        $z4 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label07;

        $r28 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        virtualinvoke $r28.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>(1, 0);

        goto label07;

     label14:
        $r40 := @caughtexception;

     label15:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Listener dead");

        $r39 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        virtualinvoke $r39.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label16:
        goto label12;

     label17:
        $r36 := @caughtexception;

        r8 = $r36;

     label18:
        exitmonitor r7;

     label19:
        throw r8;

     label20:
        $r41 := @caughtexception;

        r10 = $r41;

     label21:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Listener failed", r10);

     label22:
        goto label12;

     label23:
        exitmonitor r7;

     label24:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch android.os.RemoteException from label11 to label12 with label14;
        catch java.lang.Exception from label11 to label12 with label20;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label21 to label22 with label17;
        catch java.lang.Throwable from label23 to label24 with label17;
    }

    private void validatePermission(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r5;
        android.content.Context $r2;
        int $i0;
        java.lang.SecurityException $r3;
        java.lang.Object[] $r4;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 == 0 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Requires %s permission", $r4);

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        return;
    }

    private void waitForLatch(java.util.concurrent.CountDownLatch)
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch r1;
        java.util.concurrent.TimeUnit $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.Thread $r6;
        java.lang.String $r7, $r10;
        java.lang.InterruptedException $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

     label1:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(5000L, $r3);

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread ");

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" still waiting for MountService ready...");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r10);

     label4:
        goto label1;

     label5:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "Interrupt while waiting for MountService to be ready.");

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    private void waitForReady()
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mConnectedSignal>;

        specialinvoke r0.<com.android.server.MountService: void waitForLatch(java.util.concurrent.CountDownLatch)>($r1);

        return;
    }

    private void warnOnNotMounted()
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        boolean z0, z1;
        java.lang.String $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.MountService;

        r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r1 == null goto label4;

     label1:
        $r3 = "mounted";

        $r4 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r5 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>($r4);

        z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

     label2:
        z0 = z1;

     label3:
        if z0 != 0 goto label4;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "getSecureContainerList() called when storage not mounted");

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        z0 = 0;

        goto label3;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
    }

    public int changeEncryptionPassword(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r8;
        com.android.server.NativeDaemonConnectorException r2, $r10;
        com.android.server.NativeDaemonConnector r3;
        java.lang.Object[] r4;
        int i0, $i1;
        boolean $z0;
        android.content.Context $r5;
        com.android.server.NativeDaemonConnector$SensitiveArg $r6;
        com.android.server.NativeDaemonEvent $r7;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r9;

     label1:
        $r5 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label2:
        r3 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r4 = newarray (java.lang.Object)[2];

        r4[0] = "changepw";

        $r6 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r6.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r1);

        r4[1] = $r6;

        $r7 = virtualinvoke r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", r4);

        $r8 = virtualinvoke $r7.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

     label3:
        return i0;

     label4:
        $r10 := @caughtexception;

        r2 = $r10;

        $i1 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i1;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public int createSecureContainer(java.lang.String, int, java.lang.String, java.lang.String, int, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r3, r9;
        int i0, i1;
        boolean z0;
        byte b2;
        java.util.HashSet r5, $r14;
        java.lang.Throwable r6, $r15;
        com.android.server.NativeDaemonConnector r7;
        java.lang.Object[] r8;
        com.android.server.NativeDaemonConnector$SensitiveArg $r10;
        java.lang.Integer $r11, $r13;
        com.android.server.NativeDaemonConnectorException $r16;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_CREATE");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        b2 = 0;

     label01:
        r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r8 = newarray (java.lang.Object)[7];

        r8[0] = "create";

        r8[1] = r1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r8[2] = $r11;

        r8[3] = r2;

        $r10 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r10.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r3);

        r8[4] = $r10;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r8[5] = $r13;

     label02:
        if z0 == 0 goto label07;

        r9 = "1";

     label03:
        r8[6] = r9;

        virtualinvoke r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", r8);

     label04:
        if b2 != 0 goto label06;

        r5 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r5;

     label05:
        $r14 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        exitmonitor r5;

     label06:
        return b2;

     label07:
        r9 = "0";

        goto label03;

     label08:
        $r16 := @caughtexception;

        b2 = -1;

        goto label04;

     label09:
        $r15 := @caughtexception;

        r6 = $r15;

     label10:
        exitmonitor r5;

     label11:
        throw r6;

        catch com.android.server.NativeDaemonConnectorException from label01 to label02 with label08;
        catch com.android.server.NativeDaemonConnectorException from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int decryptStorage(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r8;
        com.android.server.NativeDaemonConnectorException r2, $r11;
        com.android.server.NativeDaemonConnector r3;
        java.lang.Object[] r4;
        int i0, $i1;
        boolean $z0;
        android.content.Context $r5;
        com.android.server.NativeDaemonConnector$SensitiveArg $r6;
        com.android.server.NativeDaemonEvent $r7;
        com.android.server.MountService$7 $r9;
        android.os.Handler $r10;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r12;

     label1:
        $r5 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label2:
        r3 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r4 = newarray (java.lang.Object)[2];

        r4[0] = "checkpw";

        $r6 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r6.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r1);

        r4[1] = $r6;

        $r7 = virtualinvoke r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", r4);

        $r8 = virtualinvoke $r7.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

     label3:
        if i0 != 0 goto label5;

     label4:
        $r10 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r9 = new com.android.server.MountService$7;

        specialinvoke $r9.<com.android.server.MountService$7: void <init>(com.android.server.MountService)>(r0);

        virtualinvoke $r10.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r9, 1000L);

     label5:
        return i0;

     label6:
        $r11 := @caughtexception;

        r2 = $r11;

        $i1 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i1;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label6;
        catch com.android.server.NativeDaemonConnectorException from label4 to label5 with label6;
    }

    public int destroySecureContainer(java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        boolean z0, $z1;
        byte b0;
        com.android.server.NativeDaemonConnector$Command r2, $r7;
        com.android.server.NativeDaemonConnectorException r3, $r14;
        java.util.HashSet r4, $r11, $r12;
        java.lang.Throwable r5, $r15;
        java.lang.Runtime $r6;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        int $i1;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_DESTROY");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r6.<java.lang.Runtime: void gc()>();

        b0 = 0;

     label01:
        $r7 = new com.android.server.NativeDaemonConnector$Command;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "destroy";

        $r8[1] = r1;

        specialinvoke $r7.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("asec", $r8);

        r2 = $r7;

     label02:
        if z0 == 0 goto label04;

     label03:
        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force");

     label04:
        $r9 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r2);

     label05:
        if b0 != 0 goto label08;

        r4 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r4;

     label06:
        $r11 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z1 = virtualinvoke $r11.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label07;

        $r12 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r12.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label07:
        exitmonitor r4;

     label08:
        return b0;

     label09:
        $r14 := @caughtexception;

        r3 = $r14;

        $i1 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if $i1 != 405 goto label10;

        b0 = -7;

        goto label05;

     label10:
        b0 = -1;

        goto label05;

     label11:
        $r15 := @caughtexception;

        r5 = $r15;

     label12:
        exitmonitor r4;

     label13:
        throw r5;

        catch com.android.server.NativeDaemonConnectorException from label01 to label02 with label09;
        catch com.android.server.NativeDaemonConnectorException from label03 to label04 with label09;
        catch com.android.server.NativeDaemonConnectorException from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.MountService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.internal.util.IndentingPrintWriter r4, $r16;
        java.util.Map r5, $r18, $r20;
        java.lang.Throwable r6, r10, $r45, $r48;
        java.util.Iterator r7, r8, r11, r15;
        java.lang.Object r9, $r23, $r27, $r31, $r34, $r35, $r36, $r40, $r43, $r47;
        android.os.storage.StorageVolume r12;
        java.util.Map$Entry r13, r14;
        android.content.Context $r17;
        java.util.Set $r19, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r22;
        java.lang.StringBuilder $r24, $r28, $r33, $r38, $r39, $r41;
        com.android.server.NativeDaemonConnector $r25;
        java.lang.String $r26, $r30, $r32, $r37, $r44;
        java.util.HashMap $r29;
        java.util.List $r42;
        com.android.server.MountService$ObbState $r46;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r17 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r17.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "MountService");

        $r16 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r16.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(r2, "  ", 160);

        r4 = $r16;

        r5 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        entermonitor r5;

     label01:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mObbMounts:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r18 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r35 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r35;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r44);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r43 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r42 = (java.util.List) $r43;

        r15 = interfaceinvoke $r42.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r47 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r46 = (com.android.server.MountService$ObbState) $r47;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r46);

     label04:
        goto label03;

     label05:
        $r45 := @caughtexception;

        r6 = $r45;

     label06:
        exitmonitor r5;

     label07:
        throw r6;

     label08:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label09:
        goto label02;

     label10:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mObbPathToStateMap:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r20 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set entrySet()>();

        r8 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r31 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r31;

        $r36 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = (java.lang.String) $r36;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r37);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" -> ");

        $r34 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r34);

     label12:
        goto label11;

     label13:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r5;

     label14:
        r9 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r9;

     label15:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mVolumes:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r22 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r11 = virtualinvoke $r22.<java.util.ArrayList: java.util.Iterator iterator()>();

     label16:
        $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label21;

        $r23 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.os.storage.StorageVolume) $r23;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>(r12);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current state: ");

        $r29 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r26 = virtualinvoke r12.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r27 = virtualinvoke $r29.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r26);

        $r32 = (java.lang.String) $r27;

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r30);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label17:
        goto label16;

     label18:
        $r48 := @caughtexception;

        r10 = $r48;

     label19:
        exitmonitor r9;

     label20:
        throw r10;

     label21:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r9;

     label22:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mConnection:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r25 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r25.<com.android.server.NativeDaemonConnector: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r4, r3);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label13 to label14 with label05;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label21 to label22 with label18;
    }

    public int encryptStorage(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r9;
        com.android.server.NativeDaemonConnector r3;
        java.lang.Object[] r4;
        boolean $z0;
        android.content.Context $r5;
        com.android.server.NativeDaemonConnector$SensitiveArg $r6;
        java.lang.IllegalArgumentException $r8;
        int $i0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r8;

     label1:
        $r5 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label2:
        r3 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r4 = newarray (java.lang.Object)[3];

        r4[0] = "enablecrypto";

        r4[1] = "inplace";

        $r6 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r6.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r1);

        r4[2] = $r6;

        virtualinvoke r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", r4);

     label3:
        return 0;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        $i0 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i0;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public int finalizeSecureContainer(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        com.android.server.NativeDaemonConnectorException $r6;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_CREATE");

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        $r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "finalize";

        $r3[1] = r1;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r3);

     label2:
        return 0;

     label3:
        $r6 := @caughtexception;

        return -1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void finishMediaUpdate()
    {
        com.android.server.MountService r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

        return;
    }

    public int fixPermissionsSecureContainer(java.lang.String, int, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.NativeDaemonConnector r4;
        java.lang.Object[] r5;
        java.lang.Integer $r6;
        com.android.server.NativeDaemonConnectorException $r8;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_CREATE");

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r5 = newarray (java.lang.Object)[4];

        r5[0] = "fixperms";

        r5[1] = r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r5[2] = $r6;

        r5[3] = r2;

        virtualinvoke r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", r5);

     label2:
        return 0;

     label3:
        $r8 := @caughtexception;

        return -1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int formatVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        $i0 = specialinvoke r0.<com.android.server.MountService: int doFormatVolume(java.lang.String)>(r1);

        return $i0;
    }

    public int getEncryptionState()
    {
        com.android.server.MountService r0;
        int i0;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        com.android.server.NativeDaemonEvent $r6;
        java.lang.String $r7;
        com.android.server.NativeDaemonConnectorException $r8;
        java.lang.NumberFormatException $r9;

        r0 := @this: com.android.server.MountService;

        $r3 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r5 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "cryptocomplete";

        $r6 = virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r4);

        $r7 = virtualinvoke $r6.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label2:
        return i0;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "Unable to parse result from cryptfs cryptocomplete");

        return -1;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "Error in communicating with cryptfs in validating");

        return -1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label4;
    }

    public java.lang.String getMountedObbPath(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r10, $r14, $r17, $r21;
        java.util.Map r2, $r12;
        java.lang.Throwable r3, $r19;
        com.android.server.MountService$ObbState r4;
        com.android.server.NativeDaemonConnectorException r5, $r20;
        int i0;
        java.lang.Object[] r6, r8;
        com.android.server.NativeDaemonConnector r7;
        com.android.server.NativeDaemonEvent r9;
        java.lang.Object $r13;
        java.lang.StringBuilder $r15, $r16, $r18;
        java.lang.Integer $r22;
        java.lang.IllegalStateException $r23;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        r2 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        entermonitor r2;

     label1:
        $r12 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.MountService$ObbState) $r13;

        exitmonitor r2;

     label2:
        if r4 != null goto label7;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find OBB mounted at ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r17);

     label3:
        return null;

     label4:
        $r19 := @caughtexception;

        r3 = $r19;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r8 = newarray (java.lang.Object)[2];

        r8[0] = "path";

        $r14 = r4.<com.android.server.MountService$ObbState: java.lang.String voldPath>;

        r8[1] = $r14;

        r9 = virtualinvoke r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("obb", r8);

        virtualinvoke r9.<com.android.server.NativeDaemonEvent: void checkCode(int)>(211);

        r10 = virtualinvoke r9.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

     label8:
        return r10;

     label9:
        $r20 := @caughtexception;

        r5 = $r20;

        i0 = virtualinvoke r5.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 == 406 goto label3;

        r6 = newarray (java.lang.Object)[1];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6[0] = $r22;

        $r23 = new java.lang.IllegalStateException;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected response code %d", r6);

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r23;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch com.android.server.NativeDaemonConnectorException from label7 to label8 with label9;
    }

    public java.lang.String getSecureContainerFilesystemPath(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r5, $r10, $r13;
        com.android.server.NativeDaemonConnectorException r2, $r8;
        int i0;
        java.lang.Object[] r3, $r6, $r12;
        com.android.server.NativeDaemonEvent r4;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.Integer $r9;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        $r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "fspath";

        $r6[1] = r1;

        r4 = virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r6);

        virtualinvoke r4.<com.android.server.NativeDaemonEvent: void checkCode(int)>(211);

        r5 = virtualinvoke r4.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

     label2:
        return r5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        i0 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 406 goto label4;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r1;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Container \'%s\' not found", $r12);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", $r13);

        return null;

     label4:
        r3 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r3[0] = $r9;

        $r11 = new java.lang.IllegalStateException;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected response code %d", r3);

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r11;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public java.lang.String[] getSecureContainerList()
    {
        com.android.server.MountService r0;
        java.lang.String[] r2, $r7;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        com.android.server.NativeDaemonEvent[] $r5;
        com.android.server.NativeDaemonConnectorException $r6;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        $r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "list";

        $r5 = virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("asec", $r3);

        r2 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r5, 111);

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        $r7 = newarray (java.lang.String)[0];

        return $r7;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public java.lang.String getSecureContainerPath(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r5, $r10, $r13;
        com.android.server.NativeDaemonConnectorException r2, $r8;
        int i0;
        java.lang.Object[] r3, $r6, $r12;
        com.android.server.NativeDaemonEvent r4;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.Integer $r9;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        $r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "path";

        $r6[1] = r1;

        r4 = virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r6);

        virtualinvoke r4.<com.android.server.NativeDaemonEvent: void checkCode(int)>(211);

        r5 = virtualinvoke r4.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

     label2:
        return r5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        i0 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 406 goto label4;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r1;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Container \'%s\' not found", $r12);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", $r13);

        return null;

     label4:
        r3 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r3[0] = $r9;

        $r11 = new java.lang.IllegalStateException;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected response code %d", r3);

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r11;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int[] getStorageUsers(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r11, $r12, $r13, $r15;
        com.android.server.NativeDaemonConnectorException r2, $r16;
        java.lang.String[] r3, r5;
        int[] r4, $r17;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] r7, $r8;
        com.android.server.NativeDaemonConnector $r9;
        com.android.server.NativeDaemonEvent[] $r10;
        java.lang.NumberFormatException $r14;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r9 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "users";

        $r8[1] = r1;

        $r10 = virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("storage", $r8);

        r3 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r10, 112);

        $i1 = lengthof r3;

        r4 = newarray (int)[$i1];

     label2:
        i0 = 0;

     label3:
        $i2 = lengthof r3;

        if i0 >= $i2 goto label8;

        $r11 = r3[i0];

        r5 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

     label4:
        $r12 = r5[0];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        r4[i0] = $i3;

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        $r14 := @caughtexception;

     label7:
        r7 = newarray (java.lang.Object)[1];

        $r13 = r5[0];

        r7[0] = $r13;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error parsing pid %s", r7);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r15);

        r4 = newarray (int)[0];

     label8:
        return r4;

     label9:
        $r16 := @caughtexception;

        r2 = $r16;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Failed to retrieve storage users list", r2);

        $r17 = newarray (int)[0];

        return $r17;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label9;
        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label9;
        catch java.lang.NumberFormatException from label4 to label5 with label6;
        catch com.android.server.NativeDaemonConnectorException from label4 to label5 with label9;
        catch com.android.server.NativeDaemonConnectorException from label7 to label8 with label9;
    }

    public android.os.storage.StorageVolume[] getVolumeList()
    {
        com.android.server.MountService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, z1, $z2;
        java.lang.Object r1, $r12;
        java.lang.Throwable r2, $r13;
        java.util.ArrayList r3, $r9;
        java.util.Iterator r4;
        android.os.storage.StorageVolume[] r5, $r10;
        android.os.storage.StorageVolume r6;
        android.os.UserHandle r7;
        android.content.Context $r8;
        java.lang.Object[] $r11;

        r0 := @this: com.android.server.MountService;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r8 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke $r8.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_ALL_EXTERNAL_STORAGE", $i1, $i2);

        if $i3 != 0 goto label12;

        z0 = 1;

     label01:
        r1 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r1;

     label02:
        r3 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r9 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r4 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.os.storage.StorageVolume) $r12;

        r7 = virtualinvoke r6.<android.os.storage.StorageVolume: android.os.UserHandle getOwner()>();

     label04:
        if r7 == null goto label16;

     label05:
        $i5 = virtualinvoke r7.<android.os.UserHandle: int getIdentifier()>();

        if $i5 != i0 goto label13;

     label06:
        goto label16;

     label07:
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label08:
        goto label03;

     label09:
        $r13 := @caughtexception;

        r2 = $r13;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        z0 = 0;

        goto label01;

     label13:
        z1 = 0;

        goto label17;

     label14:
        $i4 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r10 = newarray (android.os.storage.StorageVolume)[$i4];

        $r11 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        r5 = (android.os.storage.StorageVolume[]) $r11;

        exitmonitor r1;

     label15:
        return r5;

     label16:
        z1 = 1;

     label17:
        if z0 != 0 goto label07;

        if z1 == 0 goto label03;

        goto label07;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label14 to label15 with label09;
    }

    public java.lang.String getVolumeState(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r4, $r11, $r12;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r13;
        java.util.HashMap $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        int $i1;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r6;

     label02:
        if r4 != null goto label05;

     label03:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getVolumeState(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): Unknown volume");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r11);

        $r12 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("vold.encrypt_progress");

        $i1 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i1 == 0 goto label07;

     label04:
        r4 = "removed";

     label05:
        exitmonitor r2;

     label06:
        return r4;

     label07:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label08:
        $r13 := @caughtexception;

        r3 = $r13;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isExternalStorageEmulated()
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isObbMounted(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        java.util.Map r2, $r5;
        java.lang.Throwable r3, $r6;
        boolean z0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        r2 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isSecureContainerMounted(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        java.util.HashSet r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean z0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        r2 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        z0 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isUsbMassStorageConnected()
    {
        com.android.server.MountService r0;
        java.util.ArrayList r1;
        java.lang.Throwable r2, $r3;
        boolean z0, $z1;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        $z1 = specialinvoke r0.<com.android.server.MountService: boolean getUmsEnabling()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        r1 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        entermonitor r1;

     label2:
        z0 = r0.<com.android.server.MountService: boolean mUmsAvailable>;

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isUsbMassStorageEnabled()
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean doGetVolumeShared(java.lang.String,java.lang.String)>($r2, "ums");

        return $z0;

     label1:
        return 0;
    }

    public int mkdirs(java.lang.String, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r5, r6, r7, r8, $r26, $r37;
        android.os.Environment$UserEnvironment r3, $r11;
        java.io.IOException r4, $r35;
        com.android.server.NativeDaemonConnectorException r9, r10, $r41, $r42;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.Object $r12;
        android.content.Context $r13;
        android.app.AppOpsManager $r14;
        java.io.File $r15;
        java.io.File[] $r16, $r17, $r18, $r19;
        boolean $z0;
        java.lang.SecurityException $r20;
        java.lang.StringBuilder $r21, $r22, $r25, $r31, $r32, $r33, $r34, $r36, $r38, $r39, $r40;
        java.lang.Object[] $r23, $r30;
        com.android.server.NativeDaemonConnector $r24, $r27;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r11 = new android.os.Environment$UserEnvironment;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        specialinvoke $r11.<android.os.Environment$UserEnvironment: void <init>(int)>($i1);

        r3 = $r11;

        $r13 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r12 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r14 = (android.app.AppOpsManager) $r12;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r14.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i2, r1);

     label01:
        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r2);

        r5 = virtualinvoke $r15.<java.io.File: java.lang.String getCanonicalPath()>();

     label02:
        r6 = r5;

        $z0 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label03;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r6 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        $r16 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)>(r1);

        $r17 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirsForVold(java.lang.String)>(r1);

        r7 = staticinvoke <com.android.server.MountService: java.lang.String maybeTranslatePathForVold(java.lang.String,java.io.File[],java.io.File[])>(r6, $r16, $r17);

        if r7 == null goto label08;

     label04:
        $r27 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r30 = newarray (java.lang.Object)[2];

        $r30[0] = "mkdirs";

        $r30[1] = r7;

        virtualinvoke $r27.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r30);

     label05:
        return 0;

     label06:
        $r35 := @caughtexception;

        r4 = $r35;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve ");

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r37);

        return -1;

     label07:
        $r41 := @caughtexception;

        r10 = $r41;

        $i5 = virtualinvoke r10.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i5;

     label08:
        $r19 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)>(r1);

        $r18 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppObbDirsForVold(java.lang.String)>(r1);

        r8 = staticinvoke <com.android.server.MountService: java.lang.String maybeTranslatePathForVold(java.lang.String,java.io.File[],java.io.File[])>(r6, $r19, $r18);

        if r8 == null goto label12;

     label09:
        $r24 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = "mkdirs";

        $r23[1] = r8;

        virtualinvoke $r24.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r23);

     label10:
        return 0;

     label11:
        $r42 := @caughtexception;

        r9 = $r42;

        $i3 = virtualinvoke r9.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i3;

     label12:
        $r20 = new java.lang.SecurityException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mkdirs path: ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.SecurityException: void <init>(java.lang.String)>($r26);

        throw $r20;

        catch java.io.IOException from label01 to label02 with label06;
        catch com.android.server.NativeDaemonConnectorException from label04 to label05 with label07;
        catch com.android.server.NativeDaemonConnectorException from label09 to label10 with label11;
    }

    public void monitor()
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonConnector $r1, $r2;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r2.<com.android.server.NativeDaemonConnector: void monitor()>();

     label1:
        return;
    }

    public void mountObb(java.lang.String, java.lang.String, java.lang.String, android.os.storage.IObbActionListener, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r3;
        android.os.storage.IObbActionListener r4;
        int i0, i1;
        com.android.server.MountService$MountObbAction r5, $r9;
        com.android.server.MountService$ObbActionHandler $r10, $r13;
        com.android.server.MountService$ObbState $r11;
        android.os.Message $r12;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.storage.IObbActionListener;

        i0 := @parameter4: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "canonicalPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "token cannot be null");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r9 = new com.android.server.MountService$MountObbAction;

        $r11 = new com.android.server.MountService$ObbState;

        specialinvoke $r11.<com.android.server.MountService$ObbState: void <init>(com.android.server.MountService,java.lang.String,java.lang.String,int,android.os.storage.IObbActionListener,int)>(r0, r1, r2, i1, r4, i0);

        specialinvoke $r9.<com.android.server.MountService$MountObbAction: void <init>(com.android.server.MountService,com.android.server.MountService$ObbState,java.lang.String,int)>(r0, $r11, r3, i1);

        r5 = $r9;

        $r13 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r10 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r12 = virtualinvoke $r10.<com.android.server.MountService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r5);

        virtualinvoke $r13.<com.android.server.MountService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r12);

        return;
    }

    public int mountSecureContainer(java.lang.String, java.lang.String, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        int i0, i2;
        java.util.HashSet r3, r6, $r10, $r14;
        java.lang.Throwable r4, r7, $r16, $r17;
        byte b1;
        com.android.server.NativeDaemonConnectorException r5, $r15;
        com.android.server.NativeDaemonConnector r8;
        java.lang.Object[] r9;
        boolean $z0;
        com.android.server.NativeDaemonConnector$SensitiveArg $r11;
        java.lang.Integer $r12;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_MOUNT_UNMOUNT");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        r3 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r3;

     label01:
        $r10 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z0 = virtualinvoke $r10.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label03;

        exitmonitor r3;

     label02:
        return -6;

     label03:
        exitmonitor r3;

     label04:
        b1 = 0;

     label05:
        r8 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r9 = newarray (java.lang.Object)[4];

        r9[0] = "mount";

        r9[1] = r1;

        $r11 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r11.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r2);

        r9[2] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r9[3] = $r12;

        virtualinvoke r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", r9);

     label06:
        if b1 != 0 goto label16;

        r6 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r6;

     label07:
        $r14 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        exitmonitor r6;

     label08:
        return b1;

     label09:
        $r16 := @caughtexception;

        r7 = $r16;

     label10:
        exitmonitor r6;

     label11:
        throw r7;

     label12:
        $r17 := @caughtexception;

        r4 = $r17;

     label13:
        exitmonitor r3;

     label14:
        throw r4;

     label15:
        $r15 := @caughtexception;

        r5 = $r15;

        i2 = virtualinvoke r5.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        b1 = 0;

        if i2 == 405 goto label06;

        b1 = -1;

        goto label06;

     label16:
        return b1;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch com.android.server.NativeDaemonConnectorException from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public int mountVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        $i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r1);

        return $i0;
    }

    public void onDaemonConnected()
    {
        com.android.server.MountService r0;
        com.android.server.MountService$4 $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = new com.android.server.MountService$4;

        specialinvoke $r1.<com.android.server.MountService$4: void <init>(com.android.server.MountService,java.lang.String)>(r0, "MountService#onDaemonConnected");

        virtualinvoke $r1.<com.android.server.MountService$4: void start()>();

        return;
    }

    public boolean onEvent(int, java.lang.String, java.lang.String[])
    {
        com.android.server.MountService r0;
        int i0, $i1, $i2, $i7, $i8, $i9, $i10;
        java.lang.String r1, r3, r4, r12, r14, r15, r16, $r17, $r19, $r20, $r21, $r22, $r24, $r26, $r31, $r33, $r38, $r43, $r44, $r45;
        java.lang.String[] r2, r11;
        java.lang.Exception r5, $r42;
        java.lang.Object r6, $r25, $r27, $r35, $r39;
        java.lang.Throwable r7, $r41;
        android.os.storage.StorageVolume r8, r13, r18;
        com.android.server.MountService$5 r9, $r37;
        java.lang.Object[] r10;
        java.util.HashMap $r23, $r28, $r36, $r40;
        java.lang.Integer $r29;
        long $l5;
        android.os.UserHandle $r30, $r32, $r34;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        if i0 != 605 goto label02;

        $r43 = r2[2];

        $r44 = r2[3];

        $r38 = r2[7];

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r38);

        $r45 = r2[10];

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r45);

        specialinvoke r0.<com.android.server.MountService: void notifyVolumeStateChange(java.lang.String,java.lang.String,int,int)>($r43, $r44, $i10, $i9);

     label01:
        return 1;

     label02:
        if i0 != 613 goto label05;

        r16 = r2[2];

        $i8 = lengthof r2;

        if $i8 <= 3 goto label04;

        r15 = r2[3];

     label03:
        $r40 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r39 = virtualinvoke $r40.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r16);

        r18 = (android.os.storage.StorageVolume) $r39;

        if r18 == null goto label01;

        virtualinvoke r18.<android.os.storage.StorageVolume: void setUuid(java.lang.String)>(r15);

        goto label01;

     label04:
        r15 = null;

        goto label03;

     label05:
        if i0 != 614 goto label08;

        r12 = r2[2];

        $i7 = lengthof r2;

        if $i7 <= 3 goto label07;

        r14 = r2[3];

     label06:
        $r36 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r35 = virtualinvoke $r36.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (android.os.storage.StorageVolume) $r35;

        if r13 == null goto label01;

        virtualinvoke r13.<android.os.storage.StorageVolume: void setUserLabel(java.lang.String)>(r14);

        goto label01;

     label07:
        r14 = null;

        goto label06;

     label08:
        if i0 == 630 goto label09;

        if i0 == 631 goto label09;

        if i0 != 632 goto label24;

     label09:
        r3 = null;

        $r17 = r2[2];

        r4 = r2[3];

     label10:
        $r19 = r2[6];

        $r20 = r2[6];

        $i2 = virtualinvoke $r20.<java.lang.String: int length()>();

        $i1 = -1 + $i2;

        $r22 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        r11 = virtualinvoke $r22.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r21 = r11[0];

        staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21);

        $r24 = r11[1];

        staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24);

     label11:
        r6 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r6;

     label12:
        $r23 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r27 = virtualinvoke $r23.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r8 = (android.os.storage.StorageVolume) $r27;

        $r28 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r25 = virtualinvoke $r28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r26 = (java.lang.String) $r25;

        exitmonitor r6;

     label13:
        if i0 != 630 goto label19;

        $r37 = new com.android.server.MountService$5;

        specialinvoke $r37.<com.android.server.MountService$5: void <init>(com.android.server.MountService,java.lang.String,java.lang.String)>(r0, "MountService#VolumeDiskInserted", r4);

        r9 = $r37;

        virtualinvoke r9.<com.android.server.MountService$5: void start()>();

     label14:
        if r3 == null goto label01;

        $r30 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>(r3, r8, $r30);

        goto label01;

     label15:
        $r42 := @caughtexception;

        r5 = $r42;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Failed to parse major/minor", r5);

        goto label11;

     label16:
        $r41 := @caughtexception;

        r7 = $r41;

     label17:
        exitmonitor r6;

     label18:
        throw r7;

     label19:
        if i0 != 631 goto label21;

        $r33 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r4);

        $z0 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("bad_removal");

        if $z0 == 0 goto label20;

        return 1;

     label20:
        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r8, "unmounted");

        $r32 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("unmounted", r8, $r32);

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r8, "removed");

        r3 = "android.intent.action.MEDIA_REMOVED";

        goto label14;

     label21:
        if i0 != 632 goto label22;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r8, "unmounted");

        $r34 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("android.intent.action.MEDIA_UNMOUNTED", r8, $r34);

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r8, "bad_removal");

        r3 = "android.intent.action.MEDIA_BAD_REMOVAL";

        goto label14;

     label22:
        if i0 != 700 goto label23;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <com.android.server.EventLogTags: void writeFstrimFinish(long)>($l5);

        r3 = null;

        goto label14;

     label23:
        r10 = newarray (java.lang.Object)[1];

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r10[0] = $r29;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown code {%d}", r10);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r31);

        r3 = null;

        goto label14;

     label24:
        return 0;

        catch java.lang.Exception from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void registerListener(android.os.storage.IMountServiceListener)
    {
        com.android.server.MountService r0;
        android.os.storage.IMountServiceListener r1;
        java.util.ArrayList r2, $r8;
        com.android.server.MountService$MountServiceBinderListener r3, $r6;
        java.lang.Throwable r4, $r10;
        android.os.IBinder $r7;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.IMountServiceListener;

        r2 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        entermonitor r2;

     label01:
        $r6 = new com.android.server.MountService$MountServiceBinderListener;

        specialinvoke $r6.<com.android.server.MountService$MountServiceBinderListener: void <init>(com.android.server.MountService,android.os.storage.IMountServiceListener)>(r0, r1);

        r3 = $r6;

     label02:
        $r7 = interfaceinvoke r1.<android.os.storage.IMountServiceListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

        $r8 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label03:
        exitmonitor r2;

     label04:
        return;

     label05:
        $r9 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Failed to link to listener death");

     label07:
        goto label03;

     label08:
        $r10 := @caughtexception;

        r4 = $r10;

     label09:
        exitmonitor r2;

     label10:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public int renameSecureContainer(java.lang.String, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        java.util.HashSet r3, $r6, $r7;
        java.lang.Throwable r4, $r11;
        boolean $z0, $z1;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        com.android.server.NativeDaemonConnectorException $r12;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_RENAME");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        r3 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r3;

     label01:
        $r6 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z0 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label02;

        $r7 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z1 = virtualinvoke $r7.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label04;

     label02:
        exitmonitor r3;

     label03:
        return -6;

     label04:
        exitmonitor r3;

     label05:
        $r9 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = "rename";

        $r8[1] = r1;

        $r8[2] = r2;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r8);

     label06:
        return 0;

     label07:
        $r12 := @caughtexception;

        return -1;

     label08:
        $r11 := @caughtexception;

        r4 = $r11;

     label09:
        exitmonitor r3;

     label10:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch com.android.server.NativeDaemonConnectorException from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setUsbMassStorageEnabled(boolean)
    {
        com.android.server.MountService r0;
        boolean z0, $z1;
        android.os.storage.StorageVolume r1;
        java.lang.String r2, r3, $r9;
        com.android.server.MountService$UmsEnableCallBack r4, $r12;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10;
        android.os.Handler $r11, $r14;
        android.os.Message $r13;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r1 != null goto label2;

     label1:
        return;

     label2:
        r2 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        r3 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r2);

        if z0 == 0 goto label3;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.MountService: void setUmsEnabling(boolean)>(z0);

        $r12 = new com.android.server.MountService$UmsEnableCallBack;

        specialinvoke $r12.<com.android.server.MountService$UmsEnableCallBack: void <init>(com.android.server.MountService,java.lang.String,java.lang.String,boolean)>(r0, r2, "ums", 1);

        r4 = $r12;

        $r14 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r11 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r13 = virtualinvoke $r11.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r4);

        virtualinvoke $r14.<android.os.Handler: boolean sendMessage(android.os.Message)>($r13);

        specialinvoke r0.<com.android.server.MountService: void setUmsEnabling(boolean)>(0);

     label3:
        if z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.MountService: void doShareUnshareVolume(java.lang.String,java.lang.String,boolean)>(r2, "ums", z0);

        $i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r2);

        if $i0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to remount ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after disabling share method ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ums");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r9);

        return;
    }

    public void shutdown(android.os.storage.IMountShutdownObserver)
    {
        com.android.server.MountService r0;
        android.os.storage.IMountShutdownObserver r1;
        java.lang.Object r2, $r13, $r14;
        java.lang.Throwable r3, $r20;
        java.util.Iterator r4;
        java.lang.String r5, r6;
        int i0, i1;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.server.MountService$ShutdownCallBack r7, $r16;
        java.lang.InterruptedException r9, $r19;
        java.util.HashMap $r10, $r12;
        java.util.Set $r11;
        android.os.Handler $r15, $r17;
        android.os.Message $r18;
        android.os.RemoteException $r21;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.IMountShutdownObserver;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.SHUTDOWN");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", "Shutting down");

        r2 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        entermonitor r2;

     label01:
        $r10 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label26;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r13;

        $r12 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r14 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.lang.String) $r14;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("shared");

        if $z2 == 0 goto label08;

        virtualinvoke r0.<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)>(0);

     label03:
        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z3 == 0 goto label20;

        $r16 = new com.android.server.MountService$ShutdownCallBack;

        specialinvoke $r16.<com.android.server.MountService$ShutdownCallBack: void <init>(com.android.server.MountService,java.lang.String,android.os.storage.IMountShutdownObserver)>(r0, r5, r1);

        r7 = $r16;

        $r17 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r15 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r18 = virtualinvoke $r15.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r7);

        virtualinvoke $r17.<android.os.Handler: boolean sendMessage(android.os.Message)>($r18);

     label04:
        goto label02;

     label05:
        $r20 := @caughtexception;

        r3 = $r20;

     label06:
        exitmonitor r2;

     label07:
        throw r3;

     label08:
        $z4 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("checking");

        if $z4 == 0 goto label03;

     label09:
        i0 = 30;

     label10:
        z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("checking");

     label11:
        if z0 == 0 goto label28;

        i1 = i0 - 1;

        if i0 < 0 goto label17;

     label12:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label13:
        r6 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

     label14:
        i0 = i1;

        goto label10;

     label15:
        $r19 := @caughtexception;

        r9 = $r19;

     label16:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Interrupted while waiting for media", r9);

     label17:
        if i1 != 0 goto label03;

     label18:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Timed out waiting for media to check");

     label19:
        goto label03;

     label20:
        if r1 == null goto label02;

     label21:
        interfaceinvoke r1.<android.os.storage.IMountShutdownObserver: void onShutDownComplete(int)>(0);

     label22:
        goto label02;

     label23:
        $r21 := @caughtexception;

     label24:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "RemoteException when shutting down");

     label25:
        goto label02;

     label26:
        exitmonitor r2;

     label27:
        return;

     label28:
        i1 = i0;

        goto label17;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.InterruptedException from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label13 to label14 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
        catch java.lang.Throwable from label18 to label19 with label05;
        catch android.os.RemoteException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label05;
        catch java.lang.Throwable from label24 to label25 with label05;
        catch java.lang.Throwable from label26 to label27 with label05;
    }

    public void systemReady()
    {
        com.android.server.MountService r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.MountService;

        r0.<com.android.server.MountService: boolean mSystemReady> = 1;

        $r1 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void unmountObb(java.lang.String, boolean, android.os.storage.IObbActionListener, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r12, $r17;
        boolean z0;
        android.os.storage.IObbActionListener r2;
        int i0, i1;
        java.util.Map r3, $r8;
        java.lang.Throwable r4, $r20;
        com.android.server.MountService$ObbState r5, $r14;
        com.android.server.MountService$UnmountObbAction r6, $r15;
        java.lang.Object $r9;
        java.lang.StringBuilder $r10, $r11, $r13;
        com.android.server.MountService$ObbActionHandler $r16, $r19;
        android.os.Message $r18;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.storage.IObbActionListener;

        i0 := @parameter3: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        r3 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        entermonitor r3;

     label1:
        $r8 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (com.android.server.MountService$ObbState) $r9;

        exitmonitor r3;

     label2:
        if r5 == null goto label6;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r15 = new com.android.server.MountService$UnmountObbAction;

        $r14 = new com.android.server.MountService$ObbState;

        $r17 = r5.<com.android.server.MountService$ObbState: java.lang.String canonicalPath>;

        specialinvoke $r14.<com.android.server.MountService$ObbState: void <init>(com.android.server.MountService,java.lang.String,java.lang.String,int,android.os.storage.IObbActionListener,int)>(r0, r1, $r17, i1, r2, i0);

        specialinvoke $r15.<com.android.server.MountService$UnmountObbAction: void <init>(com.android.server.MountService,com.android.server.MountService$ObbState,boolean)>(r0, $r14, z0);

        r6 = $r15;

        $r19 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r16 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r18 = virtualinvoke $r16.<com.android.server.MountService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r6);

        virtualinvoke $r19.<com.android.server.MountService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r18);

        return;

     label3:
        $r20 := @caughtexception;

        r4 = $r20;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

     label6:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown OBB mount at ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r12);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int unmountSecureContainer(java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.util.HashSet r2, r6, $r8, $r14;
        java.lang.Throwable r3, r7, $r16, $r17;
        byte b0;
        com.android.server.NativeDaemonConnector$Command r4, $r10;
        com.android.server.NativeDaemonConnectorException r5, $r18;
        java.lang.Runtime $r9;
        com.android.server.NativeDaemonConnector $r11;
        java.lang.Object[] $r12;
        int $i1;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_MOUNT_UNMOUNT");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        r2 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r2;

     label01:
        $r8 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z1 = virtualinvoke $r8.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label03;

        exitmonitor r2;

     label02:
        return -5;

     label03:
        exitmonitor r2;

     label04:
        $r9 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r9.<java.lang.Runtime: void gc()>();

        b0 = 0;

     label05:
        $r10 = new com.android.server.NativeDaemonConnector$Command;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "unmount";

        $r12[1] = r1;

        specialinvoke $r10.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("asec", $r12);

        r4 = $r10;

     label06:
        if z0 == 0 goto label08;

     label07:
        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force");

     label08:
        $r11 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r11.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r4);

     label09:
        if b0 != 0 goto label20;

        r6 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        entermonitor r6;

     label10:
        $r14 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r14.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        exitmonitor r6;

     label11:
        return b0;

     label12:
        $r17 := @caughtexception;

        r7 = $r17;

     label13:
        exitmonitor r6;

     label14:
        throw r7;

     label15:
        $r16 := @caughtexception;

        r3 = $r16;

     label16:
        exitmonitor r2;

     label17:
        throw r3;

     label18:
        $r18 := @caughtexception;

        r5 = $r18;

        $i1 = virtualinvoke r5.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if $i1 != 405 goto label19;

        b0 = -7;

        goto label09;

     label19:
        b0 = -1;

        goto label09;

     label20:
        return b0;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch com.android.server.NativeDaemonConnectorException from label05 to label06 with label18;
        catch com.android.server.NativeDaemonConnectorException from label07 to label08 with label18;
        catch com.android.server.NativeDaemonConnectorException from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void unmountVolume(java.lang.String, boolean, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, $r4, $r5, $r6, $r7;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        com.android.server.MountService$UnmountCallBack r3, $r8;
        android.os.Handler $r9, $r10;
        android.os.Message $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        r2 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r1);

        $r4 = "unmounted";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label1;

        $r5 = "removed";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 != 0 goto label1;

        $r6 = "shared";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 != 0 goto label1;

        $r7 = "unmountable";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label2;

     label1:
        return;

     label2:
        $r8 = new com.android.server.MountService$UnmountCallBack;

        specialinvoke $r8.<com.android.server.MountService$UnmountCallBack: void <init>(com.android.server.MountService,java.lang.String,boolean,boolean)>(r0, r1, z0, z1);

        r3 = $r8;

        $r9 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r10 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r3);

        virtualinvoke $r9.<android.os.Handler: boolean sendMessage(android.os.Message)>($r11);

        return;
    }

    public void unregisterListener(android.os.storage.IMountServiceListener)
    {
        com.android.server.MountService r0;
        android.os.storage.IMountServiceListener r1, $r8;
        java.util.ArrayList r2, $r6, $r9, $r10;
        java.lang.Throwable r3, $r13;
        java.util.Iterator r4;
        com.android.server.MountService$MountServiceBinderListener r5;
        boolean $z0;
        java.lang.Object $r7;
        int $i0;
        android.os.IBinder $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.IMountServiceListener;

        r2 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        entermonitor r2;

     label1:
        $r6 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r4 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.MountService$MountServiceBinderListener) $r7;

        $r8 = r5.<com.android.server.MountService$MountServiceBinderListener: android.os.storage.IMountServiceListener mListener>;

        if $r8 != r1 goto label2;

        $r10 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $r9 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $i0 = virtualinvoke $r9.<java.util.ArrayList: int indexOf(java.lang.Object)>(r5);

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        $r11 = interfaceinvoke r1.<android.os.storage.IMountServiceListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r11.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r5, 0);

        exitmonitor r2;

     label3:
        return;

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r13 := @caughtexception;

        r3 = $r13;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int verifyEncryptionPassword(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r9, $r11, $r13;
        com.android.server.NativeDaemonConnectorException r2, $r15;
        com.android.server.NativeDaemonConnector r3;
        java.lang.Object[] r4;
        com.android.server.NativeDaemonEvent r5;
        int i0, $i1, $i3;
        android.content.Context $r6;
        boolean $z0;
        com.android.server.NativeDaemonConnector$SensitiveArg $r7;
        java.lang.StringBuilder $r8, $r10, $r12;
        java.lang.IllegalArgumentException $r14;
        java.lang.SecurityException $r16;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label1;

        $r16 = new java.lang.SecurityException;

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>("no permission to access the crypt keeper");

        throw $r16;

     label1:
        $r6 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r14;

     label2:
        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label3:
        r3 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        r4 = newarray (java.lang.Object)[2];

        r4[0] = "verifypw";

        $r7 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r7.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r1);

        r4[1] = $r7;

        r5 = virtualinvoke r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", r4);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cryptfs verifypw => ");

        $r9 = virtualinvoke r5.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", $r11);

        $r13 = virtualinvoke r5.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

     label4:
        return i0;

     label5:
        $r15 := @caughtexception;

        r2 = $r15;

        $i3 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i3;

        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    void waitForAsecScan()
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mAsecsScanned>;

        specialinvoke r0.<com.android.server.MountService: void waitForLatch(java.util.concurrent.CountDownLatch)>($r1);

        return;
    }
}
