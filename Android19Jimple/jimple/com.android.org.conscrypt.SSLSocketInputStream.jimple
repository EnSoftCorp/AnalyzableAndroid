public final class com.android.org.conscrypt.SSLSocketInputStream extends java.io.InputStream
{
    private static final int BUFFER_SIZE;
    private byte[] buffer;
    protected com.android.org.conscrypt.SSLSocketInputStream$Adapter dataPoint;
    private int end;
    private boolean end_reached;
    private final com.android.org.conscrypt.SSLSocketImpl owner;
    private int pos;

    protected void <init>(com.android.org.conscrypt.SSLSocketImpl)
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        com.android.org.conscrypt.SSLSocketImpl r1;
        byte[] $r2;
        com.android.org.conscrypt.SSLSocketInputStream$Adapter $r3;

        r0 := @this: com.android.org.conscrypt.SSLSocketInputStream;

        r1 := @parameter0: com.android.org.conscrypt.SSLSocketImpl;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r2 = newarray (byte)[16384];

        r0.<com.android.org.conscrypt.SSLSocketInputStream: byte[] buffer> = $r2;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: boolean end_reached> = 0;

        $r3 = new com.android.org.conscrypt.SSLSocketInputStream$Adapter;

        specialinvoke $r3.<com.android.org.conscrypt.SSLSocketInputStream$Adapter: void <init>(com.android.org.conscrypt.SSLSocketInputStream,com.android.org.conscrypt.SSLSocketInputStream$1)>(r0, null);

        r0.<com.android.org.conscrypt.SSLSocketInputStream: com.android.org.conscrypt.SSLSocketInputStream$Adapter dataPoint> = $r3;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: com.android.org.conscrypt.SSLSocketImpl owner> = r1;

        return;
    }

    static int access$100(com.android.org.conscrypt.SSLSocketInputStream)
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        int $i0;

        r0 := @parameter0: com.android.org.conscrypt.SSLSocketInputStream;

        $i0 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int end>;

        return $i0;
    }

    static int access$102(com.android.org.conscrypt.SSLSocketInputStream, int)
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        int i0;

        r0 := @parameter0: com.android.org.conscrypt.SSLSocketInputStream;

        i0 := @parameter1: int;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: int end> = i0;

        return i0;
    }

    static int access$120(com.android.org.conscrypt.SSLSocketInputStream, int)
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        int i0, i1, $i2;

        r0 := @parameter0: com.android.org.conscrypt.SSLSocketInputStream;

        i0 := @parameter1: int;

        $i2 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int end>;

        i1 = $i2 - i0;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: int end> = i1;

        return i1;
    }

    static int access$200(com.android.org.conscrypt.SSLSocketInputStream)
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        int $i0;

        r0 := @parameter0: com.android.org.conscrypt.SSLSocketInputStream;

        $i0 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int pos>;

        return $i0;
    }

    static int access$202(com.android.org.conscrypt.SSLSocketInputStream, int)
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        int i0;

        r0 := @parameter0: com.android.org.conscrypt.SSLSocketInputStream;

        i0 := @parameter1: int;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: int pos> = i0;

        return i0;
    }

    static byte[] access$300(com.android.org.conscrypt.SSLSocketInputStream)
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        byte[] $r1;

        r0 := @parameter0: com.android.org.conscrypt.SSLSocketInputStream;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketInputStream: byte[] buffer>;

        return $r1;
    }

    public int available() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.SSLSocketInputStream;

        $i1 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int end>;

        $i0 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int pos>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void close() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;

        r0 := @this: com.android.org.conscrypt.SSLSocketInputStream;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: byte[] buffer> = null;

        return;
    }

    public int read() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        byte[] r1, $r2;
        int i0, $i1, $i2, $i3;
        byte $b4;
        short $s5;
        boolean $z0;
        com.android.org.conscrypt.SSLSocketImpl $r3;
        java.io.IOException $r4;

        r0 := @this: com.android.org.conscrypt.SSLSocketInputStream;

        $r2 = r0.<com.android.org.conscrypt.SSLSocketInputStream: byte[] buffer>;

        if $r2 != null goto label2;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream was closed.");

        throw $r4;

     label1:
        $r3 = r0.<com.android.org.conscrypt.SSLSocketInputStream: com.android.org.conscrypt.SSLSocketImpl owner>;

        virtualinvoke $r3.<com.android.org.conscrypt.SSLSocketImpl: void needAppData()>();

     label2:
        $i2 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int pos>;

        $i1 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int end>;

        if $i2 != $i1 goto label3;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketInputStream: boolean end_reached>;

        if $z0 == 0 goto label1;

        return -1;

     label3:
        r1 = r0.<com.android.org.conscrypt.SSLSocketInputStream: byte[] buffer>;

        i0 = r0.<com.android.org.conscrypt.SSLSocketInputStream: int pos>;

        $i3 = i0 + 1;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: int pos> = $i3;

        $b4 = r1[i0];

        $s5 = 255 & $b4;

        return $s5;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i5, $i6;
        byte $b4;

        r0 := @this: com.android.org.conscrypt.SSLSocketInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = 0;

     label1:
        i3 = virtualinvoke r0.<com.android.org.conscrypt.SSLSocketInputStream: int read()>();

        if i3 != -1 goto label3;

        if i2 != 0 goto label2;

        return -1;

     label2:
        return i2;

     label3:
        $i5 = i0 + i2;

        $b4 = (byte) i3;

        r1[$i5] = $b4;

        i2 = i2 + 1;

        $i6 = virtualinvoke r0.<com.android.org.conscrypt.SSLSocketInputStream: int available()>();

        if $i6 == 0 goto label4;

        if i2 < i1 goto label1;

     label4:
        return i2;
    }

    protected void setEnd()
    {
        com.android.org.conscrypt.SSLSocketInputStream r0;

        r0 := @this: com.android.org.conscrypt.SSLSocketInputStream;

        r0.<com.android.org.conscrypt.SSLSocketInputStream: boolean end_reached> = 1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.SSLSocketInputStream: int BUFFER_SIZE> = 16384;

        return;
    }
}
