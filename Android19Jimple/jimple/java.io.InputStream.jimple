public abstract class java.io.InputStream extends java.lang.Object implements java.io.Closeable
{

    public void <init>()
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;

        return 0;
    }

    public void close() throws java.io.IOException
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;

        return;
    }

    public void mark(int)
    {
        java.io.InputStream r0;
        int i0;

        r0 := @this: java.io.InputStream;

        i0 := @parameter0: int;

        return;
    }

    public boolean markSupported()
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;

        return 0;
    }

    public abstract int read() throws java.io.IOException;

    public int read(byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: java.io.InputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i6;
        java.io.IOException r2, $r3;
        byte $b5;

        r0 := @this: java.io.InputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label7;

     label2:
        i3 = virtualinvoke r0.<java.io.InputStream: int read()>();

     label3:
        if i3 != -1 goto label6;

        if i2 != 0 goto label4;

        i2 = -1;

     label4:
        return i2;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        if i2 != 0 goto label4;

        throw r2;

     label6:
        $i6 = i0 + i2;

        $b5 = (byte) i3;

        r1[$i6] = $b5;

        i2 = i2 + 1;

        goto label1;

     label7:
        return i1;

        catch java.io.IOException from label2 to label3 with label5;
    }

    public void reset() throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.Throwable r1, $r3;
        java.io.IOException $r2;

        r0 := @this: java.io.InputStream;

        entermonitor r0;

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, $l1;

        r0 := @this: java.io.InputStream;

        l0 := @parameter0: long;

        $l1 = staticinvoke <libcore.io.Streams: long skipByReading(java.io.InputStream,long)>(r0, l0);

        return $l1;
    }
}
