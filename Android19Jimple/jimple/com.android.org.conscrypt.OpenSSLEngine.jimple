public class com.android.org.conscrypt.OpenSSLEngine extends java.lang.Object
{
    private static final java.lang.Object mLoadingLock;
    private final long ctx;

    static void <clinit>()
    {
        java.lang.Object $r0;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void ENGINE_load_dynamic()>();

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.android.org.conscrypt.OpenSSLEngine: java.lang.Object mLoadingLock> = $r0;

        return;
    }

    private void <init>(long)
    {
        com.android.org.conscrypt.OpenSSLEngine r0;
        long l0;
        int $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngine;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx> = l0;

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int ENGINE_init(long)>(l0);

        if $i1 != 0 goto label1;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int ENGINE_free(long)>(l0);

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not initialize engine");

        throw $r1;

     label1:
        return;
    }

    public static com.android.org.conscrypt.OpenSSLEngine getInstance(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, $r8;
        java.lang.Object r1;
        java.lang.Throwable r2, $r9;
        long l0;
        byte $b1;
        com.android.org.conscrypt.OpenSSLEngine $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.NullPointerException $r10;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("engine == null");

        throw $r10;

     label1:
        r1 = <com.android.org.conscrypt.OpenSSLEngine: java.lang.Object mLoadingLock>;

        entermonitor r1;

     label2:
        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long ENGINE_by_id(java.lang.String)>(r0);

     label3:
        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label8;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown ENGINE id: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: int ENGINE_add(long)>(l0);

        exitmonitor r1;

     label9:
        $r3 = new com.android.org.conscrypt.OpenSSLEngine;

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLEngine: void <init>(long)>(l0);

        return $r3;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLEngine r0, r2;
        java.lang.Object r1;
        java.lang.String r3, $r4;
        boolean $z0, $z1;
        long $l0, $l1, $l3, $l4;
        byte $b2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngine;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLEngine;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (com.android.org.conscrypt.OpenSSLEngine) r1;

        $l0 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLEngine: long getEngineContext()>();

        $l1 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $l3 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String ENGINE_get_id(long)>($l3);

        if r3 != null goto label4;

        return 0;

     label4:
        $l4 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLEngine: long getEngineContext()>();

        $r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String ENGINE_get_id(long)>($l4);

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLEngine r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngine;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int ENGINE_finish(long)>($l0);

        $l2 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int ENGINE_free(long)>($l2);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    long getEngineContext()
    {
        com.android.org.conscrypt.OpenSSLEngine r0;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngine;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        return $l0;
    }

    public java.security.PrivateKey getPrivateKeyById(java.lang.String) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLEngine r0;
        java.lang.String r1;
        long l0, $l1;
        com.android.org.conscrypt.OpenSSLKey r2, $r5;
        java.security.NoSuchAlgorithmException r3, $r7;
        java.security.PrivateKey r4;
        byte $b2;
        java.lang.NullPointerException $r6;
        java.security.InvalidKeyException $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngine;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("id == null");

        throw $r6;

     label1:
        $l1 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long ENGINE_load_private_key(long,java.lang.String)>($l1, r1);

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        return null;

     label2:
        $r5 = new com.android.org.conscrypt.OpenSSLKey;

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: void <init>(long,com.android.org.conscrypt.OpenSSLEngine,java.lang.String)>(l0, r0, r1);

        r2 = $r5;

     label3:
        r4 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: java.security.PrivateKey getPrivateKey()>();

     label4:
        return r4;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    public javax.crypto.SecretKey getSecretKeyById(java.lang.String, java.lang.String) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLEngine r0;
        java.lang.String r1, r2;
        long l0, $l1;
        com.android.org.conscrypt.OpenSSLKey r3, $r6;
        java.security.NoSuchAlgorithmException r4, $r8;
        javax.crypto.SecretKey r5;
        byte $b2;
        java.lang.NullPointerException $r7;
        java.security.InvalidKeyException $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngine;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("id == null");

        throw $r7;

     label1:
        $l1 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long ENGINE_load_private_key(long,java.lang.String)>($l1, r1);

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        return null;

     label2:
        $r6 = new com.android.org.conscrypt.OpenSSLKey;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: void <init>(long,com.android.org.conscrypt.OpenSSLEngine,java.lang.String)>(l0, r0, r1);

        r3 = $r6;

     label3:
        r5 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLKey: javax.crypto.SecretKey getSecretKey(java.lang.String)>(r2);

     label4:
        return r5;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

        $r9 = new java.security.InvalidKeyException;

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r4);

        throw $r9;

        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLEngine r0;
        long $l0;
        int $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngine;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngine: long ctx>;

        $i1 = (int) $l0;

        return $i1;
    }
}
