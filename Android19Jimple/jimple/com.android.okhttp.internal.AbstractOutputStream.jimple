public abstract class com.android.okhttp.internal.AbstractOutputStream extends java.io.OutputStream
{
    protected boolean closed;

    public void <init>()
    {
        com.android.okhttp.internal.AbstractOutputStream r0;

        r0 := @this: com.android.okhttp.internal.AbstractOutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        return;
    }

    protected final void checkNotClosed() throws java.io.IOException
    {
        com.android.okhttp.internal.AbstractOutputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: com.android.okhttp.internal.AbstractOutputStream;

        $z0 = r0.<com.android.okhttp.internal.AbstractOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("stream closed");

        throw $r1;

     label1:
        return;
    }

    public boolean isClosed()
    {
        com.android.okhttp.internal.AbstractOutputStream r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.AbstractOutputStream;

        $z0 = r0.<com.android.okhttp.internal.AbstractOutputStream: boolean closed>;

        return $z0;
    }

    public final void write(int) throws java.io.IOException
    {
        com.android.okhttp.internal.AbstractOutputStream r0;
        int i0;
        byte[] r1;
        byte $b1;

        r0 := @this: com.android.okhttp.internal.AbstractOutputStream;

        i0 := @parameter0: int;

        r1 = newarray (byte)[1];

        $b1 = (byte) i0;

        r1[0] = $b1;

        virtualinvoke r0.<com.android.okhttp.internal.AbstractOutputStream: void write(byte[])>(r1);

        return;
    }
}
