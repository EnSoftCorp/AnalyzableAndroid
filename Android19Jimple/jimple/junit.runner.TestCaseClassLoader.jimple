public class junit.runner.TestCaseClassLoader extends java.lang.ClassLoader
{
    static final java.lang.String EXCLUDED_FILE;
    private java.lang.String[] defaultExclusions;
    private java.util.Vector fExcluded;
    private java.util.Vector fPathItems;

    public void <init>()
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String $r1;

        r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        specialinvoke r0.<junit.runner.TestCaseClassLoader: void <init>(java.lang.String)>($r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1;
        java.lang.String[] $r2;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.ClassLoader: void <init>()>();

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "junit.framework.";

        $r2[1] = "junit.extensions.";

        $r2[2] = "junit.runner.";

        r0.<junit.runner.TestCaseClassLoader: java.lang.String[] defaultExclusions> = $r2;

        specialinvoke r0.<junit.runner.TestCaseClassLoader: void scanPath(java.lang.String)>(r1);

        specialinvoke r0.<junit.runner.TestCaseClassLoader: void readExcludedPackages()>();

        return;
    }

    private byte[] getClassData(java.io.File)
    {
        junit.runner.TestCaseClassLoader r0;
        java.io.File r1;
        java.io.FileInputStream r2, $r7;
        java.io.ByteArrayOutputStream r3, $r8;
        byte[] r5, r6;
        int i0;
        java.io.IOException $r9;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.io.File;

     label1:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r2 = $r7;

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>(int)>(1000);

        r3 = $r8;

        r5 = newarray (byte)[1000];

     label2:
        i0 = virtualinvoke r2.<java.io.FileInputStream: int read(byte[])>(r5);

     label3:
        if i0 == -1 goto label6;

     label4:
        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r5, 0, i0);

     label5:
        goto label2;

     label6:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

        virtualinvoke r3.<java.io.ByteArrayOutputStream: void close()>();

        r6 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label7:
        return r6;

     label8:
        $r9 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    private byte[] loadFileData(java.lang.String, java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1, r2;
        java.io.File r3, $r4;
        boolean $z0;
        byte[] $r5;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r3 = $r4;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<junit.runner.TestCaseClassLoader: byte[] getClassData(java.io.File)>(r3);

        return $r5;

     label1:
        return null;
    }

    private byte[] loadJarData(java.lang.String, java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1, r2;
        java.io.InputStream r3;
        java.io.File r4, $r14;
        java.util.zip.ZipFile r5, $r15;
        java.util.zip.ZipEntry r6;
        int i0, i1, $i3, $i4, $i5;
        java.lang.Throwable r7, $r19;
        byte[] r11;
        boolean $z0;
        long $l2;
        java.io.IOException $r16, $r17, $r18, $r20, $r21;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = null;

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r1);

        r4 = $r14;

        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r15 = new java.util.zip.ZipFile;

        specialinvoke $r15.<java.util.zip.ZipFile: void <init>(java.io.File)>(r4);

        r5 = $r15;

     label02:
        r6 = virtualinvoke r5.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>(r2);

        if r6 != null goto label04;

        return null;

     label03:
        $r17 := @caughtexception;

        return null;

     label04:
        $l2 = virtualinvoke r6.<java.util.zip.ZipEntry: long getSize()>();

        i0 = (int) $l2;

     label05:
        r3 = virtualinvoke r5.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r6);

        r11 = newarray (byte)[i0];

     label06:
        i1 = 0;

     label07:
        if i1 >= i0 goto label10;

     label08:
        $i4 = lengthof r11;

        $i3 = $i4 - i1;

        $i5 = virtualinvoke r3.<java.io.InputStream: int read(byte[],int,int)>(r11, i1, $i3);

        i1 = i1 + $i5;

     label09:
        goto label07;

     label10:
        virtualinvoke r5.<java.util.zip.ZipFile: void close()>();

     label11:
        if r3 == null goto label13;

     label12:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label13:
        return r11;

     label14:
        $r20 := @caughtexception;

        if r3 == null goto label16;

     label15:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label16:
        return null;

     label17:
        $r19 := @caughtexception;

        r7 = $r19;

        if r3 == null goto label19;

     label18:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label19:
        throw r7;

     label20:
        $r21 := @caughtexception;

        goto label13;

     label21:
        $r16 := @caughtexception;

        goto label16;

     label22:
        $r18 := @caughtexception;

        goto label19;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.io.IOException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.io.IOException from label12 to label13 with label20;
        catch java.io.IOException from label15 to label16 with label21;
        catch java.io.IOException from label18 to label19 with label22;
    }

    private byte[] lookupClassData(java.lang.String) throws java.lang.ClassNotFoundException
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1, r2, r3, $r10;
        int i0, $i1;
        byte[] r4;
        java.util.Vector $r5, $r7;
        java.lang.ClassNotFoundException $r6;
        java.lang.Object $r8;
        java.lang.StringBuilder $r9, $r11, $r12;
        boolean $z0;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r5 = r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems>;

        $i1 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label5;

        $r7 = r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r2 = (java.lang.String) $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<junit.runner.TestCaseClassLoader: boolean isJar(java.lang.String)>(r2);

        if $z0 == 0 goto label3;

        r4 = specialinvoke r0.<junit.runner.TestCaseClassLoader: byte[] loadJarData(java.lang.String,java.lang.String)>(r2, r3);

     label2:
        if r4 == null goto label4;

        return r4;

     label3:
        r4 = specialinvoke r0.<junit.runner.TestCaseClassLoader: byte[] loadFileData(java.lang.String,java.lang.String)>(r2, r3);

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        $r6 = new java.lang.ClassNotFoundException;

        specialinvoke $r6.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r6;
    }

    private void readExcludedPackages()
    {
        junit.runner.TestCaseClassLoader r0;
        int i0, $i1, $i2, $i3, $i4;
        java.io.InputStream r1;
        java.util.Properties r2, $r14;
        java.lang.Throwable r3, $r23;
        java.util.Enumeration r8;
        java.lang.String r9, r10, $r16, $r21;
        java.util.Vector $r11, $r17, $r18;
        java.lang.String[] $r12, $r20;
        java.lang.Class $r13;
        boolean $z0, $z1, $z2;
        java.lang.Object $r15;
        java.io.IOException $r19, $r22, $r24, $r25;

        r0 := @this: junit.runner.TestCaseClassLoader;

        $r11 = new java.util.Vector;

        specialinvoke $r11.<java.util.Vector: void <init>(int)>(10);

        r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded> = $r11;

        i0 = 0;

     label01:
        $r12 = r0.<junit.runner.TestCaseClassLoader: java.lang.String[] defaultExclusions>;

        $i1 = lengthof $r12;

        if i0 >= $i1 goto label02;

        $r18 = r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        $r20 = r0.<junit.runner.TestCaseClassLoader: java.lang.String[] defaultExclusions>;

        $r21 = $r20[i0];

        virtualinvoke $r18.<java.util.Vector: void addElement(java.lang.Object)>($r21);

        i0 = i0 + 1;

        goto label01;

     label02:
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r13.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("excluded.properties");

        if r1 != null goto label04;

     label03:
        return;

     label04:
        $r14 = new java.util.Properties;

        specialinvoke $r14.<java.util.Properties: void <init>()>();

        r2 = $r14;

     label05:
        virtualinvoke r2.<java.util.Properties: void load(java.io.InputStream)>(r1);

     label06:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label07:
        r8 = virtualinvoke r2.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label08:
        $z0 = interfaceinvoke r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label03;

        $r15 = interfaceinvoke r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        r9 = (java.lang.String) $r15;

        $z1 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("excluded.");

        if $z1 == 0 goto label08;

        $r16 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r9);

        r10 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke r10.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z2 == 0 goto label09;

        $i3 = virtualinvoke r10.<java.lang.String: int length()>();

        $i4 = -1 + $i3;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label09:
        $i2 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i2 <= 0 goto label08;

        $r17 = r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        virtualinvoke $r17.<java.util.Vector: void addElement(java.lang.Object)>(r10);

        goto label08;

     label10:
        $r25 := @caughtexception;

     label11:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label12:
        return;

     label13:
        $r19 := @caughtexception;

        return;

     label14:
        $r23 := @caughtexception;

        r3 = $r23;

     label15:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label16:
        throw r3;

     label17:
        $r22 := @caughtexception;

        goto label07;

     label18:
        $r24 := @caughtexception;

        goto label16;

        catch java.io.IOException from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.io.IOException from label06 to label07 with label17;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label15 to label16 with label18;
    }

    private void scanPath(java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1, r2, $r7;
        java.util.StringTokenizer r3, $r5;
        java.util.Vector $r4, $r6;
        boolean $z0;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("path.separator");

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>(int)>(10);

        r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems> = $r4;

        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r3 = $r5;

     label1:
        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r6 = r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems>;

        $r7 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    public java.net.URL getResource(java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1;
        java.net.URL $r2;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r1);

        return $r2;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r1);

        return $r2;
    }

    public boolean isExcluded(java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1, $r5;
        int i0, $i1;
        java.util.Vector $r2, $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r2 = r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label3;

        $r3 = r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r5 = (java.lang.String) $r4;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean isJar(java.lang.String)
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".zip");

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        junit.runner.TestCaseClassLoader r0;
        java.lang.String r1;
        boolean z0, z1;
        java.lang.Throwable r2, $r10;
        java.lang.Class r3, r4, r5, r8;
        byte[] r6;
        int $i0;
        java.lang.ClassNotFoundException $r9, $r11;

        r0 := @this: junit.runner.TestCaseClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        r3 = virtualinvoke r0.<junit.runner.TestCaseClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

     label02:
        r4 = r3;

        if r4 == null goto label04;

        r5 = r4;

     label03:
        exitmonitor r0;

        return r5;

     label04:
        z1 = virtualinvoke r0.<junit.runner.TestCaseClassLoader: boolean isExcluded(java.lang.String)>(r1);

     label05:
        if z1 == 0 goto label09;

     label06:
        r8 = virtualinvoke r0.<junit.runner.TestCaseClassLoader: java.lang.Class findSystemClass(java.lang.String)>(r1);

     label07:
        r5 = r8;

        goto label03;

     label08:
        $r11 := @caughtexception;

     label09:
        if r4 != null goto label15;

     label10:
        r6 = specialinvoke r0.<junit.runner.TestCaseClassLoader: byte[] lookupClassData(java.lang.String)>(r1);

     label11:
        if r6 != null goto label14;

     label12:
        $r9 = new java.lang.ClassNotFoundException;

        specialinvoke $r9.<java.lang.ClassNotFoundException: void <init>()>();

        throw $r9;

     label13:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label14:
        $i0 = lengthof r6;

        r4 = virtualinvoke r0.<junit.runner.TestCaseClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(r1, r6, 0, $i0);

     label15:
        if z0 == 0 goto label17;

     label16:
        virtualinvoke r0.<junit.runner.TestCaseClassLoader: void resolveClass(java.lang.Class)>(r4);

     label17:
        r5 = r4;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.ClassNotFoundException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
    }

    public static void <clinit>()
    {
        <junit.runner.TestCaseClassLoader: java.lang.String EXCLUDED_FILE> = "excluded.properties";

        return;
    }
}
