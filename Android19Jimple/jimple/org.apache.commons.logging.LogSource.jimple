public class org.apache.commons.logging.LogSource extends java.lang.Object
{
    protected static boolean jdk14IsAvailable;
    protected static boolean log4jIsAvailable;
    protected static java.lang.reflect.Constructor logImplctor;
    protected static java.util.Hashtable logs;

    static void <clinit>()
    {
        java.lang.String r2, r8;
        java.util.Hashtable $r9;
        java.lang.Class $r10, $r11, $r13;
        boolean $z0, $z1;
        java.lang.Throwable $r12, $r14, $r15, $r16, $r17, $r18, $r19;

        $r9 = new java.util.Hashtable;

        specialinvoke $r9.<java.util.Hashtable: void <init>()>();

        <org.apache.commons.logging.LogSource: java.util.Hashtable logs> = $r9;

        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 0;

        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 0;

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = null;

     label01:
        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.log4j.Logger");

        if $r10 == null goto label11;

        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 1;

     label02:
        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.logging.Logger");

        if $r11 == null goto label14;

        $r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.commons.logging.impl.Jdk14Logger");

        if $r13 == null goto label14;

        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 1;

     label03:
        r2 = null;

     label04:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.log");

     label05:
        if r2 != null goto label08;

     label06:
        r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.Log");

     label07:
        r2 = r8;

     label08:
        if r2 == null goto label21;

     label09:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>(r2);

     label10:
        return;

     label11:
        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 0;

     label12:
        goto label02;

     label13:
        $r12 := @caughtexception;

        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 0;

        goto label02;

     label14:
        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 0;

     label15:
        goto label03;

     label16:
        $r17 := @caughtexception;

        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 0;

        goto label03;

     label17:
        $r15 := @caughtexception;

     label18:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog");

     label19:
        return;

     label20:
        $r19 := @caughtexception;

        return;

     label21:
        $z0 = <org.apache.commons.logging.LogSource: boolean log4jIsAvailable>;

        if $z0 == 0 goto label27;

        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.Log4JLogger");

     label22:
        return;

     label23:
        $r14 := @caughtexception;

     label24:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog");

     label25:
        return;

     label26:
        $r18 := @caughtexception;

        return;

     label27:
        $z1 = <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable>;

        if $z1 == 0 goto label29;

        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.Jdk14Logger");

     label28:
        return;

     label29:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog");

     label30:
        return;

     label31:
        $r16 := @caughtexception;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label31;
        catch java.lang.Throwable from label06 to label07 with label31;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label23;
        catch java.lang.Throwable from label29 to label30 with label23;
    }

    private void <init>()
    {
        org.apache.commons.logging.LogSource r0;

        r0 := @this: org.apache.commons.logging.LogSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.logging.Log getInstance(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.commons.logging.Log getInstance(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.logging.Log r1, $r4;
        java.util.Hashtable $r2, $r5;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (org.apache.commons.logging.Log) $r3;

        r1 = (org.apache.commons.logging.Log) $r4;

        if r1 != null goto label1;

        r1 = staticinvoke <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)>(r0);

        $r5 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label1:
        return r1;
    }

    public static java.lang.String[] getLogNames()
    {
        java.util.Hashtable $r0, $r2;
        java.util.Set $r1;
        int $i0;
        java.lang.String[] $r3, $r5, $r6;
        java.lang.Object[] $r4;

        $r0 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.util.Set keySet()>();

        $r2 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public static org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Object[] r1, $r4;
        org.apache.commons.logging.Log r3, $r7;
        java.lang.reflect.Constructor $r5;
        java.lang.Object $r6;
        org.apache.commons.logging.impl.NoOpLog $r8;
        java.lang.Throwable $r9;

        r0 := @parameter0: java.lang.String;

     label1:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r0;

        r1 = $r4;

        $r5 = <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r1);

        $r7 = (org.apache.commons.logging.Log) $r6;

        r3 = (org.apache.commons.logging.Log) $r7;

     label2:
        if r3 != null goto label3;

        $r8 = new org.apache.commons.logging.impl.NoOpLog;

        specialinvoke $r8.<org.apache.commons.logging.impl.NoOpLog: void <init>(java.lang.String)>(r0);

        r3 = $r8;

     label3:
        return r3;

     label4:
        $r9 := @caughtexception;

        r3 = null;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public static void setLogImplementation(java.lang.Class) throws java.lang.LinkageError, java.lang.ExceptionInInitializerError, java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class r0, $r3;
        java.lang.Class[] r1;
        java.lang.String $r2;
        java.lang.reflect.Constructor $r4;

        r0 := @parameter0: java.lang.Class;

        r1 = newarray (java.lang.Class)[1];

        $r2 = "";

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        r1[0] = $r3;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r1);

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = $r4;

        return;
    }

    public static void setLogImplementation(java.lang.String) throws java.lang.LinkageError, java.lang.ExceptionInInitializerError, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.ClassNotFoundException
    {
        java.lang.String r0, $r4;
        java.lang.Class r2, $r5;
        java.lang.Class[] r3;
        java.lang.reflect.Constructor $r6;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.lang.String;

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        r3 = newarray (java.lang.Class)[1];

        $r4 = "";

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r3[0] = $r5;

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r3);

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = $r6;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = null;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
