public class gov.nist.javax.sip.stack.SIPClientTransaction extends gov.nist.javax.sip.stack.SIPTransaction implements gov.nist.javax.sip.stack.ServerResponseInterface, javax.sip.ClientTransaction, gov.nist.javax.sip.ClientTransactionExt
{
    private int callingStateTimeoutCount;
    private gov.nist.javax.sip.stack.SIPDialog defaultDialog;
    private gov.nist.javax.sip.message.SIPRequest lastRequest;
    private javax.sip.address.Hop nextHop;
    private boolean notifyOnRetransmit;
    private transient gov.nist.javax.sip.stack.ServerResponseInterface respondTo;
    private java.util.concurrent.ConcurrentHashMap sipDialogs;
    private boolean timeoutIfStillInCallingState;
    private java.lang.String viaHost;
    private int viaPort;

    protected void <init>(gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1, $r6, $r8, $r14;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.Utils $r3;
        java.lang.String $r4, $r13;
        gov.nist.javax.sip.stack.MessageProcessor $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r7;
        gov.nist.core.StackLogger $r9, $r15;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.MessageChannel)>(r1, r2);

        $r3 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.Utils: java.lang.String generateBranchId()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setBranch(java.lang.String)>($r4);

        $r5 = r2.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = $r5;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setEncapsulatedChannel(gov.nist.javax.sip.stack.MessageChannel)>(r2);

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean notifyOnRetransmit> = 0;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean timeoutIfStillInCallingState> = 0;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r6.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating clientTransaction ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r13);

        $r14 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r15 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logStackTrace()>();

     label1:
        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.util.concurrent.ConcurrentHashMap sipDialogs> = $r7;

        return;
    }

    private final javax.sip.message.Request createErrorAck() throws javax.sip.SipException, java.text.ParseException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPRequest r1, $r8;
        java.lang.String $r2, $r16, $r24;
        boolean $z0, $z1;
        gov.nist.javax.sip.message.SIPResponse $r3, $r4, $r5, $r14;
        int $i0;
        javax.sip.header.ToHeader $r6;
        gov.nist.javax.sip.header.To $r7;
        gov.nist.javax.sip.stack.SIPTransactionStack $r9, $r11;
        javax.sip.SipException $r10, $r18, $r19, $r21;
        java.lang.StringBuilder $r12, $r15, $r17, $r20, $r23, $r25;
        gov.nist.core.StackLogger $r13;
        javax.sip.TransactionState $r22;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if r1 != null goto label1;

        $r21 = new javax.sip.SipException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad state ");

        $r22 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<javax.sip.SipException: void <init>(java.lang.String)>($r24);

        throw $r21;

     label1:
        $r2 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 != 0 goto label2;

        $r18 = new javax.sip.SipException;

        specialinvoke $r18.<javax.sip.SipException: void <init>(java.lang.String)>("Can only ACK an INVITE!");

        throw $r18;

     label2:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        if $r3 != null goto label3;

        $r19 = new javax.sip.SipException;

        specialinvoke $r19.<javax.sip.SipException: void <init>(java.lang.String)>("bad Transaction state");

        throw $r19;

     label3:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $i0 = virtualinvoke $r4.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i0 >= 200 goto label5;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z1 = virtualinvoke $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label4;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r13 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastResponse = ");

        $r14 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r16);

     label4:
        $r10 = new javax.sip.SipException;

        specialinvoke $r10.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot ACK a provisional response!");

        throw $r10;

     label5:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ToHeader getTo()>();

        $r7 = (gov.nist.javax.sip.header.To) $r6;

        $r8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createErrorAck(gov.nist.javax.sip.header.To)>($r7);

        return $r8;
    }

    private void inviteClientTransaction(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.stack.SIPDialog r3, $r27, $r39, $r43;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        gov.nist.javax.sip.message.SIPRequest r5, $r18, $r20, $r35, $r55, $r65;
        byte b1;
        java.lang.Throwable r6, $r69;
        java.lang.Exception r7, r8, r9, $r60, $r62, $r66;
        javax.sip.TransactionState $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r24, $r25, $r28, $r36, $r41, $r45, $r48;
        javax.sip.message.Request $r19, $r21, $r34;
        javax.sip.Dialog $r22, $r29, $r37, $r40, $r44;
        gov.nist.javax.sip.stack.ServerResponseInterface $r23, $r26, $r30, $r31, $r32, $r33, $r38, $r42, $r46, $r47, $r51, $r52;
        java.lang.String $r49, $r54, $r63, $r64;
        gov.nist.javax.sip.stack.SIPTransactionStack $r50, $r58, $r61;
        javax.sip.header.CSeqHeader $r53, $r56, $r57;
        long $l8, $l9;
        gov.nist.core.StackLogger $r59, $r67;
        javax.sip.SipException $r68;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r3 := @parameter2: gov.nist.javax.sip.stack.SIPDialog;

        i0 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $r11 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r11 != $r10 goto label06;

        z0 = 0;

        if r3 == null goto label01;

        z1 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        z0 = 0;

        if z1 == 0 goto label01;

        r5 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        z0 = 0;

        if r5 == null goto label01;

        $r55 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r56 = virtualinvoke $r55.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l8 = interfaceinvoke $r56.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r57 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l9 = interfaceinvoke $r57.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        b1 = $l8 cmp $l9;

        z0 = 0;

        if b1 != 0 goto label01;

        $r63 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFromTag()>();

        $r65 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r64 = virtualinvoke $r65.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFromTag()>();

        z2 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>($r64);

        z0 = 0;

        if z2 == 0 goto label01;

        z0 = 1;

     label01:
        if r3 == null goto label04;

        if z0 == 0 goto label04;

        $r53 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r54 = interfaceinvoke $r53.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r49 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>($r49);

        if $z6 == 0 goto label04;

     label02:
        $r50 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z7 = virtualinvoke $r50.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label03;

        $r58 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r59 = virtualinvoke $r58.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r59.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("resending ACK");

     label03:
        virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: void resendAck()>();

     label04:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

     label05:
        return;

     label06:
        $r13 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r13 != $r12 goto label18;

        $i5 = i0 / 100;

        if $i5 != 2 goto label08;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void disableRetransmissionTimer()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void disableTimeoutTimer()>();

        $r45 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r45);

        $r51 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r51 == null goto label07;

        $r52 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r52.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

        return;

     label07:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label08:
        $i6 = i0 / 100;

        if $i6 != 1 goto label10;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void disableRetransmissionTimer()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void disableTimeoutTimer()>();

        $r48 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r48);

        $r47 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r47 == null goto label09;

        $r46 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r46.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

        return;

     label09:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label10:
        if 300 > i0 goto label05;

        if i0 > 699 goto label05;

     label11:
        $r34 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request createErrorAck()>();

        $r35 = (gov.nist.javax.sip.message.SIPRequest) $r34;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>($r35);

     label12:
        $r38 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r38 == null goto label16;

        $r42 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r42.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

     label13:
        $r37 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        if $r37 == null goto label14;

        $r40 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        $r39 = (gov.nist.javax.sip.stack.SIPDialog) $r40;

        $z5 = virtualinvoke $r39.<gov.nist.javax.sip.stack.SIPDialog: boolean isBackToBackUserAgent()>();

        if $z5 == 0 goto label14;

        $r44 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        $r43 = (gov.nist.javax.sip.stack.SIPDialog) $r44;

        virtualinvoke $r43.<gov.nist.javax.sip.stack.SIPDialog: void releaseAckSem()>();

     label14:
        $z4 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z4 != 0 goto label17;

        $r41 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r41);

        $i7 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int TIMER_D>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableTimeoutTimer(int)>($i7);

        return;

     label15:
        $r62 := @caughtexception;

        r9 = $r62;

        $r61 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r67 = virtualinvoke $r61.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r67.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Unexpected Exception sending ACK -- sending error AcK ", r9);

        goto label12;

     label16:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        goto label13;

     label17:
        $r36 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r36);

        return;

     label18:
        $r15 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        $r14 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r15 != $r14 goto label30;

        $i3 = i0 / 100;

        if $i3 != 1 goto label20;

        $r30 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r30 == null goto label19;

        $r31 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r31.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

        return;

     label19:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label20:
        $i2 = i0 / 100;

        if $i2 != 2 goto label22;

        $r28 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r28);

        $r32 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r32 == null goto label21;

        $r33 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r33.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

        return;

     label21:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label22:
        if 300 > i0 goto label05;

        if i0 > 699 goto label05;

     label23:
        $r21 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request createErrorAck()>();

        $r20 = (gov.nist.javax.sip.message.SIPRequest) $r21;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>($r20);

     label24:
        $r22 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        if $r22 == null goto label25;

        $r29 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        $r27 = (gov.nist.javax.sip.stack.SIPDialog) $r29;

        virtualinvoke $r27.<gov.nist.javax.sip.stack.SIPDialog: void releaseAckSem()>();

     label25:
        $z3 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z3 != 0 goto label28;

        $r24 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r24);

        $i4 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int TIMER_D>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableTimeoutTimer(int)>($i4);

     label26:
        $r26 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r26 == null goto label29;

        $r23 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r23.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

        return;

     label27:
        $r60 := @caughtexception;

        r8 = $r60;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r8);

        goto label24;

     label28:
        $r25 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r25);

        goto label26;

     label29:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label30:
        $r17 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r17 != $r16 goto label05;

        if 300 > i0 goto label05;

        if i0 > 699 goto label05;

     label31:
        $r19 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request createErrorAck()>();

        $r18 = (gov.nist.javax.sip.message.SIPRequest) $r19;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>($r18);

     label32:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label33:
        $r66 := @caughtexception;

        r7 = $r66;

     label34:
        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r7);

     label35:
        goto label32;

     label36:
        $r69 := @caughtexception;

        r6 = $r69;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        throw r6;

     label37:
        $r68 := @caughtexception;

        goto label04;

        catch javax.sip.SipException from label02 to label03 with label37;
        catch javax.sip.SipException from label03 to label04 with label37;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label23 to label24 with label27;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    private void nonInviteClientTransaction(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.stack.SIPDialog r3;
        int i0, $i1, $i2, $i3, $i4;
        javax.sip.TransactionState $r4, $r5, $r6, $r7, $r14, $r17, $r18, $r23, $r25, $r26;
        gov.nist.javax.sip.stack.SIPTransactionStack $r8, $r9;
        boolean $z0, $z1, $z2;
        gov.nist.core.StackLogger $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r15;
        gov.nist.javax.sip.stack.ServerResponseInterface $r16, $r19, $r20, $r21, $r22, $r24, $r27, $r28;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r3 := @parameter2: gov.nist.javax.sip.stack.SIPDialog;

        i0 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $r4 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r4 != $r5 goto label07;

        $i3 = i0 / 100;

        if $i3 != 1 goto label03;

        $r25 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r25);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableRetransmissionTimer(int)>(8);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableTimeoutTimer(int)>(64);

        $r27 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r27 == null goto label02;

        $r28 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r28.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

     label01:
        return;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label03:
        if 200 > i0 goto label01;

        if i0 > 699 goto label01;

        $r22 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r22 == null goto label05;

        $r24 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r24.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

     label04:
        $z2 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z2 != 0 goto label06;

        $r26 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r26);

        $i4 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int TIMER_K>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableTimeoutTimer(int)>($i4);

        return;

     label05:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        goto label04;

     label06:
        $r23 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r23);

        return;

     label07:
        $r6 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        $r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r6 != $r7 goto label13;

        $i1 = i0 / 100;

        if $i1 != 1 goto label09;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r21 == null goto label08;

        $r20 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r20.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

        return;

     label08:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;

     label09:
        if 200 > i0 goto label01;

        if i0 > 699 goto label01;

        $r16 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        if $r16 == null goto label11;

        $r19 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo>;

        interfaceinvoke $r19.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r0, r3);

     label10:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void disableRetransmissionTimer()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void disableTimeoutTimer()>();

        $z1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z1 != 0 goto label12;

        $r17 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r17);

        $i2 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int TIMER_K>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableTimeoutTimer(int)>($i2);

        return;

     label11:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        goto label10;

     label12:
        $r18 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r18);

        return;

     label13:
        $r8 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label14;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r10 = virtualinvoke $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Not sending response to TU! ");

        $r14 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r15);

     label14:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void semRelease()>();

        return;
    }

    public void alertIfStillInCallingStateBy(int)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean timeoutIfStillInCallingState> = 1;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int callingStateTimeoutCount> = i0;

        return;
    }

    public boolean checkFromTag(gov.nist.javax.sip.message.SIPResponse)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        java.lang.String r2, $r7, $r9;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        javax.sip.message.Request $r3;
        gov.nist.javax.sip.message.SIPRequest $r4;
        gov.nist.javax.sip.stack.SIPDialog $r5;
        javax.sip.header.FromHeader $r6, $r8;
        gov.nist.javax.sip.stack.SIPTransactionStack $r10, $r11, $r12, $r14;
        gov.nist.core.StackLogger $r13, $r15;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request getRequest()>();

        $r4 = (gov.nist.javax.sip.message.SIPRequest) $r3;

        r2 = virtualinvoke $r4.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFromTag()>();

        $r5 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        if $r5 == null goto label7;

        if r2 != null goto label4;

        z0 = 1;

     label1:
        $r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r7 = interfaceinvoke $r6.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        if $r7 != null goto label5;

        z1 = 1;

     label2:
        $z2 = z0 ^ z1;

        if $z2 == 0 goto label6;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z5 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label3;

        $r14 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r15 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("From tag mismatch -- dropping response");

     label3:
        return 0;

     label4:
        z0 = 0;

        goto label1;

     label5:
        z1 = 0;

        goto label2;

     label6:
        if r2 == null goto label7;

        $r8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r9 = interfaceinvoke $r8.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        $z3 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z3 != 0 goto label7;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z4 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label3;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r13 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r13.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("From tag mismatch -- dropping response");

        return 0;

     label7:
        return 1;
    }

    public void clearState()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        return;
    }

    public javax.sip.message.Request createAck() throws javax.sip.SipException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPRequest r1, r2;
        gov.nist.javax.sip.header.RecordRouteList r3;
        gov.nist.javax.sip.header.RouteList r4, $r19;
        java.util.ListIterator r5;
        gov.nist.javax.sip.header.ContactList r6, $r43, $r52, $r55;
        gov.nist.javax.sip.header.Contact r7, $r60;
        gov.nist.javax.sip.header.Route r8, r9, r11, $r24, $r35, $r40;
        gov.nist.javax.sip.header.RecordRoute r10;
        java.lang.String $r12, $r67, $r74;
        boolean $z0, $z1, $z2, $z5;
        gov.nist.javax.sip.message.SIPResponse $r13, $r14, $r15, $r18, $r20, $r36, $r51, $r54, $r56, $r65;
        int $i0, $i1, $i2, $i3;
        gov.nist.javax.sip.header.To $r16;
        javax.sip.header.ToHeader $r17;
        javax.sip.header.Header $r21, $r32, $r42, $r53;
        javax.sip.address.URI $r22, $r26, $r30, $r31, $r57, $r62;
        javax.sip.address.SipURI $r23;
        javax.sip.address.Address $r25, $r28, $r29, $r33, $r47, $r61;
        java.lang.Object $r27, $r38, $r41, $r45, $r49, $r63;
        gov.nist.javax.sip.address.AddressImpl $r34, $r37, $r39, $r44, $r46;
        gov.nist.core.NameValueList $r48, $r50;
        gov.nist.javax.sip.stack.SIPTransactionStack $r58, $r69;
        javax.sip.SipException $r59, $r66, $r75, $r76;
        java.lang.StringBuilder $r64, $r70, $r71, $r72, $r77, $r78;
        gov.nist.core.StackLogger $r68;
        javax.sip.TransactionState $r73;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if r1 != null goto label01;

        $r75 = new javax.sip.SipException;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad state ");

        $r73 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r72 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r73);

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<javax.sip.SipException: void <init>(java.lang.String)>($r74);

        throw $r75;

     label01:
        $r12 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ACK");

        if $z0 == 0 goto label02;

        $r76 = new javax.sip.SipException;

        specialinvoke $r76.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot ACK an ACK!");

        throw $r76;

     label02:
        $r14 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        if $r14 != null goto label03;

        $r66 = new javax.sip.SipException;

        specialinvoke $r66.<javax.sip.SipException: void <init>(java.lang.String)>("bad Transaction state");

        throw $r66;

     label03:
        $r13 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $i0 = virtualinvoke $r13.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i0 >= 200 goto label05;

        $r58 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z5 = virtualinvoke $r58.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label04;

        $r69 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r68 = virtualinvoke $r69.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastResponse = ");

        $r65 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r64 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r65);

        $r67 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r68.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r67);

     label04:
        $r59 = new javax.sip.SipException;

        specialinvoke $r59.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot ACK a provisional response!");

        throw $r59;

     label05:
        $r15 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r17 = virtualinvoke $r15.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ToHeader getTo()>();

        $r16 = (gov.nist.javax.sip.header.To) $r17;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createAckRequest(gov.nist.javax.sip.header.To)>($r16);

        $r18 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        r3 = virtualinvoke $r18.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.RecordRouteList getRecordRouteHeaders()>();

        if r3 != null goto label07;

        $r54 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r55 = virtualinvoke $r54.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        if $r55 == null goto label06;

        $r56 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $i3 = virtualinvoke $r56.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i2 = $i3 / 100;

        if $i2 == 3 goto label06;

        $r51 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r52 = virtualinvoke $r51.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        $r53 = virtualinvoke $r52.<gov.nist.javax.sip.header.ContactList: javax.sip.header.Header getFirst()>();

        $r60 = (gov.nist.javax.sip.header.Contact) $r53;

        $r61 = virtualinvoke $r60.<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>();

        $r62 = interfaceinvoke $r61.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        $r63 = interfaceinvoke $r62.<javax.sip.address.URI: java.lang.Object clone()>();

        $r57 = (javax.sip.address.URI) $r63;

        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void setRequestURI(javax.sip.address.URI)>($r57);

     label06:
        return r2;

     label07:
        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void removeHeader(java.lang.String)>("Route");

        $r19 = new gov.nist.javax.sip.header.RouteList;

        specialinvoke $r19.<gov.nist.javax.sip.header.RouteList: void <init>()>();

        r4 = $r19;

        $i1 = virtualinvoke r3.<gov.nist.javax.sip.header.RecordRouteList: int size()>();

        r5 = virtualinvoke r3.<gov.nist.javax.sip.header.RecordRouteList: java.util.ListIterator listIterator(int)>($i1);

     label08:
        $z1 = interfaceinvoke r5.<java.util.ListIterator: boolean hasPrevious()>();

        if $z1 == 0 goto label09;

        $r41 = interfaceinvoke r5.<java.util.ListIterator: java.lang.Object previous()>();

        r10 = (gov.nist.javax.sip.header.RecordRoute) $r41;

        $r40 = new gov.nist.javax.sip.header.Route;

        specialinvoke $r40.<gov.nist.javax.sip.header.Route: void <init>()>();

        r11 = $r40;

        $r47 = virtualinvoke r10.<gov.nist.javax.sip.header.RecordRoute: javax.sip.address.Address getAddress()>();

        $r46 = (gov.nist.javax.sip.address.AddressImpl) $r47;

        $r45 = virtualinvoke $r46.<gov.nist.javax.sip.address.AddressImpl: java.lang.Object clone()>();

        $r44 = (gov.nist.javax.sip.address.AddressImpl) $r45;

        virtualinvoke r11.<gov.nist.javax.sip.header.Route: void setAddress(javax.sip.address.Address)>($r44);

        $r50 = virtualinvoke r10.<gov.nist.javax.sip.header.RecordRoute: gov.nist.core.NameValueList getParameters()>();

        $r49 = virtualinvoke $r50.<gov.nist.core.NameValueList: java.lang.Object clone()>();

        $r48 = (gov.nist.core.NameValueList) $r49;

        virtualinvoke r11.<gov.nist.javax.sip.header.Route: void setParameters(gov.nist.core.NameValueList)>($r48);

        virtualinvoke r4.<gov.nist.javax.sip.header.RouteList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r11);

        goto label08;

     label09:
        $r20 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        r6 = virtualinvoke $r20.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        r7 = null;

        if r6 == null goto label10;

        $r36 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r43 = virtualinvoke $r36.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        $r42 = virtualinvoke $r43.<gov.nist.javax.sip.header.ContactList: javax.sip.header.Header getFirst()>();

        r7 = (gov.nist.javax.sip.header.Contact) $r42;

     label10:
        $r21 = virtualinvoke r4.<gov.nist.javax.sip.header.RouteList: javax.sip.header.Header getFirst()>();

        $r24 = (gov.nist.javax.sip.header.Route) $r21;

        $r25 = virtualinvoke $r24.<gov.nist.javax.sip.header.Route: javax.sip.address.Address getAddress()>();

        $r22 = interfaceinvoke $r25.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        $r23 = (javax.sip.address.SipURI) $r22;

        $z2 = interfaceinvoke $r23.<javax.sip.address.SipURI: boolean hasLrParam()>();

        if $z2 != 0 goto label13;

        r8 = null;

        if r7 == null goto label11;

        $r35 = new gov.nist.javax.sip.header.Route;

        specialinvoke $r35.<gov.nist.javax.sip.header.Route: void <init>()>();

        r8 = $r35;

        $r33 = virtualinvoke r7.<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>();

        $r34 = (gov.nist.javax.sip.address.AddressImpl) $r33;

        $r39 = (gov.nist.javax.sip.address.AddressImpl) $r34;

        $r38 = virtualinvoke $r39.<gov.nist.javax.sip.address.AddressImpl: java.lang.Object clone()>();

        $r37 = (gov.nist.javax.sip.address.AddressImpl) $r38;

        virtualinvoke r8.<gov.nist.javax.sip.header.Route: void setAddress(javax.sip.address.Address)>($r37);

     label11:
        $r32 = virtualinvoke r4.<gov.nist.javax.sip.header.RouteList: javax.sip.header.Header getFirst()>();

        r9 = (gov.nist.javax.sip.header.Route) $r32;

        virtualinvoke r4.<gov.nist.javax.sip.header.RouteList: void removeFirst()>();

        $r29 = virtualinvoke r9.<gov.nist.javax.sip.header.Route: javax.sip.address.Address getAddress()>();

        $r30 = interfaceinvoke $r29.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void setRequestURI(javax.sip.address.URI)>($r30);

        if r8 == null goto label12;

        virtualinvoke r4.<gov.nist.javax.sip.header.RouteList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r8);

     label12:
        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void addHeader(javax.sip.header.Header)>(r4);

        return r2;

     label13:
        if r7 == null goto label06;

        $r28 = virtualinvoke r7.<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>();

        $r26 = interfaceinvoke $r28.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        $r27 = interfaceinvoke $r26.<javax.sip.address.URI: java.lang.Object clone()>();

        $r31 = (javax.sip.address.URI) $r27;

        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void setRequestURI(javax.sip.address.URI)>($r31);

        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void addHeader(javax.sip.header.Header)>(r4);

        return r2;
    }

    public javax.sip.message.Request createCancel() throws javax.sip.SipException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPRequest r1, r2;
        java.lang.String $r3, $r4, $r12;
        boolean $z0, $z1;
        javax.sip.SipException $r5, $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        javax.sip.TransactionState $r10;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if r1 != null goto label1;

        $r7 = new javax.sip.SipException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad state ");

        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<javax.sip.SipException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        $r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 != 0 goto label2;

        $r6 = new javax.sip.SipException;

        specialinvoke $r6.<javax.sip.SipException: void <init>(java.lang.String)>("Only INIVTE may be cancelled");

        throw $r6;

     label2:
        $r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ACK");

        if $z1 == 0 goto label3;

        $r5 = new javax.sip.SipException;

        specialinvoke $r5.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot Cancel ACK!");

        throw $r5;

     label3:
        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createCancelRequest()>();

        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void setInviteTransaction(java.lang.Object)>(r0);

        return r2;
    }

    protected void fireRetransmissionTimer()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        boolean z0, $z1, $z2, $z3, $z4;
        javax.sip.TransactionState r2, $r7, $r8, $r12, $r13, $r28, $r29;
        javax.sip.TimeoutEvent r3, r4, $r14, $r17;
        long l0;
        gov.nist.javax.sip.header.TimeStamp r5, $r23;
        float f0;
        javax.sip.InvalidArgumentException r6, $r27;
        gov.nist.javax.sip.stack.SIPTransactionStack $r9;
        gov.nist.javax.sip.message.SIPRequest $r10, $r11, $r20, $r24;
        int $i1, $i2, $i3;
        javax.sip.Timeout $r15, $r22;
        gov.nist.javax.sip.SipProviderImpl $r16, $r18, $r19, $r21;
        javax.sip.header.Header $r25;
        java.io.IOException $r26;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

     label01:
        $r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r7 == null goto label19;

        $z1 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMapped>;

        if $z1 != 0 goto label03;

     label02:
        return;

     label03:
        z0 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isInviteTransaction()>();

        r2 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

     label04:
        if z0 == 0 goto label06;

     label05:
        $r29 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        if $r29 == r2 goto label08;

     label06:
        if z0 != 0 goto label19;

     label07:
        $r8 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        if $r8 == r2 goto label08;

        $r28 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        if $r28 != r2 goto label19;

     label08:
        $r10 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest lastRequest>;

        if $r10 == null goto label19;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z2 = $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean generateTimeStampHeader>;

        if $z2 == 0 goto label12;

        $r20 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest lastRequest>;

        $r25 = virtualinvoke $r20.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Timestamp");

        if $r25 == null goto label12;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r23 = new gov.nist.javax.sip.header.TimeStamp;

        specialinvoke $r23.<gov.nist.javax.sip.header.TimeStamp: void <init>()>();

        r5 = $r23;

     label09:
        f0 = (float) l0;

     label10:
        virtualinvoke r5.<gov.nist.javax.sip.header.TimeStamp: void setTimeStamp(float)>(f0);

     label11:
        $r24 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest lastRequest>;

        virtualinvoke $r24.<gov.nist.javax.sip.message.SIPRequest: void setHeader(javax.sip.header.Header)>(r5);

     label12:
        $r11 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest lastRequest>;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>($r11);

        $z4 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean notifyOnRetransmit>;

        if $z4 == 0 goto label13;

        $r17 = new javax.sip.TimeoutEvent;

        $r21 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        $r22 = <javax.sip.Timeout: javax.sip.Timeout RETRANSMIT>;

        specialinvoke $r17.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>($r21, r0, $r22);

        r3 = $r17;

        $r19 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        virtualinvoke $r19.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r3, r0);

     label13:
        $z3 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean timeoutIfStillInCallingState>;

        if $z3 == 0 goto label19;

        $r13 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r12 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        if $r13 != $r12 goto label19;

        $i2 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int callingStateTimeoutCount>;

        $i1 = -1 + $i2;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int callingStateTimeoutCount> = $i1;

        $i3 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int callingStateTimeoutCount>;

        if $i3 != 0 goto label19;

        $r14 = new javax.sip.TimeoutEvent;

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        $r15 = <javax.sip.Timeout: javax.sip.Timeout RETRANSMIT>;

        specialinvoke $r14.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>($r16, r0, $r15);

        r4 = $r14;

        $r18 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        virtualinvoke $r18.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r4, r0);

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean timeoutIfStillInCallingState> = 0;

     label14:
        return;

     label15:
        $r26 := @caughtexception;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void raiseIOExceptionEvent()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void raiseErrorEvent(int)>(2);

        return;

     label16:
        $r27 := @caughtexception;

        r6 = $r27;

     label17:
        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r6);

     label18:
        goto label11;

     label19:
        return;

        catch java.io.IOException from label01 to label02 with label15;
        catch java.io.IOException from label03 to label04 with label15;
        catch java.io.IOException from label05 to label06 with label15;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.io.IOException from label08 to label09 with label15;
        catch javax.sip.InvalidArgumentException from label10 to label11 with label16;
        catch java.io.IOException from label10 to label11 with label15;
        catch java.io.IOException from label11 to label12 with label15;
        catch java.io.IOException from label12 to label13 with label15;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label17 to label18 with label15;
    }

    protected void fireTimeoutTimer()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0, r2;
        gov.nist.javax.sip.stack.SIPDialog r1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r34;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.sip.Dialog $r4, $r17;
        javax.sip.TransactionState $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r16, $r18, $r19, $r27, $r28, $r30, $r33;
        gov.nist.javax.sip.message.SIPRequest $r10, $r12, $r21, $r25;
        java.lang.String $r11, $r20, $r24, $r35;
        java.lang.Object $r13;
        javax.sip.DialogState $r23, $r26, $r29;
        gov.nist.core.StackLogger $r31;
        java.lang.StringBuilder $r32, $r36, $r37;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r34 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r31 = virtualinvoke $r34.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fireTimeoutTimer ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r35);

     label1:
        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        r1 = (gov.nist.javax.sip.stack.SIPDialog) $r4;

        $r5 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r5 == $r6 goto label2;

        $r30 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        $r27 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r30 == $r27 goto label2;

        $r28 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        $r33 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r28 != $r33 goto label4;

     label2:
        if r1 == null goto label7;

        $r23 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        if $r23 == null goto label3;

        $r26 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r29 = <javax.sip.DialogState: javax.sip.DialogState EARLY>;

        if $r26 != $r29 goto label7;

     label3:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r25 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r24 = virtualinvoke $r25.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = staticinvoke <gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogCreated(java.lang.String)>($r24);

        if $z4 == 0 goto label4;

        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: void delete()>();

     label4:
        $r7 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r7 == $r8 goto label8;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void raiseErrorEvent(int)>(1);

        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CANCEL");

        if $z1 == 0 goto label6;

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getInviteTransaction()>();

        r2 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r13;

        if r2 == null goto label6;

        $r15 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r14 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        if $r15 == $r14 goto label5;

        $r19 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r18 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        if $r19 != $r18 goto label6;

     label5:
        $r17 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        if $r17 == null goto label6;

        $r16 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r16);

     label6:
        return;

     label7:
        if r1 == null goto label4;

        $r21 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r20 = virtualinvoke $r21.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("BYE");

        if $z3 == 0 goto label4;

        $z2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: boolean isTerminatedOnBye()>();

        if $z2 == 0 goto label4;

        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: void delete()>();

        goto label4;

     label8:
        $r9 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r9);

        return;
    }

    public gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.stack.SIPDialog $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        return $r1;
    }

    public gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        gov.nist.javax.sip.stack.SIPDialog $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.util.concurrent.ConcurrentHashMap sipDialogs>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (gov.nist.javax.sip.stack.SIPDialog) $r3;

        return $r4;
    }

    public javax.sip.Dialog getDialog()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPResponse r1, $r18, $r19, $r20, $r22;
        gov.nist.javax.sip.stack.SIPDialog r2, $r13;
        java.lang.String r3, r4, $r16, $r21;
        int i0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r5, $r6;
        boolean $z0;
        gov.nist.core.StackLogger $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r15, $r17;
        java.util.concurrent.ConcurrentHashMap $r10;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        r2 = null;

        if r1 == null goto label1;

        $r18 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        r3 = virtualinvoke $r18.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFromTag()>();

        r2 = null;

        if r3 == null goto label1;

        $r19 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        r4 = virtualinvoke $r19.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getToTag()>();

        r2 = null;

        if r4 == null goto label1;

        $r20 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        i0 = virtualinvoke $r20.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        r2 = null;

        if i0 == 100 goto label1;

        $r22 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        $r21 = virtualinvoke $r22.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        r2 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>($r21);

     label1:
        if r2 != null goto label2;

        r2 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

     label2:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r7 = virtualinvoke $r6.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sipDialogs =  ");

        $r10 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.util.concurrent.ConcurrentHashMap sipDialogs>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" default dialog ");

        $r13 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retval ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r16);

     label3:
        return r2;
    }

    public javax.sip.address.Hop getNextHop()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        javax.sip.address.Hop $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop nextHop>;

        return $r1;
    }

    public gov.nist.javax.sip.header.Via getOutgoingViaHeader()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1;
        gov.nist.javax.sip.header.Via $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.header.Via getViaHeader()>();

        return $r2;
    }

    public gov.nist.javax.sip.stack.MessageChannel getRequestChannel()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        return r0;
    }

    public java.lang.String getViaHost()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String viaHost>;

        return $r1;
    }

    public int getViaPort()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int viaPort>;

        return $i0;
    }

    public boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        gov.nist.javax.sip.header.ViaList r2;
        java.lang.String r3, $r6, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r20, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r35;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        javax.sip.header.Header $r4, $r15, $r26;
        gov.nist.javax.sip.header.Via $r5, $r18, $r29;
        javax.sip.TransactionState $r7, $r8;
        gov.nist.javax.sip.message.SIPRequest $r9, $r19;
        javax.sip.header.CSeqHeader $r21, $r23, $r32;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $r4 = virtualinvoke r2.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        $r5 = (gov.nist.javax.sip.header.Via) $r4;

        r3 = virtualinvoke $r5.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        if $r6 == null goto label3;

        if r3 == null goto label3;

        $r31 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        $r35 = virtualinvoke $r31.<java.lang.String: java.lang.String toLowerCase()>();

        $z11 = virtualinvoke $r35.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z11 == 0 goto label3;

        $r34 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase()>();

        $z10 = virtualinvoke $r34.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z10 == 0 goto label3;

        z0 = 1;

     label1:
        $r7 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r7 != $r8 goto label6;

        if z0 == 0 goto label5;

        $r25 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        $r26 = virtualinvoke r2.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        $r29 = (gov.nist.javax.sip.header.Via) $r26;

        $r30 = virtualinvoke $r29.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $z8 = virtualinvoke $r25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r30);

        if $z8 == 0 goto label4;

        $r28 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $r32 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeq()>();

        $r33 = interfaceinvoke $r32.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z9 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z9 == 0 goto label4;

        z2 = 1;

     label2:
        return z2;

     label3:
        z0 = 0;

        goto label1;

     label4:
        return 0;

     label5:
        $r22 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        $r27 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

        $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        return $z7;

     label6:
        z1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isTerminated()>();

        z2 = 0;

        if z1 != 0 goto label2;

        if z0 == 0 goto label7;

        z2 = 0;

        if r2 == null goto label2;

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        $r15 = virtualinvoke r2.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        $r18 = (gov.nist.javax.sip.header.Via) $r15;

        $r17 = virtualinvoke $r18.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        z3 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r17);

        z2 = 0;

        if z3 == 0 goto label2;

        $r19 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r21 = virtualinvoke $r19.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $r20 = interfaceinvoke $r21.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r23 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeq()>();

        $r24 = interfaceinvoke $r23.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        return $z6;

     label7:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        if $r10 == null goto label8;

        $r13 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        $r14 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14);

        return $z5;

     label8:
        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r12 = virtualinvoke $r9.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r11 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        return $z4;
    }

    public boolean isNotifyOnRetransmit()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean notifyOnRetransmit>;

        return $z0;
    }

    public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0, r9;
        gov.nist.javax.sip.message.SIPResponse r1, r7;
        gov.nist.javax.sip.stack.MessageChannel r2;
        java.lang.String r3, r4, r8, $r12, $r16, $r17, $r26, $r29;
        gov.nist.javax.sip.stack.SIPDialog r5, $r14, $r18, $r20, $r21, $r28;
        int i0;
        java.lang.Throwable r6, $r34;
        javax.sip.header.CSeqHeader $r10, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        gov.nist.javax.sip.stack.SIPTransactionStack $r13, $r15, $r23, $r25, $r27, $r33;
        java.lang.RuntimeException $r19;
        java.lang.NullPointerException $r22;
        gov.nist.core.StackLogger $r24;
        gov.nist.javax.sip.message.SIPRequest $r31, $r32;
        java.lang.Object $r35;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        $r10 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        r3 = interfaceinvoke $r10.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z0 == 0 goto label11;

        $r32 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest lastRequest>;

        if $r32 == null goto label11;

        $r31 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest lastRequest>;

        $r35 = virtualinvoke $r31.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getInviteTransaction()>();

        r9 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r35;

        r5 = null;

        if r9 == null goto label01;

        r5 = r9.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

     label01:
        if r5 != null goto label25;

        i0 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if i0 <= 100 goto label24;

        if i0 >= 300 goto label24;

        $r12 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getToTag()>();

        if $r12 != null goto label02;

        $r33 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z7 = virtualinvoke $r33.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isRfc2543Supported()>();

        if $z7 == 0 goto label24;

     label02:
        $z1 = staticinvoke <gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogCreated(java.lang.String)>(r3);

        if $z1 == 0 goto label24;

        entermonitor r0;

     label03:
        $r14 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        if $r14 == null goto label22;

        $r16 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFromTag()>();

        if $r16 == null goto label21;

        $r18 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        r7 = virtualinvoke $r18.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        $r21 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        r8 = virtualinvoke $r21.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

     label04:
        if r7 == null goto label06;

     label05:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("SUBSCRIBE");

        if $z3 == 0 goto label12;

        $r30 = virtualinvoke r7.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r29 = interfaceinvoke $r30.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z6 == 0 goto label12;

        $z5 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z5 == 0 goto label12;

     label06:
        $r20 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>(r0, r1);

        r5 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

     label07:
        if r5 == null goto label16;

     label08:
        $r26 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r5, $r26);

     label09:
        exitmonitor r0;

     label10:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r2, r5);

        return;

     label11:
        r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r4);

        goto label01;

     label12:
        $r25 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r5 = virtualinvoke $r25.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r4);

     label13:
        if r5 != null goto label07;

     label14:
        $r28 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        $z4 = virtualinvoke $r28.<gov.nist.javax.sip.stack.SIPDialog: boolean isAssigned()>();

        if $z4 == 0 goto label07;

        $r27 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r5 = virtualinvoke $r27.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.message.SIPResponse)>(r0, r1);

     label15:
        goto label07;

     label16:
        $r23 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r24 = virtualinvoke $r23.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r22 = new java.lang.NullPointerException;

        specialinvoke $r22.<java.lang.NullPointerException: void <init>()>();

        interfaceinvoke $r24.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("dialog is unexpectedly null", $r22);

     label17:
        goto label09;

     label18:
        $r34 := @caughtexception;

        r6 = $r34;

     label19:
        exitmonitor r0;

     label20:
        throw r6;

     label21:
        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("Response without from-tag");

        throw $r19;

     label22:
        $r13 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z2 = $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogSupportEnabled>;

        if $z2 == 0 goto label09;

        $r15 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r5 = virtualinvoke $r15.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.message.SIPResponse)>(r0, r1);

        $r17 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r5, $r17);

     label23:
        goto label09;

     label24:
        r5 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        goto label10;

     label25:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>(r0, r1);

        goto label10;

        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label21 to label22 with label18;
        catch java.lang.Throwable from label22 to label23 with label18;
    }

    public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.stack.SIPDialog r3;
        java.lang.Throwable r4, $r33;
        javax.sip.TransactionState r5, $r7, $r8, $r18, $r25, $r28, $r29;
        java.io.IOException r6, $r26;
        int $i0, $i1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r9, $r10, $r19, $r30, $r31;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r11, $r14, $r15, $r16, $r17, $r21, $r23, $r24;
        gov.nist.core.StackLogger $r12, $r22, $r32;
        java.lang.String $r13, $r20, $r27;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r3 := @parameter2: gov.nist.javax.sip.stack.SIPDialog;

        entermonitor r0;

     label01:
        r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

     label02:
        if r5 != null goto label04;

     label03:
        exitmonitor r0;

        return;

     label04:
        $r7 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r7 == $r8 goto label05;

        $r28 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        $r25 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r28 != $r25 goto label06;

     label05:
        $i0 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i1 = $i0 / 100;

        if $i1 == 1 goto label03;

     label06:
        $r9 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label07;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r12 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processing ");

        $r13 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFirstLine()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current state = ");

        $r18 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r20);

        $r19 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r22 = virtualinvoke $r19.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog = ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r27);

     label07:
        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse> = r1;

     label08:
        $z1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isInviteTransaction()>();

        if $z1 == 0 goto label15;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void inviteClientTransaction(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r2, r3);

     label09:
        goto label03;

     label10:
        $r26 := @caughtexception;

        r6 = $r26;

     label11:
        $r31 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z2 = virtualinvoke $r31.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label12;

        $r30 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r32 = virtualinvoke $r30.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r32.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r6);

     label12:
        $r29 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r29);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void raiseErrorEvent(int)>(2);

     label13:
        goto label03;

     label14:
        $r33 := @caughtexception;

        r4 = $r33;

        exitmonitor r0;

        throw r4;

     label15:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void nonInviteClientTransaction(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>(r1, r2, r3);

     label16:
        goto label03;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label10;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.lang.Throwable r2, $r38;
        gov.nist.javax.sip.message.SIPRequest r3;
        gov.nist.javax.sip.header.Via r4;
        java.io.IOException r6, $r40;
        gov.nist.javax.sip.header.ViaList $r7;
        javax.sip.header.Header $r8;
        java.lang.String $r9, $r13, $r14, $r16, $r31, $r34;
        gov.nist.javax.sip.stack.SIPTransactionStack $r10, $r23, $r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        javax.sip.TransactionState $r11, $r12, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r36, $r37;
        java.lang.StringBuilder $r25, $r26, $r28, $r30, $r33, $r35;
        gov.nist.core.StackLogger $r27, $r29;
        java.text.ParseException $r39;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

     label01:
        r3 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r7 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        r4 = (gov.nist.javax.sip.header.Via) $r8;

     label02:
        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getBranch()>();

        virtualinvoke r4.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>($r9);

     label03:
        $r10 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label04;

        $r23 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r27 = virtualinvoke $r23.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending Message ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r31);

        $r32 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r29 = virtualinvoke $r32.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TransactionState ");

        $r36 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r34);

     label04:
        $r11 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r11 == $r12 goto label05;

        $r21 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        $r24 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r21 != $r24 goto label12;

     label05:
        $r13 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z1 == 0 goto label12;

        $z6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z6 == 0 goto label09;

        $r22 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r22);

     label06:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r3);

     label07:
        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMapped> = 1;

     label08:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void startTransactionTimer()>();

        return;

     label09:
        $r20 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r20);

     label10:
        goto label06;

     label11:
        $r38 := @caughtexception;

        r2 = $r38;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMapped> = 1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void startTransactionTimer()>();

        throw r2;

     label12:
        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest lastRequest> = r3;

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r15 != null goto label15;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r3);

        $r14 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z2 == 0 goto label17;

        $r18 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r18);

     label13:
        $z5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z5 != 0 goto label14;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableRetransmissionTimer()>();

     label14:
        $z4 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isInviteTransaction()>();

        if $z4 == 0 goto label23;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableTimeoutTimer(int)>(64);

     label15:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r3);

     label16:
        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMapped> = 1;

        goto label08;

     label17:
        $r16 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z3 == 0 goto label21;

        $r19 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r19);

     label18:
        goto label13;

     label19:
        $r40 := @caughtexception;

        r6 = $r40;

     label20:
        $r37 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r37);

        throw r6;

     label21:
        $r17 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r17);

     label22:
        goto label13;

     label23:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void enableTimeoutTimer(int)>(64);

     label24:
        goto label15;

     label25:
        $r39 := @caughtexception;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.text.ParseException from label02 to label03 with label25;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.io.IOException from label13 to label14 with label19;
        catch java.lang.Throwable from label13 to label14 with label11;
        catch java.io.IOException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label11;
        catch java.io.IOException from label15 to label16 with label19;
        catch java.lang.Throwable from label15 to label16 with label11;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label11;
        catch java.lang.Throwable from label20 to label21 with label11;
        catch java.io.IOException from label21 to label22 with label19;
        catch java.lang.Throwable from label21 to label22 with label11;
        catch java.io.IOException from label23 to label24 with label19;
        catch java.lang.Throwable from label23 to label24 with label11;
    }

    public void sendRequest() throws javax.sip.SipException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0, r6;
        gov.nist.javax.sip.message.SIPRequest r1, $r10, $r13, $r16, $r22, $r24;
        java.text.ParseException r2, $r42;
        java.io.IOException r3, $r49;
        gov.nist.javax.sip.stack.SIPDialog r4, r5;
        javax.sip.TransactionState $r7, $r28, $r50;
        gov.nist.javax.sip.stack.SIPTransactionStack $r8, $r14, $r21, $r26, $r31, $r34, $r36, $r41, $r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.String $r9, $r11, $r12, $r15, $r18, $r23, $r29, $r44, $r46;
        gov.nist.javax.sip.SipProviderImpl $r17;
        javax.sip.SipException $r19, $r20, $r27, $r32, $r33, $r43, $r47, $r51;
        gov.nist.javax.sip.stack.SIPTransaction $r25;
        javax.sip.header.Header $r30;
        gov.nist.core.StackLogger $r35, $r40, $r48;
        java.lang.StringBuilder $r37, $r38, $r39;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r7 == null goto label01;

        $r43 = new javax.sip.SipException;

        specialinvoke $r43.<javax.sip.SipException: void <init>(java.lang.String)>("Request already sent");

        throw $r43;

     label01:
        $r8 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label02;

        $r34 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r40 = virtualinvoke $r34.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendRequest() ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r44 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r40.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r44);

     label02:
        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void checkHeaders()>();

     label03:
        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("SUBSCRIBE");

        if $z1 == 0 goto label04;

        $r30 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Expires");

        if $r30 != null goto label04;

        $r31 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z11 = virtualinvoke $r31.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label04;

        $r36 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r35 = virtualinvoke $r36.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r35.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Expires header missing in outgoing subscribe -- Notifier will assume implied value on event package");

     label04:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z2 == 0 goto label12;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z9 = virtualinvoke $r21.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isCancelClientTransactionChecked()>();

        if $z9 == 0 goto label12;

        $r26 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r24 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r25 = virtualinvoke $r26.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)>($r24, 0);

        r6 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r25;

     label05:
        if r6 != null goto label10;

     label06:
        $r33 = new javax.sip.SipException;

        specialinvoke $r33.<javax.sip.SipException: void <init>(java.lang.String)>("Could not find original tx to cancel. RFC 3261 9.1");

        throw $r33;

     label07:
        $r49 := @caughtexception;

        r3 = $r49;

        $r50 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r50);

        $r51 = new javax.sip.SipException;

        specialinvoke $r51.<javax.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("IO Error sending request", r3);

        throw $r51;

     label08:
        $r42 := @caughtexception;

        r2 = $r42;

        $r41 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z12 = virtualinvoke $r41.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label09;

        $r45 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r48 = virtualinvoke $r45.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r48.<gov.nist.core.StackLogger: void logError(java.lang.String)>("missing required header");

     label09:
        $r47 = new javax.sip.SipException;

        $r46 = virtualinvoke r2.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke $r47.<javax.sip.SipException: void <init>(java.lang.String)>($r46);

        throw $r47;

     label10:
        $r28 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r28 != null goto label11;

        $r32 = new javax.sip.SipException;

        specialinvoke $r32.<javax.sip.SipException: void <init>(java.lang.String)>("State is null no provisional response yet -- cannot cancel RFC 3261 9.1");

        throw $r32;

     label11:
        $r29 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z10 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z10 != 0 goto label16;

        $r27 = new javax.sip.SipException;

        specialinvoke $r27.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot cancel non-invite requests RFC 3261 9.1");

        throw $r27;

     label12:
        $r13 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r12 = virtualinvoke $r13.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("BYE");

        if $z3 != 0 goto label13;

        $r22 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r23 = virtualinvoke $r22.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z8 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z8 == 0 goto label16;

     label13:
        $r14 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r15 = virtualinvoke $r16.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        r4 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>($r15);

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        $z4 = virtualinvoke $r17.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z4 == 0 goto label16;

     label14:
        if r4 == null goto label16;

     label15:
        $r19 = new javax.sip.SipException;

        specialinvoke $r19.<javax.sip.SipException: void <init>(java.lang.String)>("Dialog is present and AutomaticDialogSupport is enabled for  the provider -- Send the Request using the Dialog.sendRequest(transaction)");

        throw $r19;

     label16:
        $r18 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z5 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z5 == 0 goto label19;

        r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()>();

     label17:
        if r5 == null goto label19;

     label18:
        $z7 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: boolean isBackToBackUserAgent()>();

        if $z7 == 0 goto label19;

        $z6 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: boolean takeAckSem()>();

        if $z6 != 0 goto label19;

        $r20 = new javax.sip.SipException;

        specialinvoke $r20.<javax.sip.SipException: void <init>(java.lang.String)>("Failed to take ACK semaphore");

        throw $r20;

     label19:
        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMapped> = 1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r1);

     label20:
        return;

        catch java.text.ParseException from label02 to label03 with label08;
        catch java.io.IOException from label04 to label05 with label07;
        catch java.io.IOException from label06 to label07 with label07;
        catch java.io.IOException from label10 to label11 with label07;
        catch java.io.IOException from label11 to label12 with label07;
        catch java.io.IOException from label12 to label13 with label07;
        catch java.io.IOException from label13 to label14 with label07;
        catch java.io.IOException from label15 to label16 with label07;
        catch java.io.IOException from label16 to label17 with label07;
        catch java.io.IOException from label18 to label19 with label07;
        catch java.io.IOException from label19 to label20 with label07;
    }

    public void setDialog(gov.nist.javax.sip.stack.SIPDialog, java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.stack.SIPDialog r1, $r4;
        java.lang.String r2, $r5, $r8, $r22;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r9, $r10, $r11, $r12, $r14;
        boolean $z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap $r6;
        int $i0;
        java.lang.NullPointerException $r13;
        gov.nist.core.StackLogger $r15, $r17;
        java.lang.StringBuilder $r16, $r18, $r19, $r20, $r21;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPDialog;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r14 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r17 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDialog: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sipDialog = ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r22);

     label1:
        if r1 != null goto label3;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z2 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label2;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r15 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logError(java.lang.String)>("NULL DIALOG!!");

     label2:
        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("bad dialog null");

        throw $r13;

     label3:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog>;

        if $r4 != null goto label4;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog defaultDialog> = r1;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $i0 = $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime>;

        if $i0 == 0 goto label4;

        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: void addForkedClientTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)>(r0);

     label4:
        if r2 == null goto label5;

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        if $r5 == null goto label5;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.util.concurrent.ConcurrentHashMap sipDialogs>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

     label5:
        return;
    }

    public void setNextHop(javax.sip.address.Hop)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        javax.sip.address.Hop r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: javax.sip.address.Hop;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop nextHop> = r1;

        return;
    }

    public void setNotifyOnRetransmit(boolean)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean notifyOnRetransmit> = z0;

        return;
    }

    public void setResponseInterface(gov.nist.javax.sip.stack.ServerResponseInterface)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.stack.ServerResponseInterface r1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r2, $r3, $r11, $r13;
        boolean $z0;
        gov.nist.core.StackLogger $r4, $r12, $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: gov.nist.javax.sip.stack.ServerResponseInterface;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting response interface for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r10);

        if r1 != null goto label1;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logStackTrace()>();

        $r13 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r14 = virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("WARNING -- setting to null!");

     label1:
        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.ServerResponseInterface respondTo> = r1;

        return;
    }

    public void setState(javax.sip.TransactionState)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        javax.sip.TransactionState r1, $r2, $r3, $r4, $r5, $r7;
        gov.nist.javax.sip.stack.SIPTransactionStack $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: javax.sip.TransactionState;

        $r2 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if r1 != $r2 goto label1;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $z1 = $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheClientConnections>;

        if $z1 != 0 goto label1;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int collectionTime> = 64;

     label1:
        $r3 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r4 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        if $r3 == $r4 goto label3;

        $r5 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        if r1 == $r5 goto label2;

        $r7 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if r1 != $r7 goto label3;

     label2:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        virtualinvoke $r6.<gov.nist.javax.sip.stack.SIPTransactionStack: void decrementActiveClientTransactionCount()>();

     label3:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)>(r1);

        return;
    }

    protected void setViaHost(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String viaHost> = r1;

        return;
    }

    protected void setViaPort(int)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int viaPort> = i0;

        return;
    }

    protected void startTransactionTimer()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer r1, $r3;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r4, $r6;
        java.util.Timer $r5, $r7;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: java.util.concurrent.atomic.AtomicBoolean transactionTimerStarted>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        $r3 = new gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer;

        specialinvoke $r3.<gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer: void <init>(gov.nist.javax.sip.stack.SIPClientTransaction)>(r0);

        r1 = $r3;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()>();

        if $r5 == null goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r7 = virtualinvoke $r6.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()>();

        $i0 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int BASE_TIMER_INTERVAL>;

        $l3 = (long) $i0;

        $i1 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction: int BASE_TIMER_INTERVAL>;

        $l2 = (long) $i1;

        virtualinvoke $r7.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>(r1, $l3, $l2);

     label1:
        return;
    }

    public void terminate() throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.stack.SIPClientTransaction r0;
        javax.sip.TransactionState $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r1 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>($r1);

        return;
    }
}
