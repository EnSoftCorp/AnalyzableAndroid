public class android.view.ScaleGestureDetector extends java.lang.Object
{
    private static final int DOUBLE_TAP_MODE_IN_PROGRESS;
    private static final int DOUBLE_TAP_MODE_NONE;
    private static final float SCALE_FACTOR;
    private static final java.lang.String TAG;
    private static final long TOUCH_STABILIZE_TIME;
    private final android.content.Context mContext;
    private float mCurrSpan;
    private float mCurrSpanX;
    private float mCurrSpanY;
    private long mCurrTime;
    private android.view.MotionEvent mDoubleTapEvent;
    private int mDoubleTapMode;
    private boolean mEventBeforeOrAboveStartingGestureEvent;
    private float mFocusX;
    private float mFocusY;
    private android.view.GestureDetector mGestureDetector;
    private final android.os.Handler mHandler;
    private boolean mInProgress;
    private float mInitialSpan;
    private final android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier;
    private final android.view.ScaleGestureDetector$OnScaleGestureListener mListener;
    private int mMinSpan;
    private float mPrevSpan;
    private float mPrevSpanX;
    private float mPrevSpanY;
    private long mPrevTime;
    private boolean mQuickScaleEnabled;
    private int mSpanSlop;
    private int mTouchHistoryDirection;
    private float mTouchHistoryLastAccepted;
    private long mTouchHistoryLastAcceptedTime;
    private float mTouchLower;
    private int mTouchMinMajor;
    private float mTouchUpper;

    public void <init>(android.content.Context, android.view.ScaleGestureDetector$OnScaleGestureListener)
    {
        android.view.ScaleGestureDetector r0;
        android.content.Context r1;
        android.view.ScaleGestureDetector$OnScaleGestureListener r2;

        r0 := @this: android.view.ScaleGestureDetector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.ScaleGestureDetector$OnScaleGestureListener;

        specialinvoke r0.<android.view.ScaleGestureDetector: void <init>(android.content.Context,android.view.ScaleGestureDetector$OnScaleGestureListener,android.os.Handler)>(r1, r2, null);

        return;
    }

    public void <init>(android.content.Context, android.view.ScaleGestureDetector$OnScaleGestureListener, android.os.Handler)
    {
        android.view.ScaleGestureDetector r0;
        android.content.Context r1;
        android.view.ScaleGestureDetector$OnScaleGestureListener r2;
        android.os.Handler r3;
        android.view.InputEventConsistencyVerifier r4, $r8;
        android.content.res.Resources r5;
        boolean $z0;
        android.view.ViewConfiguration $r6;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.pm.ApplicationInfo $r7;

        r0 := @this: android.view.ScaleGestureDetector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.ScaleGestureDetector$OnScaleGestureListener;

        r3 := @parameter2: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.ScaleGestureDetector: int mDoubleTapMode> = 0;

        $z0 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z0 == 0 goto label3;

        $r8 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r8.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        r4 = $r8;

     label1:
        r0.<android.view.ScaleGestureDetector: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = r4;

        r0.<android.view.ScaleGestureDetector: android.content.Context mContext> = r1;

        r0.<android.view.ScaleGestureDetector: android.view.ScaleGestureDetector$OnScaleGestureListener mListener> = r2;

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i0 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $i1 = 2 * $i0;

        r0.<android.view.ScaleGestureDetector: int mSpanSlop> = $i1;

        r5 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke r5.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104906);

        r0.<android.view.ScaleGestureDetector: int mTouchMinMajor> = $i2;

        $i3 = virtualinvoke r5.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104905);

        r0.<android.view.ScaleGestureDetector: int mMinSpan> = $i3;

        r0.<android.view.ScaleGestureDetector: android.os.Handler mHandler> = r3;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i4 = $r7.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i4 <= 18 goto label2;

        virtualinvoke r0.<android.view.ScaleGestureDetector: void setQuickScaleEnabled(boolean)>(1);

     label2:
        return;

     label3:
        r4 = null;

        goto label1;
    }

    static android.view.MotionEvent access$002(android.view.ScaleGestureDetector, android.view.MotionEvent)
    {
        android.view.ScaleGestureDetector r0;
        android.view.MotionEvent r1;

        r0 := @parameter0: android.view.ScaleGestureDetector;

        r1 := @parameter1: android.view.MotionEvent;

        r0.<android.view.ScaleGestureDetector: android.view.MotionEvent mDoubleTapEvent> = r1;

        return r1;
    }

    static int access$102(android.view.ScaleGestureDetector, int)
    {
        android.view.ScaleGestureDetector r0;
        int i0;

        r0 := @parameter0: android.view.ScaleGestureDetector;

        i0 := @parameter1: int;

        r0.<android.view.ScaleGestureDetector: int mDoubleTapMode> = i0;

        return i0;
    }

    private void addTouchHistory(android.view.MotionEvent)
    {
        android.view.ScaleGestureDetector r0;
        android.view.MotionEvent r1;
        long l0, l7, $l9, $l11, $l12;
        int i1, i2, i3, i4, i5, i6, i8, $i14, $i15, $i17, $i18;
        boolean z0, z1, $z2, $z3, $z4;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        byte $b10, $b13, $b16, $b19;

        r0 := @this: android.view.ScaleGestureDetector;

        r1 := @parameter0: android.view.MotionEvent;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        $l9 = r0.<android.view.ScaleGestureDetector: long mTouchHistoryLastAcceptedTime>;

        $l11 = l0 - $l9;

        $b10 = $l11 cmp 128L;

        if $b10 < 0 goto label14;

        z0 = 1;

     label01:
        f0 = 0.0F;

        i2 = 0;

        i3 = 0;

     label02:
        if i3 >= i1 goto label19;

        $f15 = r0.<android.view.ScaleGestureDetector: float mTouchHistoryLastAccepted>;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f15);

        if $z2 != 0 goto label15;

        z1 = 1;

     label03:
        i4 = virtualinvoke r1.<android.view.MotionEvent: int getHistorySize()>();

        i5 = i4 + 1;

        i6 = 0;

     label04:
        if i6 >= i5 goto label18;

        if i6 >= i4 goto label16;

        f3 = virtualinvoke r1.<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>(i3, i6);

     label05:
        $i14 = r0.<android.view.ScaleGestureDetector: int mTouchMinMajor>;

        $f17 = (float) $i14;

        $b13 = f3 cmpg $f17;

        if $b13 >= 0 goto label06;

        $i18 = r0.<android.view.ScaleGestureDetector: int mTouchMinMajor>;

        f3 = (float) $i18;

     label06:
        f0 = f0 + f3;

        $f16 = r0.<android.view.ScaleGestureDetector: float mTouchUpper>;

        $z4 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f16);

        if $z4 != 0 goto label07;

        $f23 = r0.<android.view.ScaleGestureDetector: float mTouchUpper>;

        $b19 = f3 cmpl $f23;

        if $b19 <= 0 goto label08;

     label07:
        r0.<android.view.ScaleGestureDetector: float mTouchUpper> = f3;

     label08:
        $f19 = r0.<android.view.ScaleGestureDetector: float mTouchLower>;

        $z3 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f19);

        if $z3 != 0 goto label09;

        $f22 = r0.<android.view.ScaleGestureDetector: float mTouchLower>;

        $b16 = f3 cmpg $f22;

        if $b16 >= 0 goto label10;

     label09:
        r0.<android.view.ScaleGestureDetector: float mTouchLower> = f3;

     label10:
        if z1 == 0 goto label13;

        $f18 = r0.<android.view.ScaleGestureDetector: float mTouchHistoryLastAccepted>;

        $f21 = f3 - $f18;

        $f20 = staticinvoke <java.lang.Math: float signum(float)>($f21);

        i8 = (int) $f20;

        $i15 = r0.<android.view.ScaleGestureDetector: int mTouchHistoryDirection>;

        if i8 != $i15 goto label11;

        if i8 != 0 goto label13;

        $i17 = r0.<android.view.ScaleGestureDetector: int mTouchHistoryDirection>;

        if $i17 != 0 goto label13;

     label11:
        r0.<android.view.ScaleGestureDetector: int mTouchHistoryDirection> = i8;

        if i6 >= i4 goto label17;

        l7 = virtualinvoke r1.<android.view.MotionEvent: long getHistoricalEventTime(int)>(i6);

     label12:
        r0.<android.view.ScaleGestureDetector: long mTouchHistoryLastAcceptedTime> = l7;

        z0 = 0;

     label13:
        i6 = i6 + 1;

        goto label04;

     label14:
        z0 = 0;

        goto label01;

     label15:
        z1 = 0;

        goto label03;

     label16:
        f3 = virtualinvoke r1.<android.view.MotionEvent: float getTouchMajor(int)>(i3);

        goto label05;

     label17:
        l7 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        goto label12;

     label18:
        i2 = i2 + i5;

        i3 = i3 + 1;

        goto label02;

     label19:
        $f5 = (float) i2;

        f1 = f0 / $f5;

        if z0 == 0 goto label20;

        $f7 = r0.<android.view.ScaleGestureDetector: float mTouchUpper>;

        $f4 = r0.<android.view.ScaleGestureDetector: float mTouchLower>;

        $f6 = $f7 + $f4;

        $f9 = f1 + $f6;

        f2 = $f9 / 3.0F;

        $f8 = r0.<android.view.ScaleGestureDetector: float mTouchUpper>;

        $f11 = f2 + $f8;

        $f10 = $f11 / 2.0F;

        r0.<android.view.ScaleGestureDetector: float mTouchUpper> = $f10;

        $f13 = r0.<android.view.ScaleGestureDetector: float mTouchLower>;

        $f14 = f2 + $f13;

        $f12 = $f14 / 2.0F;

        r0.<android.view.ScaleGestureDetector: float mTouchLower> = $f12;

        r0.<android.view.ScaleGestureDetector: float mTouchHistoryLastAccepted> = f2;

        r0.<android.view.ScaleGestureDetector: int mTouchHistoryDirection> = 0;

        $l12 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        r0.<android.view.ScaleGestureDetector: long mTouchHistoryLastAcceptedTime> = $l12;

     label20:
        return;
    }

    private void clearTouchHistory()
    {
        android.view.ScaleGestureDetector r0;

        r0 := @this: android.view.ScaleGestureDetector;

        r0.<android.view.ScaleGestureDetector: float mTouchUpper> = #NaNF;

        r0.<android.view.ScaleGestureDetector: float mTouchLower> = #NaNF;

        r0.<android.view.ScaleGestureDetector: float mTouchHistoryLastAccepted> = #NaNF;

        r0.<android.view.ScaleGestureDetector: int mTouchHistoryDirection> = 0;

        r0.<android.view.ScaleGestureDetector: long mTouchHistoryLastAcceptedTime> = 0L;

        return;
    }

    private boolean inDoubleTapMode()
    {
        android.view.ScaleGestureDetector r0;
        int $i0;

        r0 := @this: android.view.ScaleGestureDetector;

        $i0 = r0.<android.view.ScaleGestureDetector: int mDoubleTapMode>;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public float getCurrentSpan()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mCurrSpan>;

        return $f0;
    }

    public float getCurrentSpanX()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mCurrSpanX>;

        return $f0;
    }

    public float getCurrentSpanY()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mCurrSpanY>;

        return $f0;
    }

    public long getEventTime()
    {
        android.view.ScaleGestureDetector r0;
        long $l0;

        r0 := @this: android.view.ScaleGestureDetector;

        $l0 = r0.<android.view.ScaleGestureDetector: long mCurrTime>;

        return $l0;
    }

    public float getFocusX()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mFocusX>;

        return $f0;
    }

    public float getFocusY()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mFocusY>;

        return $f0;
    }

    public float getPreviousSpan()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mPrevSpan>;

        return $f0;
    }

    public float getPreviousSpanX()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mPrevSpanX>;

        return $f0;
    }

    public float getPreviousSpanY()
    {
        android.view.ScaleGestureDetector r0;
        float $f0;

        r0 := @this: android.view.ScaleGestureDetector;

        $f0 = r0.<android.view.ScaleGestureDetector: float mPrevSpanY>;

        return $f0;
    }

    public float getScaleFactor()
    {
        android.view.ScaleGestureDetector r0;
        boolean z0, $z1, $z2, $z3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: android.view.ScaleGestureDetector;

        $z1 = specialinvoke r0.<android.view.ScaleGestureDetector: boolean inDoubleTapMode()>();

        if $z1 == 0 goto label8;

        $z2 = r0.<android.view.ScaleGestureDetector: boolean mEventBeforeOrAboveStartingGestureEvent>;

        if $z2 == 0 goto label1;

        $f15 = r0.<android.view.ScaleGestureDetector: float mCurrSpan>;

        $f16 = r0.<android.view.ScaleGestureDetector: float mPrevSpan>;

        $b3 = $f15 cmpg $f16;

        if $b3 < 0 goto label2;

     label1:
        $z3 = r0.<android.view.ScaleGestureDetector: boolean mEventBeforeOrAboveStartingGestureEvent>;

        if $z3 != 0 goto label5;

        $f14 = r0.<android.view.ScaleGestureDetector: float mCurrSpan>;

        $f12 = r0.<android.view.ScaleGestureDetector: float mPrevSpan>;

        $b2 = $f14 cmpl $f12;

        if $b2 <= 0 goto label5;

     label2:
        z0 = 1;

     label3:
        $f6 = r0.<android.view.ScaleGestureDetector: float mCurrSpan>;

        $f5 = r0.<android.view.ScaleGestureDetector: float mPrevSpan>;

        $f7 = $f6 / $f5;

        $f8 = 1.0F - $f7;

        $f10 = staticinvoke <java.lang.Math: float abs(float)>($f8);

        f0 = 0.5F * $f10;

        $f9 = r0.<android.view.ScaleGestureDetector: float mPrevSpan>;

        $b1 = $f9 cmpg 0.0F;

        if $b1 > 0 goto label6;

     label4:
        return 1.0F;

     label5:
        z0 = 0;

        goto label3;

     label6:
        if z0 == 0 goto label7;

        $f13 = 1.0F + f0;

        return $f13;

     label7:
        $f11 = 1.0F - f0;

        return $f11;

     label8:
        $f1 = r0.<android.view.ScaleGestureDetector: float mPrevSpan>;

        $b0 = $f1 cmpl 0.0F;

        if $b0 <= 0 goto label4;

        $f3 = r0.<android.view.ScaleGestureDetector: float mCurrSpan>;

        $f2 = r0.<android.view.ScaleGestureDetector: float mPrevSpan>;

        $f4 = $f3 / $f2;

        return $f4;
    }

    public long getTimeDelta()
    {
        android.view.ScaleGestureDetector r0;
        long $l0, $l1, $l2;

        r0 := @this: android.view.ScaleGestureDetector;

        $l1 = r0.<android.view.ScaleGestureDetector: long mCurrTime>;

        $l0 = r0.<android.view.ScaleGestureDetector: long mPrevTime>;

        $l2 = $l1 - $l0;

        return $l2;
    }

    public boolean isInProgress()
    {
        android.view.ScaleGestureDetector r0;
        boolean $z0;

        r0 := @this: android.view.ScaleGestureDetector;

        $z0 = r0.<android.view.ScaleGestureDetector: boolean mInProgress>;

        return $z0;
    }

    public boolean isQuickScaleEnabled()
    {
        android.view.ScaleGestureDetector r0;
        boolean $z0;

        r0 := @this: android.view.ScaleGestureDetector;

        $z0 = r0.<android.view.ScaleGestureDetector: boolean mQuickScaleEnabled>;

        return $z0;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.view.ScaleGestureDetector r0;
        android.view.MotionEvent r1, $r7, $r8;
        int i0, i1, i2, i3, i4, i5, i6, $i8, $i9, $i14, $i15;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39;
        long $l7, $l10, $l11;
        android.view.InputEventConsistencyVerifier $r2, $r10;
        android.view.ScaleGestureDetector$OnScaleGestureListener $r3, $r4, $r5, $r6;
        byte $b12, $b13, $b16, $b17;
        android.view.GestureDetector $r9;

        r0 := @this: android.view.ScaleGestureDetector;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.ScaleGestureDetector: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r2 == null goto label01;

        $r10 = r0.<android.view.ScaleGestureDetector: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r10.<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>(r1, 0);

     label01:
        $l7 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        r0.<android.view.ScaleGestureDetector: long mCurrTime> = $l7;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        $z5 = r0.<android.view.ScaleGestureDetector: boolean mQuickScaleEnabled>;

        if $z5 == 0 goto label02;

        $r9 = r0.<android.view.ScaleGestureDetector: android.view.GestureDetector mGestureDetector>;

        virtualinvoke $r9.<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)>(r1);

     label02:
        if i0 == 1 goto label03;

        if i0 != 3 goto label07;

     label03:
        z0 = 1;

     label04:
        if i0 == 0 goto label05;

        if z0 == 0 goto label09;

     label05:
        $z6 = r0.<android.view.ScaleGestureDetector: boolean mInProgress>;

        if $z6 == 0 goto label08;

        $r6 = r0.<android.view.ScaleGestureDetector: android.view.ScaleGestureDetector$OnScaleGestureListener mListener>;

        interfaceinvoke $r6.<android.view.ScaleGestureDetector$OnScaleGestureListener: void onScaleEnd(android.view.ScaleGestureDetector)>(r0);

        r0.<android.view.ScaleGestureDetector: boolean mInProgress> = 0;

        r0.<android.view.ScaleGestureDetector: float mInitialSpan> = 0.0F;

        r0.<android.view.ScaleGestureDetector: int mDoubleTapMode> = 0;

     label06:
        if z0 == 0 goto label09;

        specialinvoke r0.<android.view.ScaleGestureDetector: void clearTouchHistory()>();

        return 1;

     label07:
        z0 = 0;

        goto label04;

     label08:
        $i8 = r0.<android.view.ScaleGestureDetector: int mDoubleTapMode>;

        if $i8 != 1 goto label06;

        if z0 == 0 goto label06;

        r0.<android.view.ScaleGestureDetector: boolean mInProgress> = 0;

        r0.<android.view.ScaleGestureDetector: float mInitialSpan> = 0.0F;

        r0.<android.view.ScaleGestureDetector: int mDoubleTapMode> = 0;

        goto label06;

     label09:
        if i0 == 0 goto label10;

        if i0 == 6 goto label10;

        if i0 != 5 goto label18;

     label10:
        z1 = 1;

     label11:
        if i0 != 6 goto label19;

        z2 = 1;

     label12:
        if z2 == 0 goto label20;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

     label13:
        f0 = 0.0F;

        f1 = 0.0F;

        i2 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if z2 == 0 goto label21;

        i3 = i2 - 1;

     label14:
        $i9 = r0.<android.view.ScaleGestureDetector: int mDoubleTapMode>;

        if $i9 != 1 goto label23;

        $r7 = r0.<android.view.ScaleGestureDetector: android.view.MotionEvent mDoubleTapEvent>;

        f2 = virtualinvoke $r7.<android.view.MotionEvent: float getX()>();

        $r8 = r0.<android.view.ScaleGestureDetector: android.view.MotionEvent mDoubleTapEvent>;

        f3 = virtualinvoke $r8.<android.view.MotionEvent: float getY()>();

        $f39 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $b17 = $f39 cmpg f3;

        if $b17 >= 0 goto label22;

        r0.<android.view.ScaleGestureDetector: boolean mEventBeforeOrAboveStartingGestureEvent> = 1;

     label15:
        specialinvoke r0.<android.view.ScaleGestureDetector: void addTouchHistory(android.view.MotionEvent)>(r1);

        f4 = 0.0F;

        f5 = 0.0F;

        i5 = 0;

     label16:
        if i5 >= i2 goto label29;

        if i1 != i5 goto label28;

     label17:
        i5 = i5 + 1;

        goto label16;

     label18:
        z1 = 0;

        goto label11;

     label19:
        z2 = 0;

        goto label12;

     label20:
        i1 = -1;

        goto label13;

     label21:
        i3 = i2;

        goto label14;

     label22:
        r0.<android.view.ScaleGestureDetector: boolean mEventBeforeOrAboveStartingGestureEvent> = 0;

        goto label15;

     label23:
        i4 = 0;

     label24:
        if i4 >= i2 goto label27;

        if i1 != i4 goto label26;

     label25:
        i4 = i4 + 1;

        goto label24;

     label26:
        $f33 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i4);

        f0 = f0 + $f33;

        $f34 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i4);

        f1 = f1 + $f34;

        goto label25;

     label27:
        $f12 = (float) i3;

        f2 = f0 / $f12;

        $f13 = (float) i3;

        f3 = f1 / $f13;

        goto label15;

     label28:
        $f27 = r0.<android.view.ScaleGestureDetector: float mTouchHistoryLastAccepted>;

        f11 = $f27 / 2.0F;

        $f28 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i5);

        $f29 = $f28 - f2;

        $f35 = staticinvoke <java.lang.Math: float abs(float)>($f29);

        $f36 = f11 + $f35;

        f4 = f4 + $f36;

        $f37 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i5);

        $f38 = $f37 - f3;

        $f31 = staticinvoke <java.lang.Math: float abs(float)>($f38);

        $f32 = f11 + $f31;

        f5 = f5 + $f32;

        goto label17;

     label29:
        $f15 = (float) i3;

        f6 = f4 / $f15;

        $f16 = (float) i3;

        f8 = f5 / $f16;

        f7 = f6 * 2.0F;

        f10 = f8 * 2.0F;

        $z7 = specialinvoke r0.<android.view.ScaleGestureDetector: boolean inDoubleTapMode()>();

        if $z7 == 0 goto label39;

        f9 = f10;

     label30:
        z3 = r0.<android.view.ScaleGestureDetector: boolean mInProgress>;

        r0.<android.view.ScaleGestureDetector: float mFocusX> = f2;

        r0.<android.view.ScaleGestureDetector: float mFocusY> = f3;

        $z8 = specialinvoke r0.<android.view.ScaleGestureDetector: boolean inDoubleTapMode()>();

        if $z8 != 0 goto label32;

        $z13 = r0.<android.view.ScaleGestureDetector: boolean mInProgress>;

        if $z13 == 0 goto label32;

        $i15 = r0.<android.view.ScaleGestureDetector: int mMinSpan>;

        $f30 = (float) $i15;

        $b16 = f9 cmpg $f30;

        if $b16 < 0 goto label31;

        if z1 == 0 goto label32;

     label31:
        $r5 = r0.<android.view.ScaleGestureDetector: android.view.ScaleGestureDetector$OnScaleGestureListener mListener>;

        interfaceinvoke $r5.<android.view.ScaleGestureDetector$OnScaleGestureListener: void onScaleEnd(android.view.ScaleGestureDetector)>(r0);

        r0.<android.view.ScaleGestureDetector: boolean mInProgress> = 0;

        r0.<android.view.ScaleGestureDetector: float mInitialSpan> = f9;

        r0.<android.view.ScaleGestureDetector: int mDoubleTapMode> = 0;

     label32:
        if z1 == 0 goto label33;

        r0.<android.view.ScaleGestureDetector: float mCurrSpanX> = f7;

        r0.<android.view.ScaleGestureDetector: float mPrevSpanX> = f7;

        r0.<android.view.ScaleGestureDetector: float mCurrSpanY> = f10;

        r0.<android.view.ScaleGestureDetector: float mPrevSpanY> = f10;

        r0.<android.view.ScaleGestureDetector: float mCurrSpan> = f9;

        r0.<android.view.ScaleGestureDetector: float mPrevSpan> = f9;

        r0.<android.view.ScaleGestureDetector: float mInitialSpan> = f9;

     label33:
        $z10 = specialinvoke r0.<android.view.ScaleGestureDetector: boolean inDoubleTapMode()>();

        if $z10 == 0 goto label40;

        i6 = r0.<android.view.ScaleGestureDetector: int mSpanSlop>;

     label34:
        $z11 = r0.<android.view.ScaleGestureDetector: boolean mInProgress>;

        if $z11 != 0 goto label36;

        $f22 = (float) i6;

        $b12 = f9 cmpl $f22;

        if $b12 < 0 goto label36;

        if z3 != 0 goto label35;

        $f24 = r0.<android.view.ScaleGestureDetector: float mInitialSpan>;

        $f23 = f9 - $f24;

        $f26 = staticinvoke <java.lang.Math: float abs(float)>($f23);

        $i14 = r0.<android.view.ScaleGestureDetector: int mSpanSlop>;

        $f25 = (float) $i14;

        $b13 = $f26 cmpl $f25;

        if $b13 <= 0 goto label36;

     label35:
        r0.<android.view.ScaleGestureDetector: float mCurrSpanX> = f7;

        r0.<android.view.ScaleGestureDetector: float mPrevSpanX> = f7;

        r0.<android.view.ScaleGestureDetector: float mCurrSpanY> = f10;

        r0.<android.view.ScaleGestureDetector: float mPrevSpanY> = f10;

        r0.<android.view.ScaleGestureDetector: float mCurrSpan> = f9;

        r0.<android.view.ScaleGestureDetector: float mPrevSpan> = f9;

        $l11 = r0.<android.view.ScaleGestureDetector: long mCurrTime>;

        r0.<android.view.ScaleGestureDetector: long mPrevTime> = $l11;

        $r4 = r0.<android.view.ScaleGestureDetector: android.view.ScaleGestureDetector$OnScaleGestureListener mListener>;

        $z12 = interfaceinvoke $r4.<android.view.ScaleGestureDetector$OnScaleGestureListener: boolean onScaleBegin(android.view.ScaleGestureDetector)>(r0);

        r0.<android.view.ScaleGestureDetector: boolean mInProgress> = $z12;

     label36:
        if i0 != 2 goto label38;

        r0.<android.view.ScaleGestureDetector: float mCurrSpanX> = f7;

        r0.<android.view.ScaleGestureDetector: float mCurrSpanY> = f10;

        r0.<android.view.ScaleGestureDetector: float mCurrSpan> = f9;

        z4 = 1;

        $z9 = r0.<android.view.ScaleGestureDetector: boolean mInProgress>;

        if $z9 == 0 goto label37;

        $r3 = r0.<android.view.ScaleGestureDetector: android.view.ScaleGestureDetector$OnScaleGestureListener mListener>;

        z4 = interfaceinvoke $r3.<android.view.ScaleGestureDetector$OnScaleGestureListener: boolean onScale(android.view.ScaleGestureDetector)>(r0);

     label37:
        if z4 == 0 goto label38;

        $f19 = r0.<android.view.ScaleGestureDetector: float mCurrSpanX>;

        r0.<android.view.ScaleGestureDetector: float mPrevSpanX> = $f19;

        $f21 = r0.<android.view.ScaleGestureDetector: float mCurrSpanY>;

        r0.<android.view.ScaleGestureDetector: float mPrevSpanY> = $f21;

        $f20 = r0.<android.view.ScaleGestureDetector: float mCurrSpan>;

        r0.<android.view.ScaleGestureDetector: float mPrevSpan> = $f20;

        $l10 = r0.<android.view.ScaleGestureDetector: long mCurrTime>;

        r0.<android.view.ScaleGestureDetector: long mPrevTime> = $l10;

     label38:
        return 1;

     label39:
        $f17 = f7 * f7;

        $f14 = f10 * f10;

        $f18 = $f17 + $f14;

        f9 = staticinvoke <android.util.FloatMath: float sqrt(float)>($f18);

        goto label30;

     label40:
        i6 = r0.<android.view.ScaleGestureDetector: int mMinSpan>;

        goto label34;
    }

    public void setQuickScaleEnabled(boolean)
    {
        android.view.ScaleGestureDetector r0;
        boolean z0, $z1;
        android.view.ScaleGestureDetector$1 r1, $r3;
        android.view.GestureDetector $r2, $r4;
        android.os.Handler $r5;
        android.content.Context $r6;

        r0 := @this: android.view.ScaleGestureDetector;

        z0 := @parameter0: boolean;

        r0.<android.view.ScaleGestureDetector: boolean mQuickScaleEnabled> = z0;

        $z1 = r0.<android.view.ScaleGestureDetector: boolean mQuickScaleEnabled>;

        if $z1 == 0 goto label1;

        $r2 = r0.<android.view.ScaleGestureDetector: android.view.GestureDetector mGestureDetector>;

        if $r2 != null goto label1;

        $r3 = new android.view.ScaleGestureDetector$1;

        specialinvoke $r3.<android.view.ScaleGestureDetector$1: void <init>(android.view.ScaleGestureDetector)>(r0);

        r1 = $r3;

        $r4 = new android.view.GestureDetector;

        $r6 = r0.<android.view.ScaleGestureDetector: android.content.Context mContext>;

        $r5 = r0.<android.view.ScaleGestureDetector: android.os.Handler mHandler>;

        specialinvoke $r4.<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler)>($r6, r1, $r5);

        r0.<android.view.ScaleGestureDetector: android.view.GestureDetector mGestureDetector> = $r4;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <android.view.ScaleGestureDetector: long TOUCH_STABILIZE_TIME> = 128L;

        <android.view.ScaleGestureDetector: java.lang.String TAG> = "ScaleGestureDetector";

        <android.view.ScaleGestureDetector: float SCALE_FACTOR> = 0.5F;

        <android.view.ScaleGestureDetector: int DOUBLE_TAP_MODE_NONE> = 0;

        <android.view.ScaleGestureDetector: int DOUBLE_TAP_MODE_IN_PROGRESS> = 1;

        return;
    }
}
