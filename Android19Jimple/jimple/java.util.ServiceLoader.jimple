public final class java.util.ServiceLoader extends java.lang.Object implements java.lang.Iterable
{
    private final java.lang.ClassLoader classLoader;
    private final java.lang.Class service;
    private final java.util.Set services;

    private void <init>(java.lang.Class, java.lang.ClassLoader)
    {
        java.util.ServiceLoader r0;
        java.lang.Class r1;
        java.lang.ClassLoader r2;
        java.util.HashSet $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.ServiceLoader;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("service == null");

        throw $r4;

     label1:
        r0.<java.util.ServiceLoader: java.lang.Class service> = r1;

        r0.<java.util.ServiceLoader: java.lang.ClassLoader classLoader> = r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<java.util.ServiceLoader: java.util.Set services> = $r3;

        virtualinvoke r0.<java.util.ServiceLoader: void reload()>();

        return;
    }

    static java.lang.ClassLoader access$000(java.util.ServiceLoader)
    {
        java.util.ServiceLoader r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.util.ServiceLoader;

        $r1 = r0.<java.util.ServiceLoader: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    static java.lang.Class access$100(java.util.ServiceLoader)
    {
        java.util.ServiceLoader r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.util.ServiceLoader;

        $r1 = r0.<java.util.ServiceLoader: java.lang.Class service>;

        return $r1;
    }

    static java.util.Set access$200(java.util.ServiceLoader)
    {
        java.util.ServiceLoader r0;
        java.util.Set $r1;

        r0 := @parameter0: java.util.ServiceLoader;

        $r1 = r0.<java.util.ServiceLoader: java.util.Set services>;

        return $r1;
    }

    private void internalLoad()
    {
        java.util.ServiceLoader r0;
        java.lang.String r2, $r7;
        java.util.Set $r3, $r10;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class $r6;
        java.lang.ClassLoader $r9;
        java.util.Enumeration $r11;
        java.util.ArrayList $r12;
        java.io.IOException $r13;

        r0 := @this: java.util.ServiceLoader;

        $r3 = r0.<java.util.ServiceLoader: java.util.Set services>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/");

        $r6 = r0.<java.util.ServiceLoader: java.lang.Class service>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<java.util.ServiceLoader: java.util.Set services>;

        $r9 = r0.<java.util.ServiceLoader: java.lang.ClassLoader classLoader>;

        $r11 = virtualinvoke $r9.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r2);

        $r12 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r11);

        interfaceinvoke $r10.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

     label2:
        return;

     label3:
        $r13 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.util.ServiceLoader load(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Thread $r1;
        java.lang.ClassLoader $r2;
        java.util.ServiceLoader $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r3 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(r0, $r2);

        return $r3;
    }

    public static java.util.ServiceLoader load(java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;
        java.util.ServiceLoader $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.ClassLoader;

        if r1 != null goto label1;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r2 = new java.util.ServiceLoader;

        specialinvoke $r2.<java.util.ServiceLoader: void <init>(java.lang.Class,java.lang.ClassLoader)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object loadFromSystemProperty(java.lang.Class)
    {
        java.lang.Class r0, $r6;
        java.lang.Exception r1, $r7;
        java.lang.String r2, $r4;
        java.lang.Object r3;
        java.lang.ClassLoader $r5;
        java.lang.Error $r8;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r4);

     label2:
        if r2 == null goto label5;

     label3:
        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        r3 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

     label4:
        return r3;

     label5:
        return null;

     label6:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
    }

    public static java.util.ServiceLoader loadInstalled(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1, $r3;
        java.util.ServiceLoader $r2;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        if r1 == null goto label2;

     label1:
        $r3 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        if $r3 == null goto label2;

        r1 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(r0, r1);

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        java.util.ServiceLoader r0;
        java.util.ServiceLoader$ServiceIterator $r1;

        r0 := @this: java.util.ServiceLoader;

        $r1 = new java.util.ServiceLoader$ServiceIterator;

        specialinvoke $r1.<java.util.ServiceLoader$ServiceIterator: void <init>(java.util.ServiceLoader,java.util.ServiceLoader)>(r0, r0);

        return $r1;
    }

    public void reload()
    {
        java.util.ServiceLoader r0;

        r0 := @this: java.util.ServiceLoader;

        specialinvoke r0.<java.util.ServiceLoader: void internalLoad()>();

        return;
    }

    public java.lang.String toString()
    {
        java.util.ServiceLoader r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.lang.Class $r3;
        java.lang.String $r4, $r6;

        r0 := @this: java.util.ServiceLoader;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServiceLoader for ");

        $r3 = r0.<java.util.ServiceLoader: java.lang.Class service>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
