public class gov.nist.javax.sip.Utils extends java.lang.Object implements gov.nist.javax.sip.UtilsExt
{
    private static int callIDCounter;
    private static long counter;
    private static java.security.MessageDigest digester;
    private static gov.nist.javax.sip.Utils instance;
    private static java.util.Random rand;
    private static java.lang.String signature;
    private static final char[] toHex;

    static void <clinit>()
    {
        java.lang.Exception r0, $r9;
        gov.nist.javax.sip.Utils $r1;
        char[] $r2;
        java.security.MessageDigest $r3;
        java.util.Random $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r8;
        byte[] $r7;
        java.lang.RuntimeException $r10;

        <gov.nist.javax.sip.Utils: long counter> = 0L;

        $r1 = new gov.nist.javax.sip.Utils;

        specialinvoke $r1.<gov.nist.javax.sip.Utils: void <init>()>();

        <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils instance> = $r1;

        $r2 = newarray (char)[16];

        $r2[0] = 48;

        $r2[1] = 49;

        $r2[2] = 50;

        $r2[3] = 51;

        $r2[4] = 52;

        $r2[5] = 53;

        $r2[6] = 54;

        $r2[7] = 55;

        $r2[8] = 56;

        $r2[9] = 57;

        $r2[10] = 97;

        $r2[11] = 98;

        $r2[12] = 99;

        $r2[13] = 100;

        $r2[14] = 101;

        $r2[15] = 102;

        <gov.nist.javax.sip.Utils: char[] toHex> = $r2;

     label1:
        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        <gov.nist.javax.sip.Utils: java.security.MessageDigest digester> = $r3;

     label2:
        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        <gov.nist.javax.sip.Utils: java.util.Random rand> = $r4;

        $r5 = <gov.nist.javax.sip.Utils: java.util.Random rand>;

        $i0 = virtualinvoke $r5.<java.util.Random: int nextInt()>();

        $i1 = $i0 % 1000;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r8 = staticinvoke <gov.nist.javax.sip.Utils: java.lang.String toHexString(byte[])>($r7);

        <gov.nist.javax.sip.Utils: java.lang.String signature> = $r8;

        return;

     label3:
        $r9 := @caughtexception;

        r0 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not intialize Digester ", r0);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        gov.nist.javax.sip.Utils r0;

        r0 := @this: gov.nist.javax.sip.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static gov.nist.javax.sip.Utils getInstance()
    {
        gov.nist.javax.sip.Utils $r0;

        $r0 = <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils instance>;

        return $r0;
    }

    public static java.lang.String getQuotedString(java.lang.String)
    {
        java.lang.String r0, $r3, $r6;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\"", "\\\"");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String getSignature()
    {
        java.lang.String $r0;

        $r0 = <gov.nist.javax.sip.Utils: java.lang.String signature>;

        return $r0;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.util.HashSet r1, $r3;
        int i0;
        java.lang.String r2;
        java.io.PrintStream $r4;
        gov.nist.javax.sip.Utils $r5;
        boolean $z0;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: java.lang.String[];

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r1 = $r3;

        i0 = 0;

     label1:
        if i0 >= 100000 goto label3;

        $r5 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.Utils: java.lang.String generateBranchId()>();

        $z0 = virtualinvoke r1.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Duplicate Branch ID");

        throw $r6;

     label2:
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Done!!");

        return;
    }

    protected static java.lang.String reduceString(java.lang.String)
    {
        java.lang.String r0, r1, r2;
        int i0, i1;
        char $c2, $c3, $c4;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r2 = "";

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        if $c2 == 32 goto label2;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        if $c3 != 9 goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label4:
        return r2;
    }

    public static java.lang.String toHexString(byte[])
    {
        byte[] r0;
        int i0, i1, i2, $i3, $i4, $i5;
        char[] r1, $r3, $r4;
        java.lang.String $r2;
        byte $b6, $b7, $b8, $b10, $b11;
        char $c9, $c12;

        r0 := @parameter0: byte[];

        i0 = 0;

        $i3 = lengthof r0;

        $i4 = 2 * $i3;

        r1 = newarray (char)[$i4];

        i1 = 0;

     label1:
        $i5 = lengthof r0;

        if i1 >= $i5 goto label2;

        i2 = i0 + 1;

        $r3 = <gov.nist.javax.sip.Utils: char[] toHex>;

        $b6 = r0[i1];

        $b7 = $b6 >> 4;

        $b8 = 15 & $b7;

        $c9 = $r3[$b8];

        r1[i0] = $c9;

        i0 = i2 + 1;

        $r4 = <gov.nist.javax.sip.Utils: char[] toHex>;

        $b10 = r0[i1];

        $b11 = 15 & $b10;

        $c12 = $r4[$b11];

        r1[i2] = $c12;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public java.lang.String generateBranchId()
    {
        gov.nist.javax.sip.Utils r0;
        java.lang.Throwable r1, $r14;
        long l0, l1, l2, $l3, $l4, $l5;
        byte[] r2, $r7;
        java.lang.String r3, $r5, $r11, $r13;
        java.util.Random $r4;
        java.security.MessageDigest $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r12;

        r0 := @this: gov.nist.javax.sip.Utils;

        entermonitor r0;

     label1:
        $r4 = <gov.nist.javax.sip.Utils: java.util.Random rand>;

        l0 = virtualinvoke $r4.<java.util.Random: long nextLong()>();

        l1 = <gov.nist.javax.sip.Utils: long counter>;

        $l3 = 1L + l1;

        <gov.nist.javax.sip.Utils: long counter> = $l3;

        $l4 = l0 + l1;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l4 + $l5;

        $r6 = <gov.nist.javax.sip.Utils: java.security.MessageDigest digester>;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l2);

        $r7 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        r2 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r7);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("z9hG4bK");

        $r11 = staticinvoke <gov.nist.javax.sip.Utils: java.lang.String toHexString(byte[])>(r2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = <gov.nist.javax.sip.Utils: java.lang.String signature>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r14 := @caughtexception;

        r1 = $r14;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String generateCallIdentifier(java.lang.String)
    {
        gov.nist.javax.sip.Utils r0;
        java.lang.String r1, r3, r4, r5;
        java.lang.Throwable r2, $r14;
        long l0, $l3, $l4, $l5, $l6;
        int i1, $i2;
        java.util.Random $r6;
        byte[] $r7, $r9;
        java.security.MessageDigest $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @this: gov.nist.javax.sip.Utils;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i1 = <gov.nist.javax.sip.Utils: int callIDCounter>;

        $i2 = i1 + 1;

        <gov.nist.javax.sip.Utils: int callIDCounter> = $i2;

        $l3 = (long) i1;

        $l4 = l0 + $l3;

        $r6 = <gov.nist.javax.sip.Utils: java.util.Random rand>;

        $l5 = virtualinvoke $r6.<java.util.Random: long nextLong()>();

        $l6 = $l4 + $l5;

        r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l6);

        $r8 = <gov.nist.javax.sip.Utils: java.security.MessageDigest digester>;

        $r7 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest(byte[])>($r7);

        r4 = staticinvoke <gov.nist.javax.sip.Utils: java.lang.String toHexString(byte[])>($r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        exitmonitor r0;

        return r5;

     label3:
        $r14 := @caughtexception;

        r2 = $r14;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String generateTag()
    {
        gov.nist.javax.sip.Utils r0;
        java.lang.Throwable r1, $r4;
        java.lang.String r2;
        java.util.Random $r3;
        int $i0;

        r0 := @this: gov.nist.javax.sip.Utils;

        entermonitor r0;

     label1:
        $r3 = <gov.nist.javax.sip.Utils: java.util.Random rand>;

        $i0 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean responseBelongsToUs(gov.nist.javax.sip.message.SIPResponse)
    {
        gov.nist.javax.sip.Utils r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        java.lang.String r2, $r4;
        gov.nist.javax.sip.header.Via $r3;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.Utils;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r2 = virtualinvoke $r3.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r2 == null goto label1;

        $r4 = <gov.nist.javax.sip.Utils: java.lang.String signature>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
