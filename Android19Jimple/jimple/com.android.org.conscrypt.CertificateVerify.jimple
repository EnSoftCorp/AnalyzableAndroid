public class com.android.org.conscrypt.CertificateVerify extends com.android.org.conscrypt.Message
{
    byte[] signedHash;

    public void <init>(com.android.org.conscrypt.HandshakeIODataStream, int) throws java.io.IOException
    {
        com.android.org.conscrypt.CertificateVerify r0;
        com.android.org.conscrypt.HandshakeIODataStream r1;
        int i0, $i1, $i2, $i3;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.CertificateVerify;

        r1 := @parameter0: com.android.org.conscrypt.HandshakeIODataStream;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        if i0 != 0 goto label2;

        virtualinvoke r0.<com.android.org.conscrypt.CertificateVerify: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect CertificateVerify");

     label1:
        r0.<com.android.org.conscrypt.CertificateVerify: int length> = i0;

        return;

     label2:
        $i1 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: int readUint16()>();

        $i2 = i0 - 2;

        if $i1 == $i2 goto label3;

        virtualinvoke r0.<com.android.org.conscrypt.CertificateVerify: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect CertificateVerify");

     label3:
        $i3 = i0 - 2;

        $r2 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: byte[] read(int)>($i3);

        r0.<com.android.org.conscrypt.CertificateVerify: byte[] signedHash> = $r2;

        goto label1;
    }

    public void <init>(byte[])
    {
        com.android.org.conscrypt.CertificateVerify r0;
        byte[] r1;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.CertificateVerify;

        r1 := @parameter0: byte[];

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        if r1 == null goto label1;

        $i2 = lengthof r1;

        if $i2 != 0 goto label2;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.CertificateVerify: void fatalAlert(byte,java.lang.String)>(80, "INTERNAL ERROR: incorrect certificate verify hash");

     label2:
        r0.<com.android.org.conscrypt.CertificateVerify: byte[] signedHash> = r1;

        $i0 = lengthof r1;

        $i1 = 2 + $i0;

        r0.<com.android.org.conscrypt.CertificateVerify: int length> = $i1;

        return;
    }

    public int getType()
    {
        com.android.org.conscrypt.CertificateVerify r0;

        r0 := @this: com.android.org.conscrypt.CertificateVerify;

        return 15;
    }

    public void send(com.android.org.conscrypt.HandshakeIODataStream)
    {
        com.android.org.conscrypt.CertificateVerify r0;
        com.android.org.conscrypt.HandshakeIODataStream r1;
        byte[] $r2, $r3, $r4;
        int $i0, $i1;
        long $l2;

        r0 := @this: com.android.org.conscrypt.CertificateVerify;

        r1 := @parameter0: com.android.org.conscrypt.HandshakeIODataStream;

        $r2 = r0.<com.android.org.conscrypt.CertificateVerify: byte[] signedHash>;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label1;

        $r3 = r0.<com.android.org.conscrypt.CertificateVerify: byte[] signedHash>;

        $i1 = lengthof $r3;

        $l2 = (long) $i1;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint16(long)>($l2);

        $r4 = r0.<com.android.org.conscrypt.CertificateVerify: byte[] signedHash>;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void write(byte[])>($r4);

     label1:
        return;
    }
}
