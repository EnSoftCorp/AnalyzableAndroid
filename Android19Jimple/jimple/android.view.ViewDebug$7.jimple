final class android.view.ViewDebug$7 extends java.lang.Object implements java.util.concurrent.Callable
{
    final java.lang.reflect.Method val$method;
    final android.view.View val$view;

    void <init>(java.lang.reflect.Method, android.view.View)
    {
        android.view.ViewDebug$7 r0;
        java.lang.reflect.Method r1;
        android.view.View r2;

        r0 := @this: android.view.ViewDebug$7;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: android.view.View;

        r0.<android.view.ViewDebug$7: java.lang.reflect.Method val$method> = r1;

        r0.<android.view.ViewDebug$7: android.view.View val$view> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call() throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        android.view.ViewDebug$7 r0;
        java.lang.Object[] $r1;
        android.view.View $r2;
        java.lang.reflect.Method $r3;
        java.lang.Object $r4;

        r0 := @this: android.view.ViewDebug$7;

        $r3 = r0.<android.view.ViewDebug$7: java.lang.reflect.Method val$method>;

        $r2 = r0.<android.view.ViewDebug$7: android.view.View val$view>;

        $r1 = (java.lang.Object[]) null;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

        return $r4;
    }
}
