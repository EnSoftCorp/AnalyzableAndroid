public class org.apache.xalan.templates.ElemValueOf extends org.apache.xalan.templates.ElemTemplateElement
{
    static final long serialVersionUID;
    private boolean m_disableOutputEscaping;
    private boolean m_isDot;
    private org.apache.xpath.XPath m_selectExpression;

    public void <init>()
    {
        org.apache.xalan.templates.ElemValueOf r0;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void <init>()>();

        r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression> = null;

        r0.<org.apache.xalan.templates.ElemValueOf: boolean m_isDot> = 0;

        r0.<org.apache.xalan.templates.ElemValueOf: boolean m_disableOutputEscaping> = 0;

        return;
    }

    public org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.ElemValueOf r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        java.lang.Object[] r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getNodeName()>();

        r2[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.xalan.templates.ElemValueOf: java.lang.String getNodeName()>();

        r2[1] = $r4;

        virtualinvoke r0.<org.apache.xalan.templates.ElemValueOf: void error(java.lang.String,java.lang.Object[])>("ER_CANNOT_ADD", r2);

        return null;
    }

    protected void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean)
    {
        org.apache.xalan.templates.ElemValueOf r0;
        org.apache.xalan.templates.XSLTVisitor r1;
        boolean z0;
        org.apache.xpath.XPath $r2, $r4;
        org.apache.xpath.Expression $r3;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        r1 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $r4 = r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression>;

        virtualinvoke $r3.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r4, r1);

     label1:
        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r1, z0);

        return;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemValueOf r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        java.util.Vector r2;
        org.apache.xalan.templates.StylesheetRoot$ComposeState $r3, $r6;
        org.apache.xpath.XPath $r4, $r5;
        int $i0;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $r3 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        r2 = virtualinvoke $r3.<org.apache.xalan.templates.StylesheetRoot$ComposeState: java.util.Vector getVariableNames()>();

        $r4 = r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression>;

        if $r4 == null goto label1;

        $r5 = r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression>;

        $r6 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        $i0 = virtualinvoke $r6.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r5.<org.apache.xpath.XPath: void fixupVariables(java.util.Vector,int)>(r2, $i0);

     label1:
        return;
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemValueOf r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        org.apache.xpath.XPathContext r2;
        org.apache.xml.serializer.SerializationHandler r3;
        java.lang.RuntimeException r4, $r11;
        javax.xml.transform.TransformerException r5, $r10, $r13;
        org.xml.sax.SAXException r6, $r14;
        int i0;
        java.lang.Throwable r7, $r12;
        boolean $z0, $z1, $z2;
        org.apache.xpath.XPath $r8;
        org.apache.xpath.Expression $r9;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        r2 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        r3 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getResultTreeHandler()>();

     label01:
        virtualinvoke r2.<org.apache.xpath.XPathContext: void pushNamespaceContext(org.apache.xml.utils.PrefixResolver)>(r0);

        i0 = virtualinvoke r2.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void pushCurrentNodeAndExpression(int,int)>(i0, i0);

        $z0 = r0.<org.apache.xalan.templates.ElemValueOf: boolean m_disableOutputEscaping>;

        if $z0 == 0 goto label02;

        interfaceinvoke r3.<org.apache.xml.serializer.SerializationHandler: void processingInstruction(java.lang.String,java.lang.String)>("javax.xml.transform.disable-output-escaping", "");

     label02:
        $r8 = r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression>;

        $r9 = virtualinvoke $r8.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        virtualinvoke $r9.<org.apache.xpath.Expression: void executeCharsToContentHandler(org.apache.xpath.XPathContext,org.xml.sax.ContentHandler)>(r2, r3);

     label03:
        $z1 = r0.<org.apache.xalan.templates.ElemValueOf: boolean m_disableOutputEscaping>;

        if $z1 == 0 goto label04;

        interfaceinvoke r3.<org.apache.xml.serializer.SerializationHandler: void processingInstruction(java.lang.String,java.lang.String)>("javax.xml.transform.enable-output-escaping", "");

     label04:
        virtualinvoke r2.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

     label05:
        return;

     label06:
        $r12 := @caughtexception;

        r7 = $r12;

     label07:
        $z2 = r0.<org.apache.xalan.templates.ElemValueOf: boolean m_disableOutputEscaping>;

        if $z2 == 0 goto label08;

        interfaceinvoke r3.<org.apache.xml.serializer.SerializationHandler: void processingInstruction(java.lang.String,java.lang.String)>("javax.xml.transform.enable-output-escaping", "");

     label08:
        virtualinvoke r2.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        throw r7;

     label09:
        $r14 := @caughtexception;

        r6 = $r14;

        $r13 = new javax.xml.transform.TransformerException;

        specialinvoke $r13.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r6);

        throw $r13;

     label10:
        $r11 := @caughtexception;

        r4 = $r11;

        $r10 = new javax.xml.transform.TransformerException;

        specialinvoke $r10.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r4);

        r5 = $r10;

        virtualinvoke r5.<javax.xml.transform.TransformerException: void setLocator(javax.xml.transform.SourceLocator)>(r0);

        throw r5;

        catch org.xml.sax.SAXException from label01 to label02 with label09;
        catch java.lang.RuntimeException from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch org.xml.sax.SAXException from label03 to label04 with label09;
        catch java.lang.RuntimeException from label03 to label04 with label10;
        catch org.xml.sax.SAXException from label04 to label05 with label09;
        catch java.lang.RuntimeException from label04 to label05 with label10;
        catch org.xml.sax.SAXException from label07 to label08 with label09;
        catch java.lang.RuntimeException from label07 to label08 with label10;
        catch org.xml.sax.SAXException from label08 to label09 with label09;
        catch java.lang.RuntimeException from label08 to label09 with label10;
    }

    public boolean getDisableOutputEscaping()
    {
        org.apache.xalan.templates.ElemValueOf r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        $z0 = r0.<org.apache.xalan.templates.ElemValueOf: boolean m_disableOutputEscaping>;

        return $z0;
    }

    public java.lang.String getNodeName()
    {
        org.apache.xalan.templates.ElemValueOf r0;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        return "value-of";
    }

    public org.apache.xpath.XPath getSelect()
    {
        org.apache.xalan.templates.ElemValueOf r0;
        org.apache.xpath.XPath $r1;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        $r1 = r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression>;

        return $r1;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemValueOf r0;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        return 30;
    }

    public void setDisableOutputEscaping(boolean)
    {
        org.apache.xalan.templates.ElemValueOf r0;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        z0 := @parameter0: boolean;

        r0.<org.apache.xalan.templates.ElemValueOf: boolean m_disableOutputEscaping> = z0;

        return;
    }

    public void setSelect(org.apache.xpath.XPath)
    {
        org.apache.xalan.templates.ElemValueOf r0;
        org.apache.xpath.XPath r1;
        java.lang.String r2;
        boolean z0, $z1;

        r0 := @this: org.apache.xalan.templates.ElemValueOf;

        r1 := @parameter0: org.apache.xpath.XPath;

        if r1 == null goto label2;

        r2 = virtualinvoke r1.<org.apache.xpath.XPath: java.lang.String getPatternString()>();

        if r2 == null goto label3;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z1 == 0 goto label3;

        z0 = 1;

     label1:
        r0.<org.apache.xalan.templates.ElemValueOf: boolean m_isDot> = z0;

     label2:
        r0.<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath m_selectExpression> = r1;

        return;

     label3:
        z0 = 0;

        goto label1;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.templates.ElemValueOf: long serialVersionUID> = 3490728458007586786L;

        return;
    }
}
