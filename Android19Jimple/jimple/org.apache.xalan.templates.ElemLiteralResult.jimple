public class org.apache.xalan.templates.ElemLiteralResult extends org.apache.xalan.templates.ElemUse
{
    private static final java.lang.String EMPTYSTRING;
    static final long serialVersionUID;
    private boolean isLiteralResultAsStylesheet;
    private org.apache.xml.utils.StringVector m_ExtensionElementURIs;
    private java.util.List m_avts;
    private org.apache.xml.utils.StringVector m_excludeResultPrefixes;
    private java.lang.String m_localName;
    private java.lang.String m_namespace;
    private java.lang.String m_rawName;
    private java.lang.String m_version;
    private java.util.List m_xslAttr;

    public void <init>()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void <init>()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: boolean isLiteralResultAsStylesheet> = 0;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts> = null;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_xslAttr> = null;

        return;
    }

    static java.util.List access$000(org.apache.xalan.templates.ElemLiteralResult)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        return $r1;
    }

    private boolean excludeResultNSDecl(java.lang.String, java.lang.String) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1, r2;
        org.apache.xml.utils.StringVector $r3;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if $r3 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;

     label1:
        return 0;
    }

    protected boolean accept(org.apache.xalan.templates.XSLTVisitor)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.XSLTVisitor r1;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        $z0 = virtualinvoke r1.<org.apache.xalan.templates.XSLTVisitor: boolean visitLiteralResultElement(org.apache.xalan.templates.ElemLiteralResult)>(r0);

        return $z0;
    }

    public void addLiteralResultAttribute(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1;
        java.util.List $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_xslAttr>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_xslAttr> = $r4;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_xslAttr>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addLiteralResultAttribute(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.AVT r1;
        java.util.List $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts> = $r4;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.XSLTVisitor r1;
        boolean z0;
        int i0, $i1;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;
        org.apache.xalan.templates.AVT $r6;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        i0 = -1 + $i1;

     label1:
        if i0 < 0 goto label2;

        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (org.apache.xalan.templates.AVT) $r5;

        virtualinvoke $r6.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

        i0 = i0 + -1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r1, z0);

        return;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        org.apache.xalan.templates.StylesheetRoot$ComposeState r2;
        java.util.Vector r3;
        int i0, $i1, $i2;
        java.util.List $r4, $r5, $r6;
        java.lang.Object $r7;
        org.apache.xalan.templates.AVT $r8;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        r2 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        r3 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: java.util.Vector getVariableNames()>();

        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r4 == null goto label2;

        $r5 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        i0 = -1 + $i1;

     label1:
        if i0 < 0 goto label2;

        $r6 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        $r8 = (org.apache.xalan.templates.AVT) $r7;

        $i2 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r8.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>(r3, $i2);

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    public boolean containsExcludeResultPrefix(java.lang.String, java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1, r2, $r9, $r10;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1, $i2;
        org.apache.xml.utils.StringVector $r3, $r4, $r5, $r6, $r7, $r8, $r11;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 = 1;

        if r2 == null goto label1;

        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if $r3 != null goto label3;

        $r11 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r11 != null goto label3;

     label1:
        z0 = specialinvoke r0.<org.apache.xalan.templates.ElemUse: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        return z0;

     label3:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        r1 = "#default";

     label4:
        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if $r4 == null goto label6;

        i0 = 0;

     label5:
        $r7 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        $i2 = virtualinvoke $r7.<org.apache.xml.utils.StringVector: int size()>();

        if i0 >= $i2 goto label6;

        $r8 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        $r10 = virtualinvoke $r8.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i0);

        $r9 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespaceForPrefix(java.lang.String)>($r10);

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 != 0 goto label2;

        i0 = i0 + 1;

        goto label5;

     label6:
        $r5 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r5 == null goto label7;

        $r6 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $z2 = virtualinvoke $r6.<org.apache.xml.utils.StringVector: boolean contains(java.lang.String)>(r2);

        if $z2 != 0 goto label2;

     label7:
        $z1 = specialinvoke r0.<org.apache.xalan.templates.ElemUse: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>(r1, r2);

        return $z1;
    }

    public boolean containsExtensionElementURI(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1;
        org.apache.xml.utils.StringVector $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $z0 = virtualinvoke $r3.<org.apache.xml.utils.StringVector: boolean contains(java.lang.String)>(r1);

        return $z0;
    }

    public java.util.Iterator enumerateLiteralResultAttributes()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.util.List $r1, $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        org.apache.xml.serializer.SerializationHandler r2;
        org.xml.sax.SAXException r3, r5, r6, r7, $r26, $r30, $r32, $r33;
        javax.xml.transform.TransformerException r4, r8, $r29, $r31, $r34, $r35, $r36;
        int i0, $i1, $i2;
        org.apache.xalan.templates.AVT r9;
        org.apache.xpath.XPathContext r10;
        java.lang.String r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r25, $r27, $r28;
        java.util.List $r16, $r22, $r23;
        java.lang.Object $r24;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        r2 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getSerializationHandler()>();

     label01:
        $r12 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getPrefix()>();

        $r13 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>();

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void startPrefixMapping(java.lang.String,java.lang.String)>($r12, $r13);

        virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: void executeNSDecls(org.apache.xalan.transformer.TransformerImpl)>(r1);

        $r15 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>();

        $r14 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getLocalName()>();

        $r17 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getRawName()>();

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void startElement(java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, $r17);

     label02:
        r4 = null;

     label03:
        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void execute(org.apache.xalan.transformer.TransformerImpl)>(r1);

        $r16 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r16 == null goto label10;

        $r22 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $i1 = interfaceinvoke $r22.<java.util.List: int size()>();

        i0 = -1 + $i1;

     label04:
        if i0 < 0 goto label10;

     label05:
        $r23 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (org.apache.xalan.templates.AVT) $r24;

        r10 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $i2 = virtualinvoke r10.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        r11 = virtualinvoke r9.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>(r10, $i2, r0);

     label06:
        if r11 == null goto label08;

     label07:
        $r27 = virtualinvoke r9.<org.apache.xalan.templates.AVT: java.lang.String getURI()>();

        $r28 = virtualinvoke r9.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        $r25 = virtualinvoke r9.<org.apache.xalan.templates.AVT: java.lang.String getRawName()>();

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>($r27, $r28, $r25, "CDATA", r11, 0);

     label08:
        i0 = i0 + -1;

        goto label04;

     label09:
        $r26 := @caughtexception;

        r3 = $r26;

        $r31 = new javax.xml.transform.TransformerException;

        specialinvoke $r31.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r3);

        throw $r31;

     label10:
        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,boolean)>(r0, 1);

     label11:
        $r19 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>();

        $r18 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getLocalName()>();

        $r21 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getRawName()>();

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r19, $r18, $r21);

     label12:
        if r4 == null goto label17;

        throw r4;

     label13:
        $r36 := @caughtexception;

        r8 = $r36;

        r4 = r8;

        goto label11;

     label14:
        $r33 := @caughtexception;

        r5 = $r33;

        $r34 = new javax.xml.transform.TransformerException;

        specialinvoke $r34.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r5);

        r4 = $r34;

        goto label11;

     label15:
        $r32 := @caughtexception;

        r6 = $r32;

        if r4 == null goto label16;

        throw r4;

     label16:
        $r29 = new javax.xml.transform.TransformerException;

        specialinvoke $r29.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r6);

        throw $r29;

     label17:
        virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: void unexecuteNSDecls(org.apache.xalan.transformer.TransformerImpl)>(r1);

     label18:
        $r20 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getPrefix()>();

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void endPrefixMapping(java.lang.String)>($r20);

     label19:
        return;

     label20:
        $r30 := @caughtexception;

        r7 = $r30;

        $r35 = new javax.xml.transform.TransformerException;

        specialinvoke $r35.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r7);

        throw $r35;

        catch org.xml.sax.SAXException from label01 to label02 with label09;
        catch javax.xml.transform.TransformerException from label03 to label04 with label13;
        catch org.xml.sax.SAXException from label03 to label04 with label14;
        catch javax.xml.transform.TransformerException from label05 to label06 with label13;
        catch org.xml.sax.SAXException from label05 to label06 with label14;
        catch javax.xml.transform.TransformerException from label07 to label08 with label13;
        catch org.xml.sax.SAXException from label07 to label08 with label14;
        catch javax.xml.transform.TransformerException from label10 to label11 with label13;
        catch org.xml.sax.SAXException from label10 to label11 with label14;
        catch org.xml.sax.SAXException from label11 to label12 with label15;
        catch org.xml.sax.SAXException from label18 to label19 with label20;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1, $r3;
        org.apache.xalan.templates.AVT r2;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xalan.templates.AVT getLiteralResultAttribute(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<org.apache.xalan.templates.AVT: java.lang.String getSimpleString()>();

        return $r3;

     label1:
        return "";
    }

    public java.lang.String getAttributeNS(java.lang.String, java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1, r2, $r4;
        org.apache.xalan.templates.AVT r3;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xalan.templates.AVT getLiteralResultAttributeNS(java.lang.String,java.lang.String)>(r1, r2);

        if r3 == null goto label1;

        $r4 = virtualinvoke r3.<org.apache.xalan.templates.AVT: java.lang.String getSimpleString()>();

        return $r4;

     label1:
        return "";
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.ElemLiteralResult$LiteralElementAttributes $r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = new org.apache.xalan.templates.ElemLiteralResult$LiteralElementAttributes;

        specialinvoke $r1.<org.apache.xalan.templates.ElemLiteralResult$LiteralElementAttributes: void <init>(org.apache.xalan.templates.ElemLiteralResult)>(r0);

        return $r1;
    }

    public java.lang.String getExtensionElementPrefix(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        int i0;
        org.apache.xml.utils.StringVector $r1, $r2;
        java.lang.String $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r1 != null goto label1;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i0);

        return $r3;
    }

    public int getExtensionElementPrefixCount()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xml.utils.StringVector $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: int size()>();

        return $i0;

     label1:
        return 0;
    }

    public boolean getIsLiteralResultAsStylesheet()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $z0 = r0.<org.apache.xalan.templates.ElemLiteralResult: boolean isLiteralResultAsStylesheet>;

        return $z0;
    }

    public org.apache.xalan.templates.AVT getLiteralResultAttribute(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1, r3, $r8, $r11, $r13;
        int i0, $i1;
        org.apache.xalan.templates.AVT r2;
        java.util.List $r4, $r5, $r6;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r9, $r10, $r12, $r14;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r4 == null goto label6;

        $r5 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        i0 = -1 + $i1;

     label1:
        if i0 < 0 goto label6;

        $r6 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (org.apache.xalan.templates.AVT) $r7;

        r3 = virtualinvoke r2.<org.apache.xalan.templates.AVT: java.lang.String getURI()>();

        if r3 == null goto label2;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = virtualinvoke r2.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label4;

     label2:
        if r3 == null goto label3;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label5;

     label3:
        $r8 = virtualinvoke r2.<org.apache.xalan.templates.AVT: java.lang.String getRawName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label5;

     label4:
        return r2;

     label5:
        i0 = i0 + -1;

        goto label1;

     label6:
        return null;
    }

    public org.apache.xalan.templates.AVT getLiteralResultAttributeNS(java.lang.String, java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1, r2, $r8, $r9;
        int i0, $i1;
        org.apache.xalan.templates.AVT r3;
        java.util.List $r4, $r5, $r6;
        java.lang.Object $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r4 == null goto label3;

        $r5 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        i0 = -1 + $i1;

     label1:
        if i0 < 0 goto label3;

        $r6 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (org.apache.xalan.templates.AVT) $r7;

        $r8 = virtualinvoke r3.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r3.<org.apache.xalan.templates.AVT: java.lang.String getURI()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        return null;
    }

    public java.lang.String getLocalName()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        return $r1;
    }

    public java.lang.String getNamespace()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        return $r1;
    }

    public java.lang.String getNodeName()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        i0 = -1 + $i3;

        if i0 <= 0 goto label1;

        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r4;

     label1:
        return "";
    }

    public java.lang.String getRawName()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        return $r1;
    }

    public java.lang.String getVersion()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_version>;

        return $r1;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        return 77;
    }

    boolean needToCheckExclude()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xml.utils.StringVector $r1, $r5;
        java.util.List $r2, $r4;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if $r1 != null goto label1;

        $r4 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List getPrefixTable()>();

        if $r4 != null goto label1;

        $r5 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r5 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List getPrefixTable()>();

        if $r2 != null goto label2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: void setPrefixTable(java.util.List)>($r3);

     label2:
        return 1;
    }

    public void resolvePrefixTables() throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.xalan.templates.AVT r2;
        java.lang.String r3, r5, r6, r7, r9, $r10, $r15, $r20, $r21, $r22, $r23, $r25, $r29;
        org.apache.xalan.templates.NamespaceAlias r4, r8;
        java.util.List $r11, $r12, $r13;
        java.lang.Object $r14;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r24, $r26, $r27, $r28;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void resolvePrefixTables()>();

        r1 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>();

        $r10 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        if $r10 == null goto label1;

        $r21 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        $i4 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i4 <= 0 goto label1;

        $r20 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        r8 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.NamespaceAlias getNamespaceAliasComposed(java.lang.String)>($r20);

        if r8 == null goto label1;

        $r23 = virtualinvoke r8.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getResultNamespace()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace> = $r23;

        r9 = virtualinvoke r8.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getStylesheetPrefix()>();

        if r9 == null goto label5;

        $i5 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i5 <= 0 goto label5;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r25 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName> = $r29;

     label1:
        $r11 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        if $r11 == null goto label6;

        $r12 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        $r13 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.List m_avts>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (org.apache.xalan.templates.AVT) $r14;

        r3 = virtualinvoke r2.<org.apache.xalan.templates.AVT: java.lang.String getURI()>();

        if r3 == null goto label4;

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 <= 0 goto label4;

        $r15 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        r4 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.NamespaceAlias getNamespaceAliasComposed(java.lang.String)>($r15);

        if r4 == null goto label4;

        r5 = virtualinvoke r4.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getResultNamespace()>();

        r6 = virtualinvoke r4.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getStylesheetPrefix()>();

        r7 = virtualinvoke r2.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        if r6 == null goto label3;

        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 <= 0 goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r7 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke r2.<org.apache.xalan.templates.AVT: void setURI(java.lang.String)>(r5);

        virtualinvoke r2.<org.apache.xalan.templates.AVT: void setRawName(java.lang.String)>(r7);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $r22 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName> = $r22;

        goto label1;

     label6:
        return;
    }

    public void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xml.utils.StringVector r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes> = r1;

        return;
    }

    public void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xml.utils.StringVector r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs> = r1;

        return;
    }

    public void setIsLiteralResultAsStylesheet(boolean)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        z0 := @parameter0: boolean;

        r0.<org.apache.xalan.templates.ElemLiteralResult: boolean isLiteralResultAsStylesheet> = z0;

        return;
    }

    public void setLocalName(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName> = r1;

        return;
    }

    public void setNamespace(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        r1 = "";

     label1:
        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace> = r1;

        return;
    }

    public void setRawName(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName> = r1;

        return;
    }

    public void setVersion(java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_version> = r1;

        return;
    }

    public void setXmlSpace(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.AVT r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>(r1);

        r2 = virtualinvoke r1.<org.apache.xalan.templates.AVT: java.lang.String getSimpleString()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void setXmlSpace(int)>(2);

     label1:
        return;

     label2:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        if $z1 == 0 goto label1;

        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void setXmlSpace(int)>(1);

        return;
    }

    public void throwDOMException(short, java.lang.String)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        short s0;
        java.lang.String r1, $r3;
        org.w3c.dom.DOMException $r2;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        s0 := @parameter0: short;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.w3c.dom.DOMException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>(r1, null);

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(s0, $r3);

        throw $r2;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.templates.ElemLiteralResult: long serialVersionUID> = -8703409074421657260L;

        <org.apache.xalan.templates.ElemLiteralResult: java.lang.String EMPTYSTRING> = "";

        return;
    }
}
