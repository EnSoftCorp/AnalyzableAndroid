final class com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl extends java.lang.Object implements android.hardware.SensorEventListener
{
    private static final float ACCELERATION_TOLERANCE;
    private static final int ACCELEROMETER_DATA_X;
    private static final int ACCELEROMETER_DATA_Y;
    private static final int ACCELEROMETER_DATA_Z;
    private static final int ADJACENT_ORIENTATION_ANGLE_GAP;
    private static final float FILTER_TIME_CONSTANT_MS;
    private static final float FLAT_ANGLE;
    private static final long FLAT_TIME_NANOS;
    private static final float MAX_ACCELERATION_MAGNITUDE;
    private static final long MAX_FILTER_DELTA_TIME_NANOS;
    private static final int MAX_TILT;
    private static final float MIN_ACCELERATION_MAGNITUDE;
    private static final long NANOS_PER_MS;
    private static final float NEAR_ZERO_MAGNITUDE;
    private static final long PROPOSAL_MIN_TIME_SINCE_ACCELERATION_ENDED_NANOS;
    private static final long PROPOSAL_MIN_TIME_SINCE_FLAT_ENDED_NANOS;
    private static final long PROPOSAL_MIN_TIME_SINCE_SWING_ENDED_NANOS;
    private static final long PROPOSAL_SETTLE_TIME_NANOS;
    private static final float RADIANS_TO_DEGREES;
    private static final float SWING_AWAY_ANGLE_DELTA;
    private static final long SWING_TIME_NANOS;
    private static final int TILT_HISTORY_SIZE;
    private final int[][] TILT_TOLERANCE;
    private long mAccelerationTimestampNanos;
    private long mFlatTimestampNanos;
    private long mLastFilteredTimestampNanos;
    private float mLastFilteredX;
    private float mLastFilteredY;
    private float mLastFilteredZ;
    private int mPredictedRotation;
    private long mPredictedRotationTimestampNanos;
    private int mProposedRotation;
    private long mSwingTimestampNanos;
    private float[] mTiltHistory;
    private int mTiltHistoryIndex;
    private long[] mTiltHistoryTimestampNanos;
    final com.android.internal.policy.impl.WindowOrientationListener this$0;

    void <init>(com.android.internal.policy.impl.WindowOrientationListener)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        com.android.internal.policy.impl.WindowOrientationListener r1;
        int[][] $r2;
        int[] $r3, $r4, $r5, $r6;
        float[] $r7;
        long[] $r8;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        r1 := @parameter0: com.android.internal.policy.impl.WindowOrientationListener;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: com.android.internal.policy.impl.WindowOrientationListener this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (int[])[4];

        $r3 = newarray (int)[2];

        $r3[0] = -25;

        $r3[1] = 70;

        $r2[0] = $r3;

        $r4 = newarray (int)[2];

        $r4[0] = -25;

        $r4[1] = 65;

        $r2[1] = $r4;

        $r5 = newarray (int)[2];

        $r5[0] = -25;

        $r5[1] = 60;

        $r2[2] = $r5;

        $r6 = newarray (int)[2];

        $r6[0] = -25;

        $r6[1] = 65;

        $r2[3] = $r6;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int[][] TILT_TOLERANCE> = $r2;

        $r7 = newarray (float)[40];

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float[] mTiltHistory> = $r7;

        $r8 = newarray (long)[40];

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long[] mTiltHistoryTimestampNanos> = $r8;

        return;
    }

    static void access$000(com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;

        r0 := @parameter0: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void resetLocked()>();

        return;
    }

    private void addTiltHistoryEntryLocked(long, float)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        long l0;
        float f0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        float[] $r1;
        long[] $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float[] mTiltHistory>;

        $i1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex>;

        $r1[$i1] = f0;

        $r2 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long[] mTiltHistoryTimestampNanos>;

        $i2 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex>;

        $r2[$i2] = l0;

        $i3 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex>;

        $i4 = 1 + $i3;

        $i5 = $i4 % 40;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex> = $i5;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long[] mTiltHistoryTimestampNanos>;

        $i6 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex>;

        $r3[$i6] = -9223372036854775808L;

        return;
    }

    private void clearPredictedRotationLocked()
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mPredictedRotation> = -1;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mPredictedRotationTimestampNanos> = -9223372036854775808L;

        return;
    }

    private void clearTiltHistoryLocked()
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        long[] $r1;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long[] mTiltHistoryTimestampNanos>;

        $r1[0] = -9223372036854775808L;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex> = 1;

        return;
    }

    private boolean isAcceleratingLocked(float)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        float f0;
        byte $b0, $b1;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 5.80665F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpl 13.80665F;

        if $b1 <= 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isFlatLocked(long)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        long l0, $l3, $l4;
        int i1;
        float[] $r1;
        float $f0;
        byte $b2, $b5;
        long[] $r2;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        l0 := @parameter0: long;

        i1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex>;

     label1:
        i1 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int nextTiltHistoryIndexLocked(int)>(i1);

        if i1 < 0 goto label2;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float[] mTiltHistory>;

        $f0 = $r1[i1];

        $b2 = $f0 cmpg 75.0F;

        if $b2 >= 0 goto label3;

     label2:
        return 0;

     label3:
        $r2 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long[] mTiltHistoryTimestampNanos>;

        $l3 = $r2[i1];

        $l4 = 1000000000L + $l3;

        $b5 = $l4 cmp l0;

        if $b5 > 0 goto label1;

        return 1;
    }

    private boolean isOrientationAngleAcceptableLocked(int, int)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        com.android.internal.policy.impl.WindowOrientationListener $r1;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: com.android.internal.policy.impl.WindowOrientationListener this$0>;

        i2 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: int access$300(com.android.internal.policy.impl.WindowOrientationListener)>($r1);

        if i2 < 0 goto label6;

        if i0 == i2 goto label1;

        $i12 = i2 + 1;

        $i13 = $i12 % 4;

        if i0 != $i13 goto label4;

     label1:
        $i5 = i0 * 90;

        $i6 = -45 + $i5;

        i3 = 22 + $i6;

        if i0 != 0 goto label3;

        if i1 < 315 goto label4;

        $i11 = i3 + 360;

        if i1 >= $i11 goto label4;

     label2:
        return 0;

     label3:
        if i1 < i3 goto label2;

     label4:
        if i0 == i2 goto label5;

        $i9 = i2 + 3;

        $i10 = $i9 % 4;

        if i0 != $i10 goto label6;

     label5:
        $i7 = i0 * 90;

        $i8 = 45 + $i7;

        i4 = -22 + $i8;

        if i0 != 0 goto label7;

        if i1 > 45 goto label6;

        if i1 > i4 goto label2;

     label6:
        return 1;

     label7:
        if i1 <= i4 goto label6;

        return 0;
    }

    private boolean isPredictedRotationAcceptableLocked(long)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        long l0, $l1, $l2, $l4, $l5, $l7, $l8, $l10, $l11;
        byte $b3, $b6, $b9, $b12;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mPredictedRotationTimestampNanos>;

        $l2 = 40000000L + $l1;

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label2;

     label1:
        return 0;

     label2:
        $l4 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mFlatTimestampNanos>;

        $l5 = 500000000L + $l4;

        $b6 = l0 cmp $l5;

        if $b6 < 0 goto label1;

        $l7 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mSwingTimestampNanos>;

        $l8 = 300000000L + $l7;

        $b9 = l0 cmp $l8;

        if $b9 < 0 goto label1;

        $l10 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mAccelerationTimestampNanos>;

        $l11 = 500000000L + $l10;

        $b12 = l0 cmp $l11;

        if $b12 < 0 goto label1;

        return 1;
    }

    private boolean isSwingingLocked(long, float)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        long l0, $l2, $l3;
        float f0, $f1, $f2;
        int i1;
        long[] $r1;
        byte $b4, $b5;
        float[] $r2;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        i1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mTiltHistoryIndex>;

     label1:
        i1 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int nextTiltHistoryIndexLocked(int)>(i1);

        if i1 < 0 goto label2;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long[] mTiltHistoryTimestampNanos>;

        $l2 = $r1[i1];

        $l3 = 300000000L + $l2;

        $b4 = $l3 cmp l0;

        if $b4 >= 0 goto label3;

     label2:
        return 0;

     label3:
        $r2 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float[] mTiltHistory>;

        $f1 = $r2[i1];

        $f2 = 20.0F + $f1;

        $b5 = $f2 cmpg f0;

        if $b5 > 0 goto label1;

        return 1;
    }

    private boolean isTiltAngleAcceptableLocked(int, int)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        int i0, i1, $i2, $i3;
        int[][] $r1, $r3;
        int[] $r2, $r4;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int[][] TILT_TOLERANCE>;

        $r2 = $r1[i0];

        $i2 = $r2[0];

        if i1 < $i2 goto label1;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int[][] TILT_TOLERANCE>;

        $r4 = $r3[i0];

        $i3 = $r4[1];

        if i1 > $i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    private int nextTiltHistoryIndexLocked(int)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        int i0, i1;
        long[] $r1;
        long $l2;
        byte $b3;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        i0 = 40;

     label1:
        i1 = i0 - 1;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long[] mTiltHistoryTimestampNanos>;

        $l2 = $r1[i1];

        $b3 = $l2 cmp -9223372036854775808L;

        if $b3 == 0 goto label2;

        return i1;

     label2:
        return -1;
    }

    private float remainingMS(long, long)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        long l0, l1, $l3;
        byte $b2;
        float $f0, $f1;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        return 0.0F;

     label1:
        $l3 = l1 - l0;

        $f0 = (float) $l3;

        $f1 = 1.0E-6F * $f0;

        return $f1;
    }

    private void resetLocked()
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mLastFilteredTimestampNanos> = -9223372036854775808L;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mProposedRotation> = -1;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mFlatTimestampNanos> = -9223372036854775808L;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mSwingTimestampNanos> = -9223372036854775808L;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mAccelerationTimestampNanos> = -9223372036854775808L;

        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void clearPredictedRotationLocked()>();

        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void clearTiltHistoryLocked()>();

        return;
    }

    private void updatePredictedRotationLocked(long, int)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        long l0;
        int i1, $i2;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mPredictedRotation>;

        if $i2 == i1 goto label1;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mPredictedRotation> = i1;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mPredictedRotationTimestampNanos> = l0;

     label1:
        return;
    }

    public int getProposedRotationLocked()
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        $i0 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mProposedRotation>;

        return $i0;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        android.hardware.Sensor r1;
        int i0;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl r0;
        android.hardware.SensorEvent r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r80;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46;
        long l0, l1, $l8, $l14, $l15, $l16, $l17, $l18, $l19, $l21, $l22, $l24, $l28, $l29, $l30, $l35;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        int i2, i3, i4, i5, i6, $i9, $i10, $i12, $i13, $i25, $i27, $i32;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.android.internal.policy.impl.WindowOrientationListener $r4, $r9, $r20;
        float[] $r5, $r6, $r7;
        byte $b7, $b23, $b33, $b34, $b39, $b40;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r43, $r44, $r45, $r46, $r47, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r68, $r69, $r70, $r71, $r73, $r74, $r75, $r76, $r77, $r78, $r79;
        java.lang.String $r15, $r38, $r42, $r48, $r59, $r67, $r72;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        r1 := @parameter0: android.hardware.SensorEvent;

        $r4 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: com.android.internal.policy.impl.WindowOrientationListener this$0>;

        r2 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object access$100(com.android.internal.policy.impl.WindowOrientationListener)>($r4);

        entermonitor r2;

     label01:
        $r6 = r1.<android.hardware.SensorEvent: float[] values>;

        f0 = $r6[0];

        $r7 = r1.<android.hardware.SensorEvent: float[] values>;

        f1 = $r7[1];

        $r5 = r1.<android.hardware.SensorEvent: float[] values>;

        f2 = $r5[2];

        $z7 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z7 == 0 goto label02;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Raw acceleration vector: x=");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y=");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r73 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", z=");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", magnitude=");

        $f42 = f0 * f0;

        $f46 = f1 * f1;

        $f44 = $f42 + $f46;

        $f43 = f2 * f2;

        $f45 = $f44 + $f43;

        $f41 = staticinvoke <android.util.FloatMath: float sqrt(float)>($f45);

        $r71 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f41);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r72);

     label02:
        l0 = r1.<android.hardware.SensorEvent: long timestamp>;

        l1 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mLastFilteredTimestampNanos>;

     label03:
        $l8 = l0 - l1;

        $f6 = (float) $l8;

        f3 = 1.0E-6F * $f6;

        $b7 = l0 cmp l1;

        if $b7 < 0 goto label04;

        $l35 = 1000000000L + l1;

        $b34 = l0 cmp $l35;

        if $b34 > 0 goto label04;

        $b33 = f0 cmpl 0.0F;

        if $b33 != 0 goto label20;

        $b40 = f1 cmpl 0.0F;

        if $b40 != 0 goto label20;

        $b39 = f2 cmpl 0.0F;

        if $b39 != 0 goto label20;

     label04:
        $z8 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z8 == 0 goto label05;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", "Resetting orientation listener.");

     label05:
        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void resetLocked()>();

     label06:
        z0 = 1;

     label07:
        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mLastFilteredTimestampNanos> = l0;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredX> = f0;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredY> = f1;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredZ> = f2;

     label08:
        z1 = 0;

        z2 = 0;

        z3 = 0;

        if z0 != 0 goto label13;

     label09:
        $f15 = f0 * f0;

        $f14 = f1 * f1;

        $f13 = $f15 + $f14;

        $f12 = f2 * f2;

        $f11 = $f13 + $f12;

        f4 = staticinvoke <android.util.FloatMath: float sqrt(float)>($f11);

     label10:
        $b23 = f4 cmpg 1.0F;

        if $b23 >= 0 goto label23;

     label11:
        $z17 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z17 == 0 goto label12;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", "Ignoring sensor data, magnitude too close to zero.");

     label12:
        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void clearPredictedRotationLocked()>();

     label13:
        i2 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mProposedRotation>;

        $i10 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mPredictedRotation>;

        if $i10 < 0 goto label14;

        $z11 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: boolean isPredictedRotationAcceptableLocked(long)>(l0);

        if $z11 == 0 goto label15;

     label14:
        $i9 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mPredictedRotation>;

        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mProposedRotation> = $i9;

     label15:
        i3 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mProposedRotation>;

        $z9 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z9 == 0 goto label16;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result: currentRotation=");

        $r20 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: com.android.internal.policy.impl.WindowOrientationListener this$0>;

        $i13 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: int access$300(com.android.internal.policy.impl.WindowOrientationListener)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r16 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", proposedRotation=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", predictedRotation=");

        $i12 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mPredictedRotation>;

        $r26 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeDeltaMS=");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isAccelerating=");

        $r22 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isFlat=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isSwinging=");

        $r33 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilSettledMS=");

        $l16 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mPredictedRotationTimestampNanos>;

        $l15 = 40000000L + $l16;

        $f7 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float remainingMS(long,long)>(l0, $l15);

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f7);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilAccelerationDelayExpiredMS=");

        $l14 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mAccelerationTimestampNanos>;

        $l19 = 500000000L + $l14;

        $f9 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float remainingMS(long,long)>(l0, $l19);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f9);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilFlatDelayExpiredMS=");

        $l18 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mFlatTimestampNanos>;

        $l17 = 500000000L + $l18;

        $f8 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float remainingMS(long,long)>(l0, $l17);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f8);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilSwingDelayExpiredMS=");

        $l22 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mSwingTimestampNanos>;

        $l21 = 300000000L + $l22;

        $f10 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float remainingMS(long,long)>(l0, $l21);

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f10);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r38);

     label16:
        exitmonitor r2;

     label17:
        if i3 == i2 goto label19;

        if i3 < 0 goto label19;

        $z10 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z10 == 0 goto label18;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Proposed rotation changed!  proposedRotation=");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldProposedRotation=");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r15);

     label18:
        $r9 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: com.android.internal.policy.impl.WindowOrientationListener this$0>;

        virtualinvoke $r9.<com.android.internal.policy.impl.WindowOrientationListener: void onProposedRotationChanged(int)>(i3);

     label19:
        return;

     label20:
        $f25 = 200.0F + f3;

        f5 = f3 / $f25;

     label21:
        $f24 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredX>;

        $f23 = f0 - $f24;

        $f29 = f5 * $f23;

        $f22 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredX>;

        f0 = $f29 + $f22;

        $f30 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredY>;

        $f27 = f1 - $f30;

        $f33 = f5 * $f27;

        $f28 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredY>;

        f1 = $f33 + $f28;

        $f34 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredZ>;

        $f31 = f2 - $f34;

        $f26 = f5 * $f31;

        $f32 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float mLastFilteredZ>;

        f2 = $f26 + $f32;

        $z18 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z18 == 0 goto label48;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filtered acceleration vector: x=");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r61 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y=");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r69 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", z=");

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);

        $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", magnitude=");

        $f37 = f0 * f0;

        $f40 = f1 * f1;

        $f39 = $f37 + $f40;

        $f36 = f2 * f2;

        $f38 = $f39 + $f36;

        $f35 = staticinvoke <android.util.FloatMath: float sqrt(float)>($f38);

        $r66 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f35);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r67);

     label22:
        goto label48;

     label23:
        z4 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: boolean isAcceleratingLocked(float)>(f4);

     label24:
        z1 = 0;

        if z4 == 0 goto label26;

        z1 = 1;

     label25:
        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mAccelerationTimestampNanos> = l0;

     label26:
        $f17 = f2 / f4;

        $d4 = (double) $f17;

        $d3 = staticinvoke <java.lang.Math: double asin(double)>($d4);

        $d2 = 57.295780181884766 * $d3;

        $l24 = staticinvoke <java.lang.Math: long round(double)>($d2);

        i4 = (int) $l24;

        $f16 = (float) i4;

        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void addTiltHistoryEntryLocked(long,float)>(l0, $f16);

        z6 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: boolean isFlatLocked(long)>(l0);

     label27:
        z2 = 0;

        if z6 == 0 goto label29;

        z2 = 1;

     label28:
        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mFlatTimestampNanos> = l0;

     label29:
        $f19 = (float) i4;

        z5 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: boolean isSwingingLocked(long,float)>(l0, $f19);

     label30:
        z3 = 0;

        if z5 == 0 goto label32;

        z3 = 1;

     label31:
        r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mSwingTimestampNanos> = l0;

     label32:
        $i25 = staticinvoke <java.lang.Math: int abs(int)>(i4);

        if $i25 <= 75 goto label38;

        $z16 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z16 == 0 goto label33;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring sensor data, tilt angle too high: tiltAngle=");

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r59);

     label33:
        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void clearPredictedRotationLocked()>();

     label34:
        goto label13;

     label35:
        $r80 := @caughtexception;

        r3 = $r80;

     label36:
        exitmonitor r2;

     label37:
        throw r3;

     label38:
        $f18 = neg f0;

        d0 = (double) $f18;

        d1 = (double) f1;

     label39:
        $d7 = staticinvoke <java.lang.Math: double atan2(double,double)>(d0, d1);

        $d6 = neg $d7;

        $d5 = 57.295780181884766 * $d6;

        $l28 = staticinvoke <java.lang.Math: long round(double)>($d5);

        i6 = (int) $l28;

     label40:
        if i6 >= 0 goto label41;

        i6 = i6 + 360;

     label41:
        $i27 = i6 + 45;

        i5 = $i27 / 90;

     label42:
        if i5 != 4 goto label43;

        i5 = 0;

     label43:
        $z15 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: boolean isTiltAngleAcceptableLocked(int,int)>(i5, i4);

        if $z15 == 0 goto label45;

        $z13 = specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: boolean isOrientationAngleAcceptableLocked(int,int)>(i5, i6);

        if $z13 == 0 goto label45;

        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void updatePredictedRotationLocked(long,int)>(l0, i5);

        $z12 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z12 == 0 goto label13;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Predicted: tiltAngle=");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", orientationAngle=");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", predictedRotation=");

        $i32 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int mPredictedRotation>;

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", predictedRotationAgeMS=");

        $l29 = r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long mPredictedRotationTimestampNanos>;

        $l30 = l0 - $l29;

        $f20 = (float) $l30;

        $f21 = 1.0E-6F * $f20;

        $r47 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f21);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r48);

     label44:
        goto label13;

     label45:
        $z14 = staticinvoke <com.android.internal.policy.impl.WindowOrientationListener: boolean access$200()>();

        if $z14 == 0 goto label46;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring sensor data, no predicted rotation: tiltAngle=");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r41 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", orientationAngle=");

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r42);

     label46:
        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void clearPredictedRotationLocked()>();

     label47:
        goto label13;

     label48:
        z0 = 0;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label35;
        catch java.lang.Throwable from label02 to label03 with label35;
        catch java.lang.Throwable from label04 to label05 with label35;
        catch java.lang.Throwable from label05 to label06 with label35;
        catch java.lang.Throwable from label07 to label08 with label35;
        catch java.lang.Throwable from label09 to label10 with label35;
        catch java.lang.Throwable from label11 to label12 with label35;
        catch java.lang.Throwable from label12 to label13 with label35;
        catch java.lang.Throwable from label13 to label14 with label35;
        catch java.lang.Throwable from label14 to label15 with label35;
        catch java.lang.Throwable from label15 to label16 with label35;
        catch java.lang.Throwable from label16 to label17 with label35;
        catch java.lang.Throwable from label21 to label22 with label35;
        catch java.lang.Throwable from label23 to label24 with label35;
        catch java.lang.Throwable from label25 to label26 with label35;
        catch java.lang.Throwable from label26 to label27 with label35;
        catch java.lang.Throwable from label28 to label29 with label35;
        catch java.lang.Throwable from label29 to label30 with label35;
        catch java.lang.Throwable from label31 to label32 with label35;
        catch java.lang.Throwable from label32 to label33 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label35;
        catch java.lang.Throwable from label39 to label40 with label35;
        catch java.lang.Throwable from label41 to label42 with label35;
        catch java.lang.Throwable from label43 to label44 with label35;
        catch java.lang.Throwable from label45 to label46 with label35;
        catch java.lang.Throwable from label46 to label47 with label35;
    }

    public static void <clinit>()
    {
        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int TILT_HISTORY_SIZE> = 40;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long SWING_TIME_NANOS> = 300000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float SWING_AWAY_ANGLE_DELTA> = 20.0F;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float RADIANS_TO_DEGREES> = 57.29578F;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long PROPOSAL_SETTLE_TIME_NANOS> = 40000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long PROPOSAL_MIN_TIME_SINCE_SWING_ENDED_NANOS> = 300000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long PROPOSAL_MIN_TIME_SINCE_FLAT_ENDED_NANOS> = 500000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long PROPOSAL_MIN_TIME_SINCE_ACCELERATION_ENDED_NANOS> = 500000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float NEAR_ZERO_MAGNITUDE> = 1.0F;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long NANOS_PER_MS> = 1000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float MIN_ACCELERATION_MAGNITUDE> = 5.80665F;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int MAX_TILT> = 75;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long MAX_FILTER_DELTA_TIME_NANOS> = 1000000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float MAX_ACCELERATION_MAGNITUDE> = 13.80665F;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: long FLAT_TIME_NANOS> = 1000000000L;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float FLAT_ANGLE> = 75.0F;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float FILTER_TIME_CONSTANT_MS> = 200.0F;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int ADJACENT_ORIENTATION_ANGLE_GAP> = 45;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int ACCELEROMETER_DATA_Z> = 2;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int ACCELEROMETER_DATA_Y> = 1;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int ACCELEROMETER_DATA_X> = 0;

        <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: float ACCELERATION_TOLERANCE> = 4.0F;

        return;
    }
}
