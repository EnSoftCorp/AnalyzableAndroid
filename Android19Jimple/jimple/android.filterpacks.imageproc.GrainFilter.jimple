public class android.filterpacks.imageproc.GrainFilter extends android.filterfw.core.Filter
{
    private static final int RAND_THRESHOLD;
    private android.filterfw.core.Program mGrainProgram;
    private final java.lang.String mGrainShader;
    private int mHeight;
    private android.filterfw.core.Program mNoiseProgram;
    private final java.lang.String mNoiseShader;
    private java.util.Random mRandom;
    private float mScale;
    private int mTarget;
    private int mTileSize;
    private int mWidth;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.GrainFilter r0;
        java.lang.String r1;
        java.util.Random $r2;
        java.util.Date $r3;
        long $l0;

        r0 := @this: android.filterpacks.imageproc.GrainFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.GrainFilter: float mScale> = 0.0F;

        r0.<android.filterpacks.imageproc.GrainFilter: int mTileSize> = 640;

        r0.<android.filterpacks.imageproc.GrainFilter: int mWidth> = 0;

        r0.<android.filterpacks.imageproc.GrainFilter: int mHeight> = 0;

        r0.<android.filterpacks.imageproc.GrainFilter: int mTarget> = 0;

        r0.<android.filterpacks.imageproc.GrainFilter: java.lang.String mNoiseShader> = "precision mediump float;\nuniform vec2 seed;\nvarying vec2 v_texcoord;\nfloat rand(vec2 loc) {\n  float theta1 = dot(loc, vec2(0.9898, 0.233));\n  float theta2 = dot(loc, vec2(12.0, 78.0));\n  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\n  float temp = mod(197.0 * value, 1.0) + value;\n  float part1 = mod(220.0 * temp, 1.0) + temp;\n  float part2 = value * 0.5453;\n  float part3 = cos(theta1 + theta2) * 0.43758;\n  return fract(part1 + part2 + part3);\n}\nvoid main() {\n  gl_FragColor = vec4(rand(v_texcoord + seed), 0.0, 0.0, 1.0);\n}\n";

        r0.<android.filterpacks.imageproc.GrainFilter: java.lang.String mGrainShader> = "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float scale;\nuniform float stepX;\nuniform float stepY;\nvarying vec2 v_texcoord;\nvoid main() {\n  float noise = texture2D(tex_sampler_1, v_texcoord + vec2(-stepX, -stepY)).r * 0.224;\n  noise += texture2D(tex_sampler_1, v_texcoord + vec2(-stepX, stepY)).r * 0.224;\n  noise += texture2D(tex_sampler_1, v_texcoord + vec2(stepX, -stepY)).r * 0.224;\n  noise += texture2D(tex_sampler_1, v_texcoord + vec2(stepX, stepY)).r * 0.224;\n  noise += 0.4448;\n  noise *= scale;\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float energy = 0.33333 * color.r + 0.33333 * color.g + 0.33333 * color.b;\n  float mask = (1.0 - sqrt(energy));\n  float weight = 1.0 - 1.333 * mask * noise;\n  gl_FragColor = vec4(color.rgb * weight, color.a);\n}\n";

        $r2 = new java.util.Random;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        specialinvoke $r2.<java.util.Random: void <init>(long)>($l0);

        r0.<android.filterpacks.imageproc.GrainFilter: java.util.Random mRandom> = $r2;

        return;
    }

    private void updateFrameSize(int, int)
    {
        android.filterpacks.imageproc.GrainFilter r0;
        int i0, i1, $i2, $i3;
        android.filterfw.core.Program $r1, $r2, $r4;
        float $f0, $f1, $f2, $f3;
        java.lang.Float $r3, $r5;

        r0 := @this: android.filterpacks.imageproc.GrainFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.filterpacks.imageproc.GrainFilter: int mWidth> = i0;

        r0.<android.filterpacks.imageproc.GrainFilter: int mHeight> = i1;

        $r1 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram>;

        if $r1 == null goto label1;

        $r2 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram>;

        $i2 = r0.<android.filterpacks.imageproc.GrainFilter: int mWidth>;

        $f0 = (float) $i2;

        $f1 = 0.5F / $f0;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke $r2.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("stepX", $r3);

        $r4 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram>;

        $i3 = r0.<android.filterpacks.imageproc.GrainFilter: int mHeight>;

        $f2 = (float) $i3;

        $f3 = 0.5F / $f2;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r4.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("stepY", $r5);

        specialinvoke r0.<android.filterpacks.imageproc.GrainFilter: void updateParameters()>();

     label1:
        return;
    }

    private void updateParameters()
    {
        android.filterpacks.imageproc.GrainFilter r0;
        float[] r1;
        java.util.Random $r2, $r3;
        float $f0, $f1, $f2;
        android.filterfw.core.Program $r4, $r5;
        java.lang.Float $r6;

        r0 := @this: android.filterpacks.imageproc.GrainFilter;

        r1 = newarray (float)[2];

        $r2 = r0.<android.filterpacks.imageproc.GrainFilter: java.util.Random mRandom>;

        $f0 = virtualinvoke $r2.<java.util.Random: float nextFloat()>();

        r1[0] = $f0;

        $r3 = r0.<android.filterpacks.imageproc.GrainFilter: java.util.Random mRandom>;

        $f1 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        r1[1] = $f1;

        $r4 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mNoiseProgram>;

        virtualinvoke $r4.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("seed", r1);

        $r5 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram>;

        $f2 = r0.<android.filterpacks.imageproc.GrainFilter: float mScale>;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke $r5.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("scale", $r6);

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Program $r0, $r4;
        android.filterpacks.imageproc.GrainFilter r1;
        java.lang.String r2;
        android.filterfw.core.FilterContext r3;

        r1 := @this: android.filterpacks.imageproc.GrainFilter;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: android.filterfw.core.FilterContext;

        $r4 = r1.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram>;

        if $r4 == null goto label1;

        $r0 = r1.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mNoiseProgram>;

        if $r0 == null goto label1;

        specialinvoke r1.<android.filterpacks.imageproc.GrainFilter: void updateParameters()>();

     label1:
        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.GrainFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;

        r0 := @this: android.filterpacks.imageproc.GrainFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        return r2;
    }

    public void initProgram(android.filterfw.core.FilterContext, int)
    {
        android.filterpacks.imageproc.GrainFilter r0;
        android.filterfw.core.FilterContext r1;
        int i0, $i1, $i2;
        android.filterfw.core.ShaderProgram r2, r3, $r10, $r11;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.filterpacks.imageproc.GrainFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter Sharpen does not support frames of target ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        $r10 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r10.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nuniform vec2 seed;\nvarying vec2 v_texcoord;\nfloat rand(vec2 loc) {\n  float theta1 = dot(loc, vec2(0.9898, 0.233));\n  float theta2 = dot(loc, vec2(12.0, 78.0));\n  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\n  float temp = mod(197.0 * value, 1.0) + value;\n  float part1 = mod(220.0 * temp, 1.0) + temp;\n  float part2 = value * 0.5453;\n  float part3 = cos(theta1 + theta2) * 0.43758;\n  return fract(part1 + part2 + part3);\n}\nvoid main() {\n  gl_FragColor = vec4(rand(v_texcoord + seed), 0.0, 0.0, 1.0);\n}\n");

        r2 = $r10;

        $i1 = r0.<android.filterpacks.imageproc.GrainFilter: int mTileSize>;

        virtualinvoke r2.<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)>($i1);

        r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mNoiseProgram> = r2;

        $r11 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r11.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float scale;\nuniform float stepX;\nuniform float stepY;\nvarying vec2 v_texcoord;\nvoid main() {\n  float noise = texture2D(tex_sampler_1, v_texcoord + vec2(-stepX, -stepY)).r * 0.224;\n  noise += texture2D(tex_sampler_1, v_texcoord + vec2(-stepX, stepY)).r * 0.224;\n  noise += texture2D(tex_sampler_1, v_texcoord + vec2(stepX, -stepY)).r * 0.224;\n  noise += texture2D(tex_sampler_1, v_texcoord + vec2(stepX, stepY)).r * 0.224;\n  noise += 0.4448;\n  noise *= scale;\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float energy = 0.33333 * color.r + 0.33333 * color.g + 0.33333 * color.b;\n  float mask = (1.0 - sqrt(energy));\n  float weight = 1.0 - 1.333 * mask * noise;\n  gl_FragColor = vec4(color.rgb * weight, color.a);\n}\n");

        r3 = $r11;

        $i2 = r0.<android.filterpacks.imageproc.GrainFilter: int mTileSize>;

        virtualinvoke r3.<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)>($i2);

        r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram> = r3;

        r0.<android.filterpacks.imageproc.GrainFilter: int mTarget> = i0;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.GrainFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r4, r5;
        android.filterfw.core.FrameFormat r3;
        android.filterfw.core.Frame[] r6, r7, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.filterfw.core.FrameManager $r9, $r10;
        android.filterfw.core.Program $r11, $r13, $r15, $r17;

        r0 := @this: android.filterpacks.imageproc.GrainFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        r3 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i1 = $i0 / 2;

        $i2 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i3 = $i2 / 2;

        staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>($i1, $i3, 3, 3);

        $r9 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r4 = virtualinvoke $r9.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r3);

        $r10 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r5 = virtualinvoke $r10.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r3);

        $r11 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mNoiseProgram>;

        if $r11 == null goto label1;

        $r17 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram>;

        if $r17 == null goto label1;

        $i10 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        $i11 = r0.<android.filterpacks.imageproc.GrainFilter: int mTarget>;

        if $i10 == $i11 goto label2;

     label1:
        $i4 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        virtualinvoke r0.<android.filterpacks.imageproc.GrainFilter: void initProgram(android.filterfw.core.FilterContext,int)>(r1, $i4);

        specialinvoke r0.<android.filterpacks.imageproc.GrainFilter: void updateParameters()>();

     label2:
        $i6 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i5 = r0.<android.filterpacks.imageproc.GrainFilter: int mWidth>;

        if $i6 != $i5 goto label3;

        $i9 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i12 = r0.<android.filterpacks.imageproc.GrainFilter: int mHeight>;

        if $i9 == $i12 goto label4;

     label3:
        $i8 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i7 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        specialinvoke r0.<android.filterpacks.imageproc.GrainFilter: void updateFrameSize(int,int)>($i8, $i7);

     label4:
        r6 = newarray (android.filterfw.core.Frame)[0];

        $r13 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mNoiseProgram>;

        virtualinvoke $r13.<android.filterfw.core.Program: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r6, r4);

        $r12 = newarray (android.filterfw.core.Frame)[2];

        $r12[0] = r2;

        $r12[1] = r4;

        r7 = $r12;

        $r15 = r0.<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.Program mGrainProgram>;

        virtualinvoke $r15.<android.filterfw.core.Program: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r7, r5);

        virtualinvoke r0.<android.filterpacks.imageproc.GrainFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r5);

        virtualinvoke r5.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        virtualinvoke r4.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.GrainFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.GrainFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>(3);

        virtualinvoke r0.<android.filterpacks.imageproc.GrainFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        virtualinvoke r0.<android.filterpacks.imageproc.GrainFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }

    public static void <clinit>()
    {
        <android.filterpacks.imageproc.GrainFilter: int RAND_THRESHOLD> = 128;

        return;
    }
}
