public class org.apache.xml.dtm.ref.dom2dtm.DOM2DTM extends org.apache.xml.dtm.ref.DTMDefaultBaseIterators
{
    static final boolean JJK_DEBUG;
    static final boolean JJK_NEWCODE;
    static final java.lang.String NAMESPACE_DECL_NS;
    private int m_last_kid;
    private int m_last_parent;
    protected java.util.Vector m_nodes;
    private transient boolean m_nodesAreProcessed;
    private transient org.w3c.dom.Node m_pos;
    boolean m_processedFirstElement;
    private transient org.w3c.dom.Node m_root;
    org.apache.xml.utils.TreeWalker m_walker;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.dom.DOMSource, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.dom.DOMSource r2;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0;
        org.w3c.dom.Node r5, $r9, $r10, $r11, $r13;
        org.w3c.dom.NamedNodeMap r6;
        java.util.Vector $r7;
        org.apache.xml.utils.TreeWalker $r8;
        short $s7;
        org.apache.xml.utils.SuballocatedIntVector $r12, $r14;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.dom.DOMSource;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean)>(r1, r2, i0, r3, r4, z0);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = 0;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = -1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement> = 0;

        $r7 = new java.util.Vector;

        specialinvoke $r7.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes> = $r7;

        $r8 = new org.apache.xml.utils.TreeWalker;

        specialinvoke $r8.<org.apache.xml.utils.TreeWalker: void <init>(org.xml.sax.ContentHandler)>(null);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.TreeWalker m_walker> = $r8;

        r5 = virtualinvoke r2.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root> = r5;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos> = r5;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = -1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = -1;

        $r9 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $i5 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>($r9, $i5, $i4, -1);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = $i6;

        $r10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s7 = interfaceinvoke $r10.<org.w3c.dom.Node: short getNodeType()>();

        if 1 != $s7 goto label5;

        $r11 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r6 = interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if r6 != null goto label3;

        i1 = 0;

     label1:
        if i1 <= 0 goto label5;

        i2 = -1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        $r13 = interfaceinvoke r6.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>($r13, 0, i2, -1);

        $r14 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, i2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i1 = interfaceinvoke r6.<org.w3c.dom.NamedNodeMap: int getLength()>();

        goto label1;

     label4:
        $r12 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, i2);

     label5:
        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_nodesAreProcessed> = 0;

        return;
    }

    protected static void dispatchNodeData(org.w3c.dom.Node, org.xml.sax.ContentHandler, int) throws org.xml.sax.SAXException
    {
        org.w3c.dom.Node r0, r3;
        org.xml.sax.ContentHandler r1;
        int i0, $i2, $i3;
        java.lang.String r2;
        short $s1;
        boolean $z0;
        char[] $r4;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler $r5;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.xml.sax.ContentHandler;

        i0 := @parameter2: int;

        $s1 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        tableswitch($s1)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label4;
            case 8: goto label4;
            case 9: goto label2;
            case 10: goto label1;
            case 11: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label3:
        if r3 == null goto label1;

        $i3 = i0 + 1;

        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>(r3, r1, $i3);

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label3;

     label4:
        if i0 != 0 goto label1;

     label5:
        r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = r1 instanceof org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler;

        if $z0 == 0 goto label6;

        $r5 = (org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler) r1;

        interfaceinvoke $r5.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler: void characters(org.w3c.dom.Node)>(r0);

        return;

     label6:
        $r4 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r4, 0, $i2);

        return;
    }

    private int getHandleFromNode(org.w3c.dom.Node)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Node r1;
        int i0, i1, $i2;
        boolean z0;
        java.util.Vector $r2, $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.w3c.dom.Node;

        if r1 == null goto label4;

        $r2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        if $r5 != r1 goto label2;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeHandle(int)>(i1);

        return $i2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean nextNode()>();

        $r3 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if z0 != 0 goto label1;

        if i1 < i0 goto label1;

     label4:
        return -1;
    }

    protected static void getNodeData(org.w3c.dom.Node, org.apache.xml.utils.FastStringBuffer)
    {
        org.w3c.dom.Node r0, r2;
        org.apache.xml.utils.FastStringBuffer r1;
        short $s0;
        java.lang.String $r3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label1;
            case 11: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label3:
        if r2 == null goto label1;

        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r2, r1);

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label3;

     label4:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r3);

        return;
    }

    private static boolean isSpace(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>(c0);

        return $z0;
    }

    private org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Node r1, r2, r3, r4;
        short s0, $s1, $s2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if r2 != null goto label2;

        r4 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label1:
        if r4 == null goto label2;

        $s2 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if 5 != $s2 goto label2;

        r2 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if r2 == null goto label4;

     label2:
        r3 = r2;

     label3:
        if r3 == null goto label6;

        $s1 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        if 5 != $s1 goto label6;

        $z0 = interfaceinvoke r3.<org.w3c.dom.Node: boolean hasChildNodes()>();

        if $z0 == 0 goto label5;

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label4:
        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label1;

     label5:
        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label3;

     label6:
        if r3 == null goto label7;

        s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        if 3 == s0 goto label7;

        if 4 == s0 goto label7;

        r3 = null;

     label7:
        return r3;
    }

    protected int addNode(org.w3c.dom.Node, int, int, int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Node r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r2, r3, r5, $r15, $r22;
        org.apache.xml.dtm.ref.ExpandedNameTable r4;
        org.apache.xml.dtm.ref.DTMManagerDefault r7;
        java.util.Vector $r8, $r11;
        org.apache.xml.utils.SuballocatedIntVector $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r25;
        boolean $z0, $z1;
        org.apache.xml.dtm.DTMManager $r20, $r21;
        java.lang.ClassCastException $r23, $r24;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r8 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        i3 = virtualinvoke $r8.<java.util.Vector: int size()>();

        $r9 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i8 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $i7 = i3 >>> 16;

        if $i8 != $i7 goto label03;

     label01:
        $r20 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.dtm.DTMManager m_mgr>;

        if $r20 != null goto label15;

        $r24 = new java.lang.ClassCastException;

        specialinvoke $r24.<java.lang.ClassCastException: void <init>()>();

        throw $r24;

     label02:
        $r23 := @caughtexception;

        $r22 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_NO_DTMIDS_AVAIL", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void error(java.lang.String)>($r22);

     label03:
        $i10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_size>;

        $i9 = 1 + $i10;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_size> = $i9;

        if -1 != i2 goto label17;

        i4 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

     label04:
        if 2 != i4 goto label06;

        r5 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z1 != 0 goto label05;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 == 0 goto label06;

     label05:
        i4 = 13;

     label06:
        $r11 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        $r10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-2, i3);

        $r13 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-2, i3);

        $r12 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i1, i3);

        $r14 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i0, i3);

        if -1 == i0 goto label07;

        if i4 == 2 goto label07;

        if i4 == 13 goto label07;

        $r19 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i11 = virtualinvoke $r19.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if -2 != $i11 goto label07;

        $r18 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i3, i0);

     label07:
        r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if i4 != 7 goto label18;

        r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

     label08:
        if i4 == 1 goto label09;

        if i4 != 2 goto label10;

     label09:
        if r3 != null goto label10;

        r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

     label10:
        r4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r15 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r15 != null goto label11;

        if i4 == 1 goto label11;

        if i4 != 2 goto label11;

     label11:
        if r3 == null goto label19;

        i5 = virtualinvoke r4.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r2, r3, i4);

     label12:
        $r16 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i5, i3);

        virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void indexNode(int,int)>(i5, i3);

        if -1 == i1 goto label13;

        $r17 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r17.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i3, i1);

     label13:
        if i4 != 13 goto label14;

        virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void declareNamespaceInContext(int,int)>(i0, i3);

     label14:
        return i3;

     label15:
        $r21 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.dtm.DTMManager m_mgr>;

        r7 = (org.apache.xml.dtm.ref.DTMManagerDefault) $r21;

        i6 = virtualinvoke r7.<org.apache.xml.dtm.ref.DTMManagerDefault: int getFirstFreeDTMID()>();

        virtualinvoke r7.<org.apache.xml.dtm.ref.DTMManagerDefault: void addDTM(org.apache.xml.dtm.DTM,int,int)>(r0, i6, i3);

        $r25 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i12 = i6 << 16;

        virtualinvoke $r25.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i12);

     label16:
        goto label03;

     label17:
        i4 = i2;

        goto label04;

     label18:
        r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        goto label08;

     label19:
        i5 = virtualinvoke r4.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(int)>(i4);

        goto label12;

        catch java.lang.ClassCastException from label01 to label02 with label02;
        catch java.lang.ClassCastException from label15 to label16 with label02;
    }

    public void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0;
        org.xml.sax.ContentHandler r1;
        boolean z0;
        short s1;
        org.w3c.dom.Node r2;
        org.apache.xml.utils.XMLString $r3, $r4;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xml.sax.ContentHandler;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.utils.XMLString: org.apache.xml.utils.XMLString fixWhiteSpace(boolean,boolean,boolean)>(1, 1, 0);

        interfaceinvoke $r4.<org.apache.xml.utils.XMLString: void dispatchCharactersEvents(org.xml.sax.ContentHandler)>(r1);

     label1:
        return;

     label2:
        s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

        r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>(r2, r1, 0);

        if 3 == s1 goto label3;

        if 4 != s1 goto label1;

     label3:
        r2 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r2);

        if r2 == null goto label1;

        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>(r2, r1, 0);

        goto label3;
    }

    public void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0;
        org.xml.sax.ContentHandler r1, $r4;
        org.apache.xml.utils.TreeWalker r2, $r6;
        java.lang.Throwable r3, $r7;
        org.w3c.dom.Node $r5;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xml.sax.ContentHandler;

        r2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.TreeWalker m_walker>;

        $r4 = virtualinvoke r2.<org.apache.xml.utils.TreeWalker: org.xml.sax.ContentHandler getContentHandler()>();

        if $r4 == null goto label1;

        $r6 = new org.apache.xml.utils.TreeWalker;

        specialinvoke $r6.<org.apache.xml.utils.TreeWalker: void <init>(org.xml.sax.ContentHandler)>(null);

        r2 = $r6;

     label1:
        virtualinvoke r2.<org.apache.xml.utils.TreeWalker: void setContentHandler(org.xml.sax.ContentHandler)>(r1);

     label2:
        $r5 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        virtualinvoke r2.<org.apache.xml.utils.TreeWalker: void traverseFragment(org.w3c.dom.Node)>($r5);

     label3:
        virtualinvoke r2.<org.apache.xml.utils.TreeWalker: void setContentHandler(org.xml.sax.ContentHandler)>(null);

        return;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        virtualinvoke r2.<org.apache.xml.utils.TreeWalker: void setContentHandler(org.xml.sax.ContentHandler)>(null);

        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int getAttributeNode(int, java.lang.String, java.lang.String)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, i1, i2;
        java.lang.String r1, r2, r4, r5;
        short s3, $s4;
        org.w3c.dom.Node r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i1 = -1;

        if r1 != null goto label1;

        r1 = "";

     label1:
        $s4 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

        if 1 != $s4 goto label5;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeIdentity(int)>(i0);

     label2:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getNextNodeIdentity(int)>(i2);

        if -1 == i2 goto label5;

        s3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short _type(int)>(i2);

        if s3 == 2 goto label3;

        if s3 != 13 goto label5;

     label3:
        r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node lookupNode(int)>(i2);

        r4 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if r4 != null goto label4;

        r4 = "";

     label4:
        r5 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeHandle(int)>(i2);

     label5:
        return i1;
    }

    public org.xml.sax.ContentHandler getContentHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.DTDHandler getDTDHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.ext.DeclHandler getDeclHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public java.lang.String getDocumentTypeDeclarationPublicIdentifier()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Document r1;
        org.w3c.dom.DocumentType r2;
        org.w3c.dom.Node $r3, $r4, $r6;
        short $s0;
        java.lang.String $r5;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $r3 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s0 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 9 goto label2;

        $r6 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r1 = (org.w3c.dom.Document) $r6;

     label1:
        if r1 == null goto label3;

        r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if r2 == null goto label3;

        $r5 = interfaceinvoke r2.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        return $r5;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r1 = interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        goto label1;

     label3:
        return null;
    }

    public java.lang.String getDocumentTypeDeclarationSystemIdentifier()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Document r1;
        org.w3c.dom.DocumentType r2;
        org.w3c.dom.Node $r3, $r4, $r6;
        short $s0;
        java.lang.String $r5;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $r3 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s0 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 9 goto label2;

        $r6 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r1 = (org.w3c.dom.Document) $r6;

     label1:
        if r1 == null goto label3;

        r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if r2 == null goto label3;

        $r5 = interfaceinvoke r2.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        return $r5;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r1 = interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        goto label1;

     label3:
        return null;
    }

    public int getElementById(java.lang.String)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.lang.String r1;
        org.w3c.dom.Document r2;
        org.w3c.dom.Element r3;
        int i0, i1, $i3;
        org.w3c.dom.Node $r4, $r5, $r7, $r8;
        short $s2;
        java.util.Vector $r6;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s2 = interfaceinvoke $r4.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 != 9 goto label4;

        $r8 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r2 = (org.w3c.dom.Document) $r8;

     label1:
        if r2 == null goto label5;

        r3 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Element getElementById(java.lang.String)>(r1);

        if r3 == null goto label5;

        i0 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getHandleFromNode(org.w3c.dom.Node)>(r3);

        if -1 != i0 goto label3;

        $r6 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i3 = virtualinvoke $r6.<java.util.Vector: int size()>();

        i1 = -1 + $i3;

     label2:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getNextNodeIdentity(int)>(i1);

        if -1 == i1 goto label3;

        $r7 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i1);

        if $r7 != r3 goto label2;

        i0 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getHandleFromNode(org.w3c.dom.Node)>(r3);

     label3:
        return i0;

     label4:
        $r5 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r2 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        goto label1;

     label5:
        return -1;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.ErrorHandler getErrorHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public int getHandleOfNode(org.w3c.dom.Node)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Node r1, r2, $r3, $r4, $r6, $r7, $r8, $r10;
        short $s0, $s2, $s3;
        org.w3c.dom.Attr $r5;
        int $i1;
        org.w3c.dom.Document $r9, $r11, $r12;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.w3c.dom.Node;

        if r1 == null goto label7;

        $r3 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        if $r3 == r1 goto label2;

        $r6 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s2 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 != 9 goto label1;

        $r10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r12 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        if $r10 == $r12 goto label2;

     label1:
        $r7 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s3 = interfaceinvoke $r7.<org.w3c.dom.Node: short getNodeType()>();

        if $s3 == 9 goto label7;

        $r8 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r11 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        if $r9 != $r11 goto label7;

     label2:
        r2 = r1;

     label3:
        if r2 == null goto label7;

        $r4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        if r2 != $r4 goto label4;

        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getHandleFromNode(org.w3c.dom.Node)>(r1);

        return $i1;

     label4:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 2 goto label6;

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label5:
        goto label3;

     label6:
        $r5 = (org.w3c.dom.Attr) r2;

        r2 = interfaceinvoke $r5.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        goto label5;

     label7:
        return -1;
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public java.lang.String getLocalName(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, i1, i2, $i4;
        org.w3c.dom.Node r1;
        java.lang.String r2, r3, $r6;
        java.util.Vector $r4;
        java.lang.Object $r5;
        char $c3;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeIdentity(int)>(i0);

        if -1 != i1 goto label2;

        r2 = null;

     label1:
        return r2;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r1 = (org.w3c.dom.Node) $r5;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if r2 != null goto label1;

        r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        if 35 != $c3 goto label3;

        return "";

     label3:
        i2 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(58);

        if i2 >= 0 goto label4;

        return r3;

     label4:
        $i4 = i2 + 1;

        $r6 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i4);

        return $r6;
    }

    public java.lang.String getNamespaceURI(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, i1;
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.w3c.dom.Node $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        $r3 = (org.w3c.dom.Node) $r2;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        return $r4;
    }

    protected int getNextNodeIdentity(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, i1, $i2;
        java.util.Vector $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        i1 = i0 + 1;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i2 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i1 < $i2 goto label1;

        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean nextNode()>();

        if $z0 != 0 goto label1;

        i1 = -1;

     label1:
        return i1;
    }

    public org.w3c.dom.Node getNode(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, i1;
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.w3c.dom.Node $r3;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeIdentity(int)>(i0);

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        $r3 = (org.w3c.dom.Node) $r2;

        return $r3;
    }

    public java.lang.String getNodeName(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0;
        org.w3c.dom.Node $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        return $r2;
    }

    public java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0;
        java.lang.String r1, $r3, $r5;
        short $s1;
        org.w3c.dom.Node $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

        lookupswitch($s1)
        {
            case 1: goto label5;
            case 2: goto label5;
            case 5: goto label5;
            case 7: goto label5;
            case 13: goto label3;
            default: goto label1;
        };

     label1:
        r1 = "";

     label2:
        return r1;

     label3:
        $r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r1 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <org.apache.xml.utils.QName: java.lang.String getLocalPart(java.lang.String)>(r1);

        return $r3;

     label4:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label2;

        return "";

     label5:
        $r4 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        return $r5;
    }

    public java.lang.String getNodeValue(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, $i2, $i3, $i4;
        short s1;
        org.w3c.dom.Node r1, r2, $r7;
        org.apache.xml.utils.FastStringBuffer r3;
        java.lang.String r4, $r5, $r6, $r8, $r9;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeIdentity(int)>(i0);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int _exptype(int)>($i2);

        if -1 == $i3 goto label2;

        s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

     label1:
        if 3 == s1 goto label3;

        if 4 == s1 goto label3;

        $r7 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r9 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r9;

     label2:
        s1 = -1;

        goto label1;

     label3:
        r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r2 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r1);

        if r2 != null goto label4;

        $r8 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r8;

     label4:
        r3 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

        $r5 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r3.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r5);

     label5:
        if r2 == null goto label6;

        $r6 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r3.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r6);

        r2 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r2);

        goto label5;

     label6:
        $i4 = virtualinvoke r3.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i4 <= 0 goto label8;

        r4 = virtualinvoke r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

     label7:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r3);

        return r4;

     label8:
        r4 = "";

        goto label7;
    }

    public int getNumberOfNodes()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public java.lang.String getPrefix(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, i1, i2, $i4;
        java.lang.String r1, r2, $r4, $r6;
        short $s3;
        org.w3c.dom.Node $r3, $r5;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

        lookupswitch($s3)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 13: goto label2;
            default: goto label1;
        };

     label1:
        return "";

     label2:
        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r2 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i2 >= 0 goto label3;

        return "";

     label3:
        $i4 = i2 + 1;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i4);

        return $r4;

     label4:
        $r5 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r1 = interfaceinvoke $r5.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if i1 >= 0 goto label5;

        return "";

     label5:
        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        return $r6;
    }

    public javax.xml.transform.SourceLocator getSourceLocatorFor(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        return null;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, $i2, $i3;
        short s1;
        org.w3c.dom.Node r1;
        org.apache.xml.utils.FastStringBuffer r2, r6;
        java.lang.Throwable r3, $r15;
        java.lang.String r4, r5, r7, $r12, $r13;
        org.apache.xml.utils.XMLStringFactory $r8, $r10, $r14;
        org.apache.xml.utils.XMLString $r9, $r11, $r16;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

        r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        if 1 == s1 goto label01;

        if 9 == s1 goto label01;

        if 11 != s1 goto label07;

     label01:
        r2 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label02:
        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r1, r2);

        $i2 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i2 <= 0 goto label05;

        r5 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

     label03:
        r4 = r5;

     label04:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r2);

        $r8 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r9 = virtualinvoke $r8.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>(r4);

        return $r9;

     label05:
        r4 = "";

        goto label04;

     label06:
        $r15 := @caughtexception;

        r3 = $r15;

        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r2);

        throw r3;

     label07:
        if 3 == s1 goto label08;

        if 4 != s1 goto label13;

     label08:
        r6 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label09:
        if r1 == null goto label10;

        $r12 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r6.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r12);

        r1 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r1);

        goto label09;

     label10:
        $i3 = virtualinvoke r6.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i3 <= 0 goto label12;

        r7 = virtualinvoke r6.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

     label11:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r6);

        $r10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r11 = virtualinvoke $r10.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>(r7);

        return $r11;

     label12:
        r7 = "";

        goto label11;

     label13:
        $r14 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r13 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r16 = virtualinvoke $r14.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r13);

        return $r16;

        catch java.lang.Throwable from label02 to label03 with label06;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.lang.String r1, r2, $r10;
        org.w3c.dom.Document r3;
        org.w3c.dom.DocumentType r4;
        org.w3c.dom.NamedNodeMap r5;
        org.w3c.dom.Entity r6;
        org.w3c.dom.Node $r7, $r8, $r9, $r11;
        short $s0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: java.lang.String;

        r2 = "";

        $r7 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s0 = interfaceinvoke $r7.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 9 goto label2;

        $r11 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r3 = (org.w3c.dom.Document) $r11;

     label1:
        if r3 == null goto label5;

        r4 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if r4 == null goto label5;

        r5 = interfaceinvoke r4.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>();

        if r5 != null goto label3;

        return "";

     label2:
        $r8 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r3 = interfaceinvoke $r8.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        goto label1;

     label3:
        $r9 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r1);

        r6 = (org.w3c.dom.Entity) $r9;

        if r6 != null goto label4;

        return "";

     label4:
        $r10 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getNotationName()>();

        if $r10 == null goto label5;

        r2 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getSystemId()>();

        if r2 != null goto label5;

        r2 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getPublicId()>();

     label5:
        return r2;
    }

    public boolean isAttributeSpecified(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0;
        short $s1;
        org.w3c.dom.Node $r1;
        org.w3c.dom.Attr $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

        if 2 != $s1 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r2 = (org.w3c.dom.Attr) $r1;

        $z0 = interfaceinvoke $r2.<org.w3c.dom.Attr: boolean getSpecified()>();

        return $z0;

     label1:
        return 0;
    }

    public boolean isWhitespace(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0, $i2;
        short s1;
        org.w3c.dom.Node r1;
        boolean z0;
        org.apache.xml.utils.FastStringBuffer r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: short getNodeType(int)>(i0);

        r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        if 3 == s1 goto label1;

        z0 = 0;

        if 4 != s1 goto label4;

     label1:
        r2 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label2:
        if r1 == null goto label3;

        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r3);

        r1 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r1);

        goto label2;

     label3:
        $i2 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: int length()>();

        z0 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>(0, $i2);

        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r2);

     label4:
        return z0;
    }

    protected org.w3c.dom.Node lookupNode(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        int i0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.w3c.dom.Node $r3;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r3 = (org.w3c.dom.Node) $r2;

        return $r3;
    }

    public boolean needsTwoThreads()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return 0;
    }

    protected boolean nextNode()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Node r1, r2, r3, r4, $r14, $r15;
        short s0, s1, s8, $s16, $s19, $s20, $s28, $s30;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int i2, i3, i4, i5, i6, i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29;
        org.w3c.dom.NamedNodeMap r5;
        org.w3c.dom.Element r6;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode r7, $r10;
        org.apache.xml.utils.SuballocatedIntVector r8, $r11, $r12, $r13, $r20, $r22, $r23, $r24, $r25;
        org.apache.xml.dtm.DTMWSFilter $r9, $r26, $r27;
        java.lang.String $r16, $r17, $r18, $r19, $r21;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $z3 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_nodesAreProcessed>;

        if $z3 == 0 goto label01;

        return 0;

     label01:
        r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos>;

        r2 = null;

        s0 = -1;

     label02:
        $z2 = interfaceinvoke r1.<org.w3c.dom.Node: boolean hasChildNodes()>();

        if $z2 == 0 goto label10;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if r2 == null goto label03;

        $s30 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if 10 != $s30 goto label03;

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label03:
        $s28 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if 5 == $s28 goto label05;

        $i27 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = $i27;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = -1;

        $r27 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if $r27 == null goto label05;

        $r26 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        $i29 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i26 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeHandle(int)>($i29);

        s8 = interfaceinvoke $r26.<org.apache.xml.dtm.DTMWSFilter: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>($i26, r0);

        if 3 != s8 goto label08;

        z1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean getShouldStripWhitespace()>();

     label04:
        virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void pushShouldStripWhitespace(boolean)>(z1);

     label05:
        if r2 == null goto label06;

        s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

     label06:
        if 5 != s0 goto label07;

        r1 = r2;

     label07:
        if 5 == s0 goto label02;

        if r2 != null goto label19;

        $r20 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r20.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, 0);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_nodesAreProcessed> = 1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos> = null;

        return 0;

     label08:
        if 2 != s8 goto label09;

        z1 = 1;

        goto label04;

     label09:
        z1 = 0;

        goto label04;

     label10:
        $i10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        if $i10 == -1 goto label11;

        $r25 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i24 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i25 = virtualinvoke $r25.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i24);

        if $i25 != -2 goto label11;

        $r24 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i23 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        virtualinvoke $r24.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, $i23);

     label11:
        $i9 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        if $i9 == -1 goto label13;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if r2 == null goto label12;

        $s20 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if 10 != $s20 goto label12;

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label12:
        if r2 == null goto label14;

     label13:
        $i11 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        if $i11 != -1 goto label05;

        r2 = null;

        goto label05;

     label14:
        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if r1 != null goto label15;

     label15:
        if r1 == null goto label16;

        $s19 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if 5 == $s19 goto label11;

     label16:
        virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void popShouldStripWhitespace()>();

        $i18 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        if $i18 != -1 goto label18;

        $r23 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i22 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        virtualinvoke $r23.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, $i22);

     label17:
        r8 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        i7 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = i7;

        $i21 = virtualinvoke r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i7);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = $i21;

        goto label11;

     label18:
        $r22 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i17 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        virtualinvoke $r22.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, $i17);

        goto label17;

     label19:
        r3 = null;

        s1 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if 3 == s1 goto label20;

        if 4 != s1 goto label25;

     label20:
        $r9 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if $r9 == null goto label24;

        $z7 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean getShouldStripWhitespace()>();

        if $z7 == 0 goto label24;

        z0 = 1;

     label21:
        r4 = r2;

     label22:
        if r4 == null goto label26;

        r3 = r4;

        $s16 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if 3 != $s16 goto label23;

        s1 = 3;

     label23:
        $r18 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z8 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(java.lang.String)>($r18);

        z0 = z0 & $z8;

        r4 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r4);

        goto label22;

     label24:
        z0 = 0;

        goto label21;

     label25:
        r3 = null;

        z0 = 0;

        if 7 != s1 goto label26;

        $r19 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String toLowerCase()>();

        z0 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("xml");

     label26:
        if z0 != 0 goto label34;

        $i13 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i12 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>(r2, $i13, $i12, s1);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = i2;

        if 1 != s1 goto label34;

        i3 = -1;

        r5 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if r5 != null goto label30;

        i4 = 0;

     label27:
        if i4 <= 0 goto label31;

        i6 = 0;

     label28:
        if i6 >= i4 goto label31;

        $r14 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i6);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>($r14, i2, i3, -1);

        $r12 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, i3);

        $z5 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement>;

        if $z5 != 0 goto label29;

        $r17 = "xmlns:xml";

        $r15 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i6);

        $r16 = interfaceinvoke $r15.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z6 == 0 goto label29;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement> = 1;

     label29:
        i6 = i6 + 1;

        goto label28;

     label30:
        i4 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        goto label27;

     label31:
        $z4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement>;

        if $z4 != 0 goto label33;

        r6 = (org.w3c.dom.Element) r2;

        if i3 != -1 goto label37;

        i5 = i2;

     label32:
        $r10 = new org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode;

        $i14 = i5 + 1;

        $i15 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int makeNodeHandle(int)>($i14);

        specialinvoke $r10.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: void <init>(org.w3c.dom.Element,java.lang.String,java.lang.String,int)>(r6, "xml", "http://www.w3.org/XML/1998/namespace", $i15);

        r7 = $r10;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>(r7, i2, i3, -1);

        $r13 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, i3);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement> = 1;

     label33:
        if i3 == -1 goto label34;

        $r11 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, i3);

     label34:
        if 3 == s1 goto label35;

        if 4 != s1 goto label36;

     label35:
        r2 = r3;

     label36:
        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos> = r2;

        return 1;

     label37:
        i5 = i3;

        goto label32;
    }

    public void setIncrementalSAXSource(org.apache.xml.dtm.ref.IncrementalSAXSource)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource r1;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.apache.xml.dtm.ref.IncrementalSAXSource;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.lang.String NAMESPACE_DECL_NS> = "http://www.w3.org/XML/1998/namespace";

        <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean JJK_NEWCODE> = 1;

        <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean JJK_DEBUG> = 0;

        return;
    }
}
