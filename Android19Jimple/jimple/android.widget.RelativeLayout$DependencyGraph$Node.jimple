class android.widget.RelativeLayout$DependencyGraph$Node extends java.lang.Object
{
    private static final int POOL_LIMIT;
    private static final android.util.Pools$SynchronizedPool sPool;
    final android.util.SparseArray dependencies;
    final android.util.ArrayMap dependents;
    android.view.View view;

    static void <clinit>()
    {
        android.util.Pools$SynchronizedPool $r0;

        <android.widget.RelativeLayout$DependencyGraph$Node: int POOL_LIMIT> = 100;

        $r0 = new android.util.Pools$SynchronizedPool;

        specialinvoke $r0.<android.util.Pools$SynchronizedPool: void <init>(int)>(100);

        <android.widget.RelativeLayout$DependencyGraph$Node: android.util.Pools$SynchronizedPool sPool> = $r0;

        return;
    }

    void <init>()
    {
        android.widget.RelativeLayout$DependencyGraph$Node r0;
        android.util.ArrayMap $r1;
        android.util.SparseArray $r2;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies> = $r2;

        return;
    }

    static android.widget.RelativeLayout$DependencyGraph$Node acquire(android.view.View)
    {
        android.view.View r0;
        android.widget.RelativeLayout$DependencyGraph$Node r1, $r4;
        android.util.Pools$SynchronizedPool $r2;
        java.lang.Object $r3;

        r0 := @parameter0: android.view.View;

        $r2 = <android.widget.RelativeLayout$DependencyGraph$Node: android.util.Pools$SynchronizedPool sPool>;

        $r3 = virtualinvoke $r2.<android.util.Pools$SynchronizedPool: java.lang.Object acquire()>();

        r1 = (android.widget.RelativeLayout$DependencyGraph$Node) $r3;

        if r1 != null goto label1;

        $r4 = new android.widget.RelativeLayout$DependencyGraph$Node;

        specialinvoke $r4.<android.widget.RelativeLayout$DependencyGraph$Node: void <init>()>();

        r1 = $r4;

     label1:
        r1.<android.widget.RelativeLayout$DependencyGraph$Node: android.view.View view> = r0;

        return r1;
    }

    void release()
    {
        android.widget.RelativeLayout$DependencyGraph$Node r0;
        android.util.ArrayMap $r1;
        android.util.SparseArray $r2;
        android.util.Pools$SynchronizedPool $r3;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph$Node;

        r0.<android.widget.RelativeLayout$DependencyGraph$Node: android.view.View view> = null;

        $r1 = r0.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents>;

        virtualinvoke $r1.<android.util.ArrayMap: void clear()>();

        $r2 = r0.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        virtualinvoke $r2.<android.util.SparseArray: void clear()>();

        $r3 = <android.widget.RelativeLayout$DependencyGraph$Node: android.util.Pools$SynchronizedPool sPool>;

        virtualinvoke $r3.<android.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0);

        return;
    }
}
