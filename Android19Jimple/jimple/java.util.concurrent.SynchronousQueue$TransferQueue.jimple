final class java.util.concurrent.SynchronousQueue$TransferQueue extends java.util.concurrent.SynchronousQueue$Transferer
{
    private static final sun.misc.Unsafe UNSAFE;
    private static final long cleanMeOffset;
    private static final long headOffset;
    private static final long tailOffset;
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe;
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode head;
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail;

    static void <clinit>()
    {
        java.lang.Exception r0, $r11;
        sun.misc.Unsafe $r1, $r3, $r6, $r9;
        java.lang.Class $r2, $r5, $r8;
        java.lang.reflect.Field $r4, $r7, $r10;
        long $l0, $l1, $l2;
        java.lang.Error $r12;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE> = $r1;

        $r3 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $r2 = class "java/util/concurrent/SynchronousQueue$TransferQueue";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.SynchronousQueue$TransferQueue: long headOffset> = $l0;

        $r6 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $r5 = class "java/util/concurrent/SynchronousQueue$TransferQueue";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");

        $l1 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <java.util.concurrent.SynchronousQueue$TransferQueue: long tailOffset> = $l1;

        $r9 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $r8 = class "java/util/concurrent/SynchronousQueue$TransferQueue";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("cleanMe");

        $l2 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.SynchronousQueue$TransferQueue: long cleanMeOffset> = $l2;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        r0 = $r11;

        $r12 = new java.lang.Error;

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void <init>()
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, $r2;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        specialinvoke r0.<java.util.concurrent.SynchronousQueue$Transferer: void <init>()>();

        $r2 = new java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        specialinvoke $r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void <init>(java.lang.Object,boolean)>(null, 0);

        r1 = $r2;

        r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head> = r1;

        r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail> = r1;

        return;
    }

    void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        if r1 != $r3 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long headOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        if $z0 == 0 goto label1;

        r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next> = r1;

     label1:
        return;
    }

    void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if $r3 != r1 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long tailOffset>;

        virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

     label1:
        return;
    }

    java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, $r5, $r6;
        java.lang.Object r2, r4;
        boolean z0, $z1;
        long l0, l1, $l3, $l5;
        java.lang.Thread r3, $r7;
        int i2;
        byte $b4, $b6;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        l0 := @parameter3: long;

        if z0 == 0 goto label04;

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l0 + $l5;

     label01:
        r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        $r6 = $r5.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if $r6 != r1 goto label06;

        if z0 == 0 goto label05;

        i2 = <java.util.concurrent.SynchronousQueue: int maxTimedSpins>;

     label02:
        $z1 = virtualinvoke r3.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 == 0 goto label03;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void tryCancel(java.lang.Object)>(r2);

     label03:
        r4 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;

        if r4 == r2 goto label07;

        return r4;

     label04:
        l1 = 0L;

        goto label01;

     label05:
        i2 = <java.util.concurrent.SynchronousQueue: int maxUntimedSpins>;

        goto label02;

     label06:
        i2 = 0;

        goto label02;

     label07:
        if z0 == 0 goto label08;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l1 - $l3;

        $b6 = l0 cmp 0L;

        if $b6 > 0 goto label08;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void tryCancel(java.lang.Object)>(r2);

        goto label02;

     label08:
        if i2 <= 0 goto label09;

        i2 = i2 + -1;

        goto label02;

     label09:
        $r7 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter>;

        if $r7 != null goto label10;

        r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = r3;

        goto label02;

     label10:
        if z0 != 0 goto label11;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        goto label02;

     label11:
        $b4 = l0 cmp 1000L;

        if $b4 <= 0 goto label02;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);

        goto label02;
    }

    boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe>;

        if $r3 != r1 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long cleanMeOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    void clean(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, $r11, $r12;
        boolean $z0, $z2, $z3, $z4, $z5;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = null;

     label1:
        $r11 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if $r11 != r2 goto label3;

        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        r4 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if r4 == null goto label2;

        $z4 = virtualinvoke r4.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isCancelled()>();

        if $z4 == 0 goto label2;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r4);

        goto label1;

     label2:
        r5 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r5 != r3 goto label4;

     label3:
        return;

     label4:
        r6 = r5.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        $r12 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r5 != $r12 goto label1;

        if r6 == null goto label5;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r5, r6);

        goto label1;

     label5:
        if r2 == r5 goto label6;

        r10 = r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if r10 == r2 goto label3;

        $z5 = virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r2, r10);

        if $z5 != 0 goto label3;

     label6:
        r7 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe>;

        if r7 == null goto label9;

        r8 = r7.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if r8 == null goto label7;

        if r8 == r7 goto label7;

        $z3 = virtualinvoke r8.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isCancelled()>();

        if $z3 == 0 goto label7;

        if r8 == r5 goto label8;

        r9 = r8.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if r9 == null goto label8;

        if r9 == r8 goto label8;

        $z2 = virtualinvoke r7.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r8, r9);

        if $z2 == 0 goto label8;

     label7:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r7, null);

     label8:
        if r7 != r1 goto label1;

        return;

     label9:
        $z0 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(null, r1);

        if $z0 == 0 goto label1;

        return;
    }

    java.lang.Object transfer(java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.lang.Object r1, r6;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        long l0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r2, r3, r4, r5, r7, $r8, $r9, $r10, $r11;
        byte $b1;
        java.lang.Thread $r12;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        r2 = null;

        if r1 == null goto label03;

        z1 = 1;

     label01:
        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        r4 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        if r3 == null goto label01;

        if r4 == null goto label01;

        if r4 == r3 goto label02;

        $z5 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isData>;

        if $z5 != z1 goto label11;

     label02:
        r5 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        $r8 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r3 != $r8 goto label01;

        if r5 == null goto label04;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r5);

        goto label01;

     label03:
        r2 = null;

        z1 = 0;

        goto label01;

     label04:
        if z0 == 0 goto label06;

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label06;

        r6 = null;

     label05:
        return r6;

     label06:
        if r2 != null goto label07;

        $r9 = new java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        specialinvoke $r9.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void <init>(java.lang.Object,boolean)>(r1, z1);

        r2 = $r9;

     label07:
        $z3 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(null, r2);

        if $z3 == 0 goto label01;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);

        r6 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.lang.Object,boolean,long)>(r2, r1, z0, l0);

        if r6 != r2 goto label08;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void clean(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);

        return null;

     label08:
        $z4 = virtualinvoke r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isOffList()>();

        if $z4 != 0 goto label10;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);

        if r6 == null goto label09;

        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item> = r2;

     label09:
        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = null;

     label10:
        if r6 != null goto label05;

        return r1;

     label11:
        r7 = r4.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        $r11 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r3 != $r11 goto label01;

        if r7 == null goto label01;

        $r10 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        if r4 != $r10 goto label01;

        r6 = r7.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;

        if r6 == null goto label14;

        z2 = 1;

     label12:
        if z1 == z2 goto label13;

        if r6 == r7 goto label13;

        $z6 = virtualinvoke r7.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casItem(java.lang.Object,java.lang.Object)>(r6, r1);

        if $z6 != 0 goto label15;

     label13:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r4, r7);

        goto label01;

     label14:
        z2 = 0;

        goto label12;

     label15:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r4, r7);

        $r12 = r7.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r12);

        if r6 != null goto label05;

        return r1;
    }
}
