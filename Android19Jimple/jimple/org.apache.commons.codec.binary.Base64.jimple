public class org.apache.commons.codec.binary.Base64 extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder, org.apache.commons.codec.BinaryDecoder
{
    static final int BASELENGTH;
    static final byte[] CHUNK_SEPARATOR;
    static final int CHUNK_SIZE;
    static final int EIGHTBIT;
    static final int FOURBYTE;
    static final int LOOKUPLENGTH;
    static final byte PAD;
    static final int SIGN;
    static final int SIXTEENBIT;
    static final int TWENTYFOURBITGROUP;
    private static byte[] base64Alphabet;
    private static byte[] lookUpBase64Alphabet;

    static void <clinit>()
    {
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i12, $i13, $i15, $i16, $i18, $i19, $i20;
        java.lang.String $r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        byte $b10, $b11, $b14, $b17, $b21, $b22;

        <org.apache.commons.codec.binary.Base64: int TWENTYFOURBITGROUP> = 24;

        <org.apache.commons.codec.binary.Base64: int SIXTEENBIT> = 16;

        <org.apache.commons.codec.binary.Base64: int SIGN> = -128;

        <org.apache.commons.codec.binary.Base64: byte PAD> = 61;

        <org.apache.commons.codec.binary.Base64: int LOOKUPLENGTH> = 64;

        <org.apache.commons.codec.binary.Base64: int FOURBYTE> = 4;

        <org.apache.commons.codec.binary.Base64: int EIGHTBIT> = 8;

        <org.apache.commons.codec.binary.Base64: int CHUNK_SIZE> = 76;

        <org.apache.commons.codec.binary.Base64: int BASELENGTH> = 255;

        $r0 = "\r\n";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR> = $r1;

        $r2 = newarray (byte)[255];

        <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet> = $r2;

        $r3 = newarray (byte)[64];

        <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet> = $r3;

        i0 = 0;

     label01:
        if i0 >= 255 goto label02;

        $r14 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r14[i0] = -1;

        i0 = i0 + 1;

        goto label01;

     label02:
        i1 = 90;

     label03:
        if i1 < 65 goto label04;

        $r13 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i20 = i1 - 65;

        $b21 = (byte) $i20;

        $r13[i1] = $b21;

        i1 = i1 + -1;

        goto label03;

     label04:
        i2 = 122;

     label05:
        if i2 < 97 goto label06;

        $r12 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i19 = i2 - 97;

        $i18 = 26 + $i19;

        $b22 = (byte) $i18;

        $r12[i2] = $b22;

        i2 = i2 + -1;

        goto label05;

     label06:
        i3 = 57;

     label07:
        if i3 < 48 goto label08;

        $r11 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i16 = i3 - 48;

        $i15 = 52 + $i16;

        $b17 = (byte) $i15;

        $r11[i3] = $b17;

        i3 = i3 + -1;

        goto label07;

     label08:
        $r4 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r4[43] = 62;

        $r5 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r5[47] = 63;

        i4 = 0;

     label09:
        if i4 > 25 goto label10;

        $r10 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i13 = i4 + 65;

        $b14 = (byte) $i13;

        $r10[i4] = $b14;

        i4 = i4 + 1;

        goto label09;

     label10:
        i5 = 26;

        i6 = 0;

     label11:
        if i5 > 51 goto label12;

        $r9 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i12 = i6 + 97;

        $b11 = (byte) $i12;

        $r9[i5] = $b11;

        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label11;

     label12:
        i7 = 52;

        i8 = 0;

     label13:
        if i7 > 61 goto label14;

        $r8 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i9 = i8 + 48;

        $b10 = (byte) $i9;

        $r8[i7] = $b10;

        i7 = i7 + 1;

        i8 = i8 + 1;

        goto label13;

     label14:
        $r6 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $r6[62] = 43;

        $r7 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $r7[63] = 47;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.binary.Base64 r0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decodeBase64(byte[])
    {
        byte[] r0, r1, r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int i0, i1, i2, i3, i4, $i12, $i13, $i15, $i16, $i17, $i19, $i20, $i23, $i24, $i30, $i31, $i32, $i33, $i36, $i38, $i42, $i44, $i45, $i48, $i49, $i50, $i51;
        byte b5, b6, b7, b8, b9, b10, b11, $b14, $b18, $b21, $b22, $b25, $b26, $b27, $b28, $b29, $b34, $b35, $b37, $b39, $b40, $b41, $b43, $b46, $b47;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardNonBase64(byte[])>(r0);

        $i13 = lengthof r1;

        if $i13 != 0 goto label2;

        r2 = newarray (byte)[0];

     label1:
        return r2;

     label2:
        $i12 = lengthof r1;

        i0 = $i12 / 4;

        i1 = 0;

        i2 = lengthof r1;

     label3:
        $i15 = i2 - 1;

        $b14 = r1[$i15];

        if $b14 != 61 goto label4;

        i2 = i2 + -1;

        if i2 != 0 goto label3;

        $r8 = newarray (byte)[0];

        return $r8;

     label4:
        $i17 = i2 - i0;

        r2 = newarray (byte)[$i17];

        i3 = 0;

     label5:
        if i3 >= i0 goto label1;

        i4 = i3 * 4;

        $i16 = i4 + 2;

        b5 = r1[$i16];

        $i19 = i4 + 3;

        b6 = r1[$i19];

        $r3 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b18 = r1[i4];

        b7 = $r3[$b18];

        $r4 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i20 = i4 + 1;

        $b21 = r1[$i20];

        b8 = $r4[$b21];

        if b5 == 61 goto label7;

        if b6 == 61 goto label7;

        $r6 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b10 = $r6[b5];

        $r7 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b11 = $r7[b6];

        $i38 = b7 << 2;

        $b37 = b8 >> 4;

        $i42 = $i38 | $b37;

        $b41 = (byte) $i42;

        r2[i1] = $b41;

        $i50 = i1 + 1;

        $b40 = b8 & 15;

        $i45 = $b40 << 4;

        $b39 = b10 >> 2;

        $b46 = 15 & $b39;

        $i44 = $i45 | $b46;

        $b43 = (byte) $i44;

        r2[$i50] = $b43;

        $i51 = i1 + 2;

        $i49 = b10 << 6;

        $i48 = b11 | $i49;

        $b47 = (byte) $i48;

        r2[$i51] = $b47;

     label6:
        i1 = i1 + 3;

        i3 = i3 + 1;

        goto label5;

     label7:
        if b5 != 61 goto label8;

        $i36 = b7 << 2;

        $b35 = b8 >> 4;

        $i33 = $i36 | $b35;

        $b34 = (byte) $i33;

        r2[i1] = $b34;

        goto label6;

     label8:
        if b6 != 61 goto label6;

        $r5 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b9 = $r5[b5];

        $i24 = b7 << 2;

        $b22 = b8 >> 4;

        $i23 = $i24 | $b22;

        $b27 = (byte) $i23;

        r2[i1] = $b27;

        $i30 = i1 + 1;

        $b28 = b8 & 15;

        $i31 = $b28 << 4;

        $b25 = b9 >> 2;

        $b26 = 15 & $b25;

        $i32 = $i31 | $b26;

        $b29 = (byte) $i32;

        r2[$i30] = $b29;

        goto label6;
    }

    static byte[] discardNonBase64(byte[])
    {
        byte[] r0, r1, r2;
        int i0, i1, i2, $i3, $i4;
        byte $b5, $b6;
        boolean $z0;

        r0 := @parameter0: byte[];

        $i3 = lengthof r0;

        r1 = newarray (byte)[$i3];

        i0 = 0;

        i1 = 0;

     label1:
        $i4 = lengthof r0;

        if i1 >= $i4 goto label3;

        $b5 = r0[i1];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b5);

        if $z0 == 0 goto label2;

        i2 = i0 + 1;

        $b6 = r0[i1];

        r1[i0] = $b6;

        i0 = i2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r2 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

        return r2;
    }

    static byte[] discardWhitespace(byte[])
    {
        byte[] r0, r1, r2;
        int i0, i1, i2, $i3, $i4;
        byte $b5, $b6;

        r0 := @parameter0: byte[];

        $i3 = lengthof r0;

        r1 = newarray (byte)[$i3];

        i0 = 0;

        i1 = 0;

     label1:
        $i4 = lengthof r0;

        if i1 >= $i4 goto label4;

        $b5 = r0[i1];

        lookupswitch($b5)
        {
            case 9: goto label3;
            case 10: goto label3;
            case 13: goto label3;
            case 32: goto label3;
            default: goto label2;
        };

     label2:
        i2 = i0 + 1;

        $b6 = r0[i1];

        r1[i0] = $b6;

        i0 = i2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        r2 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

        return r2;
    }

    public static byte[] encodeBase64(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean)
    {
        byte[] r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        boolean z0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i20, $i27, $i29, $i30, $i31, $i33, $i41, $i42, $i44, $i45, $i48, $i49, $i56, $i57, $i60, $i65, $i67, $i68, $i76, $i78, $i79, $i80, $i82, $i83, $i85, $i88, $i89, $i90, $i91, $i92, $i93, $i97, $i98, $i99, $i100;
        byte b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b21, b22, b23, b24, b25, b26, b28, $b32, $b34, $b36, $b37, $b39, $b40, $b43, $b46, $b47, $b50, $b51, $b52, $b53, $b54, $b55, $b59, $b61, $b62, $b63, $b64, $b66, $b69, $b70, $b72, $b75, $b77, $b81, $b84, $b86, $b87, $b94, $b95, $b96;
        short $s35, $s38, $s58, $s71, $s73, $s74;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $i27 = lengthof r0;

        i0 = 8 * $i27;

        i1 = i0 % 24;

        i2 = i0 / 24;

        if i1 == 0 goto label09;

        $i98 = i2 + 1;

        i3 = 4 * $i98;

     label01:
        i4 = 0;

        if z0 == 0 goto label03;

        $r18 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i93 = lengthof $r18;

        if $i93 != 0 goto label10;

        i4 = 0;

     label02:
        $r19 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i100 = lengthof $r19;

        $i99 = i4 * $i100;

        i3 = i3 + $i99;

     label03:
        r1 = newarray (byte)[i3];

        i5 = 0;

        i6 = 76;

        i7 = 0;

        i8 = 0;

     label04:
        if i8 >= i2 goto label14;

        i20 = i8 * 3;

        b19 = r0[i20];

        $i67 = i20 + 1;

        b22 = r0[$i67];

        $i68 = i20 + 2;

        b21 = r0[$i68];

        $b61 = b22 & 15;

        b24 = (byte) $b61;

        $b62 = b19 & 3;

        b23 = (byte) $b62;

        $b63 = b19 & -128;

        if $b63 != 0 goto label11;

        $b94 = b19 >> 2;

        b26 = (byte) $b94;

     label05:
        $b72 = b22 & -128;

        if $b72 != 0 goto label12;

        $b95 = b22 >> 4;

        b25 = (byte) $b95;

     label06:
        $b70 = b21 & -128;

        if $b70 != 0 goto label13;

        $b96 = b21 >> 6;

        b28 = (byte) $b96;

     label07:
        $r10 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b81 = $r10[b26];

        r1[i5] = $b81;

        $i76 = i5 + 1;

        $r11 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i80 = b23 << 4;

        $i82 = b25 | $i80;

        $b77 = $r11[$i82];

        r1[$i76] = $b77;

        $i85 = i5 + 2;

        $r14 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i79 = b24 << 2;

        $i78 = b28 | $i79;

        $b87 = $r14[$i78];

        r1[$i85] = $b87;

        $i83 = i5 + 3;

        $r13 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b86 = b21 & 63;

        $b84 = $r13[$b86];

        r1[$i83] = $b84;

        i5 = i5 + 4;

        if z0 == 0 goto label08;

        if i5 != i6 goto label08;

        $r17 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $r12 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i92 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, r1, i5, $i92);

        i7 = i7 + 1;

        $i91 = i7 + 1;

        $i88 = 76 * $i91;

        $r16 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i89 = lengthof $r16;

        $i90 = i7 * $i89;

        i6 = $i88 + $i90;

        $r15 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i97 = lengthof $r15;

        i5 = i5 + $i97;

     label08:
        i8 = i8 + 1;

        goto label04;

     label09:
        i3 = i2 * 4;

        goto label01;

     label10:
        $f1 = (float) i3;

        $f0 = $f1 / 76.0F;

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i4 = (int) $d0;

        goto label02;

     label11:
        $b64 = b19 >> 2;

        $s73 = 192 ^ $b64;

        b26 = (byte) $s73;

        goto label05;

     label12:
        $b75 = b22 >> 4;

        $s74 = 240 ^ $b75;

        b25 = (byte) $s74;

        goto label06;

     label13:
        $b69 = b21 >> 6;

        $s71 = 252 ^ $b69;

        b28 = (byte) $s71;

        goto label07;

     label14:
        i9 = i8 * 3;

        if i1 != 8 goto label19;

        b15 = r0[i9];

        $b53 = b15 & 3;

        b18 = (byte) $b53;

        $b52 = b15 & -128;

        if $b52 != 0 goto label18;

        $b66 = b15 >> 2;

        b17 = (byte) $b66;

     label15:
        $r9 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b59 = $r9[b17];

        r1[i5] = $b59;

        $i56 = i5 + 1;

        $r8 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i60 = b18 << 4;

        $b55 = $r8[$i60];

        r1[$i56] = $b55;

        $i57 = i5 + 2;

        r1[$i57] = 61;

        $i65 = i5 + 3;

        r1[$i65] = 61;

     label16:
        if z0 == 0 goto label17;

        if i7 >= i4 goto label17;

        $r4 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $r3 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i30 = lengthof $r3;

        $i33 = i3 - $i30;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i29 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, $i33, $i29);

     label17:
        return r1;

     label18:
        $b51 = b15 >> 2;

        $s58 = 192 ^ $b51;

        b17 = (byte) $s58;

        goto label15;

     label19:
        if i1 != 16 goto label16;

        b10 = r0[i9];

        $i31 = i9 + 1;

        b11 = r0[$i31];

        $b32 = b11 & 15;

        b12 = (byte) $b32;

        $b36 = b10 & 3;

        b14 = (byte) $b36;

        $b37 = b10 & -128;

        if $b37 != 0 goto label22;

        $b54 = b10 >> 2;

        b13 = (byte) $b54;

     label20:
        $b39 = b11 & -128;

        if $b39 != 0 goto label23;

        $b47 = b11 >> 4;

        b16 = (byte) $b47;

     label21:
        $r5 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b43 = $r5[b13];

        r1[i5] = $b43;

        $i45 = i5 + 1;

        $r6 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i42 = b14 << 4;

        $i41 = b16 | $i42;

        $b46 = $r6[$i41];

        r1[$i45] = $b46;

        $i49 = i5 + 2;

        $r7 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i44 = b12 << 2;

        $b50 = $r7[$i44];

        r1[$i49] = $b50;

        $i48 = i5 + 3;

        r1[$i48] = 61;

        goto label16;

     label22:
        $b34 = b10 >> 2;

        $s35 = 192 ^ $b34;

        b13 = (byte) $s35;

        goto label20;

     label23:
        $b40 = b11 >> 4;

        $s38 = 240 ^ $b40;

        b16 = (byte) $s38;

        goto label21;
    }

    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 1);

        return $r1;
    }

    public static boolean isArrayByteBase64(byte[])
    {
        byte[] r0, r1;
        int i0, i1;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardWhitespace(byte[])>(r0);

        i0 = lengthof r1;

        if i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        $b2 = r1[i1];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b2);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i1 = i1 + 1;

        goto label3;
    }

    private static boolean isBase64(byte)
    {
        byte b0, $b1;
        byte[] $r0;

        b0 := @parameter0: byte;

        if b0 != 61 goto label2;

     label1:
        return 1;

     label2:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b1 = $r0[b0];

        if $b1 != -1 goto label1;

        return 0;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        java.lang.Object r1;
        boolean $z0;
        byte[] $r2, $r3, $r4;
        org.apache.commons.codec.DecoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 != 0 goto label1;

        $r5 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r5.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 decode is not a byte[]");

        throw $r5;

     label1:
        $r2 = (byte[]) r1;

        $r3 = (byte[]) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>($r3);

        return $r4;
    }

    public byte[] decode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] r1, $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r1);

        return $r2;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        java.lang.Object r1;
        boolean $z0;
        byte[] $r2, $r3, $r4;
        org.apache.commons.codec.EncoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 != 0 goto label1;

        $r5 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 encode is not a byte[]");

        throw $r5;

     label1:
        $r2 = (byte[]) r1;

        $r3 = (byte[]) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r3);

        return $r4;
    }

    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] r1, $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r1, 0);

        return $r2;
    }
}
