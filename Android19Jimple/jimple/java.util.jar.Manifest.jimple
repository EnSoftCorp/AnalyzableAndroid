public class java.util.jar.Manifest extends java.lang.Object implements java.lang.Cloneable
{
    private static final java.lang.reflect.Field BAIS_BUF;
    private static final java.lang.reflect.Field BAIS_POS;
    static final int LINE_LENGTH_LIMIT;
    private static final byte[] LINE_SEPARATOR;
    private static final byte[] VALUE_SEPARATOR;
    private java.util.HashMap chunks;
    private java.util.HashMap entries;
    private java.util.jar.Attributes mainAttributes;
    private int mainEnd;

    static void <clinit>()
    {
        byte[] $r0, $r1;
        java.lang.reflect.Field $r2, $r3;

        <java.util.jar.Manifest: int LINE_LENGTH_LIMIT> = 72;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <java.util.jar.Manifest: byte[] LINE_SEPARATOR> = $r0;

        $r1 = newarray (byte)[2];

        $r1[0] = 58;

        $r1[1] = 32;

        <java.util.jar.Manifest: byte[] VALUE_SEPARATOR> = $r1;

        $r2 = staticinvoke <java.util.jar.Manifest: java.lang.reflect.Field getByteArrayInputStreamField(java.lang.String)>("buf");

        <java.util.jar.Manifest: java.lang.reflect.Field BAIS_BUF> = $r2;

        $r3 = staticinvoke <java.util.jar.Manifest: java.lang.reflect.Field getByteArrayInputStreamField(java.lang.String)>("pos");

        <java.util.jar.Manifest: java.lang.reflect.Field BAIS_POS> = $r3;

        return;
    }

    public void <init>()
    {
        java.util.jar.Manifest r0;
        java.util.jar.Attributes $r1;
        java.util.HashMap $r2;

        r0 := @this: java.util.jar.Manifest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.jar.Attributes;

        specialinvoke $r1.<java.util.jar.Attributes: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.HashMap entries> = $r2;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.InputStream r1;
        java.util.jar.Attributes $r2;
        java.util.HashMap $r3;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.jar.Attributes;

        specialinvoke $r2.<java.util.jar.Attributes: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.HashMap entries> = $r3;

        virtualinvoke r0.<java.util.jar.Manifest: void read(java.io.InputStream)>(r1);

        return;
    }

    void <init>(java.io.InputStream, boolean) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.InputStream r1;
        boolean z0;
        java.util.jar.Attributes $r2;
        java.util.HashMap $r3, $r4;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.jar.Attributes;

        specialinvoke $r2.<java.util.jar.Attributes: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.HashMap entries> = $r3;

        if z0 == 0 goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.HashMap chunks> = $r4;

     label1:
        virtualinvoke r0.<java.util.jar.Manifest: void read(java.io.InputStream)>(r1);

        return;
    }

    public void <init>(java.util.jar.Manifest)
    {
        java.util.jar.Manifest r0, r1;
        java.util.jar.Attributes $r2, $r4, $r6;
        java.util.HashMap $r3, $r8, $r10;
        java.lang.Object $r5, $r9;
        java.util.Map $r7;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.util.jar.Manifest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.jar.Attributes;

        specialinvoke $r2.<java.util.jar.Attributes: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<java.util.jar.Manifest: java.util.HashMap entries> = $r3;

        $r4 = r1.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        $r5 = virtualinvoke $r4.<java.util.jar.Attributes: java.lang.Object clone()>();

        $r6 = (java.util.jar.Attributes) $r5;

        r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes> = $r6;

        $r7 = virtualinvoke r1.<java.util.jar.Manifest: java.util.Map getEntries()>();

        $r8 = (java.util.HashMap) $r7;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object clone()>();

        $r10 = (java.util.HashMap) $r9;

        r0.<java.util.jar.Manifest: java.util.HashMap entries> = $r10;

        return;
    }

    private static byte[] exposeByteArrayInputStreamBytes(java.io.ByteArrayInputStream)
    {
        java.io.ByteArrayInputStream r0;
        java.lang.Throwable r1, $r11;
        java.lang.IllegalAccessException r2, $r10;
        byte[] r3, r4, $r7;
        int i0, i1, $i4;
        java.lang.reflect.Field $r5, $r8;
        java.lang.Object $r6;
        long $l2;
        java.lang.AssertionError $r9;

        r0 := @parameter0: java.io.ByteArrayInputStream;

        entermonitor r0;

     label01:
        $r5 = <java.util.jar.Manifest: java.lang.reflect.Field BAIS_BUF>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r7 = (byte[]) $r6;

        r3 = (byte[]) $r7;

        $r8 = <java.util.jar.Manifest: java.lang.reflect.Field BAIS_POS>;

        i0 = virtualinvoke $r8.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

     label02:
        i1 = virtualinvoke r0.<java.io.ByteArrayInputStream: int available()>();

     label03:
        if i0 != 0 goto label13;

     label04:
        $i4 = lengthof r3;

        if $i4 != i1 goto label13;

     label05:
        r4 = r3;

     label06:
        $l2 = (long) i1;

        virtualinvoke r0.<java.io.ByteArrayInputStream: long skip(long)>($l2);

        exitmonitor r0;

     label07:
        return r4;

     label08:
        $r10 := @caughtexception;

        r2 = $r10;

     label09:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r9;

     label10:
        $r11 := @caughtexception;

        r1 = $r11;

     label11:
        exitmonitor r0;

     label12:
        throw r1;

     label13:
        r4 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i0, r4, 0, i1);

     label14:
        goto label06;

        catch java.lang.IllegalAccessException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label14 with label10;
    }

    private static java.lang.reflect.Field getByteArrayInputStreamField(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Exception r1, $r4;
        java.lang.reflect.Field r2;
        java.lang.Class $r3;
        java.lang.AssertionError $r5;

        r0 := @parameter0: java.lang.String;

     label1:
        $r3 = class "java/io/ByteArrayInputStream";

        r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void write(java.util.jar.Manifest, java.io.OutputStream) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.OutputStream r1;
        java.nio.charset.CharsetEncoder r2;
        java.nio.ByteBuffer r3;
        java.util.jar.Attributes$Name r4, r10, r12, $r20;
        java.lang.String r5, r7, $r26, $r30;
        java.util.Iterator r6, r9, r11;
        java.util.jar.Attributes r8, $r14, $r27, $r28, $r31;
        java.nio.charset.Charset $r13;
        java.util.Map $r15;
        byte[] $r16, $r24;
        java.util.Set $r17, $r21, $r25;
        java.lang.Object $r18, $r22, $r23, $r29;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r19;

        r0 := @parameter0: java.util.jar.Manifest;

        r1 := @parameter1: java.io.OutputStream;

        $r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r2 = virtualinvoke $r13.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(72);

        r4 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name MANIFEST_VERSION>;

        $r14 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        r5 = virtualinvoke $r14.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>(r4);

        if r5 != null goto label1;

        r4 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name SIGNATURE_VERSION>;

        $r31 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        r5 = virtualinvoke $r31.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>(r4);

     label1:
        if r5 == null goto label3;

        staticinvoke <java.util.jar.Manifest: void writeEntry(java.io.OutputStream,java.util.jar.Attributes$Name,java.lang.String,java.nio.charset.CharsetEncoder,java.nio.ByteBuffer)>(r1, r4, r5, r2, r3);

        $r27 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        $r25 = virtualinvoke $r27.<java.util.jar.Attributes: java.util.Set keySet()>();

        r11 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r29 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.jar.Attributes$Name) $r29;

        $z2 = virtualinvoke r12.<java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>(r4);

        if $z2 != 0 goto label2;

        $r28 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        $r30 = virtualinvoke $r28.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>(r12);

        staticinvoke <java.util.jar.Manifest: void writeEntry(java.io.OutputStream,java.util.jar.Attributes$Name,java.lang.String,java.nio.charset.CharsetEncoder,java.nio.ByteBuffer)>(r1, r12, $r30, r2, r3);

        goto label2;

     label3:
        $r16 = <java.util.jar.Manifest: byte[] LINE_SEPARATOR>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r16);

        $r15 = virtualinvoke r0.<java.util.jar.Manifest: java.util.Map getEntries()>();

        $r17 = interfaceinvoke $r15.<java.util.Map: java.util.Set keySet()>();

        r6 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r18;

        $r20 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name NAME>;

        staticinvoke <java.util.jar.Manifest: void writeEntry(java.io.OutputStream,java.util.jar.Attributes$Name,java.lang.String,java.nio.charset.CharsetEncoder,java.nio.ByteBuffer)>(r1, $r20, r7, r2, r3);

        $r19 = r0.<java.util.jar.Manifest: java.util.HashMap entries>;

        $r22 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (java.util.jar.Attributes) $r22;

        $r21 = virtualinvoke r8.<java.util.jar.Attributes: java.util.Set keySet()>();

        r9 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r23 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.jar.Attributes$Name) $r23;

        $r26 = virtualinvoke r8.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>(r10);

        staticinvoke <java.util.jar.Manifest: void writeEntry(java.io.OutputStream,java.util.jar.Attributes$Name,java.lang.String,java.nio.charset.CharsetEncoder,java.nio.ByteBuffer)>(r1, r10, $r26, r2, r3);

        goto label5;

     label6:
        $r24 = <java.util.jar.Manifest: byte[] LINE_SEPARATOR>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r24);

        goto label4;

     label7:
        return;
    }

    private static void writeEntry(java.io.OutputStream, java.util.jar.Attributes$Name, java.lang.String, java.nio.charset.CharsetEncoder, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.util.jar.Attributes$Name r1;
        java.lang.String r2, r5;
        java.nio.charset.CharsetEncoder r3;
        java.nio.ByteBuffer r4;
        java.nio.CharBuffer r6;
        java.nio.charset.CoderResult r7, $r15, $r16;
        java.nio.charset.Charset $r8;
        byte[] $r9, $r10, $r14, $r17;
        java.nio.Buffer $r12, $r19;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.jar.Attributes$Name;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.nio.charset.CharsetEncoder;

        r4 := @parameter4: java.nio.ByteBuffer;

        r5 = virtualinvoke r1.<java.util.jar.Attributes$Name: java.lang.String getName()>();

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        $r9 = virtualinvoke r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r9);

        $r10 = <java.util.jar.Manifest: byte[] VALUE_SEPARATOR>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r10);

        virtualinvoke r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

        $r12 = virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        $i0 = 72 - $i1;

        $i2 = -2 + $i0;

        virtualinvoke $r12.<java.nio.Buffer: java.nio.Buffer limit(int)>($i2);

        r6 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r2);

     label1:
        r7 = virtualinvoke r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r6, r4, 1);

        $r15 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if $r15 != r7 goto label2;

        r7 = virtualinvoke r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r4);

     label2:
        $r14 = virtualinvoke r4.<java.nio.ByteBuffer: byte[] array()>();

        $i4 = virtualinvoke r4.<java.nio.ByteBuffer: int arrayOffset()>();

        $i3 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>($r14, $i4, $i3);

        $r17 = <java.util.jar.Manifest: byte[] LINE_SEPARATOR>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r17);

        $r16 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if $r16 != r7 goto label3;

        return;

     label3:
        virtualinvoke r0.<java.io.OutputStream: void write(int)>(32);

        $r19 = virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        virtualinvoke $r19.<java.nio.Buffer: java.nio.Buffer limit(int)>(71);

        goto label1;
    }

    public void clear()
    {
        java.util.jar.Manifest r0;
        java.util.HashMap $r1;
        java.util.jar.Attributes $r2;

        r0 := @this: java.util.jar.Manifest;

        $r1 = r0.<java.util.jar.Manifest: java.util.HashMap entries>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        $r2 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        virtualinvoke $r2.<java.util.jar.Attributes: void clear()>();

        return;
    }

    public java.lang.Object clone()
    {
        java.util.jar.Manifest r0, $r1;

        r0 := @this: java.util.jar.Manifest;

        $r1 = new java.util.jar.Manifest;

        specialinvoke $r1.<java.util.jar.Manifest: void <init>(java.util.jar.Manifest)>(r0);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.jar.Manifest r0, $r4, $r8;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        java.util.jar.Attributes $r5, $r6;
        boolean $z0, $z1;
        java.util.Map $r7, $r9;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

        return 0;

     label2:
        $r6 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        $r4 = (java.util.jar.Manifest) r1;

        $r5 = $r4.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        $z0 = virtualinvoke $r6.<java.util.jar.Attributes: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r7 = virtualinvoke r0.<java.util.jar.Manifest: java.util.Map getEntries()>();

        $r8 = (java.util.jar.Manifest) r1;

        $r9 = virtualinvoke $r8.<java.util.jar.Manifest: java.util.Map getEntries()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        return $z1;
    }

    public java.util.jar.Attributes getAttributes(java.lang.String)
    {
        java.util.jar.Manifest r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.util.jar.Attributes $r4;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.util.jar.Manifest: java.util.Map getEntries()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.jar.Attributes) $r3;

        return $r4;
    }

    java.util.jar.Manifest$Chunk getChunk(java.lang.String)
    {
        java.util.jar.Manifest r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.util.jar.Manifest$Chunk $r4;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.util.jar.Manifest: java.util.HashMap chunks>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.jar.Manifest$Chunk) $r3;

        return $r4;
    }

    public java.util.Map getEntries()
    {
        java.util.jar.Manifest r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.jar.Manifest;

        $r1 = r0.<java.util.jar.Manifest: java.util.HashMap entries>;

        return $r1;
    }

    public java.util.jar.Attributes getMainAttributes()
    {
        java.util.jar.Manifest r0;
        java.util.jar.Attributes $r1;

        r0 := @this: java.util.jar.Manifest;

        $r1 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        return $r1;
    }

    int getMainAttributesEnd()
    {
        java.util.jar.Manifest r0;
        int $i0;

        r0 := @this: java.util.jar.Manifest;

        $i0 = r0.<java.util.jar.Manifest: int mainEnd>;

        return $i0;
    }

    public int hashCode()
    {
        java.util.jar.Manifest r0;
        java.util.jar.Attributes $r1;
        int $i0, $i1, $i2;
        java.util.Map $r2;

        r0 := @this: java.util.jar.Manifest;

        $r1 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        $i0 = virtualinvoke $r1.<java.util.jar.Attributes: int hashCode()>();

        $r2 = virtualinvoke r0.<java.util.jar.Manifest: java.util.Map getEntries()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public void read(java.io.InputStream) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.InputStream r1;
        byte[] r2;
        byte b0;
        java.util.jar.ManifestReader r3, $r4;
        boolean $z0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.jar.Attributes $r5;
        java.util.HashMap $r6, $r8;
        java.io.ByteArrayInputStream $r7;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.io.InputStream;

        $z0 = r1 instanceof java.io.ByteArrayInputStream;

        if $z0 == 0 goto label2;

        $r7 = (java.io.ByteArrayInputStream) r1;

        r2 = staticinvoke <java.util.jar.Manifest: byte[] exposeByteArrayInputStreamBytes(java.io.ByteArrayInputStream)>($r7);

     label1:
        $i1 = lengthof r2;

        if $i1 != 0 goto label3;

        return;

     label2:
        r2 = staticinvoke <libcore.io.Streams: byte[] readFullyNoClose(java.io.InputStream)>(r1);

        goto label1;

     label3:
        $i2 = lengthof r2;

        $i3 = -1 + $i2;

        b0 = r2[$i3];

        if b0 == 0 goto label4;

        if b0 != 26 goto label5;

     label4:
        $i4 = lengthof r2;

        $i5 = -1 + $i4;

        r2[$i5] = 10;

     label5:
        $r4 = new java.util.jar.ManifestReader;

        $r5 = r0.<java.util.jar.Manifest: java.util.jar.Attributes mainAttributes>;

        specialinvoke $r4.<java.util.jar.ManifestReader: void <init>(byte[],java.util.jar.Attributes)>(r2, $r5);

        r3 = $r4;

        $i6 = virtualinvoke r3.<java.util.jar.ManifestReader: int getEndOfMainSection()>();

        r0.<java.util.jar.Manifest: int mainEnd> = $i6;

        $r8 = r0.<java.util.jar.Manifest: java.util.HashMap entries>;

        $r6 = r0.<java.util.jar.Manifest: java.util.HashMap chunks>;

        virtualinvoke r3.<java.util.jar.ManifestReader: void readEntries(java.util.Map,java.util.Map)>($r8, $r6);

        return;
    }

    void removeChunks()
    {
        java.util.jar.Manifest r0;

        r0 := @this: java.util.jar.Manifest;

        r0.<java.util.jar.Manifest: java.util.HashMap chunks> = null;

        return;
    }

    public void write(java.io.OutputStream) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.OutputStream r1;

        r0 := @this: java.util.jar.Manifest;

        r1 := @parameter0: java.io.OutputStream;

        staticinvoke <java.util.jar.Manifest: void write(java.util.jar.Manifest,java.io.OutputStream)>(r0, r1);

        return;
    }
}
