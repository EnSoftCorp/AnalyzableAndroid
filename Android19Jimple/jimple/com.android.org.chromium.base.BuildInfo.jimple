public class com.android.org.chromium.base.BuildInfo extends java.lang.Object
{

    private void <init>()
    {
        com.android.org.chromium.base.BuildInfo r0;

        r0 := @this: com.android.org.chromium.base.BuildInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getAndroidBuildFingerprint()
    {
        java.lang.String $r0, $r1, $r2;
        int $i0, $i1;

        $r1 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r0 = <android.os.Build: java.lang.String FINGERPRINT>;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 128);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r2;
    }

    public static java.lang.String getAndroidBuildId()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String ID>;

        return $r0;
    }

    public static java.lang.String getBrand()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String BRAND>;

        return $r0;
    }

    public static java.lang.String getDevice()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String DEVICE>;

        return $r0;
    }

    public static java.lang.String getDeviceModel()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String MODEL>;

        return $r0;
    }

    public static java.lang.String getPackageLabel(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager r2;
        java.lang.CharSequence r3;
        java.lang.String $r4, $r6;
        android.content.pm.ApplicationInfo $r5;
        android.content.pm.PackageManager$NameNotFoundException $r7;

        r0 := @parameter0: android.content.Context;

     label1:
        r2 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r4, 128);

        r3 = virtualinvoke r2.<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>($r5);

     label2:
        if r3 == null goto label4;

     label3:
        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        return $r6;

     label4:
        return "";

     label5:
        $r7 := @caughtexception;

        return "";

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label5;
    }

    public static java.lang.String getPackageName(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1;

        r0 := @parameter0: android.content.Context;

        if r0 == null goto label2;

        r1 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        if r1 == null goto label3;

        return r1;

     label2:
        r1 = null;

        goto label1;

     label3:
        return "";
    }

    public static java.lang.String getPackageVersionCode(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1, r4, $r6;
        android.content.pm.PackageInfo r3;
        android.content.pm.PackageManager $r5;
        int $i0, $i1;
        android.content.pm.PackageManager$NameNotFoundException $r7;

        r0 := @parameter0: android.content.Context;

        r1 = "versionCode not available.";

     label1:
        $r5 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        r3 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r6, 0);

     label2:
        r1 = "";

     label3:
        $i0 = r3.<android.content.pm.PackageInfo: int versionCode>;

        if $i0 <= 0 goto label5;

        $i1 = r3.<android.content.pm.PackageInfo: int versionCode>;

        r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

     label4:
        r1 = r4;

     label5:
        return r1;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BuildInfo", r1);

        return r1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label6;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label6;
    }

    public static java.lang.String getPackageVersionName(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r2, $r4;
        android.content.pm.PackageManager $r3;
        android.content.pm.PackageInfo $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;

        r0 := @parameter0: android.content.Context;

     label1:
        $r3 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 0);

        r2 = $r5.<android.content.pm.PackageInfo: java.lang.String versionName>;

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BuildInfo", "versionName not available");

        return "versionName not available";

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public static int getSdkInt()
    {
        int $i0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        return $i0;
    }
}
