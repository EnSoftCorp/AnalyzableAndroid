public class android.media.AudioManager extends java.lang.Object
{
    public static final java.lang.String ACTION_AUDIO_BECOMING_NOISY;
    public static final java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED;
    public static final java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED;
    public static final int ADJUST_LOWER;
    public static final int ADJUST_RAISE;
    public static final int ADJUST_SAME;
    public static final int AUDIOFOCUS_GAIN;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK;
    public static final int AUDIOFOCUS_LOSS;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;
    public static final int AUDIOFOCUS_NONE;
    public static final int AUDIOFOCUS_REQUEST_FAILED;
    public static final int AUDIOFOCUS_REQUEST_GRANTED;
    public static final int[] DEFAULT_STREAM_VOLUME;
    public static final int DEVICE_OUT_ANLG_DOCK_HEADSET;
    public static final int DEVICE_OUT_AUX_DIGITAL;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER;
    public static final int DEVICE_OUT_BLUETOOTH_SCO;
    public static final int DEVICE_OUT_BLUETOOTH_SCO_CARKIT;
    public static final int DEVICE_OUT_BLUETOOTH_SCO_HEADSET;
    public static final int DEVICE_OUT_DEFAULT;
    public static final int DEVICE_OUT_DGTL_DOCK_HEADSET;
    public static final int DEVICE_OUT_EARPIECE;
    public static final int DEVICE_OUT_SPEAKER;
    public static final int DEVICE_OUT_USB_ACCESSORY;
    public static final int DEVICE_OUT_USB_DEVICE;
    public static final int DEVICE_OUT_WIRED_HEADPHONE;
    public static final int DEVICE_OUT_WIRED_HEADSET;
    public static final java.lang.String EXTRA_MASTER_VOLUME_MUTED;
    public static final java.lang.String EXTRA_MASTER_VOLUME_VALUE;
    public static final java.lang.String EXTRA_PREV_MASTER_VOLUME_VALUE;
    public static final java.lang.String EXTRA_PREV_VOLUME_STREAM_VALUE;
    public static final java.lang.String EXTRA_RINGER_MODE;
    public static final java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE;
    public static final java.lang.String EXTRA_SCO_AUDIO_STATE;
    public static final java.lang.String EXTRA_VIBRATE_SETTING;
    public static final java.lang.String EXTRA_VIBRATE_TYPE;
    public static final java.lang.String EXTRA_VOLUME_STREAM_TYPE;
    public static final java.lang.String EXTRA_VOLUME_STREAM_VALUE;
    public static final int FLAG_ALLOW_RINGER_MODES;
    public static final int FLAG_BLUETOOTH_ABS_VOLUME;
    public static final int FLAG_FIXED_VOLUME;
    public static final int FLAG_PLAY_SOUND;
    public static final int FLAG_REMOVE_SOUND_AND_VIBRATE;
    public static final int FLAG_SHOW_UI;
    public static final int FLAG_VIBRATE;
    public static final int FX_FOCUS_NAVIGATION_DOWN;
    public static final int FX_FOCUS_NAVIGATION_LEFT;
    public static final int FX_FOCUS_NAVIGATION_RIGHT;
    public static final int FX_FOCUS_NAVIGATION_UP;
    public static final int FX_KEYPRESS_DELETE;
    public static final int FX_KEYPRESS_INVALID;
    public static final int FX_KEYPRESS_RETURN;
    public static final int FX_KEYPRESS_SPACEBAR;
    public static final int FX_KEYPRESS_STANDARD;
    public static final int FX_KEY_CLICK;
    public static final java.lang.String MASTER_MUTE_CHANGED_ACTION;
    public static final java.lang.String MASTER_VOLUME_CHANGED_ACTION;
    public static final int MODE_CURRENT;
    public static final int MODE_INVALID;
    public static final int MODE_IN_CALL;
    public static final int MODE_IN_COMMUNICATION;
    public static final int MODE_NORMAL;
    public static final int MODE_RINGTONE;
    public static final int NUM_SOUND_EFFECTS;
    public static final int NUM_STREAMS;
    public static final java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER;
    public static final java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE;
    public static final java.lang.String RINGER_MODE_CHANGED_ACTION;
    private static final int RINGER_MODE_MAX;
    public static final int RINGER_MODE_NORMAL;
    public static final int RINGER_MODE_SILENT;
    public static final int RINGER_MODE_VIBRATE;
    public static final int ROUTE_ALL;
    public static final int ROUTE_BLUETOOTH;
    public static final int ROUTE_BLUETOOTH_A2DP;
    public static final int ROUTE_BLUETOOTH_SCO;
    public static final int ROUTE_EARPIECE;
    public static final int ROUTE_HEADSET;
    public static final int ROUTE_SPEAKER;
    public static final int SCO_AUDIO_STATE_CONNECTED;
    public static final int SCO_AUDIO_STATE_CONNECTING;
    public static final int SCO_AUDIO_STATE_DISCONNECTED;
    public static final int SCO_AUDIO_STATE_ERROR;
    public static final int STREAM_ALARM;
    public static final int STREAM_BLUETOOTH_SCO;
    public static final int STREAM_DTMF;
    public static final int STREAM_MUSIC;
    public static final int STREAM_NOTIFICATION;
    public static final int STREAM_RING;
    public static final int STREAM_SYSTEM;
    public static final int STREAM_SYSTEM_ENFORCED;
    public static final int STREAM_TTS;
    public static final int STREAM_VOICE_CALL;
    private static java.lang.String TAG;
    public static final int USE_DEFAULT_STREAM_TYPE;
    public static final java.lang.String VIBRATE_SETTING_CHANGED_ACTION;
    public static final int VIBRATE_SETTING_OFF;
    public static final int VIBRATE_SETTING_ON;
    public static final int VIBRATE_SETTING_ONLY_SILENT;
    public static final int VIBRATE_TYPE_NOTIFICATION;
    public static final int VIBRATE_TYPE_RINGER;
    public static final java.lang.String VOLUME_CHANGED_ACTION;
    private static android.media.IAudioService sService;
    private final android.media.IAudioFocusDispatcher mAudioFocusDispatcher;
    private final android.media.AudioManager$FocusEventHandlerDelegate mAudioFocusEventHandlerDelegate;
    private final java.util.HashMap mAudioFocusIdListenerMap;
    private final android.content.Context mContext;
    private final java.lang.Object mFocusListenerLock;
    private final android.os.IBinder mICallBack;
    private final android.os.Binder mToken;
    private final boolean mUseMasterVolume;
    private final boolean mUseVolumeKeySounds;
    private long mVolumeKeyUpTime;

    static void <clinit>()
    {
        int[] $r0;

        <android.media.AudioManager: java.lang.String VOLUME_CHANGED_ACTION> = "android.media.VOLUME_CHANGED_ACTION";

        <android.media.AudioManager: int VIBRATE_TYPE_RINGER> = 0;

        <android.media.AudioManager: int VIBRATE_TYPE_NOTIFICATION> = 1;

        <android.media.AudioManager: int VIBRATE_SETTING_ONLY_SILENT> = 2;

        <android.media.AudioManager: int VIBRATE_SETTING_ON> = 1;

        <android.media.AudioManager: int VIBRATE_SETTING_OFF> = 0;

        <android.media.AudioManager: java.lang.String VIBRATE_SETTING_CHANGED_ACTION> = "android.media.VIBRATE_SETTING_CHANGED";

        <android.media.AudioManager: int USE_DEFAULT_STREAM_TYPE> = -2147483648;

        <android.media.AudioManager: int STREAM_VOICE_CALL> = 0;

        <android.media.AudioManager: int STREAM_TTS> = 9;

        <android.media.AudioManager: int STREAM_SYSTEM_ENFORCED> = 7;

        <android.media.AudioManager: int STREAM_SYSTEM> = 1;

        <android.media.AudioManager: int STREAM_RING> = 2;

        <android.media.AudioManager: int STREAM_NOTIFICATION> = 5;

        <android.media.AudioManager: int STREAM_MUSIC> = 3;

        <android.media.AudioManager: int STREAM_DTMF> = 8;

        <android.media.AudioManager: int STREAM_BLUETOOTH_SCO> = 6;

        <android.media.AudioManager: int STREAM_ALARM> = 4;

        <android.media.AudioManager: int SCO_AUDIO_STATE_ERROR> = -1;

        <android.media.AudioManager: int SCO_AUDIO_STATE_DISCONNECTED> = 0;

        <android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTING> = 2;

        <android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTED> = 1;

        <android.media.AudioManager: int ROUTE_SPEAKER> = 2;

        <android.media.AudioManager: int ROUTE_HEADSET> = 8;

        <android.media.AudioManager: int ROUTE_EARPIECE> = 1;

        <android.media.AudioManager: int ROUTE_BLUETOOTH_SCO> = 4;

        <android.media.AudioManager: int ROUTE_BLUETOOTH_A2DP> = 16;

        <android.media.AudioManager: int ROUTE_BLUETOOTH> = 4;

        <android.media.AudioManager: int ROUTE_ALL> = -1;

        <android.media.AudioManager: int RINGER_MODE_VIBRATE> = 1;

        <android.media.AudioManager: int RINGER_MODE_SILENT> = 0;

        <android.media.AudioManager: int RINGER_MODE_NORMAL> = 2;

        <android.media.AudioManager: int RINGER_MODE_MAX> = 2;

        <android.media.AudioManager: java.lang.String RINGER_MODE_CHANGED_ACTION> = "android.media.RINGER_MODE_CHANGED";

        <android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE> = "android.media.property.OUTPUT_SAMPLE_RATE";

        <android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER> = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";

        <android.media.AudioManager: int NUM_STREAMS> = 5;

        <android.media.AudioManager: int NUM_SOUND_EFFECTS> = 10;

        <android.media.AudioManager: int MODE_RINGTONE> = 1;

        <android.media.AudioManager: int MODE_NORMAL> = 0;

        <android.media.AudioManager: int MODE_IN_COMMUNICATION> = 3;

        <android.media.AudioManager: int MODE_IN_CALL> = 2;

        <android.media.AudioManager: int MODE_INVALID> = -2;

        <android.media.AudioManager: int MODE_CURRENT> = -1;

        <android.media.AudioManager: java.lang.String MASTER_VOLUME_CHANGED_ACTION> = "android.media.MASTER_VOLUME_CHANGED_ACTION";

        <android.media.AudioManager: java.lang.String MASTER_MUTE_CHANGED_ACTION> = "android.media.MASTER_MUTE_CHANGED_ACTION";

        <android.media.AudioManager: int FX_KEY_CLICK> = 0;

        <android.media.AudioManager: int FX_KEYPRESS_STANDARD> = 5;

        <android.media.AudioManager: int FX_KEYPRESS_SPACEBAR> = 6;

        <android.media.AudioManager: int FX_KEYPRESS_RETURN> = 8;

        <android.media.AudioManager: int FX_KEYPRESS_INVALID> = 9;

        <android.media.AudioManager: int FX_KEYPRESS_DELETE> = 7;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_UP> = 1;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_RIGHT> = 4;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_LEFT> = 3;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_DOWN> = 2;

        <android.media.AudioManager: int FLAG_VIBRATE> = 16;

        <android.media.AudioManager: int FLAG_SHOW_UI> = 1;

        <android.media.AudioManager: int FLAG_REMOVE_SOUND_AND_VIBRATE> = 8;

        <android.media.AudioManager: int FLAG_PLAY_SOUND> = 4;

        <android.media.AudioManager: int FLAG_FIXED_VOLUME> = 32;

        <android.media.AudioManager: int FLAG_BLUETOOTH_ABS_VOLUME> = 64;

        <android.media.AudioManager: int FLAG_ALLOW_RINGER_MODES> = 2;

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_VALUE> = "android.media.EXTRA_VOLUME_STREAM_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_TYPE> = "android.media.EXTRA_VOLUME_STREAM_TYPE";

        <android.media.AudioManager: java.lang.String EXTRA_VIBRATE_TYPE> = "android.media.EXTRA_VIBRATE_TYPE";

        <android.media.AudioManager: java.lang.String EXTRA_VIBRATE_SETTING> = "android.media.EXTRA_VIBRATE_SETTING";

        <android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_STATE> = "android.media.extra.SCO_AUDIO_STATE";

        <android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE> = "android.media.extra.SCO_AUDIO_PREVIOUS_STATE";

        <android.media.AudioManager: java.lang.String EXTRA_RINGER_MODE> = "android.media.EXTRA_RINGER_MODE";

        <android.media.AudioManager: java.lang.String EXTRA_PREV_VOLUME_STREAM_VALUE> = "android.media.EXTRA_PREV_VOLUME_STREAM_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_PREV_MASTER_VOLUME_VALUE> = "android.media.EXTRA_PREV_MASTER_VOLUME_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_MASTER_VOLUME_VALUE> = "android.media.EXTRA_MASTER_VOLUME_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_MASTER_VOLUME_MUTED> = "android.media.EXTRA_MASTER_VOLUME_MUTED";

        <android.media.AudioManager: int DEVICE_OUT_WIRED_HEADSET> = 4;

        <android.media.AudioManager: int DEVICE_OUT_WIRED_HEADPHONE> = 8;

        <android.media.AudioManager: int DEVICE_OUT_USB_DEVICE> = 16384;

        <android.media.AudioManager: int DEVICE_OUT_USB_ACCESSORY> = 8192;

        <android.media.AudioManager: int DEVICE_OUT_SPEAKER> = 2;

        <android.media.AudioManager: int DEVICE_OUT_EARPIECE> = 1;

        <android.media.AudioManager: int DEVICE_OUT_DGTL_DOCK_HEADSET> = 4096;

        <android.media.AudioManager: int DEVICE_OUT_DEFAULT> = 1073741824;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO_HEADSET> = 32;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO_CARKIT> = 64;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO> = 16;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER> = 512;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES> = 256;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP> = 128;

        <android.media.AudioManager: int DEVICE_OUT_AUX_DIGITAL> = 1024;

        <android.media.AudioManager: int DEVICE_OUT_ANLG_DOCK_HEADSET> = 2048;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_GRANTED> = 1;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_FAILED> = 0;

        <android.media.AudioManager: int AUDIOFOCUS_NONE> = 0;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK> = -3;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT> = -2;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS> = -1;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK> = 3;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE> = 4;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT> = 2;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN> = 1;

        <android.media.AudioManager: int ADJUST_SAME> = 0;

        <android.media.AudioManager: int ADJUST_RAISE> = 1;

        <android.media.AudioManager: int ADJUST_LOWER> = -1;

        <android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED> = "android.media.ACTION_SCO_AUDIO_STATE_UPDATED";

        <android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED> = "android.media.SCO_AUDIO_STATE_CHANGED";

        <android.media.AudioManager: java.lang.String ACTION_AUDIO_BECOMING_NOISY> = "android.media.AUDIO_BECOMING_NOISY";

        <android.media.AudioManager: java.lang.String TAG> = "AudioManager";

        $r0 = newarray (int)[10];

        $r0[0] = 4;

        $r0[1] = 7;

        $r0[2] = 5;

        $r0[3] = 11;

        $r0[4] = 6;

        $r0[5] = 5;

        $r0[6] = 7;

        $r0[7] = 7;

        $r0[8] = 11;

        $r0[9] = 11;

        <android.media.AudioManager: int[] DEFAULT_STREAM_VOLUME> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.media.AudioManager r0;
        android.content.Context r1, $r8, $r10;
        android.os.Binder $r2, $r7;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        android.media.AudioManager$FocusEventHandlerDelegate $r5;
        android.media.AudioManager$1 $r6;
        android.content.res.Resources $r9, $r11;
        boolean $z0, $z1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.os.Binder;

        specialinvoke $r2.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioManager: android.os.Binder mToken> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock> = $r4;

        $r5 = new android.media.AudioManager$FocusEventHandlerDelegate;

        specialinvoke $r5.<android.media.AudioManager$FocusEventHandlerDelegate: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.AudioManager$FocusEventHandlerDelegate mAudioFocusEventHandlerDelegate> = $r5;

        $r6 = new android.media.AudioManager$1;

        specialinvoke $r6.<android.media.AudioManager$1: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher> = $r6;

        $r7 = new android.os.Binder;

        specialinvoke $r7.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioManager: android.os.IBinder mICallBack> = $r7;

        r0.<android.media.AudioManager: android.content.Context mContext> = r1;

        $r8 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r9.<android.content.res.Resources: boolean getBoolean(int)>(17891344);

        r0.<android.media.AudioManager: boolean mUseMasterVolume> = $z0;

        $r10 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r11.<android.content.res.Resources: boolean getBoolean(int)>(17891345);

        r0.<android.media.AudioManager: boolean mUseVolumeKeySounds> = $z1;

        return;
    }

    static java.lang.Object access$000(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock>;

        return $r1;
    }

    static android.media.AudioManager$OnAudioFocusChangeListener access$100(android.media.AudioManager, java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;
        android.media.AudioManager$OnAudioFocusChangeListener $r2;

        r0 := @parameter0: android.media.AudioManager;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.media.AudioManager$OnAudioFocusChangeListener findFocusListener(java.lang.String)>(r1);

        return $r2;
    }

    static android.media.AudioManager$FocusEventHandlerDelegate access$200(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$FocusEventHandlerDelegate $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.media.AudioManager$FocusEventHandlerDelegate mAudioFocusEventHandlerDelegate>;

        return $r1;
    }

    private android.media.AudioManager$OnAudioFocusChangeListener findFocusListener(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.media.AudioManager$OnAudioFocusChangeListener $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.media.AudioManager$OnAudioFocusChangeListener) $r3;

        return $r4;
    }

    private java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.lang.String $r2, $r4, $r6, $r8, $r9, $r10;
        java.lang.StringBuilder $r3, $r5, $r7;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        if r1 != null goto label1;

        $r9 = new java.lang.String;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.String: void <init>(java.lang.String)>($r10);

        return $r9;

     label1:
        $r2 = new java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>($r8);

        return $r2;
    }

    private static android.media.IAudioService getService()
    {
        android.media.IAudioService $r0, $r2, $r3, $r4;
        android.os.IBinder $r1;

        $r0 = <android.media.AudioManager: android.media.IAudioService sService>;

        if $r0 == null goto label1;

        $r4 = <android.media.AudioManager: android.media.IAudioService sService>;

        return $r4;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        $r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

        <android.media.AudioManager: android.media.IAudioService sService> = $r2;

        $r3 = <android.media.AudioManager: android.media.IAudioService sService>;

        return $r3;
    }

    public static boolean isValidRingerMode(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private boolean querySoundEffectsEnabled()
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "sound_effects_enabled", 0);

        z0 = 0;

        if i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r6;
        int i0;
        android.media.IAudioFocusDispatcher $r4;
        java.lang.String $r5, $r8, $r11;
        java.lang.StringBuilder $r7, $r9, $r10;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        virtualinvoke r0.<android.media.AudioManager: void unregisterAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r4 = r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher>;

        $r5 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        i0 = interfaceinvoke r2.<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>($r4, $r5);

     label2:
        return i0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call abandonAudioFocus() on AudioService due to ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r8, $r11);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void abandonAudioFocusForCall()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>(null, "AudioFocus_For_Phone_Ring_And_Calls");

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call abandonAudioFocusForCall() on AudioService due to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void adjustLocalOrRemoteStreamVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r10;
        android.content.Context $r3;
        java.lang.String $r4, $r6, $r9, $r11;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 3 goto label1;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adjustLocalOrRemoteStreamVolume() doesn\'t support stream ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, $r9);

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustLocalOrRemoteStreamVolume(int,int,java.lang.String)>(i0, i1, $r4);

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Dead object in adjustLocalOrRemoteStreamVolume", r2);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void adjustMasterVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r5;
        android.content.Context $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i0, i1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Dead object in adjustMasterVolume", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void adjustStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r7;
        boolean $z0;
        android.content.Context $r3, $r5;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label3;

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i1, i2, $r6);

     label2:
        return;

     label3:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>(i0, i1, i2, $r4);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Dead object in adjustStreamVolume", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void adjustSuggestedStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r7;
        boolean $z0;
        android.content.Context $r3, $r5;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label3;

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i0, i2, $r6);

     label2:
        return;

     label3:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String)>(i0, i1, i2, $r4);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Dead object in adjustSuggestedStreamVolume", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void adjustVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r7;
        boolean $z0;
        android.content.Context $r3, $r5;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label3;

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i0, i1, $r6);

     label2:
        return;

     label3:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustVolume(int,int,java.lang.String)>(i0, i1, $r4);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Dead object in adjustVolume", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void avrcpSupportsAbsoluteVolume(java.lang.String, boolean)
    {
        android.media.AudioManager r0;
        java.lang.String r1, $r5;
        boolean z0;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>(r1, z0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in avrcpSupportsAbsoluteVolume", r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchMediaKeyEvent(android.view.KeyEvent)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void dispatchMediaKeyEvent(android.view.KeyEvent)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "dispatchMediaKeyEvent threw exception ", r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forceVolumeControlStream(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void forceVolumeControlStream(int,android.os.IBinder)>(i0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in forceVolumeControlStream", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDevicesForStream(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $i1 = staticinvoke <android.media.AudioSystem: int getDevicesForStream(int)>(i0);

        return $i1;
    }

    public int getLastAudibleMasterVolume()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getLastAudibleMasterVolume()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getLastAudibleMasterVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLastAudibleStreamVolume(int)
    {
        android.media.AudioManager r0;
        int i0, i1, $i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        $i2 = interfaceinvoke r1.<android.media.IAudioService: int getLastAudibleMasterVolume()>();

        return $i2;

     label2:
        i1 = interfaceinvoke r1.<android.media.IAudioService: int getLastAudibleStreamVolume(int)>(i0);

     label3:
        return i1;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getLastAudibleStreamVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int getMasterMaxVolume()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getMasterMaxVolume()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMasterMaxVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMasterStreamType()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getMasterStreamType()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMasterStreamType", r2);

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMasterVolume()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getMasterVolume()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMasterVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMode()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getMode()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMode", r2);

        return -2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getOutputLatency(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.media.AudioSystem: int getOutputLatency(int)>(i0);

        return $i1;
    }

    public java.lang.String getParameters(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, $r2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.media.AudioSystem: java.lang.String getParameters(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, r2, $r3, $r4, $r5;
        boolean z0, $z1;
        int i0, i1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r3 = "android.media.property.OUTPUT_SAMPLE_RATE";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        i1 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputSamplingRate()>();

        r2 = null;

        if i1 <= 0 goto label1;

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

     label1:
        return r2;

     label2:
        $r4 = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";

        z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        r2 = null;

        if z0 == 0 goto label1;

        i0 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputFrameCount()>();

        r2 = null;

        if i0 <= 0 goto label1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r5;
    }

    public int getRingerMode()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getRingerMode()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getRingerMode", r2);

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.IRingtonePlayer getRingtonePlayer()
    {
        android.media.AudioManager r0;
        android.media.IRingtonePlayer r2;
        android.media.IAudioService $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.media.AudioManager;

     label1:
        $r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        r2 = interfaceinvoke $r3.<android.media.IAudioService: android.media.IRingtonePlayer getRingtonePlayer()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getRouting(int)
    {
        android.media.AudioManager r0;
        int i0;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        return -1;
    }

    public int getStreamMaxVolume(int)
    {
        android.media.AudioManager r0;
        int i0, i1, $i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        $i2 = interfaceinvoke r1.<android.media.IAudioService: int getMasterMaxVolume()>();

        return $i2;

     label2:
        i1 = interfaceinvoke r1.<android.media.IAudioService: int getStreamMaxVolume(int)>(i0);

     label3:
        return i1;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getStreamMaxVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int getStreamVolume(int)
    {
        android.media.AudioManager r0;
        int i0, i1, $i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        $i2 = interfaceinvoke r1.<android.media.IAudioService: int getMasterVolume()>();

        return $i2;

     label2:
        i1 = interfaceinvoke r1.<android.media.IAudioService: int getStreamVolume(int)>(i0);

     label3:
        return i1;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getStreamVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int getVibrateSetting(int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r1.<android.media.IAudioService: int getVibrateSetting(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getVibrateSetting", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void handleKeyDown(android.view.KeyEvent, int)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        int i0, i2, $i3;
        byte b1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        b1 = 1;

        i2 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        lookupswitch(i2)
        {
            case 24: goto label02;
            case 25: goto label02;
            case 164: goto label08;
            default: goto label01;
        };

     label01:
        return;

     label02:
        $z2 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z2 == 0 goto label05;

        if i2 != 24 goto label04;

     label03:
        virtualinvoke r0.<android.media.AudioManager: void adjustMasterVolume(int,int)>(b1, 17);

        return;

     label04:
        b1 = -1;

        goto label03;

     label05:
        if i2 != 24 goto label07;

     label06:
        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(b1, i0, 17);

        return;

     label07:
        b1 = -1;

        goto label06;

     label08:
        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i3 != 0 goto label01;

        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke r0.<android.media.AudioManager: boolean isMasterMute()>();

        if $z1 != 0 goto label10;

     label09:
        z3 = (boolean) b1;

        virtualinvoke r0.<android.media.AudioManager: void setMasterMute(boolean)>(z3);

        return;

     label10:
        b1 = 0;

        goto label09;
    }

    public void handleKeyUp(android.view.KeyEvent, int)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        int i0, $i1;
        boolean $z0, $z1;
        long $l2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        tableswitch($i1)
        {
            case 24: goto label2;
            case 25: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $z0 = r0.<android.media.AudioManager: boolean mUseVolumeKeySounds>;

        if $z0 == 0 goto label3;

        $z1 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z1 == 0 goto label4;

        virtualinvoke r0.<android.media.AudioManager: void adjustMasterVolume(int,int)>(0, 4);

     label3:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.media.AudioManager: long mVolumeKeyUpTime> = $l2;

        return;

     label4:
        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(0, i0, 4);

        goto label3;
    }

    public boolean isAudioFocusExclusive()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int i0;
        boolean z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getCurrentAudioFocus()>();

     label2:
        z0 = 0;

        if i0 != 4 goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isAudioFocusExclusive()", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public boolean isBluetoothA2dpOn()
    {
        android.media.AudioManager r0;
        int $i0;

        r0 := @this: android.media.AudioManager;

        $i0 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(128, "");

        if $i0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean isBluetoothScoAvailableOffCall()
    {
        android.media.AudioManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891380);

        return $z0;
    }

    public boolean isBluetoothScoOn()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isBluetoothScoOn()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isBluetoothScoOn", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isLocalOrRemoteMusicActive()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isLocalOrRemoteMusicActive()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isLocalOrRemoteMusicActive()", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMasterMute()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isMasterMute()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isMasterMute", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMicrophoneMute()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isMicrophoneMuted()>();

        return $z0;
    }

    public boolean isMusicActive()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, 0);

        return $z0;
    }

    public boolean isMusicActiveRemotely()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActiveRemotely(int,int)>(3, 0);

        return $z0;
    }

    public boolean isSilentMode()
    {
        android.media.AudioManager r0;
        int i0;

        r0 := @this: android.media.AudioManager;

        i0 = virtualinvoke r0.<android.media.AudioManager: int getRingerMode()>();

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isSpeakerphoneOn()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isSpeakerphoneOn()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isSpeakerphoneOn", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isStreamMute(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isStreamMute(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isStreamMute", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isWiredHeadsetOn()
    {
        android.media.AudioManager r0;
        int $i0, $i1;

        r0 := @this: android.media.AudioManager;

        $i0 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(4, "");

        if $i0 != 0 goto label1;

        $i1 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(8, "");

        if $i1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void loadSoundEffects()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: boolean loadSoundEffects()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in loadSoundEffects");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void playSoundEffect(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 < 10 goto label2;

     label1:
        return;

     label2:
        $z0 = specialinvoke r0.<android.media.AudioManager: boolean querySoundEffectsEnabled()>();

        if $z0 == 0 goto label1;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        interfaceinvoke r1.<android.media.IAudioService: void playSoundEffect(int)>(i0);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in playSoundEffect");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void playSoundEffect(int, float)
    {
        android.media.AudioManager r0;
        int i0;
        float f0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        if i0 < 0 goto label1;

        if i0 < 10 goto label2;

     label1:
        return;

     label2:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        interfaceinvoke r1.<android.media.IAudioService: void playSoundEffectVolume(int,float)>(i0, f0);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in playSoundEffect");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void preDispatchKeyEvent(android.view.KeyEvent, int)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        int i0, i1;
        long $l2, $l3, $l4;
        byte $b5;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        if i1 == 25 goto label1;

        if i1 == 24 goto label1;

        if i1 == 164 goto label1;

        $l2 = r0.<android.media.AudioManager: long mVolumeKeyUpTime>;

        $l3 = 300L + $l2;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b5 = $l3 cmp $l4;

        if $b5 <= 0 goto label1;

        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.media.AudioManager: void adjustMasterVolume(int,int)>(0, 8);

     label1:
        return;

     label2:
        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(0, i0, 8);

        return;
    }

    public void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r9;
        java.util.HashMap $r4, $r6;
        java.lang.String $r5, $r7;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        r2 = r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r5 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r7 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);

        exitmonitor r2;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void registerMediaButtonEventReceiver(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>(r1, null);

        return;
    }

    public void registerMediaButtonEventReceiver(android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.content.ComponentName r1;
        android.content.Intent r2, $r6;
        java.lang.String $r3, $r5, $r10;
        android.content.Context $r4, $r8;
        boolean $z0;
        android.app.PendingIntent $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        return;

     label1:
        $r3 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r4 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r10 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r10, "registerMediaButtonEventReceiver() error: receiver and context package names don\'t match");

        return;

     label2:
        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_BUTTON");

        r2 = $r6;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r8 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r9 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r8, 0, r2, 0);

        virtualinvoke r0.<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>($r9, r1);

        return;
    }

    public void registerMediaButtonEventReceiverForCalls(android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.content.ComponentName r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: void registerMediaButtonEventReceiverForCalls(android.content.ComponentName)>(r1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in registerMediaButtonEventReceiverForCalls", r3);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void registerMediaButtonIntent(android.app.PendingIntent, android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;
        android.content.ComponentName r2;
        android.media.IAudioService r3;
        android.os.Binder r4;
        android.os.RemoteException r5, $r7;
        java.lang.String $r6, $r9, $r12;
        java.lang.StringBuilder $r8, $r10, $r11;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: android.content.ComponentName;

        if r1 != null goto label1;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, "Cannot call registerMediaButtonIntent() with a null parameter");

        return;

     label1:
        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        if r2 != null goto label6;

     label2:
        r4 = r0.<android.media.AudioManager: android.os.Binder mToken>;

     label3:
        interfaceinvoke r3.<android.media.IAudioService: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName,android.os.IBinder)>(r1, r2, r4);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r5 = $r7;

        $r9 = <android.media.AudioManager: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in registerMediaButtonIntent");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r9, $r12);

        return;

     label6:
        r4 = null;

        goto label3;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void registerRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.AudioManager r0;
        android.media.RemoteControlClient r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r9;
        android.app.PendingIntent $r4, $r5;
        android.media.IRemoteControlClient $r6;
        android.content.Context $r7;
        java.lang.String $r8, $r11, $r14;
        int $i0;
        java.lang.StringBuilder $r10, $r12, $r13;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteControlClient;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        if $r4 != null goto label2;

     label1:
        return;

     label2:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        $r5 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        $r6 = virtualinvoke r1.<android.media.RemoteControlClient: android.media.IRemoteControlClient getIRemoteControlClient()>();

        $r7 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        $i0 = interfaceinvoke r2.<android.media.IAudioService: int registerRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient,java.lang.String)>($r5, $r6, $r8);

        virtualinvoke r1.<android.media.RemoteControlClient: void setRcseId(int)>($i0);

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        $r11 = <android.media.AudioManager: java.lang.String TAG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in registerRemoteControlClient");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r11, $r14);

        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        virtualinvoke r0.<android.media.AudioManager: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay,int,int)>(r1, -1, -1);

        return;
    }

    public void registerRemoteControlDisplay(android.media.IRemoteControlDisplay, int, int)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        int i0, i1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: boolean registerRemoteControlDisplay(android.media.IRemoteControlDisplay,int,int)>(r1, i0, i1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in registerRemoteControlDisplay ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean registerRemoteController(android.media.RemoteController)
    {
        android.media.AudioManager r0;
        android.media.RemoteController r1;
        android.media.IAudioService r2;
        android.media.RemoteController$OnClientUpdateListener r3;
        android.content.ComponentName r4, $r7;
        android.os.RemoteException r5, $r11;
        int[] r6;
        boolean z0;
        android.content.Context $r8;
        java.lang.Class $r9;
        android.media.RemoteController$RcDisplay $r10;
        int $i0, $i1;
        java.lang.String $r12, $r16;
        java.lang.StringBuilder $r13, $r14, $r15;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteController;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        r3 = virtualinvoke r1.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener getUpdateListener()>();

        $r7 = new android.content.ComponentName;

        $r8 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r9 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r7.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r8, $r9);

        r4 = $r7;

     label2:
        r6 = virtualinvoke r1.<android.media.RemoteController: int[] getArtworkSize()>();

        $r10 = virtualinvoke r1.<android.media.RemoteController: android.media.RemoteController$RcDisplay getRcDisplay()>();

        $i0 = r6[0];

        $i1 = r6[1];

        z0 = interfaceinvoke r2.<android.media.IAudioService: boolean registerRemoteController(android.media.IRemoteControlDisplay,int,int,android.content.ComponentName)>($r10, $i0, $i1, r4);

        virtualinvoke r1.<android.media.RemoteController: void setIsRegistered(boolean)>(z0);

     label3:
        return z0;

     label4:
        $r11 := @caughtexception;

        r5 = $r11;

        $r12 = <android.media.AudioManager: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in registerRemoteController ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r12, $r16);

        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void reloadAudioSettings()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void reloadAudioSettings()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in reloadAudioSettings");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay, int, int)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        int i0, i1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>(r1, i0, i1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in remoteControlDisplayUsesBitmapSize ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void remoteControlDisplayWantsPlaybackPositionSync(android.media.IRemoteControlDisplay, boolean)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        boolean z0;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: void remoteControlDisplayWantsPlaybackPositionSync(android.media.IRemoteControlDisplay,boolean)>(r1, z0);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in remoteControlDisplayWantsPlaybackPositionSync ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, int, int)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        int i0, i1, i2, i3;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r10;
        java.lang.String $r4, $r7, $r8, $r11, $r15;
        android.os.IBinder $r5;
        android.media.IAudioFocusDispatcher $r6;
        android.content.Context $r9;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 1 goto label1;

        if i1 <= 4 goto label2;

     label1:
        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r4, "Invalid duration hint, audio focus request denied");

        return 0;

     label2:
        virtualinvoke r0.<android.media.AudioManager: void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        $r5 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r6 = r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher>;

        $r7 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        $r9 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r9.<android.content.Context: java.lang.String getOpPackageName()>();

        i3 = interfaceinvoke r2.<android.media.IAudioService: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>(i0, i1, $r5, $r6, $r7, $r8);

     label4:
        i2 = i3;

     label5:
        return i2;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

        $r11 = <android.media.AudioManager: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call requestAudioFocus() on AudioService due to ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r11, $r15);

        i2 = 0;

        goto label5;

        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void requestAudioFocusForCall(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r6;
        android.content.Context $r3;
        android.os.IBinder $r4;
        java.lang.String $r5, $r8, $r10;
        java.lang.StringBuilder $r7, $r9, $r11;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r4 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>(i0, i1, $r4, null, "AudioFocus_For_Phone_Ring_And_Calls", $r5);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call requestAudioFocusForCall() on AudioService due to ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r8, $r10);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice, int)
    {
        android.media.AudioManager r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1;
        android.media.IAudioService r2;
        android.os.RemoteException r4, $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r7, $r10;
        java.lang.Throwable $r11;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r2.<android.media.IAudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

     label4:
        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in setBluetoothA2dpDeviceConnectionState ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, $r10);

     label5:
        return 0;

     label6:
        $r11 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void setBluetoothA2dpOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        return;
    }

    public void setBluetoothScoOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setBluetoothScoOn(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setBluetoothScoOn", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMasterMute(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.media.AudioManager: void setMasterMute(boolean,int)>(z0, 1);

        return;
    }

    public void setMasterMute(boolean, int)
    {
        android.media.AudioManager r0;
        boolean z0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setMasterMute(boolean,int,android.os.IBinder)>(z0, i0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in setMasterMute", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMasterVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r5;
        android.content.Context $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setMasterVolume(int,int,java.lang.String)>(i0, i1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Dead object in setMasterVolume", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMicrophoneMute(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        staticinvoke <android.media.AudioSystem: int muteMicrophone(boolean)>(z0);

        return;
    }

    public void setMode(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setMode(int,android.os.IBinder)>(i0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in setMode", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setParameter(java.lang.String, java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.media.AudioManager: void setParameters(java.lang.String)>($r7);

        return;
    }

    public void setParameters(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>(r1);

        return;
    }

    public void setRemoteControlClientPlaybackPosition(int, long)
    {
        android.media.AudioManager r0;
        int i0;
        long l1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        byte $b2;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r5, $r11;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $b2 = l1 cmp 0L;

        if $b2 >= 0 goto label1;

        return;

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r1.<android.media.IAudioService: void setRemoteControlClientPlaybackPosition(int,long)>(i0, l1);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in setRccPlaybackPosition(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, $r11, r2);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setRingerMode(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.AudioManager: boolean isValidRingerMode(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r1.<android.media.IAudioService: void setRingerMode(int)>(i0);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setRingerMode", r2);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setRouting(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public void setSpeakerphoneOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setSpeakerphoneOn(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setSpeakerphoneOn", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamMute(int, boolean)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setStreamMute(int,boolean,android.os.IBinder)>(i0, z0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in setStreamMute", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamSolo(int, boolean)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setStreamSolo(int,boolean,android.os.IBinder)>(i0, z0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in setStreamSolo", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r7;
        boolean $z0;
        android.content.Context $r3, $r5;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label3;

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setMasterVolume(int,int,java.lang.String)>(i1, i2, $r6);

     label2:
        return;

     label3:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setStreamVolume(int,int,int,java.lang.String)>(i0, i1, i2, $r4);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Dead object in setStreamVolume", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setVibrateSetting(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setVibrateSetting(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setVibrateSetting", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWiredDeviceConnectionState(int, int, java.lang.String)
    {
        android.media.AudioManager r0;
        int i0, i1;
        java.lang.String r1, $r6, $r9;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)>(i0, i1, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in setWiredDeviceConnectionState ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWiredHeadsetOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean shouldVibrate(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.media.IAudioService: boolean shouldVibrate(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in shouldVibrate", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startBluetoothSco()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r6;
        android.content.Context $r3;
        android.os.IBinder $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0;
        java.lang.String $r7;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r4 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        interfaceinvoke r1.<android.media.IAudioService: void startBluetoothSco(android.os.IBinder,int)>($r4, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Dead object in startBluetoothSco", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopBluetoothSco()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)>($r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in stopBluetoothSco", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unloadSoundEffects()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void unloadSoundEffects()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in unloadSoundEffects");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        java.util.HashMap $r4;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        r2 = r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r5 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void unregisterMediaButtonEventReceiver(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)>(r1);

        return;
    }

    public void unregisterMediaButtonEventReceiver(android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.content.ComponentName r1;
        android.content.Intent r2, $r3;
        android.content.Context $r5;
        android.app.PendingIntent $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        return;

     label1:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_BUTTON");

        r2 = $r3;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r5, 0, r2, 0);

        virtualinvoke r0.<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)>($r6);

        return;
    }

    public void unregisterMediaButtonEventReceiverForCalls()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void unregisterMediaButtonEventReceiverForCalls()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in unregisterMediaButtonEventReceiverForCalls", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterMediaButtonIntent(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void unregisterMediaButtonIntent(android.app.PendingIntent)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in unregisterMediaButtonIntent");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.AudioManager r0;
        android.media.RemoteControlClient r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r7;
        android.app.PendingIntent $r4, $r5;
        android.media.IRemoteControlClient $r6;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r9, $r12;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteControlClient;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        if $r4 != null goto label2;

     label1:
        return;

     label2:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        $r5 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        $r6 = virtualinvoke r1.<android.media.RemoteControlClient: android.media.IRemoteControlClient getIRemoteControlClient()>();

        interfaceinvoke r2.<android.media.IAudioService: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>($r5, $r6);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        $r9 = <android.media.AudioManager: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in unregisterRemoteControlClient");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r9, $r12);

        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>(r1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in unregisterRemoteControlDisplay ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void unregisterRemoteController(android.media.RemoteController)
    {
        android.media.AudioManager r0;
        android.media.RemoteController r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r5;
        android.media.RemoteController$RcDisplay $r4;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteController;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        $r4 = virtualinvoke r1.<android.media.RemoteController: android.media.RemoteController$RcDisplay getRcDisplay()>();

        interfaceinvoke r2.<android.media.IAudioService: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>($r4);

        virtualinvoke r1.<android.media.RemoteController: void setIsRegistered(boolean)>(0);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in unregisterRemoteControlDisplay ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, $r10);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void updateRemoteControlClientMetadata(int, int, android.media.Rating)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.Rating r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r14;
        java.lang.String $r6, $r13;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.media.Rating;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void updateRemoteControlClientMetadata(int,int,android.media.Rating)>(i0, i1, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in updateRemoteControlClientMetadata(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, $r13, r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
