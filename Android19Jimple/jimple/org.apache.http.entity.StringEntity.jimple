public class org.apache.http.entity.StringEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable
{
    protected final byte[] content;

    public void <init>(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.http.entity.StringEntity r0;
        java.lang.String r1;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.http.entity.StringEntity r0;
        java.lang.String r1, r2, $r7;
        byte[] $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source string may not be null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        r2 = "ISO-8859-1";

     label2:
        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        r0.<org.apache.http.entity.StringEntity: byte[] content> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("text/plain; charset=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.http.entity.StringEntity: void setContentType(java.lang.String)>($r7);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.entity.StringEntity r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.entity.StringEntity;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public java.io.InputStream getContent() throws java.io.IOException
    {
        org.apache.http.entity.StringEntity r0;
        java.io.ByteArrayInputStream $r1;
        byte[] $r2;

        r0 := @this: org.apache.http.entity.StringEntity;

        $r1 = new java.io.ByteArrayInputStream;

        $r2 = r0.<org.apache.http.entity.StringEntity: byte[] content>;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        return $r1;
    }

    public long getContentLength()
    {
        org.apache.http.entity.StringEntity r0;
        byte[] $r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.http.entity.StringEntity;

        $r1 = r0.<org.apache.http.entity.StringEntity: byte[] content>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.StringEntity r0;

        r0 := @this: org.apache.http.entity.StringEntity;

        return 1;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.StringEntity r0;

        r0 := @this: org.apache.http.entity.StringEntity;

        return 0;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.http.entity.StringEntity r0;
        java.io.OutputStream r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.entity.StringEntity;

        r1 := @parameter0: java.io.OutputStream;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.http.entity.StringEntity: byte[] content>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        return;
    }
}
