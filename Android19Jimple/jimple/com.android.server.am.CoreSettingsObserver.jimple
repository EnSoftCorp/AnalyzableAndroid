final class com.android.server.am.CoreSettingsObserver extends android.database.ContentObserver
{
    private static final java.lang.String LOG_TAG;
    private static final java.util.Map sCoreSettingToTypeMap;
    private final com.android.server.am.ActivityManagerService mActivityManagerService;
    private final android.os.Bundle mCoreSettings;

    static void <clinit>()
    {
        java.lang.Class $r0, $r3;
        java.lang.String $r1;
        java.util.HashMap $r2;
        java.util.Map $r4;

        $r0 = class "com/android/server/am/CoreSettingsObserver";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.am.CoreSettingsObserver: java.lang.String LOG_TAG> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.android.server.am.CoreSettingsObserver: java.util.Map sCoreSettingToTypeMap> = $r2;

        $r4 = <com.android.server.am.CoreSettingsObserver: java.util.Map sCoreSettingToTypeMap>;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long_press_timeout", $r3);

        return;
    }

    public void <init>(com.android.server.am.ActivityManagerService)
    {
        com.android.server.am.CoreSettingsObserver r0;
        com.android.server.am.ActivityManagerService r1;
        android.os.Handler $r2;
        android.os.Bundle $r3;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        r1 := @parameter0: com.android.server.am.ActivityManagerService;

        $r2 = r1.<com.android.server.am.ActivityManagerService: android.os.Handler mHandler>;

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>($r2);

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings> = $r3;

        r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService> = r1;

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void beginObserveCoreSettings()>();

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void sendCoreSettings()>();

        return;
    }

    private void beginObserveCoreSettings()
    {
        com.android.server.am.CoreSettingsObserver r0;
        java.util.Iterator r1;
        android.net.Uri r2;
        java.util.Map $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6;
        com.android.server.am.ActivityManagerService $r7;
        android.content.Context $r8;
        android.content.ContentResolver $r9;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        $r3 = <com.android.server.am.CoreSettingsObserver: java.util.Map sCoreSettingToTypeMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        r2 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>($r6);

        $r7 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r8 = $r7.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r9.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r2, 0, r0);

        goto label1;

     label2:
        return;
    }

    private void populateCoreSettings(android.os.Bundle)
    {
        com.android.server.am.CoreSettingsObserver r0;
        android.os.Bundle r1;
        android.content.Context r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.String r5, $r22, $r23, $r28;
        java.lang.Class r6, $r14, $r15, $r17;
        android.provider.Settings$SettingNotFoundException r7, $r21;
        com.android.server.am.ActivityManagerService $r8;
        java.util.Map $r9;
        java.util.Set $r10;
        boolean $z0;
        java.lang.Object $r11, $r12, $r13;
        android.content.ContentResolver $r16, $r18, $r19, $r20;
        long $l0;
        float $f0;
        int $i1;
        java.lang.StringBuilder $r24, $r25, $r26, $r27;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        r1 := @parameter0: android.os.Bundle;

        $r8 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        r2 = $r8.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r9 = <com.android.server.am.CoreSettingsObserver: java.util.Map sCoreSettingToTypeMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r12;

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.lang.Class) $r13;

        if r6 != class "java/lang/String" goto label05;

     label02:
        $r20 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r22 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r20, r5);

        virtualinvoke r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>(r5, $r22);

     label03:
        goto label01;

     label04:
        $r21 := @caughtexception;

        r7 = $r21;

        $r23 = <com.android.server.am.CoreSettingsObserver: java.lang.String LOG_TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find setting \"");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r23, $r28, r7);

        goto label01;

     label05:
        $r15 = <java.lang.Integer: java.lang.Class TYPE>;

        if r6 != $r15 goto label07;

        $r19 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>($r19, r5);

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>(r5, $i1);

     label06:
        goto label01;

     label07:
        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        if r6 != $r14 goto label09;

        $r18 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = staticinvoke <android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>($r18, r5);

        virtualinvoke r1.<android.os.Bundle: void putFloat(java.lang.String,float)>(r5, $f0);

     label08:
        goto label01;

     label09:
        $r17 = <java.lang.Long: java.lang.Class TYPE>;

        if r6 != $r17 goto label01;

        $r16 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>($r16, r5);

        virtualinvoke r1.<android.os.Bundle: void putLong(java.lang.String,long)>(r5, $l0);

     label10:
        goto label01;

     label11:
        return;

        catch android.provider.Settings$SettingNotFoundException from label02 to label03 with label04;
        catch android.provider.Settings$SettingNotFoundException from label05 to label06 with label04;
        catch android.provider.Settings$SettingNotFoundException from label07 to label08 with label04;
        catch android.provider.Settings$SettingNotFoundException from label09 to label10 with label04;
    }

    private void sendCoreSettings()
    {
        com.android.server.am.CoreSettingsObserver r0;
        android.os.Bundle $r1, $r2;
        com.android.server.am.ActivityManagerService $r3;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        $r1 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void populateCoreSettings(android.os.Bundle)>($r1);

        $r3 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r2 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        virtualinvoke $r3.<com.android.server.am.ActivityManagerService: void onCoreSettingsChange(android.os.Bundle)>($r2);

        return;
    }

    public android.os.Bundle getCoreSettingsLocked()
    {
        com.android.server.am.CoreSettingsObserver r0;
        android.os.Bundle $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        $r1 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.Object clone()>();

        $r3 = (android.os.Bundle) $r2;

        return $r3;
    }

    public void onChange(boolean)
    {
        com.android.server.am.CoreSettingsObserver r0;
        boolean z0;
        com.android.server.am.ActivityManagerService r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void sendCoreSettings()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
