public class com.android.org.conscrypt.OpenSSLX509CertificateFactory extends java.security.cert.CertificateFactorySpi
{
    private static final byte[] PKCS7_MARKER;
    private static final int PUSHBACK_SIZE;
    private com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser certificateParser;
    private com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser crlParser;

    static void <clinit>()
    {
        java.lang.String $r0;
        byte[] $r1;

        <com.android.org.conscrypt.OpenSSLX509CertificateFactory: int PUSHBACK_SIZE> = 64;

        $r0 = "-----BEGIN PKCS7";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] PKCS7_MARKER> = $r1;

        return;
    }

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$1 $r1;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$2 $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        specialinvoke r0.<java.security.cert.CertificateFactorySpi: void <init>()>();

        $r1 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$1;

        specialinvoke $r1.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$1: void <init>(com.android.org.conscrypt.OpenSSLX509CertificateFactory)>(r0);

        r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser certificateParser> = $r1;

        $r2 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$2;

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$2: void <init>(com.android.org.conscrypt.OpenSSLX509CertificateFactory)>(r0);

        r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser crlParser> = $r2;

        return;
    }

    static byte[] access$000()
    {
        byte[] $r0;

        $r0 = <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] PKCS7_MARKER>;

        return $r0;
    }

    public java.security.cert.CRL engineGenerateCRL(java.io.InputStream) throws java.security.cert.CRLException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.io.InputStream r1;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException r2, $r6;
        java.security.cert.CRL r3;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser $r4;
        java.lang.Object $r5;
        java.security.cert.CRLException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser crlParser>;

        $r5 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.lang.Object generateItem(java.io.InputStream)>(r1);

        r3 = (java.security.cert.CRL) $r5;

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.security.cert.CRLException;

        specialinvoke $r7.<java.security.cert.CRLException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException from label1 to label2 with label3;
    }

    public java.util.Collection engineGenerateCRLs(java.io.InputStream) throws java.security.cert.CRLException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.io.InputStream r1;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException r2, $r6;
        java.util.Collection r3;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser $r4;
        java.util.List $r5;
        java.security.cert.CRLException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label1:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser crlParser>;

        r3 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.util.Collection generateItems(java.io.InputStream)>(r1);

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.security.cert.CRLException;

        specialinvoke $r7.<java.security.cert.CRLException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException from label1 to label2 with label3;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertPath $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.security.cert.CertPath fromEncoding(java.io.InputStream)>(r1);

        return $r2;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.security.cert.CertPath $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.security.cert.CertPath fromEncoding(java.io.InputStream,java.lang.String)>(r1, r2);

        return $r3;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.util.List) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.util.List r1;
        java.util.ArrayList r2, $r4;
        int i0, $i1, $i2;
        java.security.cert.Certificate r3;
        com.android.org.conscrypt.OpenSSLX509CertPath $r5;
        java.lang.Object $r6;
        boolean $z0;
        java.security.cert.X509Certificate $r7;
        java.security.cert.CertificateException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        r1 := @parameter0: java.util.List;

        $r4 = new java.util.ArrayList;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        r2 = $r4;

        i0 = 0;

     label1:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i2 goto label3;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.Certificate) $r6;

        $z0 = r3 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label2;

        $r8 = new java.security.cert.CertificateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate not X.509 type at index ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label2:
        $r7 = (java.security.cert.X509Certificate) r3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = new com.android.org.conscrypt.OpenSSLX509CertPath;

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLX509CertPath: void <init>(java.util.List)>(r2);

        return $r5;
    }

    public java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.io.InputStream r1;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException r2, $r6;
        java.security.cert.Certificate r3;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser $r4;
        java.lang.Object $r5;
        java.security.cert.CertificateException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser certificateParser>;

        $r5 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.lang.Object generateItem(java.io.InputStream)>(r1);

        r3 = (java.security.cert.Certificate) $r5;

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.security.cert.CertificateException;

        specialinvoke $r7.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException from label1 to label2 with label3;
    }

    public java.util.Collection engineGenerateCertificates(java.io.InputStream) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.io.InputStream r1;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException r2, $r5;
        java.util.Collection r3;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser $r4;
        java.security.cert.CertificateException $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser certificateParser>;

        r3 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.util.Collection generateItems(java.io.InputStream)>(r1);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.security.cert.CertificateException;

        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException from label1 to label2 with label3;
    }

    public java.util.Iterator engineGetCertPathEncodings()
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory r0;
        java.util.Iterator $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory;

        $r1 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.util.Iterator getEncodingsIterator()>();

        return $r1;
    }
}
