public class android.view.SurfaceControl extends java.lang.Object
{
    public static final int BUILT_IN_DISPLAY_ID_HDMI;
    public static final int BUILT_IN_DISPLAY_ID_MAIN;
    public static final int FX_SURFACE_DIM;
    public static final int FX_SURFACE_MASK;
    public static final int FX_SURFACE_NORMAL;
    private static final boolean HEADLESS;
    public static final int HIDDEN;
    public static final int NON_PREMULTIPLIED;
    public static final int OPAQUE;
    public static final int PROTECTED_APP;
    public static final int SECURE;
    public static final int SURFACE_HIDDEN;
    private static final java.lang.String TAG;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.lang.String mName;
    int mNativeObject;

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        <android.view.SurfaceControl: java.lang.String TAG> = "SurfaceControl";

        <android.view.SurfaceControl: int SURFACE_HIDDEN> = 1;

        <android.view.SurfaceControl: int SECURE> = 128;

        <android.view.SurfaceControl: int PROTECTED_APP> = 2048;

        <android.view.SurfaceControl: int OPAQUE> = 1024;

        <android.view.SurfaceControl: int NON_PREMULTIPLIED> = 256;

        <android.view.SurfaceControl: int HIDDEN> = 4;

        <android.view.SurfaceControl: int FX_SURFACE_NORMAL> = 0;

        <android.view.SurfaceControl: int FX_SURFACE_MASK> = 983040;

        <android.view.SurfaceControl: int FX_SURFACE_DIM> = 131072;

        <android.view.SurfaceControl: int BUILT_IN_DISPLAY_ID_MAIN> = 0;

        <android.view.SurfaceControl: int BUILT_IN_DISPLAY_ID_HDMI> = 1;

        $r0 = "1";

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.config.headless", "0");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        <android.view.SurfaceControl: boolean HEADLESS> = $z0;

        return;
    }

    public void <init>(android.view.SurfaceSession, java.lang.String, int, int, int, int) throws android.view.Surface$OutOfResourcesException
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceSession r1;
        java.lang.String r2, $r8;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        dalvik.system.CloseGuard $r3, $r4;
        android.view.Surface$OutOfResourcesException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Throwable $r10;
        java.lang.IllegalArgumentException $r11, $r12;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.SurfaceSession;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard> = $r3;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("session must not be null");

        throw $r11;

     label1:
        if r2 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must not be null");

        throw $r12;

     label2:
        $i4 = i3 & 4;

        if $i4 != 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surfaces should always be created with the HIDDEN flag set to ensure that they are not made visible prematurely before all of the surface\'s properties have been configured.  Set the other properties and make the surface visible within a transaction.  New surface name: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.Throwable;

        specialinvoke $r10.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SurfaceControl", $r8, $r10);

     label3:
        staticinvoke <android.view.SurfaceControl: void checkHeadless()>();

        r0.<android.view.SurfaceControl: java.lang.String mName> = r2;

        $i5 = staticinvoke <android.view.SurfaceControl: int nativeCreate(android.view.SurfaceSession,java.lang.String,int,int,int,int)>(r1, r2, i0, i1, i2, i3);

        r0.<android.view.SurfaceControl: int mNativeObject> = $i5;

        $i6 = r0.<android.view.SurfaceControl: int mNativeObject>;

        if $i6 != 0 goto label4;

        $r5 = new android.view.Surface$OutOfResourcesException;

        specialinvoke $r5.<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>("Couldn\'t allocate SurfaceControl native object");

        throw $r5;

     label4:
        $r4 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void open(java.lang.String)>("release");

        return;
    }

    public static void blankDisplay(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        staticinvoke <android.view.SurfaceControl: void nativeBlankDisplay(android.os.IBinder)>(r0);

        return;
    }

    private static void checkHeadless()
    {
        boolean $z0;
        java.lang.UnsupportedOperationException $r0;

        $z0 = <android.view.SurfaceControl: boolean HEADLESS>;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Device is headless");

        throw $r0;

     label1:
        return;
    }

    private void checkNotReleased()
    {
        android.view.SurfaceControl r0;
        int $i0;
        java.lang.NullPointerException $r1;

        r0 := @this: android.view.SurfaceControl;

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("mNativeObject is null. Have you called release() already?");

        throw $r1;

     label1:
        return;
    }

    public static void closeTransaction()
    {
        staticinvoke <android.view.SurfaceControl: void nativeCloseTransaction()>();

        return;
    }

    public static android.os.IBinder createDisplay(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        android.os.IBinder $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must not be null");

        throw $r2;

     label1:
        $r1 = staticinvoke <android.view.SurfaceControl: android.os.IBinder nativeCreateDisplay(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    public static void destroyDisplay(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        staticinvoke <android.view.SurfaceControl: void nativeDestroyDisplay(android.os.IBinder)>(r0);

        return;
    }

    public static android.os.IBinder getBuiltInDisplay(int)
    {
        int i0;
        android.os.IBinder $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.view.SurfaceControl: android.os.IBinder nativeGetBuiltInDisplay(int)>(i0);

        return $r0;
    }

    public static boolean getDisplayInfo(android.os.IBinder, android.view.SurfaceControl$PhysicalDisplayInfo)
    {
        android.os.IBinder r0;
        android.view.SurfaceControl$PhysicalDisplayInfo r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.SurfaceControl$PhysicalDisplayInfo;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("outInfo must not be null");

        throw $r2;

     label2:
        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetDisplayInfo(android.os.IBinder,android.view.SurfaceControl$PhysicalDisplayInfo)>(r0, r1);

        return $z0;
    }

    private static native void nativeBlankDisplay(android.os.IBinder);

    private static native void nativeCloseTransaction();

    private static native int nativeCreate(android.view.SurfaceSession, java.lang.String, int, int, int, int) throws android.view.Surface$OutOfResourcesException;

    private static native android.os.IBinder nativeCreateDisplay(java.lang.String, boolean);

    private static native void nativeDestroy(int);

    private static native void nativeDestroyDisplay(android.os.IBinder);

    private static native android.os.IBinder nativeGetBuiltInDisplay(int);

    private static native boolean nativeGetDisplayInfo(android.os.IBinder, android.view.SurfaceControl$PhysicalDisplayInfo);

    private static native void nativeOpenTransaction();

    private static native void nativeRelease(int);

    private static native android.graphics.Bitmap nativeScreenshot(android.os.IBinder, int, int, int, int, boolean);

    private static native void nativeScreenshot(android.os.IBinder, android.view.Surface, int, int, int, int, boolean);

    private static native void nativeSetAlpha(int, float);

    private static native void nativeSetAnimationTransaction();

    private static native void nativeSetDisplayLayerStack(android.os.IBinder, int);

    private static native void nativeSetDisplayProjection(android.os.IBinder, int, int, int, int, int, int, int, int, int);

    private static native void nativeSetDisplaySurface(android.os.IBinder, int);

    private static native void nativeSetFlags(int, int, int);

    private static native void nativeSetLayer(int, int);

    private static native void nativeSetLayerStack(int, int);

    private static native void nativeSetMatrix(int, float, float, float, float);

    private static native void nativeSetPosition(int, float, float);

    private static native void nativeSetSize(int, int, int);

    private static native void nativeSetTransparentRegionHint(int, android.graphics.Region);

    private static native void nativeSetWindowCrop(int, int, int, int, int);

    private static native void nativeUnblankDisplay(android.os.IBinder);

    public static void openTransaction()
    {
        staticinvoke <android.view.SurfaceControl: void nativeOpenTransaction()>();

        return;
    }

    public static android.graphics.Bitmap screenshot(int, int)
    {
        int i0, i1;
        android.os.IBinder $r0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getBuiltInDisplay(int)>(0);

        $r1 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap nativeScreenshot(android.os.IBinder,int,int,int,int,boolean)>($r0, i0, i1, 0, 0, 1);

        return $r1;
    }

    public static android.graphics.Bitmap screenshot(int, int, int, int)
    {
        int i0, i1, i2, i3;
        android.os.IBinder $r0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getBuiltInDisplay(int)>(0);

        $r1 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap nativeScreenshot(android.os.IBinder,int,int,int,int,boolean)>($r0, i0, i1, i2, i3, 0);

        return $r1;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface)
    {
        android.os.IBinder r0;
        android.view.Surface r1;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,int,int,int,int,boolean)>(r0, r1, 0, 0, 0, 0, 1);

        return;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface, int, int)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        int i0, i1;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,int,int,int,int,boolean)>(r0, r1, i0, i1, 0, 0, 1);

        return;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface, int, int, int, int)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,int,int,int,int,boolean)>(r0, r1, i0, i1, i2, i3, 0);

        return;
    }

    private static void screenshot(android.os.IBinder, android.view.Surface, int, int, int, int, boolean)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        int i0, i1, i2, i3;
        boolean z0;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        z0 := @parameter6: boolean;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("consumer must not be null");

        throw $r2;

     label2:
        staticinvoke <android.view.SurfaceControl: void nativeScreenshot(android.os.IBinder,android.view.Surface,int,int,int,int,boolean)>(r0, r1, i0, i1, i2, i3, z0);

        return;
    }

    public static void setAnimationTransaction()
    {
        staticinvoke <android.view.SurfaceControl: void nativeSetAnimationTransaction()>();

        return;
    }

    public static void setDisplayLayerStack(android.os.IBinder, int)
    {
        android.os.IBinder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayLayerStack(android.os.IBinder,int)>(r0, i0);

        return;
    }

    public static void setDisplayProjection(android.os.IBinder, int, android.graphics.Rect, android.graphics.Rect)
    {
        android.os.IBinder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.Rect r1, r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        r2 := @parameter3: android.graphics.Rect;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("layerStackRect must not be null");

        throw $r4;

     label2:
        if r2 != null goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayRect must not be null");

        throw $r3;

     label3:
        $i8 = r1.<android.graphics.Rect: int left>;

        $i7 = r1.<android.graphics.Rect: int top>;

        $i6 = r1.<android.graphics.Rect: int right>;

        $i5 = r1.<android.graphics.Rect: int bottom>;

        $i4 = r2.<android.graphics.Rect: int left>;

        $i3 = r2.<android.graphics.Rect: int top>;

        $i2 = r2.<android.graphics.Rect: int right>;

        $i1 = r2.<android.graphics.Rect: int bottom>;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayProjection(android.os.IBinder,int,int,int,int,int,int,int,int,int)>(r0, i0, $i8, $i7, $i6, $i5, $i4, $i3, $i2, $i1);

        return;
    }

    public static void setDisplaySurface(android.os.IBinder, android.view.Surface)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r4;

     label1:
        if r1 == null goto label7;

        r2 = r1.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $i0 = r1.<android.view.Surface: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplaySurface(android.os.IBinder,int)>(r0, $i0);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        staticinvoke <android.view.SurfaceControl: void nativeSetDisplaySurface(android.os.IBinder,int)>(r0, 0);

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void unblankDisplay(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        staticinvoke <android.view.SurfaceControl: void nativeUnblankDisplay(android.os.IBinder)>(r0);

        return;
    }

    public void destroy()
    {
        android.view.SurfaceControl r0;
        int $i0, $i1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.view.SurfaceControl;

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        if $i0 == 0 goto label1;

        $i1 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeDestroy(int)>($i1);

        r0.<android.view.SurfaceControl: int mNativeObject> = 0;

     label1:
        $r1 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.SurfaceControl r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;
        int $i0, $i1;

        r0 := @this: android.view.SurfaceControl;

     label1:
        $r2 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        if $i0 == 0 goto label3;

        $i1 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeRelease(int)>($i1);

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void hide()
    {
        android.view.SurfaceControl r0;
        int $i0;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(int,int,int)>($i0, 1, 1);

        return;
    }

    public void release()
    {
        android.view.SurfaceControl r0;
        int $i0, $i1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.view.SurfaceControl;

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        if $i0 == 0 goto label1;

        $i1 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeRelease(int)>($i1);

        r0.<android.view.SurfaceControl: int mNativeObject> = 0;

     label1:
        $r1 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    public void setAlpha(float)
    {
        android.view.SurfaceControl r0;
        float f0;
        int $i0;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetAlpha(int,float)>($i0, f0);

        return;
    }

    public void setFlags(int, int)
    {
        android.view.SurfaceControl r0;
        int i0, i1, $i2;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i2 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(int,int,int)>($i2, i0, i1);

        return;
    }

    public void setLayer(int)
    {
        android.view.SurfaceControl r0;
        int i0, $i1;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i1 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetLayer(int,int)>($i1, i0);

        return;
    }

    public void setLayerStack(int)
    {
        android.view.SurfaceControl r0;
        int i0, $i1;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i1 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetLayerStack(int,int)>($i1, i0);

        return;
    }

    public void setMatrix(float, float, float, float)
    {
        android.view.SurfaceControl r0;
        float f0, f1, f2, f3;
        int $i0;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetMatrix(int,float,float,float,float)>($i0, f0, f1, f2, f3);

        return;
    }

    public void setPosition(float, float)
    {
        android.view.SurfaceControl r0;
        float f0, f1;
        int $i0;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetPosition(int,float,float)>($i0, f0, f1);

        return;
    }

    public void setSize(int, int)
    {
        android.view.SurfaceControl r0;
        int i0, i1, $i2;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i2 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetSize(int,int,int)>($i2, i0, i1);

        return;
    }

    public void setTransparentRegionHint(android.graphics.Region)
    {
        android.view.SurfaceControl r0;
        android.graphics.Region r1;
        int $i0;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.graphics.Region;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetTransparentRegionHint(int,android.graphics.Region)>($i0, r1);

        return;
    }

    public void setWindowCrop(android.graphics.Rect)
    {
        android.view.SurfaceControl r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        if r1 == null goto label1;

        $i5 = r0.<android.view.SurfaceControl: int mNativeObject>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int bottom>;

        staticinvoke <android.view.SurfaceControl: void nativeSetWindowCrop(int,int,int,int,int)>($i5, $i4, $i3, $i2, $i1);

        return;

     label1:
        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetWindowCrop(int,int,int,int,int)>($i0, 0, 0, 0, 0);

        return;
    }

    public void show()
    {
        android.view.SurfaceControl r0;
        int $i0;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $i0 = r0.<android.view.SurfaceControl: int mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(int,int,int)>($i0, 0, 1);

        return;
    }

    public java.lang.String toString()
    {
        android.view.SurfaceControl r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: android.view.SurfaceControl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface(name=");

        $r3 = r0.<android.view.SurfaceControl: java.lang.String mName>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
