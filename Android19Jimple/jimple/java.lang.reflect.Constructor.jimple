public final class java.lang.reflect.Constructor extends java.lang.reflect.AbstractMethod implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
{
    private static final java.util.Comparator ORDER_BY_SIGNATURE;

    static void <clinit>()
    {
        <java.lang.reflect.Constructor: java.util.Comparator ORDER_BY_SIGNATURE> = null;

        return;
    }

    public void <init>(java.lang.reflect.ArtMethod)
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.ArtMethod r1;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.reflect.ArtMethod;

        specialinvoke r0.<java.lang.reflect.AbstractMethod: void <init>(java.lang.reflect.ArtMethod)>(r1);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.reflect.AbstractMethod: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1;
        java.lang.annotation.Annotation $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r3;

     label1:
        $r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.lang.annotation.Annotation[] $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = specialinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.annotation.Annotation[] getAnnotations()>();

        return $r1;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.util.List r1;
        int $i0;
        java.lang.annotation.Annotation[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.lang.reflect.Constructor;

        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.util.List getDeclaredAnnotations(java.lang.reflect.AnnotatedElement)>(r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (java.lang.annotation.Annotation)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.annotation.Annotation[]) $r3;

        return $r4;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = specialinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.Class getDeclaringClass()>();

        return $r1;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class[] $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.Class[] getExceptions(java.lang.reflect.AnnotatedElement)>(r0);

        return $r1;
    }

    public java.lang.reflect.Type[] getGenericExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.Type[] $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = specialinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.Type[] getGenericExceptionTypes()>();

        return $r1;
    }

    public java.lang.reflect.Type[] getGenericParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.Type[] $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = specialinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.Type[] getGenericParameterTypes()>();

        return $r1;
    }

    public int getModifiers()
    {
        java.lang.reflect.Constructor r0;
        int $i0;

        r0 := @this: java.lang.reflect.Constructor;

        $i0 = specialinvoke r0.<java.lang.reflect.AbstractMethod: int getModifiers()>();

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.annotation.Annotation[][] getParameterAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.ArtMethod $r1;
        java.lang.annotation.Annotation[][] $r2;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.reflect.ArtMethod artMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: java.lang.annotation.Annotation[][] getParameterAnnotations()>();

        return $r2;
    }

    public java.lang.Class[] getParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class[] $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = specialinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.Class[] getParameterTypes()>();

        return $r1;
    }

    java.lang.String getSignature()
    {
        java.lang.reflect.Constructor r0;
        java.lang.StringBuilder r1, $r3;
        java.lang.Class[] r2;
        int i0, i1;
        java.lang.String $r6, $r8;
        java.lang.Class $r7;

        r0 := @this: java.lang.reflect.Constructor;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r7 = r2[i1];

        $r8 = staticinvoke <libcore.reflect.Types: java.lang.String getSignature(java.lang.Class)>($r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")V");

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.AbstractMethod$GenericInfo $r1;
        java.lang.reflect.TypeVariable[] $r2, $r4, $r5;
        java.lang.Object $r3;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.reflect.AbstractMethod$GenericInfo getMethodOrConstructorGenericInfo()>();

        $r2 = $r1.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.reflect.TypeVariable[]) $r3;

        $r5 = (java.lang.reflect.TypeVariable[]) $r4;

        return $r5;
    }

    public int hashCode()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r2;

     label1:
        $z0 = staticinvoke <libcore.reflect.AnnotationAccess: boolean isDeclaredAnnotationPresent(java.lang.reflect.AnnotatedElement,java.lang.Class)>(r0, r1);

        return $z0;
    }

    public boolean isSynthetic()
    {
        java.lang.reflect.Constructor r0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Constructor;

        $z0 = specialinvoke r0.<java.lang.reflect.AbstractMethod: boolean isSynthetic()>();

        return $z0;
    }

    public boolean isVarArgs()
    {
        java.lang.reflect.Constructor r0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Constructor;

        $z0 = specialinvoke r0.<java.lang.reflect.AbstractMethod: boolean isVarArgs()>();

        return $z0;
    }

    public native transient java.lang.Object newInstance(java.lang.Object[]) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException;

    public java.lang.String toGenericString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.String $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = specialinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.String toGenericString()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.StringBuilder r1, $r3;
        java.lang.Class[] r2, $r9;
        int $i0, $i1, $i2;
        java.lang.String $r4, $r6, $r11, $r13, $r14;
        java.lang.Class $r5;

        r0 := @this: java.lang.reflect.Constructor;

        $r3 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();

        $r4 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i0);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        r1 = $r3;

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i1 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r5 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r9 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r11 = staticinvoke <libcore.reflect.Types: java.lang.String toString(java.lang.Class[])>($r9);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>();

        $i2 = lengthof r2;

        if $i2 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" throws ");

        $r14 = staticinvoke <libcore.reflect.Types: java.lang.String toString(java.lang.Class[])>(r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label2:
        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }
}
