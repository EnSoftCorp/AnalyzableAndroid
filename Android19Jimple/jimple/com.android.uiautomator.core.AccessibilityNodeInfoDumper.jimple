public class com.android.uiautomator.core.AccessibilityNodeInfoDumper extends java.lang.Object
{
    private static final java.lang.String LOGTAG;
    private static final java.lang.String[] NAF_EXCLUDED_CLASSES;

    static void <clinit>()
    {
        java.lang.String[] r0;
        java.lang.Class $r1, $r3, $r5, $r7, $r9;
        java.lang.String $r2, $r4, $r6, $r8, $r10;

        $r1 = class "com/android/uiautomator/core/AccessibilityNodeInfoDumper";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG> = $r2;

        r0 = newarray (java.lang.String)[4];

        $r3 = class "android/widget/GridView";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r0[0] = $r4;

        $r5 = class "android/widget/GridLayout";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        r0[1] = $r6;

        $r7 = class "android/widget/ListView";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        r0[2] = $r8;

        $r9 = class "android/widget/TableLayout";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        r0[3] = $r10;

        <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES> = r0;

        return;
    }

    public void <init>()
    {
        com.android.uiautomator.core.AccessibilityNodeInfoDumper r0;

        r0 := @this: com.android.uiautomator.core.AccessibilityNodeInfoDumper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r1;
        int i0, i1;
        java.lang.CharSequence $r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i1);

        $r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r3 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r5 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r4);

        $z1 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label3;

     label2:
        return 1;

     label3:
        $z2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        if $z2 != 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    private static void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo, org.xmlpull.v1.XmlSerializer, int, int, int) throws java.io.IOException
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r3;
        org.xmlpull.v1.XmlSerializer r1;
        int i0, i1, i2, i3, i4;
        java.lang.String r2, r6, $r8, $r12, $r13, $r15, $r16, $r21, $r23, $r25, $r26, $r28, $r32, $r33, $r36, $r38, $r39, $r41, $r42, $r46, $r49, $r50, $r53, $r55, $r56;
        java.lang.Object[] r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.CharSequence $r11, $r17, $r18, $r24;
        android.graphics.Rect $r47;
        java.lang.Integer $r51, $r52;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r1 := @parameter1: org.xmlpull.v1.XmlSerializer;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "node");

        $z0 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z0 != 0 goto label1;

        $z12 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z12 != 0 goto label1;

        $r53 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "NAF", $r53);

     label1:
        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "index", $r8);

        $r11 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r12 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r11);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "text", $r12);

        $r15 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>();

        $r13 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r15);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "resource-id", $r13);

        $r17 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        $r16 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r17);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "class", $r16);

        $r18 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>();

        $r21 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r18);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "package", $r21);

        $r24 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r23 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r24);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "content-desc", $r23);

        $z2 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>();

        $r26 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checkable", $r26);

        $z1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>();

        $r25 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checked", $r25);

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        $r28 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "clickable", $r28);

        $z5 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        $r33 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "enabled", $r33);

        $z4 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>();

        $r32 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focusable", $r32);

        $z7 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        $r36 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z7);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focused", $r36);

        $z6 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>();

        $r39 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "scrollable", $r39);

        $z8 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>();

        $r38 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z8);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "long-clickable", $r38);

        $z10 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>();

        $r42 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z10);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "password", $r42);

        $z9 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>();

        $r41 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z9);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "selected", $r41);

        $r47 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoHelper: android.graphics.Rect getVisibleBoundsInScreen(android.view.accessibility.AccessibilityNodeInfo,int,int)>(r0, i1, i2);

        $r46 = virtualinvoke $r47.<android.graphics.Rect: java.lang.String toShortString()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "bounds", $r46);

        i3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i4 = 0;

     label2:
        if i4 >= i3 goto label6;

        r3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i4);

        if r3 == null goto label5;

        $z11 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>();

        if $z11 == 0 goto label4;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r3, r1, i4, i1, i2);

        virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        r6 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        r5 = newarray (java.lang.Object)[1];

        $r55 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        r5[0] = $r55;

        $r56 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipping invisible child: %s", r5);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r6, $r56);

        goto label3;

     label5:
        r2 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        r4 = newarray (java.lang.Object)[3];

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        r4[0] = $r52;

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        r4[1] = $r51;

        $r50 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        r4[2] = $r50;

        $r49 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Null child %d/%d, parent: %s", r4);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r2, $r49);

        goto label3;

     label6:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "node");

        return;
    }

    public static void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo, int, int, int)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        int i0, i1, i2;
        java.io.File r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "local");

        r1 = $r2;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean mkdir()>();

        virtualinvoke r1.<java.io.File: boolean setExecutable(boolean,boolean)>(1, 0);

        virtualinvoke r1.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);

        virtualinvoke r1.<java.io.File: boolean setReadable(boolean,boolean)>(1, 0);

     label1:
        $r4 = new java.io.File;

        $r5 = new java.io.File;

        $r6 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "local");

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "window_dump.xml");

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>(r0, $r4, i0, i1, i2);

        return;
    }

    public static void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo, java.io.File, int, int, int)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        java.io.File r1;
        int i0, i1, i2;
        long l3, l4, $l5;
        java.io.FileWriter r2, $r6;
        java.io.IOException r3, $r21;
        org.xmlpull.v1.XmlSerializer r4;
        java.io.StringWriter r5, $r7;
        java.lang.Boolean $r9;
        java.lang.String $r11, $r12, $r16, $r18, $r20;
        java.lang.StringBuilder $r14, $r15, $r17, $r19;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r1 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if r0 != null goto label1;

        return;

     label1:
        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label2:
        $r6 = new java.io.FileWriter;

        specialinvoke $r6.<java.io.FileWriter: void <init>(java.io.File)>(r1);

        r2 = $r6;

        r4 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>();

        $r7 = new java.io.StringWriter;

        specialinvoke $r7.<java.io.StringWriter: void <init>()>();

        r5 = $r7;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>(r5);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>("UTF-8", $r9);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "hierarchy");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "rotation", $r11);

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r0, r4, 0, i1, i2);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "hierarchy");

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r12 = virtualinvoke r5.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>($r12);

        virtualinvoke r2.<java.io.FileWriter: void close()>();

     label3:
        l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r16 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetch time: ");

        $l5 = l4 - l3;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r16, $r18);

        return;

     label4:
        $r21 := @caughtexception;

        r3 = $r21;

        $r20 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r20, "failed to dump window to file", r3);

        goto label3;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private static boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.CharSequence $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $z1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        if $z1 == 0 goto label2;

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        if $z3 == 0 goto label2;

        $r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r1);

        $z4 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label2;

        $r3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r4 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r3);

        $z5 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label2;

        z0 = 1;

     label1:
        if z0 != 0 goto label3;

        return 1;

     label2:
        z0 = 0;

        goto label1;

     label3:
        $z2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        return $z2;
    }

    private static boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        java.lang.String r1, $r4;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.CharSequence $r3;
        boolean $z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $r3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        r1 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r3);

        r2 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static java.lang.String safeCharSeqToString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String stripInvalidXMLChars(java.lang.CharSequence)>(r0);

        return $r1;
    }

    private static java.lang.String stripInvalidXMLChars(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.StringBuffer r1, $r2;
        int i0, $i2;
        char c1;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        r1 = $r2;

        i0 = 0;

     label01:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i0 >= $i2 goto label26;

        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i0);

        if c1 < 1 goto label02;

        if c1 <= 8 goto label23;

     label02:
        if c1 < 11 goto label03;

        if c1 <= 12 goto label23;

     label03:
        if c1 < 14 goto label04;

        if c1 <= 31 goto label23;

     label04:
        if c1 < 127 goto label05;

        if c1 <= 132 goto label23;

     label05:
        if c1 < 134 goto label06;

        if c1 <= 159 goto label23;

     label06:
        if c1 < 64976 goto label07;

        if c1 <= 64991 goto label23;

     label07:
        if c1 < 131070 goto label08;

        if c1 <= 131071 goto label23;

     label08:
        if c1 < 196606 goto label09;

        if c1 <= 196607 goto label23;

     label09:
        if c1 < 262142 goto label10;

        if c1 <= 262143 goto label23;

     label10:
        if c1 < 327678 goto label11;

        if c1 <= 327679 goto label23;

     label11:
        if c1 < 393214 goto label12;

        if c1 <= 393215 goto label23;

     label12:
        if c1 < 458750 goto label13;

        if c1 <= 458751 goto label23;

     label13:
        if c1 < 524286 goto label14;

        if c1 <= 524287 goto label23;

     label14:
        if c1 < 589822 goto label15;

        if c1 <= 589823 goto label23;

     label15:
        if c1 < 655358 goto label16;

        if c1 <= 655359 goto label23;

     label16:
        if c1 < 720894 goto label17;

        if c1 <= 720895 goto label23;

     label17:
        if c1 < 786430 goto label18;

        if c1 <= 786431 goto label23;

     label18:
        if c1 < 851966 goto label19;

        if c1 <= 851967 goto label23;

     label19:
        if c1 < 917502 goto label20;

        if c1 <= 917503 goto label23;

     label20:
        if c1 < 983038 goto label21;

        if c1 <= 983039 goto label23;

     label21:
        if c1 < 1048574 goto label22;

        if c1 <= 1048575 goto label23;

     label22:
        if c1 < 1114110 goto label25;

        if c1 > 1114111 goto label25;

     label23:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

     label24:
        i0 = i0 + 1;

        goto label01;

     label25:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        goto label24;

     label26:
        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
