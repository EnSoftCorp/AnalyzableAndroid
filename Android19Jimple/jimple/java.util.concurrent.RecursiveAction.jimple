public abstract class java.util.concurrent.RecursiveAction extends java.util.concurrent.ForkJoinTask
{
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.concurrent.RecursiveAction r0;

        r0 := @this: java.util.concurrent.RecursiveAction;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void <init>()>();

        return;
    }

    protected abstract void compute();

    protected final boolean exec()
    {
        java.util.concurrent.RecursiveAction r0;

        r0 := @this: java.util.concurrent.RecursiveAction;

        virtualinvoke r0.<java.util.concurrent.RecursiveAction: void compute()>();

        return 1;
    }

    public volatile java.lang.Object getRawResult()
    {
        java.util.concurrent.RecursiveAction r0;
        java.lang.Void $r1;

        r0 := @this: java.util.concurrent.RecursiveAction;

        $r1 = virtualinvoke r0.<java.util.concurrent.RecursiveAction: java.lang.Void getRawResult()>();

        return $r1;
    }

    public final java.lang.Void getRawResult()
    {
        java.util.concurrent.RecursiveAction r0;

        r0 := @this: java.util.concurrent.RecursiveAction;

        return null;
    }

    protected volatile void setRawResult(java.lang.Object)
    {
        java.util.concurrent.RecursiveAction r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: java.util.concurrent.RecursiveAction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<java.util.concurrent.RecursiveAction: void setRawResult(java.lang.Void)>($r2);

        return;
    }

    protected final void setRawResult(java.lang.Void)
    {
        java.util.concurrent.RecursiveAction r0;
        java.lang.Void r1;

        r0 := @this: java.util.concurrent.RecursiveAction;

        r1 := @parameter0: java.lang.Void;

        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.RecursiveAction: long serialVersionUID> = 5232453952276485070L;

        return;
    }
}
