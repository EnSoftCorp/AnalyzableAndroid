public abstract class java.nio.CharBuffer extends java.nio.Buffer implements java.lang.Comparable, java.lang.CharSequence, java.lang.Appendable, java.lang.Readable
{

    void <init>(int)
    {
        java.nio.CharBuffer r0;
        int i0;

        r0 := @this: java.nio.CharBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.Buffer: void <init>(int,int,java.nio.MemoryBlock)>(1, i0, null);

        return;
    }

    public static java.nio.CharBuffer allocate(int)
    {
        int i0;
        java.nio.CharArrayBuffer $r0;
        char[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r0 = new java.nio.CharArrayBuffer;

        $r1 = newarray (char)[i0];

        specialinvoke $r0.<java.nio.CharArrayBuffer: void <init>(char[])>($r1);

        return $r0;
    }

    public static java.nio.CharBuffer wrap(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.nio.CharSequenceAdapter $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = new java.nio.CharSequenceAdapter;

        specialinvoke $r1.<java.nio.CharSequenceAdapter: void <init>(java.lang.CharSequence)>(r0);

        return $r1;
    }

    public static java.nio.CharBuffer wrap(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i2, $i3;
        java.nio.CharSequenceAdapter r1, $r11;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        if i1 < i0 goto label1;

        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i1 <= $i3 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cs.length()=");

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", start=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", end=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label2:
        $r11 = new java.nio.CharSequenceAdapter;

        specialinvoke $r11.<java.nio.CharSequenceAdapter: void <init>(java.lang.CharSequence)>(r0);

        r1 = $r11;

        r1.<java.nio.CharBuffer: int position> = i0;

        r1.<java.nio.CharBuffer: int limit> = i1;

        return r1;
    }

    public static java.nio.CharBuffer wrap(char[])
    {
        char[] r0;
        int $i0;
        java.nio.CharBuffer $r1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static java.nio.CharBuffer wrap(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3;
        java.nio.CharArrayBuffer r1, $r2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r2 = new java.nio.CharArrayBuffer;

        specialinvoke $r2.<java.nio.CharArrayBuffer: void <init>(char[])>(r0);

        r1 = $r2;

        r1.<java.nio.CharBuffer: int position> = i0;

        $i3 = i0 + i1;

        r1.<java.nio.CharBuffer: int limit> = $i3;

        return r1;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        java.nio.CharBuffer r0, $r1;
        char c0;

        r0 := @this: java.nio.CharBuffer;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer append(char)>(c0);

        return $r1;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        java.nio.CharBuffer r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.nio.CharBuffer r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return $r2;
    }

    public java.nio.CharBuffer append(char)
    {
        java.nio.CharBuffer r0, $r1;
        char c0;

        r0 := @this: java.nio.CharBuffer;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>(c0);

        return $r1;
    }

    public java.nio.CharBuffer append(java.lang.CharSequence)
    {
        java.nio.CharBuffer r0, $r2, $r4;
        java.lang.CharSequence r1;
        java.lang.String $r3;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>($r3);

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>("null");

        return $r2;
    }

    public java.nio.CharBuffer append(java.lang.CharSequence, int, int)
    {
        java.nio.CharBuffer r0;
        java.lang.CharSequence r1, r2;
        int i0, i1, $i2;
        java.lang.String $r3;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        $i2 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label2;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        r0 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>($r3);

     label2:
        return r0;
    }

    public volatile java.lang.Object array()
    {
        java.nio.CharBuffer r0;
        char[] $r1;

        r0 := @this: java.nio.CharBuffer;

        $r1 = virtualinvoke r0.<java.nio.CharBuffer: char[] array()>();

        return $r1;
    }

    public final char[] array()
    {
        java.nio.CharBuffer r0;
        char[] $r1;

        r0 := @this: java.nio.CharBuffer;

        $r1 = virtualinvoke r0.<java.nio.CharBuffer: char[] protectedArray()>();

        return $r1;
    }

    public final int arrayOffset()
    {
        java.nio.CharBuffer r0;
        int $i0;

        r0 := @this: java.nio.CharBuffer;

        $i0 = virtualinvoke r0.<java.nio.CharBuffer: int protectedArrayOffset()>();

        return $i0;
    }

    public abstract java.nio.CharBuffer asReadOnlyBuffer();

    public final char charAt(int)
    {
        java.nio.CharBuffer r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        char $c5;

        r0 := @this: java.nio.CharBuffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        if i0 < $i2 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", remaining()=");

        $i1 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        $i3 = r0.<java.nio.CharBuffer: int position>;

        $i4 = i0 + $i3;

        $c5 = virtualinvoke r0.<java.nio.CharBuffer: char get(int)>($i4);

        return $c5;
    }

    public abstract java.nio.CharBuffer compact();

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.CharBuffer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.nio.CharBuffer) r1;

        $i0 = virtualinvoke r0.<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>($r2);

        return $i0;
    }

    public int compareTo(java.nio.CharBuffer)
    {
        java.nio.CharBuffer r0, r1;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9;
        char c3, c4;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.nio.CharBuffer;

        $i5 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        $i6 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        if $i5 >= $i6 goto label3;

        i0 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

     label1:
        i1 = r0.<java.nio.CharBuffer: int position>;

        i2 = r1.<java.nio.CharBuffer: int position>;

     label2:
        if i0 <= 0 goto label6;

        c3 = virtualinvoke r0.<java.nio.CharBuffer: char get(int)>(i1);

        c4 = virtualinvoke r1.<java.nio.CharBuffer: char get(int)>(i2);

        if c3 == c4 goto label5;

        if c3 >= c4 goto label4;

        return -1;

     label3:
        i0 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        goto label1;

     label4:
        return 1;

     label5:
        i1 = i1 + 1;

        i2 = i2 + 1;

        i0 = i0 + -1;

        goto label2;

     label6:
        $i7 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        $i8 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        $i9 = $i7 - $i8;

        return $i9;
    }

    public abstract java.nio.CharBuffer duplicate();

    public boolean equals(java.lang.Object)
    {
        java.nio.CharBuffer r0, r2;
        java.lang.Object r1;
        int i0, i1, i2, i3, i4, i6, $i7, $i8, $i9;
        boolean z0, $z1;
        char c5, $c10;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.Object;

        $z1 = r1 instanceof java.nio.CharBuffer;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.nio.CharBuffer) r1;

        $i7 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        $i8 = virtualinvoke r2.<java.nio.CharBuffer: int remaining()>();

        if $i7 != $i8 goto label1;

        i0 = r0.<java.nio.CharBuffer: int position>;

        i1 = r2.<java.nio.CharBuffer: int position>;

        z0 = 1;

        i2 = i1;

        i3 = i0;

     label3:
        if z0 == 0 goto label6;

        $i9 = r0.<java.nio.CharBuffer: int limit>;

        if i3 >= $i9 goto label6;

        i4 = i3 + 1;

        c5 = virtualinvoke r0.<java.nio.CharBuffer: char get(int)>(i3);

        i6 = i2 + 1;

        $c10 = virtualinvoke r2.<java.nio.CharBuffer: char get(int)>(i2);

        if c5 != $c10 goto label5;

        z0 = 1;

     label4:
        i2 = i6;

        i3 = i4;

        goto label3;

     label5:
        z0 = 0;

        goto label4;

     label6:
        return z0;
    }

    public abstract char get();

    public abstract char get(int);

    public java.nio.CharBuffer get(char[])
    {
        java.nio.CharBuffer r0, $r2;
        char[] r1;
        int $i0;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.nio.CharBuffer get(char[], int, int)
    {
        java.nio.CharBuffer r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        char $c6;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        if i1 <= $i4 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        i2 = i0;

     label2:
        $i5 = i0 + i1;

        if i2 >= $i5 goto label3;

        $c6 = virtualinvoke r0.<java.nio.CharBuffer: char get()>();

        r1[i2] = $c6;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r0;
    }

    public final boolean hasArray()
    {
        java.nio.CharBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.CharBuffer;

        $z0 = virtualinvoke r0.<java.nio.CharBuffer: boolean protectedHasArray()>();

        return $z0;
    }

    public int hashCode()
    {
        java.nio.CharBuffer r0;
        int i0, i1, i2, $i3;
        char $c4;

        r0 := @this: java.nio.CharBuffer;

        i0 = r0.<java.nio.CharBuffer: int position>;

        i1 = 0;

     label1:
        $i3 = r0.<java.nio.CharBuffer: int limit>;

        if i0 >= $i3 goto label2;

        i2 = i0 + 1;

        $c4 = virtualinvoke r0.<java.nio.CharBuffer: char get(int)>(i0);

        i1 = i1 + $c4;

        i0 = i2;

        goto label1;

     label2:
        return i1;
    }

    public abstract boolean isDirect();

    public final int length()
    {
        java.nio.CharBuffer r0;
        int $i0;

        r0 := @this: java.nio.CharBuffer;

        $i0 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        return $i0;
    }

    public abstract java.nio.ByteOrder order();

    abstract char[] protectedArray();

    abstract int protectedArrayOffset();

    abstract boolean protectedHasArray();

    public abstract java.nio.CharBuffer put(char);

    public abstract java.nio.CharBuffer put(int, char);

    public final java.nio.CharBuffer put(java.lang.String)
    {
        java.nio.CharBuffer r0, $r2;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.nio.CharBuffer put(java.lang.String, int, int)
    {
        java.nio.CharBuffer r0;
        java.lang.String r1, $r10;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        char $c6;
        java.nio.BufferOverflowException $r11;
        java.nio.ReadOnlyBufferException $r13;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<java.nio.CharBuffer: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r13 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r13.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r13;

     label1:
        if i0 < 0 goto label2;

        if i1 < i0 goto label2;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 <= $i5 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("str.length()=");

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", start=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", end=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label3:
        $i4 = i1 - i0;

        $i7 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        if $i4 <= $i7 goto label4;

        $r11 = new java.nio.BufferOverflowException;

        specialinvoke $r11.<java.nio.BufferOverflowException: void <init>()>();

        throw $r11;

     label4:
        i2 = i0;

     label5:
        if i2 >= i1 goto label6;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c6);

        i2 = i2 + 1;

        goto label5;

     label6:
        return r0;
    }

    public java.nio.CharBuffer put(java.nio.CharBuffer)
    {
        java.nio.CharBuffer r0, r1;
        char[] r2;
        boolean $z0;
        int $i0, $i1, $i2;
        java.nio.BufferOverflowException $r5;
        java.lang.IllegalArgumentException $r6;
        java.nio.ReadOnlyBufferException $r7;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.nio.CharBuffer;

        $z0 = virtualinvoke r0.<java.nio.CharBuffer: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r7 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r7.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r7;

     label1:
        if r1 != r0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("src == this");

        throw $r6;

     label2:
        $i0 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        $i1 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        if $i0 <= $i1 goto label3;

        $r5 = new java.nio.BufferOverflowException;

        specialinvoke $r5.<java.nio.BufferOverflowException: void <init>()>();

        throw $r5;

     label3:
        $i2 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        r2 = newarray (char)[$i2];

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>(r2);

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>(r2);

        return r0;
    }

    public final java.nio.CharBuffer put(char[])
    {
        java.nio.CharBuffer r0, $r2;
        char[] r1;
        int $i0;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.nio.CharBuffer put(char[], int, int)
    {
        java.nio.CharBuffer r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        char $c6;
        java.nio.BufferOverflowException $r3;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        if i1 <= $i4 goto label1;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label1:
        i2 = i0;

     label2:
        $i5 = i0 + i1;

        if i2 >= $i5 goto label3;

        $c6 = r1[i2];

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c6);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r0;
    }

    public int read(java.nio.CharBuffer) throws java.io.IOException
    {
        java.nio.CharBuffer r0, r1;
        int i0, i1, $i2, $i3, $i4;
        char[] r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: java.nio.CharBuffer;

        r1 := @parameter0: java.nio.CharBuffer;

        i0 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        if r1 != r0 goto label3;

        if i0 != 0 goto label2;

     label1:
        return -1;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("target == this");

        throw $r5;

     label3:
        if i0 != 0 goto label4;

        $i3 = r0.<java.nio.CharBuffer: int limit>;

        if $i3 <= 0 goto label1;

        $i4 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        if $i4 != 0 goto label1;

        return 0;

     label4:
        $i2 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i0);

        if i1 <= 0 goto label5;

        r2 = newarray (char)[i1];

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>(r2);

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>(r2);

     label5:
        return i1;
    }

    public abstract java.nio.CharBuffer slice();

    public volatile java.lang.CharSequence subSequence(int, int)
    {
        java.nio.CharBuffer r0, $r1;
        int i0, i1;

        r0 := @this: java.nio.CharBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer subSequence(int,int)>(i0, i1);

        return $r1;
    }

    public abstract java.nio.CharBuffer subSequence(int, int);

    public java.lang.String toString()
    {
        java.nio.CharBuffer r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r3;
        char $c5;

        r0 := @this: java.nio.CharBuffer;

        $r2 = new java.lang.StringBuilder;

        $i2 = r0.<java.nio.CharBuffer: int limit>;

        $i1 = r0.<java.nio.CharBuffer: int position>;

        $i3 = $i2 - $i1;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        i0 = r0.<java.nio.CharBuffer: int position>;

     label1:
        $i4 = r0.<java.nio.CharBuffer: int limit>;

        if i0 >= $i4 goto label2;

        $c5 = virtualinvoke r0.<java.nio.CharBuffer: char get(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
