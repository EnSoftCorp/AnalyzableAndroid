final class com.android.okhttp.internal.http.RetryableOutputStream extends com.android.okhttp.internal.AbstractOutputStream
{
    private final java.io.ByteArrayOutputStream content;
    private final int limit;

    public void <init>()
    {
        com.android.okhttp.internal.http.RetryableOutputStream r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.RetryableOutputStream;

        specialinvoke r0.<com.android.okhttp.internal.AbstractOutputStream: void <init>()>();

        r0.<com.android.okhttp.internal.http.RetryableOutputStream: int limit> = -1;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content> = $r1;

        return;
    }

    public void <init>(int)
    {
        com.android.okhttp.internal.http.RetryableOutputStream r0;
        int i0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.RetryableOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.okhttp.internal.AbstractOutputStream: void <init>()>();

        r0.<com.android.okhttp.internal.http.RetryableOutputStream: int limit> = i0;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content> = $r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableOutputStream r0;
        java.lang.Throwable r1, $r11;
        boolean z0;
        java.io.ByteArrayOutputStream $r2, $r8;
        int $i0, $i1, $i2, $i3;
        java.net.ProtocolException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10;
        java.lang.String $r9;

        r0 := @this: com.android.okhttp.internal.http.RetryableOutputStream;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: boolean closed>;

     label2:
        if z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        r0.<com.android.okhttp.internal.http.RetryableOutputStream: boolean closed> = 1;

        $r2 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content>;

        $i0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: int size()>();

        $i1 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: int limit>;

        if $i0 >= $i1 goto label3;

        $r3 = new java.net.ProtocolException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("content-length promised ");

        $i2 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: int limit>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, but received ");

        $r8 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content>;

        $i3 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: int size()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.net.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label5:
        $r11 := @caughtexception;

        r1 = $r11;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public int contentLength() throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableOutputStream r0;
        java.lang.Throwable r1, $r3;
        int i0;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: com.android.okhttp.internal.http.RetryableOutputStream;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.android.okhttp.internal.http.RetryableOutputStream: void close()>();

        $r2 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content>;

        i0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableOutputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Throwable r2, $r10;
        java.io.ByteArrayOutputStream $r3, $r4;
        java.net.ProtocolException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r11;

        r0 := @this: com.android.okhttp.internal.http.RetryableOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.android.okhttp.internal.http.RetryableOutputStream: void checkNotClosed()>();

        $i2 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $i3 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: int limit>;

        if $i3 == -1 goto label3;

        $r4 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content>;

        $i4 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        $i5 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: int limit>;

        $i6 = $i5 - i1;

        if $i4 <= $i6 goto label3;

        $r5 = new java.net.ProtocolException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exceeded content-length limit of ");

        $i7 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: int limit>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.net.ProtocolException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label2:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label3:
        $r3 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1);

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void writeToSocket(java.io.OutputStream) throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableOutputStream r0;
        java.io.OutputStream r1;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: com.android.okhttp.internal.http.RetryableOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<com.android.okhttp.internal.http.RetryableOutputStream: java.io.ByteArrayOutputStream content>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r1);

        return;
    }
}
