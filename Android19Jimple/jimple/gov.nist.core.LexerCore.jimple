public class gov.nist.core.LexerCore extends gov.nist.core.StringTokenizer
{
    public static final int ALPHA;
    static final char ALPHADIGIT_VALID_CHARS;
    static final char ALPHA_VALID_CHARS;
    public static final int AND;
    public static final int AT;
    public static final int BACKSLASH;
    public static final int BACK_QUOTE;
    public static final int BAR;
    public static final int COLON;
    public static final int DIGIT;
    static final char DIGIT_VALID_CHARS;
    public static final int DOLLAR;
    public static final int DOT;
    public static final int DOUBLEQUOTE;
    public static final int END;
    public static final int EQUALS;
    public static final int EXCLAMATION;
    public static final int GREATER_THAN;
    public static final int HAT;
    public static final int HT;
    public static final int ID;
    public static final int LESS_THAN;
    public static final int LPAREN;
    public static final int L_CURLY;
    public static final int L_SQUARE_BRACKET;
    public static final int MINUS;
    public static final int NULL;
    public static final int PERCENT;
    public static final int PLUS;
    public static final int POUND;
    public static final int QUESTION;
    public static final int QUOTE;
    public static final int RPAREN;
    public static final int R_CURLY;
    public static final int R_SQUARE_BRACKET;
    public static final int SAFE;
    public static final int SEMICOLON;
    public static final int SLASH;
    public static final int SP;
    public static final int STAR;
    public static final int START;
    public static final int TILDE;
    public static final int UNDERSCORE;
    public static final int WHITESPACE;
    protected static final java.util.Hashtable globalSymbolTable;
    protected static final java.util.Hashtable lexerTables;
    protected java.util.Hashtable currentLexer;
    protected java.lang.String currentLexerName;
    protected gov.nist.core.Token currentMatch;

    static void <clinit>()
    {
        java.util.Hashtable $r0, $r1;

        <gov.nist.core.LexerCore: int WHITESPACE> = 4097;

        <gov.nist.core.LexerCore: int UNDERSCORE> = 95;

        <gov.nist.core.LexerCore: int TILDE> = 126;

        <gov.nist.core.LexerCore: int START> = 2048;

        <gov.nist.core.LexerCore: int STAR> = 42;

        <gov.nist.core.LexerCore: int SP> = 32;

        <gov.nist.core.LexerCore: int SLASH> = 47;

        <gov.nist.core.LexerCore: int SEMICOLON> = 59;

        <gov.nist.core.LexerCore: int SAFE> = 4094;

        <gov.nist.core.LexerCore: int R_SQUARE_BRACKET> = 93;

        <gov.nist.core.LexerCore: int R_CURLY> = 125;

        <gov.nist.core.LexerCore: int RPAREN> = 41;

        <gov.nist.core.LexerCore: int QUOTE> = 39;

        <gov.nist.core.LexerCore: int QUESTION> = 63;

        <gov.nist.core.LexerCore: int POUND> = 35;

        <gov.nist.core.LexerCore: int PLUS> = 43;

        <gov.nist.core.LexerCore: int PERCENT> = 37;

        <gov.nist.core.LexerCore: int NULL> = 0;

        <gov.nist.core.LexerCore: int MINUS> = 45;

        <gov.nist.core.LexerCore: int L_SQUARE_BRACKET> = 91;

        <gov.nist.core.LexerCore: int L_CURLY> = 123;

        <gov.nist.core.LexerCore: int LPAREN> = 40;

        <gov.nist.core.LexerCore: int LESS_THAN> = 60;

        <gov.nist.core.LexerCore: int ID> = 4095;

        <gov.nist.core.LexerCore: int HT> = 9;

        <gov.nist.core.LexerCore: int HAT> = 94;

        <gov.nist.core.LexerCore: int GREATER_THAN> = 62;

        <gov.nist.core.LexerCore: int EXCLAMATION> = 33;

        <gov.nist.core.LexerCore: int EQUALS> = 61;

        <gov.nist.core.LexerCore: int END> = 4096;

        <gov.nist.core.LexerCore: int DOUBLEQUOTE> = 34;

        <gov.nist.core.LexerCore: int DOT> = 46;

        <gov.nist.core.LexerCore: int DOLLAR> = 36;

        <gov.nist.core.LexerCore: char DIGIT_VALID_CHARS> = 65534;

        <gov.nist.core.LexerCore: int DIGIT> = 4098;

        <gov.nist.core.LexerCore: int COLON> = 58;

        <gov.nist.core.LexerCore: int BAR> = 124;

        <gov.nist.core.LexerCore: int BACK_QUOTE> = 96;

        <gov.nist.core.LexerCore: int BACKSLASH> = 92;

        <gov.nist.core.LexerCore: int AT> = 64;

        <gov.nist.core.LexerCore: int AND> = 38;

        <gov.nist.core.LexerCore: char ALPHA_VALID_CHARS> = 65535;

        <gov.nist.core.LexerCore: char ALPHADIGIT_VALID_CHARS> = 65533;

        <gov.nist.core.LexerCore: int ALPHA> = 4099;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable> = $r0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        <gov.nist.core.LexerCore: java.util.Hashtable lexerTables> = $r1;

        return;
    }

    protected void <init>()
    {
        gov.nist.core.LexerCore r0;
        java.util.Hashtable $r1;

        r0 := @this: gov.nist.core.LexerCore;

        specialinvoke r0.<gov.nist.core.StringTokenizer: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer> = $r1;

        r0.<gov.nist.core.LexerCore: java.lang.String currentLexerName> = "charLexer";

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1, r2;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<gov.nist.core.StringTokenizer: void <init>(java.lang.String)>(r2);

        r0.<gov.nist.core.LexerCore: java.lang.String currentLexerName> = r1;

        return;
    }

    public static java.lang.String charAsString(char)
    {
        char c0;
        java.lang.String $r0;

        c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        return $r0;
    }

    public static final boolean isTokenChar(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        lookupswitch(c0)
        {
            case 33: goto label1;
            case 37: goto label1;
            case 39: goto label1;
            case 42: goto label1;
            case 43: goto label1;
            case 45: goto label1;
            case 46: goto label1;
            case 95: goto label1;
            case 96: goto label1;
            case 126: goto label1;
            default: goto label3;
        };

     label3:
        return 0;
    }

    public void SPorHT()
    {
        gov.nist.core.LexerCore r0;
        char c0, c1;
        java.text.ParseException $r2;

        r0 := @this: gov.nist.core.LexerCore;

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        goto label7;

     label3:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label4:
        c0 = c1;

        goto label7;

     label5:
        $r2 := @caughtexception;

     label6:
        return;

     label7:
        if c0 == 32 goto label3;

        if c0 != 9 goto label6;

        goto label3;

        catch java.text.ParseException from label1 to label2 with label5;
        catch java.text.ParseException from label3 to label4 with label5;
    }

    protected void addKeyword(java.lang.String, int)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1;
        int i0;
        java.lang.Integer r2;
        java.util.Hashtable $r3, $r5, $r6;
        boolean $z0;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable>;

        $z0 = virtualinvoke $r5.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r6 = <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

     label1:
        return;
    }

    protected java.util.Hashtable addLexer(java.lang.String)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1;
        java.util.Hashtable $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Object $r3;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        $r2 = <gov.nist.core.LexerCore: java.util.Hashtable lexerTables>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.Hashtable) $r3;

        r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer> = $r4;

        $r5 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        if $r5 != null goto label1;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer> = $r7;

        $r9 = <gov.nist.core.LexerCore: java.util.Hashtable lexerTables>;

        $r8 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

     label1:
        $r6 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        return $r6;
    }

    public java.lang.String byteStringNoComma()
    {
        gov.nist.core.LexerCore r0;
        java.lang.StringBuffer r1, $r3;
        char c0;
        java.lang.String $r4;
        java.text.ParseException $r6;

        r0 := @this: gov.nist.core.LexerCore;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r1 = $r3;

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        if c0 == 10 goto label3;

        if c0 != 44 goto label4;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label4:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label5:
        goto label1;

     label6:
        $r6 := @caughtexception;

        goto label3;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label4 to label5 with label6;
    }

    public java.lang.String byteStringNoSemicolon()
    {
        gov.nist.core.LexerCore r0;
        java.lang.StringBuffer r1, $r3;
        char c0;
        java.lang.String $r4, $r7;
        java.text.ParseException $r6;

        r0 := @this: gov.nist.core.LexerCore;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r1 = $r3;

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        if c0 == 0 goto label3;

        if c0 == 10 goto label3;

        if c0 == 59 goto label3;

        if c0 != 44 goto label4;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label4:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label5:
        goto label1;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label4 to label5 with label6;
    }

    public java.lang.String byteStringNoSlash()
    {
        gov.nist.core.LexerCore r0;
        java.lang.StringBuffer r1, $r3;
        char c0;
        java.lang.String $r4, $r7;
        java.text.ParseException $r6;

        r0 := @this: gov.nist.core.LexerCore;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r1 = $r3;

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        if c0 == 0 goto label3;

        if c0 == 10 goto label3;

        if c0 != 47 goto label4;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label4:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label5:
        goto label1;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label4 to label5 with label6;
    }

    public java.lang.String charAsString(int)
    {
        gov.nist.core.LexerCore r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        $i2 = i0 + $i1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        return $r2;
    }

    public java.lang.String comment() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        java.lang.StringBuffer r1, $r2;
        char c0, c1, $c2;
        java.text.ParseException $r6, $r13;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r14, $r17;
        java.lang.String $r8, $r11, $r15, $r16, $r18;
        int $i3, $i4;

        r0 := @this: gov.nist.core.LexerCore;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        r1 = $r2;

        $c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 40 goto label1;

        return null;

     label1:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label2:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        if c0 != 41 goto label3;

        $r18 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r18;

     label3:
        if c0 != 0 goto label4;

        $r13 = new java.text.ParseException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :unexpected EOL");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r13.<java.text.ParseException: void <init>(java.lang.String,int)>($r16, $i4);

        throw $r13;

     label4:
        if c0 != 92 goto label6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        if c1 != 0 goto label5;

        $r6 = new java.text.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : unexpected EOL");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r11, $i3);

        throw $r6;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        goto label2;

     label6:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        goto label2;
    }

    public void consumeValidChars(char[])
    {
        gov.nist.core.LexerCore r0;
        char[] r1;
        int i0, i2;
        char c1, c3;
        boolean z0, z1, $z2;
        java.text.ParseException $r3;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: char[];

        i0 = lengthof r1;

     label01:
        $z2 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z2 == 0 goto label20;

        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label02:
        z0 = 0;

        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

     label04:
        c3 = r1[i2];

     label05:
        tableswitch(c3)
        {
            case 65533: goto label13;
            case 65534: goto label11;
            case 65535: goto label09;
            default: goto label17;
        };

     label06:
        if z0 == 0 goto label20;

     label07:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label08:
        goto label01;

     label09:
        z0 = staticinvoke <gov.nist.core.LexerCore: boolean isAlpha(char)>(c1);

     label10:
        goto label18;

     label11:
        z0 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>(c1);

     label12:
        goto label18;

     label13:
        z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c1);

     label14:
        z0 = z1;

        goto label18;

     label15:
        z0 = 0;

        goto label18;

     label16:
        i2 = i2 + 1;

        goto label03;

     label17:
        if c1 != c3 goto label15;

        z0 = 1;

     label18:
        if z0 == 0 goto label16;

        goto label06;

     label19:
        $r3 := @caughtexception;

     label20:
        return;

        catch java.text.ParseException from label01 to label02 with label19;
        catch java.text.ParseException from label04 to label05 with label19;
        catch java.text.ParseException from label07 to label08 with label19;
        catch java.text.ParseException from label09 to label10 with label19;
        catch java.text.ParseException from label11 to label12 with label19;
        catch java.text.ParseException from label13 to label14 with label19;
    }

    public java.text.ParseException createParseException()
    {
        gov.nist.core.LexerCore r0;
        java.text.ParseException $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = new java.text.ParseException;

        $r2 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r1.<java.text.ParseException: void <init>(java.lang.String,int)>($r2, $i0);

        return $r1;
    }

    public java.lang.String getBuffer()
    {
        gov.nist.core.LexerCore r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        return $r1;
    }

    public java.lang.String getNextId()
    {
        gov.nist.core.LexerCore r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        return $r1;
    }

    public gov.nist.core.Token getNextToken()
    {
        gov.nist.core.LexerCore r0;
        gov.nist.core.Token $r1;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        return $r1;
    }

    public int getPtr()
    {
        gov.nist.core.LexerCore r0;
        int $i0;

        r0 := @this: gov.nist.core.LexerCore;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        return $i0;
    }

    public java.lang.String getRest()
    {
        gov.nist.core.LexerCore r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: gov.nist.core.LexerCore;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r3;
    }

    public java.lang.String getString(char) throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        char c0, c1, c2;
        java.lang.StringBuffer r1, $r2;
        java.text.ParseException $r5, $r11;
        java.lang.StringBuilder $r6, $r8, $r9, $r14, $r15, $r16;
        java.lang.String $r7, $r10, $r12, $r13, $r17;
        int $i3, $i4;

        r0 := @this: gov.nist.core.LexerCore;

        c0 := @parameter0: char;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        r1 = $r2;

     label1:
        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c1 != 0 goto label2;

        $r11 = new java.text.ParseException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected EOL");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r11.<java.text.ParseException: void <init>(java.lang.String,int)>($r17, $i4);

        throw $r11;

     label2:
        if c1 != c0 goto label3;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r12 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label3:
        if c1 != 92 goto label5;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c2 != 0 goto label4;

        $r5 = new java.text.ParseException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected EOL");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r5.<java.text.ParseException: void <init>(java.lang.String,int)>($r10, $i3);

        throw $r5;

     label4:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        goto label1;

     label5:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        goto label1;
    }

    public java.lang.String lookupToken(int)
    {
        gov.nist.core.LexerCore r0;
        int i0;
        char $c1;
        java.lang.Character $r1;
        java.lang.String $r2, $r6;
        java.util.Hashtable $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        if i0 <= 2048 goto label1;

        $r3 = <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.String) $r5;

        return $r6;

     label1:
        $c1 = (char) i0;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r2 = virtualinvoke $r1.<java.lang.Character: java.lang.String toString()>();

        return $r2;
    }

    public int markInputPosition()
    {
        gov.nist.core.LexerCore r0;
        int $i0;

        r0 := @this: gov.nist.core.LexerCore;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        return $i0;
    }

    public gov.nist.core.Token match(int) throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        char c1, c2, c3;
        java.lang.String r1, r3, r4, $r7, $r14, $r17, $r21, $r23, $r27, $r30, $r33, $r37, $r40, $r43, $r52, $r59, $r62, $r65, $r69;
        java.lang.Integer r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.text.ParseException $r5, $r19, $r32, $r42, $r50, $r63;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r22, $r24, $r25, $r29, $r34, $r35, $r39, $r41, $r44, $r45, $r51, $r57, $r58, $r60, $r61, $r66, $r67, $r68, $r70;
        gov.nist.core.Token $r15, $r16, $r18, $r20, $r26, $r28, $r31, $r46, $r47, $r48, $r49, $r53, $r54, $r55, $r56, $r64;
        java.lang.Object $r36;
        java.util.Hashtable $r38;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        $z0 = <gov.nist.core.Debug: boolean parserDebug>;

        if $z0 == 0 goto label01;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("match ");

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r69);

     label01:
        if i0 <= 2048 goto label09;

        if i0 >= 4096 goto label09;

        if i0 != 4095 goto label04;

        $z4 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean startsId()>();

        if $z4 != 0 goto label02;

        $r63 = new java.text.ParseException;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r65 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r61 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nID expected");

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        $i10 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r63.<java.text.ParseException: void <init>(java.lang.String,int)>($r62, $i10);

        throw $r63;

     label02:
        r4 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String getNextId()>();

        $r55 = new gov.nist.core.Token;

        specialinvoke $r55.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r55;

        $r56 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r56.<gov.nist.core.Token: java.lang.String tokenValue> = r4;

        $r64 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r64.<gov.nist.core.Token: int tokenType> = 4095;

     label03:
        $r15 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        return $r15;

     label04:
        if i0 != 4094 goto label06;

        $z3 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean startsSafeToken()>();

        if $z3 != 0 goto label05;

        $r50 = new java.text.ParseException;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r57 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nID expected");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $i9 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r50.<java.text.ParseException: void <init>(java.lang.String,int)>($r59, $i9);

        throw $r50;

     label05:
        r3 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttokenSafe()>();

        $r53 = new gov.nist.core.Token;

        specialinvoke $r53.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r53;

        $r54 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r54.<gov.nist.core.Token: java.lang.String tokenValue> = r3;

        $r49 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r49.<gov.nist.core.Token: int tokenType> = 4094;

        goto label03;

     label06:
        r1 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String getNextId()>();

        $r38 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        $r37 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r36 = virtualinvoke $r38.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r37);

        r2 = (java.lang.Integer) $r36;

        if r2 == null goto label07;

        $i8 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i8 == i0 goto label08;

     label07:
        $r42 = new java.text.ParseException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nUnexpected Token : ");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r42.<java.text.ParseException: void <init>(java.lang.String,int)>($r43, $i7);

        throw $r42;

     label08:
        $r48 = new gov.nist.core.Token;

        specialinvoke $r48.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r48;

        $r47 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r47.<gov.nist.core.Token: java.lang.String tokenValue> = r1;

        $r46 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r46.<gov.nist.core.Token: int tokenType> = i0;

        goto label03;

     label09:
        if i0 <= 4096 goto label13;

        c3 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if i0 != 4098 goto label11;

        $z2 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>(c3);

        if $z2 != 0 goto label10;

        $r32 = new java.text.ParseException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpecting DIGIT");

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $i6 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r32.<java.text.ParseException: void <init>(java.lang.String,int)>($r33, $i6);

        throw $r32;

     label10:
        $r28 = new gov.nist.core.Token;

        specialinvoke $r28.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r28;

        $r26 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c3);

        $r26.<gov.nist.core.Token: java.lang.String tokenValue> = $r27;

        $r31 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r31.<gov.nist.core.Token: int tokenType> = i0;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        goto label03;

     label11:
        if i0 != 4099 goto label03;

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlpha(char)>(c3);

        if $z1 != 0 goto label12;

        $r19 = new java.text.ParseException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpecting ALPHA");

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $i5 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r19.<java.text.ParseException: void <init>(java.lang.String,int)>($r23, $i5);

        throw $r19;

     label12:
        $r16 = new gov.nist.core.Token;

        specialinvoke $r16.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r16;

        $r18 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c3);

        $r18.<gov.nist.core.Token: java.lang.String tokenValue> = $r17;

        $r20 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r20.<gov.nist.core.Token: int tokenType> = i0;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        goto label03;

     label13:
        c1 = (char) i0;

        c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c2 != c1 goto label14;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        goto label03;

     label14:
        $r5 = new java.text.ParseException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpecting  >>>");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<< got >>>");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<<");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r5.<java.text.ParseException: void <init>(java.lang.String,int)>($r14, $i4);

        throw $r5;
    }

    public java.lang.String number() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, $i3, $i5, $i6;
        java.lang.String r2, $r3, $r6, $r10, $r12, $r13;
        char $c1, $c2, $c4;
        boolean $z0, $z1;
        java.text.ParseException $r4, $r11;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

     label1:
        $c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z0 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>($c1);

        if $z0 != 0 goto label3;

        $r4 = new java.text.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Unexpected token at ");

        $c4 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i5 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r4.<java.text.ParseException: void <init>(java.lang.String,int)>($r10, $i5);

        throw $r4;

     label2:
        $r11 := @caughtexception;

        $r13 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i6 = r0.<gov.nist.core.LexerCore: int ptr>;

        $r12 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, $i6);

        return $r12;

     label3:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label4:
        $c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>($c2);

        if $z1 == 0 goto label6;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label5:
        goto label4;

     label6:
        $r3 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i0, $i3);

     label7:
        return r2;

        catch java.text.ParseException from label1 to label2 with label2;
        catch java.text.ParseException from label3 to label4 with label2;
        catch java.text.ParseException from label4 to label5 with label2;
        catch java.text.ParseException from label6 to label7 with label2;
    }

    public java.lang.String peekNextId()
    {
        gov.nist.core.LexerCore r0;
        int i0, $i1;
        java.lang.String r1;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        r1 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        r0.<gov.nist.core.LexerCore: int savedPtr> = $i1;

        r0.<gov.nist.core.LexerCore: int ptr> = i0;

        return r1;
    }

    public gov.nist.core.Token peekNextToken() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        gov.nist.core.Token[] $r1;
        gov.nist.core.Token $r2;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = virtualinvoke r0.<gov.nist.core.LexerCore: gov.nist.core.Token[] peekNextToken(int)>(1);

        $r2 = $r1[0];

        return $r2;
    }

    public gov.nist.core.Token[] peekNextToken(int) throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, i1, i2, $i4, $i5;
        gov.nist.core.Token[] r1;
        gov.nist.core.Token r2, $r5;
        char c3;
        java.lang.String r3, r4, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.Hashtable $r7, $r9;
        java.lang.Object $r8;
        java.lang.Integer $r10;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        r1 = newarray (gov.nist.core.Token)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label7;

        $r5 = new gov.nist.core.Token;

        specialinvoke $r5.<gov.nist.core.Token: void <init>()>();

        r2 = $r5;

        $z0 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean startsId()>();

        if $z0 == 0 goto label4;

        r3 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        r2.<gov.nist.core.Token: java.lang.String tokenValue> = r3;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        $z3 = virtualinvoke $r7.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r4);

        if $z3 == 0 goto label3;

        $r9 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        $r8 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        $r10 = (java.lang.Integer) $r8;

        $i5 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r2.<gov.nist.core.Token: int tokenType> = $i5;

     label2:
        r1[i2] = r2;

        i2 = i2 + 1;

        goto label1;

     label3:
        r2.<gov.nist.core.Token: int tokenType> = 4095;

        goto label2;

     label4:
        c3 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c3);

        r2.<gov.nist.core.Token: java.lang.String tokenValue> = $r6;

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlpha(char)>(c3);

        if $z1 == 0 goto label5;

        r2.<gov.nist.core.Token: int tokenType> = 4099;

        goto label2;

     label5:
        $z2 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>(c3);

        if $z2 == 0 goto label6;

        r2.<gov.nist.core.Token: int tokenType> = 4098;

        goto label2;

     label6:
        r2.<gov.nist.core.Token: int tokenType> = c3;

        goto label2;

     label7:
        $i4 = r0.<gov.nist.core.LexerCore: int ptr>;

        r0.<gov.nist.core.LexerCore: int savedPtr> = $i4;

        r0.<gov.nist.core.LexerCore: int ptr> = i1;

        return r1;
    }

    public java.lang.String quotedString() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, $i2, $i4, $i5, $i6;
        char c1, $c3;
        java.text.ParseException $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6, $r7, $r8;

        r0 := @this: gov.nist.core.LexerCore;

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        i0 = 1 + $i2;

        $c3 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 == 34 goto label1;

        return null;

     label1:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label2:
        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        if c1 != 34 goto label3;

        $r7 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i5 = r0.<gov.nist.core.LexerCore: int ptr>;

        $i6 = -1 + $i5;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(i0, $i6);

        return $r8;

     label3:
        if c1 != 0 goto label4;

        $r1 = new java.text.ParseException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :unexpected EOL");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r1.<java.text.ParseException: void <init>(java.lang.String,int)>($r6, $i4);

        throw $r1;

     label4:
        if c1 != 92 goto label2;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        goto label2;
    }

    public void rewindInputPosition(int)
    {
        gov.nist.core.LexerCore r0;
        int i0;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        r0.<gov.nist.core.LexerCore: int ptr> = i0;

        return;
    }

    public void selectLexer(java.lang.String)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.core.LexerCore: java.lang.String currentLexerName> = r1;

        return;
    }

    public boolean startsId()
    {
        gov.nist.core.LexerCore r0;
        boolean z0;
        char $c0;
        java.text.ParseException $r2;

        r0 := @this: gov.nist.core.LexerCore;

     label1:
        $c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        z0 = staticinvoke <gov.nist.core.LexerCore: boolean isTokenChar(char)>($c0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public boolean startsSafeToken()
    {
        gov.nist.core.LexerCore r0;
        char c0;
        boolean z0;
        java.text.ParseException $r2;

        r0 := @this: gov.nist.core.LexerCore;

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        z0 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c0);

     label2:
        if z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        lookupswitch(c0)
        {
            case 33: goto label3;
            case 34: goto label3;
            case 35: goto label3;
            case 36: goto label3;
            case 37: goto label3;
            case 39: goto label3;
            case 42: goto label3;
            case 43: goto label3;
            case 45: goto label3;
            case 46: goto label3;
            case 47: goto label3;
            case 58: goto label3;
            case 59: goto label3;
            case 61: goto label3;
            case 63: goto label3;
            case 64: goto label3;
            case 91: goto label3;
            case 93: goto label3;
            case 94: goto label3;
            case 95: goto label3;
            case 96: goto label3;
            case 123: goto label3;
            case 124: goto label3;
            case 125: goto label3;
            case 126: goto label3;
            default: goto label5;
        };

     label5:
        return 0;

     label6:
        $r2 := @caughtexception;

        return 0;

        catch java.text.ParseException from label1 to label2 with label6;
    }

    public java.lang.String ttoken()
    {
        gov.nist.core.LexerCore r0;
        int i0, $i1;
        java.lang.String r2, $r3;
        boolean $z0, $z1;
        char $c2;
        java.text.ParseException $r4;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

     label1:
        $z0 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z0 == 0 goto label3;

        $c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isTokenChar(char)>($c2);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label2:
        goto label1;

     label3:
        $r3 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

     label4:
        return r2;

     label5:
        $r4 := @caughtexception;

        return null;

        catch java.text.ParseException from label1 to label2 with label5;
        catch java.text.ParseException from label3 to label4 with label5;
    }

    public java.lang.String ttokenSafe()
    {
        gov.nist.core.LexerCore r0;
        int i0, $i2;
        java.lang.String r2, $r3;
        char c1;
        boolean z0, $z1, $z2;
        java.text.ParseException $r4;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

     label01:
        $z1 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z1 == 0 goto label06;

        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z2 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c1);

        if $z2 == 0 goto label09;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label02:
        goto label01;

     label03:
        if z0 == 0 goto label06;

     label04:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label05:
        goto label01;

     label06:
        $r3 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

     label07:
        return r2;

     label08:
        $r4 := @caughtexception;

        return null;

     label09:
        z0 = 0;

        lookupswitch(c1)
        {
            case 33: goto label10;
            case 34: goto label10;
            case 35: goto label10;
            case 36: goto label10;
            case 37: goto label10;
            case 39: goto label10;
            case 42: goto label10;
            case 43: goto label10;
            case 45: goto label10;
            case 46: goto label10;
            case 47: goto label10;
            case 58: goto label10;
            case 59: goto label10;
            case 63: goto label10;
            case 64: goto label10;
            case 91: goto label10;
            case 93: goto label10;
            case 94: goto label10;
            case 95: goto label10;
            case 96: goto label10;
            case 123: goto label10;
            case 124: goto label10;
            case 125: goto label10;
            case 126: goto label10;
            default: goto label03;
        };

     label10:
        z0 = 1;

        goto label03;

        catch java.text.ParseException from label01 to label02 with label08;
        catch java.text.ParseException from label04 to label05 with label08;
        catch java.text.ParseException from label06 to label07 with label08;
    }
}
