public abstract class com.android.org.conscrypt.ConnectionState extends java.lang.Object
{
    protected int block_size;
    protected javax.crypto.Cipher decCipher;
    protected javax.crypto.Cipher encCipher;
    protected int hash_size;
    protected com.android.org.conscrypt.Logger$Stream logger;
    protected final byte[] read_seq_num;
    protected final byte[] write_seq_num;

    public void <init>()
    {
        com.android.org.conscrypt.ConnectionState r0;
        byte[] $r1, $r2;
        com.android.org.conscrypt.Logger$Stream $r3;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[8];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 0;

        r0.<com.android.org.conscrypt.ConnectionState: byte[] write_seq_num> = $r1;

        $r2 = newarray (byte)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        r0.<com.android.org.conscrypt.ConnectionState: byte[] read_seq_num> = $r2;

        $r3 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("conn_state");

        r0.<com.android.org.conscrypt.ConnectionState: com.android.org.conscrypt.Logger$Stream logger> = $r3;

        return;
    }

    protected static void incSequenceNumber(byte[])
    {
        byte[] r0;
        int i0, $i2;
        byte $b1, $b3, $b4;

        r0 := @parameter0: byte[];

        i0 = 7;

     label1:
        if i0 < 0 goto label2;

        $b1 = r0[i0];

        $i2 = 1 + $b1;

        $b3 = (byte) $i2;

        r0[i0] = $b3;

        $b4 = r0[i0];

        if $b4 != 0 goto label2;

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    protected byte[] decrypt(byte, byte[])
    {
        com.android.org.conscrypt.ConnectionState r0;
        byte b0;
        byte[] r1, $r2;
        int $i1;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        b0 := @parameter0: byte;

        r1 := @parameter1: byte[];

        $i1 = lengthof r1;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.ConnectionState: byte[] decrypt(byte,byte[],int,int)>(b0, r1, 0, $i1);

        return $r2;
    }

    protected abstract byte[] decrypt(byte, byte[], int, int);

    protected byte[] encrypt(byte, byte[])
    {
        com.android.org.conscrypt.ConnectionState r0;
        byte b0;
        byte[] r1, $r2;
        int $i1;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        b0 := @parameter0: byte;

        r1 := @parameter1: byte[];

        $i1 = lengthof r1;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.ConnectionState: byte[] encrypt(byte,byte[],int,int)>(b0, r1, 0, $i1);

        return $r2;
    }

    protected abstract byte[] encrypt(byte, byte[], int, int);

    protected int getContentSize(int)
    {
        com.android.org.conscrypt.ConnectionState r0;
        int i0, $i1, $i2, $i3;
        javax.crypto.Cipher $r1;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.conscrypt.ConnectionState: javax.crypto.Cipher decCipher>;

        $i1 = virtualinvoke $r1.<javax.crypto.Cipher: int getOutputSize(int)>(i0);

        $i2 = r0.<com.android.org.conscrypt.ConnectionState: int hash_size>;

        $i3 = $i1 - $i2;

        return $i3;
    }

    protected int getFragmentSize(int)
    {
        com.android.org.conscrypt.ConnectionState r0;
        int i0, $i1, $i2, $i3;
        javax.crypto.Cipher $r1;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.conscrypt.ConnectionState: javax.crypto.Cipher encCipher>;

        $i1 = r0.<com.android.org.conscrypt.ConnectionState: int hash_size>;

        $i2 = i0 + $i1;

        $i3 = virtualinvoke $r1.<javax.crypto.Cipher: int getOutputSize(int)>($i2);

        return $i3;
    }

    protected int getMinFragmentSize()
    {
        com.android.org.conscrypt.ConnectionState r0;
        int $i0, $i1, $i2;
        javax.crypto.Cipher $r1;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        $r1 = r0.<com.android.org.conscrypt.ConnectionState: javax.crypto.Cipher encCipher>;

        $i0 = r0.<com.android.org.conscrypt.ConnectionState: int hash_size>;

        $i1 = 1 + $i0;

        $i2 = virtualinvoke $r1.<javax.crypto.Cipher: int getOutputSize(int)>($i1);

        return $i2;
    }

    protected int getPaddingSize(int)
    {
        com.android.org.conscrypt.ConnectionState r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.org.conscrypt.ConnectionState: int block_size>;

        i1 = -1 + $i2;

        $i4 = r0.<com.android.org.conscrypt.ConnectionState: int block_size>;

        $i3 = i0 & i1;

        $i5 = $i4 - $i3;

        return $i5;
    }

    protected void shutdown()
    {
        com.android.org.conscrypt.ConnectionState r0;
        int i0, $i1;
        byte[] $r1, $r2, $r3;

        r0 := @this: com.android.org.conscrypt.ConnectionState;

        r0.<com.android.org.conscrypt.ConnectionState: javax.crypto.Cipher encCipher> = null;

        r0.<com.android.org.conscrypt.ConnectionState: javax.crypto.Cipher decCipher> = null;

        i0 = 0;

     label1:
        $r1 = r0.<com.android.org.conscrypt.ConnectionState: byte[] write_seq_num>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r2 = r0.<com.android.org.conscrypt.ConnectionState: byte[] write_seq_num>;

        $r2[i0] = 0;

        $r3 = r0.<com.android.org.conscrypt.ConnectionState: byte[] read_seq_num>;

        $r3[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
}
