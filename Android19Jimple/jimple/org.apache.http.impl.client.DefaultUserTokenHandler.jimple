public class org.apache.http.impl.client.DefaultUserTokenHandler extends java.lang.Object implements org.apache.http.client.UserTokenHandler
{

    public void <init>()
    {
        org.apache.http.impl.client.DefaultUserTokenHandler r0;

        r0 := @this: org.apache.http.impl.client.DefaultUserTokenHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState)
    {
        org.apache.http.auth.AuthState r0;
        org.apache.http.auth.AuthScheme r1;
        org.apache.http.auth.Credentials r2;
        boolean $z0, $z1;
        java.security.Principal $r3;

        r0 := @parameter0: org.apache.http.auth.AuthState;

        r1 = virtualinvoke r0.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<org.apache.http.auth.AuthScheme: boolean isComplete()>();

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r1.<org.apache.http.auth.AuthScheme: boolean isConnectionBased()>();

        if $z1 == 0 goto label1;

        r2 = virtualinvoke r0.<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>();

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.Object getUserToken(org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.client.DefaultUserTokenHandler r0;
        org.apache.http.protocol.HttpContext r1;
        org.apache.http.auth.AuthState r2, $r9;
        java.security.Principal r3;
        org.apache.http.conn.ManagedClientConnection r4;
        javax.net.ssl.SSLSession r5;
        java.lang.Object $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.http.impl.client.DefaultUserTokenHandler;

        r1 := @parameter0: org.apache.http.protocol.HttpContext;

        $r6 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.target-scope");

        r2 = (org.apache.http.auth.AuthState) $r6;

        r3 = null;

        if r2 == null goto label1;

        r3 = staticinvoke <org.apache.http.impl.client.DefaultUserTokenHandler: java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState)>(r2);

        if r3 != null goto label1;

        $r8 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.proxy-scope");

        $r9 = (org.apache.http.auth.AuthState) $r8;

        r3 = staticinvoke <org.apache.http.impl.client.DefaultUserTokenHandler: java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState)>($r9);

     label1:
        if r3 != null goto label2;

        $r7 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.connection");

        r4 = (org.apache.http.conn.ManagedClientConnection) $r7;

        $z0 = interfaceinvoke r4.<org.apache.http.conn.ManagedClientConnection: boolean isOpen()>();

        if $z0 == 0 goto label2;

        r5 = interfaceinvoke r4.<org.apache.http.conn.ManagedClientConnection: javax.net.ssl.SSLSession getSSLSession()>();

        if r5 == null goto label2;

        r3 = interfaceinvoke r5.<javax.net.ssl.SSLSession: java.security.Principal getLocalPrincipal()>();

     label2:
        return r3;
    }
}
