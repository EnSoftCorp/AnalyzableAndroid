class java.lang.ThreadLocal$Values extends java.lang.Object
{
    private static final int INITIAL_SIZE;
    private static final java.lang.Object TOMBSTONE;
    private int clean;
    private int mask;
    private int maximumLoad;
    private int size;
    private java.lang.Object[] table;
    private int tombstones;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <java.lang.ThreadLocal$Values: int INITIAL_SIZE> = 16;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE> = $r0;

        return;
    }

    void <init>()
    {
        java.lang.ThreadLocal$Values r0;

        r0 := @this: java.lang.ThreadLocal$Values;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<java.lang.ThreadLocal$Values: void initializeTable(int)>(16);

        r0.<java.lang.ThreadLocal$Values: int size> = 0;

        r0.<java.lang.ThreadLocal$Values: int tombstones> = 0;

        return;
    }

    void <init>(java.lang.ThreadLocal$Values)
    {
        java.lang.ThreadLocal$Values r0, r1;
        java.lang.Object[] $r2, $r4;
        java.lang.Object $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.lang.ThreadLocal$Values;

        r1 := @parameter0: java.lang.ThreadLocal$Values;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.Object[]) $r3;

        r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table> = $r4;

        $i0 = r1.<java.lang.ThreadLocal$Values: int mask>;

        r0.<java.lang.ThreadLocal$Values: int mask> = $i0;

        $i1 = r1.<java.lang.ThreadLocal$Values: int size>;

        r0.<java.lang.ThreadLocal$Values: int size> = $i1;

        $i2 = r1.<java.lang.ThreadLocal$Values: int tombstones>;

        r0.<java.lang.ThreadLocal$Values: int tombstones> = $i2;

        $i3 = r1.<java.lang.ThreadLocal$Values: int maximumLoad>;

        r0.<java.lang.ThreadLocal$Values: int maximumLoad> = $i3;

        $i4 = r1.<java.lang.ThreadLocal$Values: int clean>;

        r0.<java.lang.ThreadLocal$Values: int clean> = $i4;

        specialinvoke r0.<java.lang.ThreadLocal$Values: void inheritValues(java.lang.ThreadLocal$Values)>(r1);

        return;
    }

    static java.lang.Object[] access$000(java.lang.ThreadLocal$Values)
    {
        java.lang.ThreadLocal$Values r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.lang.ThreadLocal$Values;

        $r1 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        return $r1;
    }

    static int access$100(java.lang.ThreadLocal$Values)
    {
        java.lang.ThreadLocal$Values r0;
        int $i0;

        r0 := @parameter0: java.lang.ThreadLocal$Values;

        $i0 = r0.<java.lang.ThreadLocal$Values: int mask>;

        return $i0;
    }

    private void cleanUp()
    {
        java.lang.ThreadLocal$Values r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] r1;
        java.lang.Object r2, $r3, $r5, $r6;
        boolean $z0;
        java.lang.ref.Reference $r4;

        r0 := @this: java.lang.ThreadLocal$Values;

        $z0 = specialinvoke r0.<java.lang.ThreadLocal$Values: boolean rehash()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $i2 = r0.<java.lang.ThreadLocal$Values: int size>;

        if $i2 == 0 goto label1;

        i0 = r0.<java.lang.ThreadLocal$Values: int clean>;

        r1 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        i1 = lengthof r1;

     label3:
        if i1 <= 0 goto label6;

        r2 = r1[i0];

        $r3 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        if r2 == $r3 goto label4;

        if r2 != null goto label5;

     label4:
        i1 = i1 >> 1;

        i0 = specialinvoke r0.<java.lang.ThreadLocal$Values: int next(int)>(i0);

        goto label3;

     label5:
        $r4 = (java.lang.ref.Reference) r2;

        $r5 = virtualinvoke $r4.<java.lang.ref.Reference: java.lang.Object get()>();

        if $r5 != null goto label4;

        $r6 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        r1[i0] = $r6;

        $i3 = i0 + 1;

        r1[$i3] = null;

        $i4 = r0.<java.lang.ThreadLocal$Values: int tombstones>;

        $i5 = 1 + $i4;

        r0.<java.lang.ThreadLocal$Values: int tombstones> = $i5;

        $i6 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i7 = -1 + $i6;

        r0.<java.lang.ThreadLocal$Values: int size> = $i7;

        goto label4;

     label6:
        r0.<java.lang.ThreadLocal$Values: int clean> = i0;

        return;
    }

    private void inheritValues(java.lang.ThreadLocal$Values)
    {
        java.lang.ThreadLocal$Values r0, r1;
        java.lang.Object[] r2, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Object r3, $r5, $r7, $r8, $r9, $r13, $r14;
        java.lang.InheritableThreadLocal r4;
        java.lang.ref.Reference $r6;

        r0 := @this: java.lang.ThreadLocal$Values;

        r1 := @parameter0: java.lang.ThreadLocal$Values;

        r2 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i1 = lengthof r2;

        i0 = -2 + $i1;

     label1:
        if i0 < 0 goto label5;

        r3 = r2[i0];

        if r3 == null goto label2;

        $r5 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        if r3 != $r5 goto label3;

     label2:
        i0 = i0 + -2;

        goto label1;

     label3:
        $r6 = (java.lang.ref.Reference) r3;

        $r7 = virtualinvoke $r6.<java.lang.ref.Reference: java.lang.Object get()>();

        r4 = (java.lang.InheritableThreadLocal) $r7;

        if r4 == null goto label4;

        $i13 = i0 + 1;

        $r12 = r1.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i12 = i0 + 1;

        $r13 = $r12[$i12];

        $r14 = virtualinvoke r4.<java.lang.InheritableThreadLocal: java.lang.Object childValue(java.lang.Object)>($r13);

        r2[$i13] = $r14;

        goto label2;

     label4:
        $r8 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        r2[i0] = $r8;

        $i2 = i0 + 1;

        r2[$i2] = null;

        $r10 = r1.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $r9 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        $r10[i0] = $r9;

        $r11 = r1.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i3 = i0 + 1;

        $r11[$i3] = null;

        $i5 = r0.<java.lang.ThreadLocal$Values: int tombstones>;

        $i4 = 1 + $i5;

        r0.<java.lang.ThreadLocal$Values: int tombstones> = $i4;

        $i7 = r1.<java.lang.ThreadLocal$Values: int tombstones>;

        $i6 = 1 + $i7;

        r1.<java.lang.ThreadLocal$Values: int tombstones> = $i6;

        $i9 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i8 = -1 + $i9;

        r0.<java.lang.ThreadLocal$Values: int size> = $i8;

        $i11 = r1.<java.lang.ThreadLocal$Values: int size>;

        $i10 = -1 + $i11;

        r1.<java.lang.ThreadLocal$Values: int size> = $i10;

        goto label2;

     label5:
        return;
    }

    private void initializeTable(int)
    {
        java.lang.ThreadLocal$Values r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.lang.ThreadLocal$Values;

        i0 := @parameter0: int;

        $i1 = i0 * 2;

        $r1 = newarray (java.lang.Object)[$i1];

        r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table> = $r1;

        $r2 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i2 = lengthof $r2;

        $i3 = -1 + $i2;

        r0.<java.lang.ThreadLocal$Values: int mask> = $i3;

        r0.<java.lang.ThreadLocal$Values: int clean> = 0;

        $i4 = i0 * 2;

        $i5 = $i4 / 3;

        r0.<java.lang.ThreadLocal$Values: int maximumLoad> = $i5;

        return;
    }

    private int next(int)
    {
        java.lang.ThreadLocal$Values r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.lang.ThreadLocal$Values;

        i0 := @parameter0: int;

        $i2 = i0 + 2;

        $i1 = r0.<java.lang.ThreadLocal$Values: int mask>;

        $i3 = $i2 & $i1;

        return $i3;
    }

    private boolean rehash()
    {
        java.lang.ThreadLocal$Values r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.Object[] r1, $r4;
        java.lang.Object r2, $r5, $r6, $r8;
        java.lang.ThreadLocal r3;
        java.lang.ref.Reference $r7;

        r0 := @this: java.lang.ThreadLocal$Values;

        $i4 = r0.<java.lang.ThreadLocal$Values: int tombstones>;

        $i3 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i6 = $i4 + $i3;

        $i5 = r0.<java.lang.ThreadLocal$Values: int maximumLoad>;

        if $i6 >= $i5 goto label1;

        return 0;

     label1:
        $r4 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i7 = lengthof $r4;

        i0 = $i7 >> 1;

        i1 = i0;

        $i9 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i8 = i0 >> 1;

        if $i9 <= $i8 goto label2;

        i1 = i0 * 2;

     label2:
        r1 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        specialinvoke r0.<java.lang.ThreadLocal$Values: void initializeTable(int)>(i1);

        r0.<java.lang.ThreadLocal$Values: int tombstones> = 0;

        $i10 = r0.<java.lang.ThreadLocal$Values: int size>;

        if $i10 != 0 goto label3;

        return 1;

     label3:
        $i11 = lengthof r1;

        i2 = -2 + $i11;

     label4:
        if i2 < 0 goto label8;

        r2 = r1[i2];

        if r2 == null goto label5;

        $r5 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        if r2 != $r5 goto label6;

     label5:
        i2 = i2 + -2;

        goto label4;

     label6:
        $r7 = (java.lang.ref.Reference) r2;

        $r6 = virtualinvoke $r7.<java.lang.ref.Reference: java.lang.Object get()>();

        r3 = (java.lang.ThreadLocal) $r6;

        if r3 == null goto label7;

        $i14 = i2 + 1;

        $r8 = r1[$i14];

        virtualinvoke r0.<java.lang.ThreadLocal$Values: void add(java.lang.ThreadLocal,java.lang.Object)>(r3, $r8);

        goto label5;

     label7:
        $i13 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i12 = -1 + $i13;

        r0.<java.lang.ThreadLocal$Values: int size> = $i12;

        goto label5;

     label8:
        return 1;
    }

    void add(java.lang.ThreadLocal, java.lang.Object)
    {
        java.lang.ThreadLocal$Values r0;
        java.lang.ThreadLocal r1;
        java.lang.Object r2, $r4;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r3, $r5, $r7;
        java.lang.ref.Reference $r6;

        r0 := @this: java.lang.ThreadLocal$Values;

        r1 := @parameter0: java.lang.ThreadLocal;

        r2 := @parameter1: java.lang.Object;

        $i1 = staticinvoke <java.lang.ThreadLocal: int access$200(java.lang.ThreadLocal)>(r1);

        $i2 = r0.<java.lang.ThreadLocal$Values: int mask>;

        i0 = $i1 & $i2;

     label1:
        $r3 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $r4 = $r3[i0];

        if $r4 != null goto label2;

        $r5 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $r6 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        $r5[i0] = $r6;

        $r7 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i3 = i0 + 1;

        $r7[$i3] = r2;

        return;

     label2:
        i0 = specialinvoke r0.<java.lang.ThreadLocal$Values: int next(int)>(i0);

        goto label1;
    }

    java.lang.Object getAfterMiss(java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal$Values r0;
        java.lang.ThreadLocal r1;
        java.lang.Object[] r2, $r9, $r15;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.Object r3, r4, r5, $r6, $r8, $r11, $r12, $r14, $r16, $r17;
        java.lang.ref.Reference $r7, $r10, $r13, $r18;

        r0 := @this: java.lang.ThreadLocal$Values;

        r1 := @parameter0: java.lang.ThreadLocal;

        r2 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i3 = staticinvoke <java.lang.ThreadLocal: int access$200(java.lang.ThreadLocal)>(r1);

        $i4 = r0.<java.lang.ThreadLocal$Values: int mask>;

        i0 = $i3 & $i4;

        $r6 = r2[i0];

        if $r6 != null goto label2;

        r5 = virtualinvoke r1.<java.lang.ThreadLocal: java.lang.Object initialValue()>();

        $r15 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        if $r15 != r2 goto label1;

        $r16 = r2[i0];

        if $r16 != null goto label1;

        $r18 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        r2[i0] = $r18;

        $i16 = i0 + 1;

        r2[$i16] = r5;

        $i14 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i15 = 1 + $i14;

        r0.<java.lang.ThreadLocal$Values: int size> = $i15;

        specialinvoke r0.<java.lang.ThreadLocal$Values: void cleanUp()>();

        return r5;

     label1:
        virtualinvoke r0.<java.lang.ThreadLocal$Values: void put(java.lang.ThreadLocal,java.lang.Object)>(r1, r5);

        return r5;

     label2:
        i1 = -1;

        i2 = specialinvoke r0.<java.lang.ThreadLocal$Values: int next(int)>(i0);

     label3:
        r3 = r2[i2];

        $r7 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        if r3 != $r7 goto label4;

        $i12 = i2 + 1;

        $r17 = r2[$i12];

        return $r17;

     label4:
        if r3 != null goto label7;

        r4 = virtualinvoke r1.<java.lang.ThreadLocal: java.lang.Object initialValue()>();

        $r9 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        if $r9 != r2 goto label6;

        if i1 <= -1 goto label5;

        $r14 = r2[i1];

        $r12 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        if $r14 != $r12 goto label5;

        $r13 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        r2[i1] = $r13;

        $i9 = i1 + 1;

        r2[$i9] = r4;

        $i8 = r0.<java.lang.ThreadLocal$Values: int tombstones>;

        $i11 = -1 + $i8;

        r0.<java.lang.ThreadLocal$Values: int tombstones> = $i11;

        $i10 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i13 = 1 + $i10;

        r0.<java.lang.ThreadLocal$Values: int size> = $i13;

        return r4;

     label5:
        $r11 = r2[i2];

        if $r11 != null goto label6;

        $r10 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        r2[i2] = $r10;

        $i6 = i2 + 1;

        r2[$i6] = r4;

        $i5 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i7 = 1 + $i5;

        r0.<java.lang.ThreadLocal$Values: int size> = $i7;

        specialinvoke r0.<java.lang.ThreadLocal$Values: void cleanUp()>();

        return r4;

     label6:
        virtualinvoke r0.<java.lang.ThreadLocal$Values: void put(java.lang.ThreadLocal,java.lang.Object)>(r1, r4);

        return r4;

     label7:
        if i1 != -1 goto label8;

        $r8 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        if r3 != $r8 goto label8;

        i1 = i2;

     label8:
        i2 = specialinvoke r0.<java.lang.ThreadLocal$Values: int next(int)>(i2);

        goto label3;
    }

    void put(java.lang.ThreadLocal, java.lang.Object)
    {
        java.lang.ThreadLocal$Values r0;
        java.lang.ThreadLocal r1;
        java.lang.Object r2, r3, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.Object[] $r4, $r7, $r9, $r11, $r12, $r13;
        java.lang.ref.Reference $r5, $r8, $r10;

        r0 := @this: java.lang.ThreadLocal$Values;

        r1 := @parameter0: java.lang.ThreadLocal;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.ThreadLocal$Values: void cleanUp()>();

        i0 = -1;

        $i2 = staticinvoke <java.lang.ThreadLocal: int access$200(java.lang.ThreadLocal)>(r1);

        $i3 = r0.<java.lang.ThreadLocal$Values: int mask>;

        i1 = $i2 & $i3;

     label1:
        $r4 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        r3 = $r4[i1];

        $r5 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        if r3 != $r5 goto label2;

        $r13 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i12 = i1 + 1;

        $r13[$i12] = r2;

        return;

     label2:
        if r3 != null goto label4;

        if i0 != -1 goto label3;

        $r11 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $r10 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        $r11[i1] = $r10;

        $r12 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i9 = i1 + 1;

        $r12[$i9] = r2;

        $i11 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i10 = 1 + $i11;

        r0.<java.lang.ThreadLocal$Values: int size> = $i10;

        return;

     label3:
        $r7 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $r8 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        $r7[i0] = $r8;

        $r9 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i4 = i0 + 1;

        $r9[$i4] = r2;

        $i6 = r0.<java.lang.ThreadLocal$Values: int tombstones>;

        $i5 = -1 + $i6;

        r0.<java.lang.ThreadLocal$Values: int tombstones> = $i5;

        $i8 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i7 = 1 + $i8;

        r0.<java.lang.ThreadLocal$Values: int size> = $i7;

        return;

     label4:
        if i0 != -1 goto label5;

        $r6 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        if r3 != $r6 goto label5;

        i0 = i1;

     label5:
        i1 = specialinvoke r0.<java.lang.ThreadLocal$Values: int next(int)>(i1);

        goto label1;
    }

    void remove(java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal$Values r0;
        java.lang.ThreadLocal r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r2, $r5;
        java.lang.Object[] $r3, $r6, $r7;
        java.lang.ref.Reference $r4;

        r0 := @this: java.lang.ThreadLocal$Values;

        r1 := @parameter0: java.lang.ThreadLocal;

        specialinvoke r0.<java.lang.ThreadLocal$Values: void cleanUp()>();

        $i1 = staticinvoke <java.lang.ThreadLocal: int access$200(java.lang.ThreadLocal)>(r1);

        $i2 = r0.<java.lang.ThreadLocal$Values: int mask>;

        i0 = $i1 & $i2;

     label1:
        $r3 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        r2 = $r3[i0];

        $r4 = staticinvoke <java.lang.ThreadLocal: java.lang.ref.Reference access$300(java.lang.ThreadLocal)>(r1);

        if r2 != $r4 goto label3;

        $r6 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $r5 = <java.lang.ThreadLocal$Values: java.lang.Object TOMBSTONE>;

        $r6[i0] = $r5;

        $r7 = r0.<java.lang.ThreadLocal$Values: java.lang.Object[] table>;

        $i3 = i0 + 1;

        $r7[$i3] = null;

        $i4 = r0.<java.lang.ThreadLocal$Values: int tombstones>;

        $i5 = 1 + $i4;

        r0.<java.lang.ThreadLocal$Values: int tombstones> = $i5;

        $i6 = r0.<java.lang.ThreadLocal$Values: int size>;

        $i7 = -1 + $i6;

        r0.<java.lang.ThreadLocal$Values: int size> = $i7;

     label2:
        return;

     label3:
        if r2 == null goto label2;

        i0 = specialinvoke r0.<java.lang.ThreadLocal$Values: int next(int)>(i0);

        goto label1;
    }
}
