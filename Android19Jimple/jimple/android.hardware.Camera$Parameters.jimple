public class android.hardware.Camera$Parameters extends java.lang.Object
{
    public static final java.lang.String ANTIBANDING_50HZ;
    public static final java.lang.String ANTIBANDING_60HZ;
    public static final java.lang.String ANTIBANDING_AUTO;
    public static final java.lang.String ANTIBANDING_OFF;
    public static final java.lang.String EFFECT_AQUA;
    public static final java.lang.String EFFECT_BLACKBOARD;
    public static final java.lang.String EFFECT_MONO;
    public static final java.lang.String EFFECT_NEGATIVE;
    public static final java.lang.String EFFECT_NONE;
    public static final java.lang.String EFFECT_POSTERIZE;
    public static final java.lang.String EFFECT_SEPIA;
    public static final java.lang.String EFFECT_SOLARIZE;
    public static final java.lang.String EFFECT_WHITEBOARD;
    private static final java.lang.String FALSE;
    public static final java.lang.String FLASH_MODE_AUTO;
    public static final java.lang.String FLASH_MODE_OFF;
    public static final java.lang.String FLASH_MODE_ON;
    public static final java.lang.String FLASH_MODE_RED_EYE;
    public static final java.lang.String FLASH_MODE_TORCH;
    public static final int FOCUS_DISTANCE_FAR_INDEX;
    public static final int FOCUS_DISTANCE_NEAR_INDEX;
    public static final int FOCUS_DISTANCE_OPTIMAL_INDEX;
    public static final java.lang.String FOCUS_MODE_AUTO;
    public static final java.lang.String FOCUS_MODE_CONTINUOUS_PICTURE;
    public static final java.lang.String FOCUS_MODE_CONTINUOUS_VIDEO;
    public static final java.lang.String FOCUS_MODE_EDOF;
    public static final java.lang.String FOCUS_MODE_FIXED;
    public static final java.lang.String FOCUS_MODE_INFINITY;
    public static final java.lang.String FOCUS_MODE_MACRO;
    private static final java.lang.String KEY_ANTIBANDING;
    private static final java.lang.String KEY_AUTO_EXPOSURE_LOCK;
    private static final java.lang.String KEY_AUTO_EXPOSURE_LOCK_SUPPORTED;
    private static final java.lang.String KEY_AUTO_WHITEBALANCE_LOCK;
    private static final java.lang.String KEY_AUTO_WHITEBALANCE_LOCK_SUPPORTED;
    private static final java.lang.String KEY_EFFECT;
    private static final java.lang.String KEY_EXPOSURE_COMPENSATION;
    private static final java.lang.String KEY_EXPOSURE_COMPENSATION_STEP;
    private static final java.lang.String KEY_FLASH_MODE;
    private static final java.lang.String KEY_FOCAL_LENGTH;
    private static final java.lang.String KEY_FOCUS_AREAS;
    private static final java.lang.String KEY_FOCUS_DISTANCES;
    private static final java.lang.String KEY_FOCUS_MODE;
    private static final java.lang.String KEY_GPS_ALTITUDE;
    private static final java.lang.String KEY_GPS_LATITUDE;
    private static final java.lang.String KEY_GPS_LONGITUDE;
    private static final java.lang.String KEY_GPS_PROCESSING_METHOD;
    private static final java.lang.String KEY_GPS_TIMESTAMP;
    private static final java.lang.String KEY_HORIZONTAL_VIEW_ANGLE;
    private static final java.lang.String KEY_JPEG_QUALITY;
    private static final java.lang.String KEY_JPEG_THUMBNAIL_HEIGHT;
    private static final java.lang.String KEY_JPEG_THUMBNAIL_QUALITY;
    private static final java.lang.String KEY_JPEG_THUMBNAIL_SIZE;
    private static final java.lang.String KEY_JPEG_THUMBNAIL_WIDTH;
    private static final java.lang.String KEY_MAX_EXPOSURE_COMPENSATION;
    private static final java.lang.String KEY_MAX_NUM_DETECTED_FACES_HW;
    private static final java.lang.String KEY_MAX_NUM_DETECTED_FACES_SW;
    private static final java.lang.String KEY_MAX_NUM_FOCUS_AREAS;
    private static final java.lang.String KEY_MAX_NUM_METERING_AREAS;
    private static final java.lang.String KEY_MAX_ZOOM;
    private static final java.lang.String KEY_METERING_AREAS;
    private static final java.lang.String KEY_MIN_EXPOSURE_COMPENSATION;
    private static final java.lang.String KEY_PICTURE_FORMAT;
    private static final java.lang.String KEY_PICTURE_SIZE;
    private static final java.lang.String KEY_PREFERRED_PREVIEW_SIZE_FOR_VIDEO;
    private static final java.lang.String KEY_PREVIEW_FORMAT;
    private static final java.lang.String KEY_PREVIEW_FPS_RANGE;
    private static final java.lang.String KEY_PREVIEW_FRAME_RATE;
    private static final java.lang.String KEY_PREVIEW_SIZE;
    private static final java.lang.String KEY_RECORDING_HINT;
    private static final java.lang.String KEY_ROTATION;
    private static final java.lang.String KEY_SCENE_MODE;
    private static final java.lang.String KEY_SMOOTH_ZOOM_SUPPORTED;
    private static final java.lang.String KEY_VERTICAL_VIEW_ANGLE;
    private static final java.lang.String KEY_VIDEO_SIZE;
    private static final java.lang.String KEY_VIDEO_SNAPSHOT_SUPPORTED;
    private static final java.lang.String KEY_VIDEO_STABILIZATION;
    private static final java.lang.String KEY_VIDEO_STABILIZATION_SUPPORTED;
    private static final java.lang.String KEY_WHITE_BALANCE;
    private static final java.lang.String KEY_ZOOM;
    private static final java.lang.String KEY_ZOOM_RATIOS;
    private static final java.lang.String KEY_ZOOM_SUPPORTED;
    private static final java.lang.String PIXEL_FORMAT_BAYER_RGGB;
    private static final java.lang.String PIXEL_FORMAT_JPEG;
    private static final java.lang.String PIXEL_FORMAT_RGB565;
    private static final java.lang.String PIXEL_FORMAT_YUV420P;
    private static final java.lang.String PIXEL_FORMAT_YUV420SP;
    private static final java.lang.String PIXEL_FORMAT_YUV422I;
    private static final java.lang.String PIXEL_FORMAT_YUV422SP;
    public static final int PREVIEW_FPS_MAX_INDEX;
    public static final int PREVIEW_FPS_MIN_INDEX;
    public static final java.lang.String SCENE_MODE_ACTION;
    public static final java.lang.String SCENE_MODE_AUTO;
    public static final java.lang.String SCENE_MODE_BARCODE;
    public static final java.lang.String SCENE_MODE_BEACH;
    public static final java.lang.String SCENE_MODE_CANDLELIGHT;
    public static final java.lang.String SCENE_MODE_FIREWORKS;
    public static final java.lang.String SCENE_MODE_HDR;
    public static final java.lang.String SCENE_MODE_LANDSCAPE;
    public static final java.lang.String SCENE_MODE_NIGHT;
    public static final java.lang.String SCENE_MODE_NIGHT_PORTRAIT;
    public static final java.lang.String SCENE_MODE_PARTY;
    public static final java.lang.String SCENE_MODE_PORTRAIT;
    public static final java.lang.String SCENE_MODE_SNOW;
    public static final java.lang.String SCENE_MODE_SPORTS;
    public static final java.lang.String SCENE_MODE_STEADYPHOTO;
    public static final java.lang.String SCENE_MODE_SUNSET;
    public static final java.lang.String SCENE_MODE_THEATRE;
    private static final java.lang.String SUPPORTED_VALUES_SUFFIX;
    private static final java.lang.String TRUE;
    public static final java.lang.String WHITE_BALANCE_AUTO;
    public static final java.lang.String WHITE_BALANCE_CLOUDY_DAYLIGHT;
    public static final java.lang.String WHITE_BALANCE_DAYLIGHT;
    public static final java.lang.String WHITE_BALANCE_FLUORESCENT;
    public static final java.lang.String WHITE_BALANCE_INCANDESCENT;
    public static final java.lang.String WHITE_BALANCE_SHADE;
    public static final java.lang.String WHITE_BALANCE_TWILIGHT;
    public static final java.lang.String WHITE_BALANCE_WARM_FLUORESCENT;
    private final java.util.LinkedHashMap mMap;
    final android.hardware.Camera this$0;

    private void <init>(android.hardware.Camera)
    {
        android.hardware.Camera$Parameters r0;
        android.hardware.Camera r1;
        java.util.LinkedHashMap $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: android.hardware.Camera;

        r0.<android.hardware.Camera$Parameters: android.hardware.Camera this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int)>(64);

        r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap> = $r2;

        return;
    }

    void <init>(android.hardware.Camera, android.hardware.Camera$1)
    {
        android.hardware.Camera$Parameters r0;
        android.hardware.Camera r1;
        android.hardware.Camera$1 r2;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: android.hardware.Camera;

        r2 := @parameter1: android.hardware.Camera$1;

        specialinvoke r0.<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera)>(r1);

        return;
    }

    private java.lang.String cameraFormatForPixelFormat(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 4: goto label6;
            case 16: goto label2;
            case 17: goto label3;
            case 20: goto label4;
            case 256: goto label7;
            case 512: goto label8;
            case 842094169: goto label5;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        return "yuv422sp";

     label3:
        return "yuv420sp";

     label4:
        return "yuv422i-yuyv";

     label5:
        return "yuv420p";

     label6:
        return "rgb565";

     label7:
        return "jpeg";

     label8:
        return "bayer-rggb";
    }

    private float getFloat(java.lang.String, float)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r5;
        float f0, f1;
        java.util.LinkedHashMap $r3;
        java.lang.Object $r4;
        java.lang.NumberFormatException $r6;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

     label1:
        $r3 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.String) $r4;

        f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

     label2:
        return f1;

     label3:
        $r6 := @caughtexception;

        return f0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private int getInt(java.lang.String, int)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r5;
        int i0, i1;
        java.util.LinkedHashMap $r3;
        java.lang.Object $r4;
        java.lang.NumberFormatException $r6;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r3 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.String) $r4;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label2:
        return i1;

     label3:
        $r6 := @caughtexception;

        return i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private int pixelFormatForCameraFormat(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yuv422sp");

        if $z0 == 0 goto label3;

        return 16;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yuv420sp");

        if $z1 == 0 goto label4;

        return 17;

     label4:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yuv422i-yuyv");

        if $z2 == 0 goto label5;

        return 20;

     label5:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yuv420p");

        if $z3 == 0 goto label6;

        return 842094169;

     label6:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("rgb565");

        if $z4 == 0 goto label7;

        return 4;

     label7:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("jpeg");

        if $z5 == 0 goto label1;

        return 256;
    }

    private void put(java.lang.String, java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, r2;
        java.util.LinkedHashMap $r3, $r5;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r5 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    private boolean same(java.lang.String, java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label2;

        if r2 != null goto label2;

     label1:
        return 1;

     label2:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

     label3:
        return 0;
    }

    private void set(java.lang.String, java.util.List)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r7;
        java.util.List r2;
        java.lang.StringBuilder r3, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.hardware.Camera$Area r4;
        android.graphics.Rect r5;
        java.lang.Object $r8;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        if r2 != null goto label1;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>(r1, "(0,0,0,0,0)");

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r3 = $r6;

        i0 = 0;

     label2:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if i0 >= $i1 goto label4;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (android.hardware.Camera$Area) $r8;

        r5 = r4.<android.hardware.Camera$Area: android.graphics.Rect rect>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $i2 = r5.<android.graphics.Rect: int left>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i3 = r5.<android.graphics.Rect: int top>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i4 = r5.<android.graphics.Rect: int right>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i5 = r5.<android.graphics.Rect: int bottom>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i6 = r4.<android.hardware.Camera$Area: int weight>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $i8 = interfaceinvoke r2.<java.util.List: int size()>();

        $i7 = -1 + $i8;

        if i0 == $i7 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $r7 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>(r1, $r7);

        return;
    }

    private java.util.ArrayList split(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r8;
        android.text.TextUtils$SimpleStringSplitter r2, $r5;
        java.util.ArrayList r3, $r6;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

        r3 = null;

     label1:
        return r3;

     label2:
        $r5 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r5.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(44);

        r2 = $r5;

        interfaceinvoke r2.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        r4 = interfaceinvoke r2.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label3;
    }

    private java.util.ArrayList splitArea(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r9, $r11;
        java.util.ArrayList r2, $r10;
        int i0, i1, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        int[] r3;
        android.hardware.Camera$Area r4, $r13;
        android.graphics.Rect r5, $r12;
        java.lang.StringBuilder $r6, $r7, $r8;
        char $c3, $c6;
        java.lang.Object $r14;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c3 != 40 goto label1;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = -1 + $i5;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i4);

        if $c6 == 41 goto label3;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid area string=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", $r9);

        r2 = null;

     label2:
        return r2;

     label3:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r2 = $r10;

        i0 = 1;

        r3 = newarray (int)[5];

     label4:
        i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>("),(", i0);

        if i1 != -1 goto label5;

        $i21 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = -1 + $i21;

     label5:
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<android.hardware.Camera$Parameters: void splitInt(java.lang.String,int[])>($r11, r3);

        $r13 = new android.hardware.Camera$Area;

        $r12 = new android.graphics.Rect;

        $i9 = r3[0];

        $i10 = r3[1];

        $i7 = r3[2];

        $i8 = r3[3];

        specialinvoke $r12.<android.graphics.Rect: void <init>(int,int,int,int)>($i9, $i10, $i7, $i8);

        $i11 = r3[4];

        specialinvoke $r13.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r12, $i11);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        i0 = i1 + 3;

        $i14 = virtualinvoke r1.<java.lang.String: int length()>();

        $i12 = -1 + $i14;

        if i1 != $i12 goto label4;

        $i13 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i13 != 0 goto label6;

        return null;

     label6:
        $i17 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i17 != 1 goto label2;

        $r14 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r4 = (android.hardware.Camera$Area) $r14;

        r5 = r4.<android.hardware.Camera$Area: android.graphics.Rect rect>;

        $i15 = r5.<android.graphics.Rect: int left>;

        if $i15 != 0 goto label2;

        $i16 = r5.<android.graphics.Rect: int top>;

        if $i16 != 0 goto label2;

        $i19 = r5.<android.graphics.Rect: int right>;

        if $i19 != 0 goto label2;

        $i20 = r5.<android.graphics.Rect: int bottom>;

        if $i20 != 0 goto label2;

        $i18 = r4.<android.hardware.Camera$Area: int weight>;

        if $i18 != 0 goto label2;

        return null;
    }

    private void splitFloat(java.lang.String, float[])
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, r5;
        float[] r2;
        android.text.TextUtils$SimpleStringSplitter r3, $r6;
        int i0, i1;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r7;
        float $f0;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: float[];

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r6 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r6.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(44);

        r3 = $r6;

        interfaceinvoke r3.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>(r1);

        i0 = 0;

        r4 = interfaceinvoke r3.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r7;

        i1 = i0 + 1;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r5);

        r2[i0] = $f0;

        i0 = i1;

        goto label3;
    }

    private java.util.ArrayList splitInt(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r8;
        android.text.TextUtils$SimpleStringSplitter r2, $r5;
        java.util.ArrayList r3, $r6;
        java.util.Iterator r4;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r7;
        java.lang.Integer $r9;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

        r3 = null;

     label1:
        return r3;

     label2:
        $r5 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r5.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(44);

        r2 = $r5;

        interfaceinvoke r2.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        r4 = interfaceinvoke r2.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label3;

     label4:
        $i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        return null;
    }

    private void splitInt(java.lang.String, int[])
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, r5;
        int[] r2;
        android.text.TextUtils$SimpleStringSplitter r3, $r6;
        int i0, i1, $i2;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r6 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r6.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(44);

        r3 = $r6;

        interfaceinvoke r3.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>(r1);

        i0 = 0;

        r4 = interfaceinvoke r3.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r7;

        i1 = i0 + 1;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

        r2[i0] = $i2;

        i0 = i1;

        goto label3;
    }

    private java.util.ArrayList splitRange(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r7, $r9;
        java.util.ArrayList r2, $r8;
        int i0, i1, $i4, $i6, $i7, $i8, $i9, $i10;
        int[] r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        char $c3, $c5;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c3 != 40 goto label1;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = -1 + $i4;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);

        if $c5 == 41 goto label3;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range list string=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", $r7);

        r2 = null;

     label2:
        return r2;

     label3:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        i0 = 1;

     label4:
        r3 = newarray (int)[2];

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>("),(", i0);

        if i1 != -1 goto label5;

        $i10 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = -1 + $i10;

     label5:
        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<android.hardware.Camera$Parameters: void splitInt(java.lang.String,int[])>($r9, r3);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        i0 = i1 + 3;

        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        $i9 = -1 + $i7;

        if i1 != $i9 goto label4;

        $i8 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i8 != 0 goto label2;

        return null;
    }

    private java.util.ArrayList splitSize(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r9;
        android.text.TextUtils$SimpleStringSplitter r2, $r6;
        java.util.ArrayList r3, $r7;
        java.util.Iterator r4;
        android.hardware.Camera$Size r5;
        boolean $z0;
        int $i0;
        java.lang.Object $r8;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

        r3 = null;

     label1:
        return r3;

     label2:
        $r6 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r6.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(44);

        r2 = $r6;

        interfaceinvoke r2.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>(r1);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        r4 = interfaceinvoke r2.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.String) $r8;

        r5 = specialinvoke r0.<android.hardware.Camera$Parameters: android.hardware.Camera$Size strToSize(java.lang.String)>($r9);

        if r5 == null goto label3;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label3;

     label4:
        $i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        return null;
    }

    private android.hardware.Camera$Size strToSize(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, r2, r3, $r7;
        int i0, $i2, $i3, $i4;
        java.lang.StringBuilder $r4, $r5, $r6;
        android.hardware.Camera $r8;
        android.hardware.Camera$Size $r9;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(120);

        if i0 == -1 goto label2;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i2 = i0 + 1;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r9 = new android.hardware.Camera$Size;

        $r8 = r0.<android.hardware.Camera$Parameters: android.hardware.Camera this$0>;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        specialinvoke $r9.<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>($r8, $i4, $i3);

        return $r9;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid size parameter string=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", $r7);

        return null;
    }

    public void dump()
    {
        android.hardware.Camera$Parameters r0;
        java.util.Iterator r1;
        java.lang.String r2, $r7, $r18, $r19;
        java.lang.StringBuilder $r3, $r4, $r6, $r10, $r12, $r13, $r14, $r17;
        java.util.LinkedHashMap $r5, $r8, $r16;
        int $i0;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r11, $r15;

        r0 := @this: android.hardware.Camera$Parameters;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dump: size=");

        $r5 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $i0 = virtualinvoke $r5.<java.util.LinkedHashMap: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", $r7);

        $r8 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r9 = virtualinvoke $r8.<java.util.LinkedHashMap: java.util.Set keySet()>();

        r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r11;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dump: ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r16 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r15 = virtualinvoke $r16.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r18 = (java.lang.String) $r15;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", $r19);

        goto label1;

     label2:
        return;
    }

    public java.lang.String flatten()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.StringBuilder r1, $r4;
        java.util.Iterator r2;
        java.lang.String r3, $r8, $r15;
        java.util.LinkedHashMap $r5, $r13;
        java.util.Set $r6;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r9, $r12;

        r0 := @this: android.hardware.Camera$Parameters;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(128);

        r1 = $r4;

        $r5 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r9;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r13 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r12 = virtualinvoke $r13.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r15 = (java.lang.String) $r12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        goto label1;

     label2:
        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i1 = -1 + $i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i1);

        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String get(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r4;
        java.util.LinkedHashMap $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String getAntibanding()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("antibanding");

        return $r1;
    }

    public boolean getAutoExposureLock()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("auto-exposure-lock");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean getAutoWhiteBalanceLock()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("auto-whitebalance-lock");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public java.lang.String getColorEffect()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("effect");

        return $r1;
    }

    public int getExposureCompensation()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("exposure-compensation", 0);

        return $i0;
    }

    public float getExposureCompensationStep()
    {
        android.hardware.Camera$Parameters r0;
        float $f0;

        r0 := @this: android.hardware.Camera$Parameters;

        $f0 = specialinvoke r0.<android.hardware.Camera$Parameters: float getFloat(java.lang.String,float)>("exposure-compensation-step", 0.0F);

        return $f0;
    }

    public java.lang.String getFlashMode()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("flash-mode");

        return $r1;
    }

    public float getFocalLength()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        float $f0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("focal-length");

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1);

        return $f0;
    }

    public java.util.List getFocusAreas()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("focus-areas");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitArea(java.lang.String)>($r1);

        return $r2;
    }

    public void getFocusDistances(float[])
    {
        android.hardware.Camera$Parameters r0;
        float[] r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: float[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 == 3 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("output must be a float array with three elements.");

        throw $r2;

     label2:
        $r3 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("focus-distances");

        specialinvoke r0.<android.hardware.Camera$Parameters: void splitFloat(java.lang.String,float[])>($r3, r1);

        return;
    }

    public java.lang.String getFocusMode()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("focus-mode");

        return $r1;
    }

    public float getHorizontalViewAngle()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        float $f0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("horizontal-view-angle");

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1);

        return $f0;
    }

    public int getInt(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r4;
        java.util.LinkedHashMap $r2;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        return $i0;
    }

    public int getJpegQuality()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = virtualinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String)>("jpeg-quality");

        return $i0;
    }

    public int getJpegThumbnailQuality()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = virtualinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String)>("jpeg-thumbnail-quality");

        return $i0;
    }

    public android.hardware.Camera$Size getJpegThumbnailSize()
    {
        android.hardware.Camera$Parameters r0;
        android.hardware.Camera$Size $r1;
        android.hardware.Camera $r2;
        int $i0, $i1;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = new android.hardware.Camera$Size;

        $r2 = r0.<android.hardware.Camera$Parameters: android.hardware.Camera this$0>;

        $i0 = virtualinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String)>("jpeg-thumbnail-width");

        $i1 = virtualinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String)>("jpeg-thumbnail-height");

        specialinvoke $r1.<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public int getMaxExposureCompensation()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("max-exposure-compensation", 0);

        return $i0;
    }

    public int getMaxNumDetectedFaces()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("max-num-detected-faces-hw", 0);

        return $i0;
    }

    public int getMaxNumFocusAreas()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("max-num-focus-areas", 0);

        return $i0;
    }

    public int getMaxNumMeteringAreas()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("max-num-metering-areas", 0);

        return $i0;
    }

    public int getMaxZoom()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("max-zoom", 0);

        return $i0;
    }

    public java.util.List getMeteringAreas()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("metering-areas");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitArea(java.lang.String)>($r1);

        return $r2;
    }

    public int getMinExposureCompensation()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("min-exposure-compensation", 0);

        return $i0;
    }

    public int getPictureFormat()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("picture-format");

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int pixelFormatForCameraFormat(java.lang.String)>($r1);

        return $i0;
    }

    public android.hardware.Camera$Size getPictureSize()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        android.hardware.Camera$Size $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("picture-size");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: android.hardware.Camera$Size strToSize(java.lang.String)>($r1);

        return $r2;
    }

    public android.hardware.Camera$Size getPreferredPreviewSizeForVideo()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        android.hardware.Camera$Size $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preferred-preview-size-for-video");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: android.hardware.Camera$Size strToSize(java.lang.String)>($r1);

        return $r2;
    }

    public int getPreviewFormat()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preview-format");

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int pixelFormatForCameraFormat(java.lang.String)>($r1);

        return $i0;
    }

    public void getPreviewFpsRange(int[])
    {
        android.hardware.Camera$Parameters r0;
        int[] r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: int[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 == 2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("range must be an array with two elements.");

        throw $r2;

     label2:
        $r3 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preview-fps-range");

        specialinvoke r0.<android.hardware.Camera$Parameters: void splitInt(java.lang.String,int[])>($r3, r1);

        return;
    }

    public int getPreviewFrameRate()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = virtualinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String)>("preview-frame-rate");

        return $i0;
    }

    public android.hardware.Camera$Size getPreviewSize()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        android.hardware.Camera$Size $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preview-size");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: android.hardware.Camera$Size strToSize(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String getSceneMode()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("scene-mode");

        return $r1;
    }

    public java.util.List getSupportedAntibanding()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("antibanding-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedColorEffects()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("effect-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedFlashModes()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("flash-mode-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedFocusModes()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("focus-mode-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedJpegThumbnailSizes()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("jpeg-thumbnail-size-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitSize(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedPictureFormats()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r7;
        java.util.ArrayList r2, $r4, $r5;
        java.util.Iterator r3;
        int i0;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Integer $r8;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("picture-format-values");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        $r5 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>(r1);

        r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int pixelFormatForCameraFormat(java.lang.String)>($r7);

        if i0 == 0 goto label1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return r2;
    }

    public java.util.List getSupportedPictureSizes()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("picture-size-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitSize(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedPreviewFormats()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r7;
        java.util.ArrayList r2, $r4, $r5;
        java.util.Iterator r3;
        int i0;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Integer $r8;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preview-format-values");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        $r5 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>(r1);

        r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int pixelFormatForCameraFormat(java.lang.String)>($r7);

        if i0 == 0 goto label1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return r2;
    }

    public java.util.List getSupportedPreviewFpsRange()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preview-fps-range-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitRange(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedPreviewFrameRates()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preview-frame-rate-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitInt(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedPreviewSizes()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("preview-size-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitSize(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedSceneModes()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("scene-mode-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedVideoSizes()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("video-size-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitSize(java.lang.String)>($r1);

        return $r2;
    }

    public java.util.List getSupportedWhiteBalance()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("whitebalance-values");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList split(java.lang.String)>($r1);

        return $r2;
    }

    public float getVerticalViewAngle()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        float $f0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("vertical-view-angle");

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1);

        return $f0;
    }

    public boolean getVideoStabilization()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("video-stabilization");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public java.lang.String getWhiteBalance()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("whitebalance");

        return $r1;
    }

    public int getZoom()
    {
        android.hardware.Camera$Parameters r0;
        int $i0;

        r0 := @this: android.hardware.Camera$Parameters;

        $i0 = specialinvoke r0.<android.hardware.Camera$Parameters: int getInt(java.lang.String,int)>("zoom", 0);

        return $i0;
    }

    public java.util.List getZoomRatios()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("zoom-ratios");

        $r2 = specialinvoke r0.<android.hardware.Camera$Parameters: java.util.ArrayList splitInt(java.lang.String)>($r1);

        return $r2;
    }

    public boolean isAutoExposureLockSupported()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("auto-exposure-lock-supported");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean isAutoWhiteBalanceLockSupported()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("auto-whitebalance-lock-supported");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean isSmoothZoomSupported()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("smooth-zoom-supported");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean isVideoSnapshotSupported()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("video-snapshot-supported");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean isVideoStabilizationSupported()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("video-stabilization-supported");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean isZoomSupported()
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        $r1 = "true";

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("zoom-supported");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public void remove(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;
        java.util.LinkedHashMap $r2;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void removeGpsData()
    {
        android.hardware.Camera$Parameters r0;

        r0 := @this: android.hardware.Camera$Parameters;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void remove(java.lang.String)>("gps-latitude");

        virtualinvoke r0.<android.hardware.Camera$Parameters: void remove(java.lang.String)>("gps-longitude");

        virtualinvoke r0.<android.hardware.Camera$Parameters: void remove(java.lang.String)>("gps-altitude");

        virtualinvoke r0.<android.hardware.Camera$Parameters: void remove(java.lang.String)>("gps-timestamp");

        virtualinvoke r0.<android.hardware.Camera$Parameters: void remove(java.lang.String)>("gps-processing-method");

        return;
    }

    public void set(java.lang.String, int)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r2;
        int i0;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke r0.<android.hardware.Camera$Parameters: void put(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    public void set(java.lang.String, java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, r2, $r7, $r11;
        int $i0, $i2, $i3, $i4, $i5, $i7;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r12;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(61);

        if $i0 != -1 goto label1;

        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(59);

        if $i2 != -1 goto label1;

        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(0);

        if $i3 == -1 goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" contains invalid character (= or ; or \\0)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", $r7);

        return;

     label2:
        $i4 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        if $i4 != -1 goto label3;

        $i5 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(59);

        if $i5 != -1 goto label3;

        $i7 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(0);

        if $i7 == -1 goto label4;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value \"");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" contains invalid character (= or ; or \\0)");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", $r11);

        return;

     label4:
        specialinvoke r0.<android.hardware.Camera$Parameters: void put(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void setAntibanding(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("antibanding", r1);

        return;
    }

    public void setAutoExposureLock(boolean)
    {
        android.hardware.Camera$Parameters r0;
        boolean z0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        r1 = "true";

     label1:
        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("auto-exposure-lock", r1);

        return;

     label2:
        r1 = "false";

        goto label1;
    }

    public void setAutoWhiteBalanceLock(boolean)
    {
        android.hardware.Camera$Parameters r0;
        boolean z0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        r1 = "true";

     label1:
        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("auto-whitebalance-lock", r1);

        return;

     label2:
        r1 = "false";

        goto label1;
    }

    public void setColorEffect(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("effect", r1);

        return;
    }

    public void setExposureCompensation(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,int)>("exposure-compensation", i0);

        return;
    }

    public void setFlashMode(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("flash-mode", r1);

        return;
    }

    public void setFocusAreas(java.util.List)
    {
        android.hardware.Camera$Parameters r0;
        java.util.List r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.util.List)>("focus-areas", r1);

        return;
    }

    public void setFocusMode(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("focus-mode", r1);

        return;
    }

    public void setGpsAltitude(double)
    {
        android.hardware.Camera$Parameters r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("gps-altitude", $r1);

        return;
    }

    public void setGpsLatitude(double)
    {
        android.hardware.Camera$Parameters r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("gps-latitude", $r1);

        return;
    }

    public void setGpsLongitude(double)
    {
        android.hardware.Camera$Parameters r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("gps-longitude", $r1);

        return;
    }

    public void setGpsProcessingMethod(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("gps-processing-method", r1);

        return;
    }

    public void setGpsTimestamp(long)
    {
        android.hardware.Camera$Parameters r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: android.hardware.Camera$Parameters;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("gps-timestamp", $r1);

        return;
    }

    public void setJpegQuality(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,int)>("jpeg-quality", i0);

        return;
    }

    public void setJpegThumbnailQuality(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,int)>("jpeg-thumbnail-quality", i0);

        return;
    }

    public void setJpegThumbnailSize(int, int)
    {
        android.hardware.Camera$Parameters r0;
        int i0, i1;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,int)>("jpeg-thumbnail-width", i0);

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,int)>("jpeg-thumbnail-height", i1);

        return;
    }

    public void setMeteringAreas(java.util.List)
    {
        android.hardware.Camera$Parameters r0;
        java.util.List r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.util.List)>("metering-areas", r1);

        return;
    }

    public void setPictureFormat(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;
        java.lang.String r1, $r6;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.hardware.Camera$Parameters: java.lang.String cameraFormatForPixelFormat(int)>(i0);

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid pixel_format=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("picture-format", r1);

        return;
    }

    public void setPictureSize(int, int)
    {
        android.hardware.Camera$Parameters r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("picture-size", $r7);

        return;
    }

    public void setPreviewFormat(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;
        java.lang.String r1, $r6;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.hardware.Camera$Parameters: java.lang.String cameraFormatForPixelFormat(int)>(i0);

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid pixel_format=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("preview-format", r1);

        return;
    }

    public void setPreviewFpsRange(int, int)
    {
        android.hardware.Camera$Parameters r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("preview-fps-range", $r6);

        return;
    }

    public void setPreviewFrameRate(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,int)>("preview-frame-rate", i0);

        return;
    }

    public void setPreviewSize(int, int)
    {
        android.hardware.Camera$Parameters r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("preview-size", $r7);

        return;
    }

    public void setRecordingHint(boolean)
    {
        android.hardware.Camera$Parameters r0;
        boolean z0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        r1 = "true";

     label1:
        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("recording-hint", r1);

        return;

     label2:
        r1 = "false";

        goto label1;
    }

    public void setRotation(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;
        java.lang.String $r1, $r6;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 90 goto label1;

        if i0 == 180 goto label1;

        if i0 != 270 goto label2;

     label1:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("rotation", $r1);

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rotation=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public void setSceneMode(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("scene-mode", r1);

        return;
    }

    public void setVideoStabilization(boolean)
    {
        android.hardware.Camera$Parameters r0;
        boolean z0;
        java.lang.String r1;

        r0 := @this: android.hardware.Camera$Parameters;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        r1 = "true";

     label1:
        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("video-stabilization", r1);

        return;

     label2:
        r1 = "false";

        goto label1;
    }

    public void setWhiteBalance(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("whitebalance");

        $z0 = specialinvoke r0.<android.hardware.Camera$Parameters: boolean same(java.lang.String,java.lang.String)>(r1, $r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("whitebalance", r1);

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>("auto-whitebalance-lock", "false");

        return;
    }

    public void setZoom(int)
    {
        android.hardware.Camera$Parameters r0;
        int i0;

        r0 := @this: android.hardware.Camera$Parameters;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void set(java.lang.String,int)>("zoom", i0);

        return;
    }

    public void unflatten(java.lang.String)
    {
        android.hardware.Camera$Parameters r0;
        java.lang.String r1, r4, r5, r6;
        android.text.TextUtils$SimpleStringSplitter r2, $r8;
        java.util.Iterator r3;
        int i0, $i1;
        java.util.LinkedHashMap $r7, $r10;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: android.hardware.Camera$Parameters;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        virtualinvoke $r7.<java.util.LinkedHashMap: void clear()>();

        $r8 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r8.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(59);

        r2 = $r8;

        interfaceinvoke r2.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>(r1);

        r3 = interfaceinvoke r2.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r9;

        i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(61);

        if i0 == -1 goto label1;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i1 = i0 + 1;

        r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i1);

        $r10 = r0.<android.hardware.Camera$Parameters: java.util.LinkedHashMap mMap>;

        virtualinvoke $r10.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_WARM_FLUORESCENT> = "warm-fluorescent";

        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_TWILIGHT> = "twilight";

        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_SHADE> = "shade";

        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_INCANDESCENT> = "incandescent";

        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_FLUORESCENT> = "fluorescent";

        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_DAYLIGHT> = "daylight";

        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_CLOUDY_DAYLIGHT> = "cloudy-daylight";

        <android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_AUTO> = "auto";

        <android.hardware.Camera$Parameters: java.lang.String TRUE> = "true";

        <android.hardware.Camera$Parameters: java.lang.String SUPPORTED_VALUES_SUFFIX> = "-values";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_THEATRE> = "theatre";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_SUNSET> = "sunset";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_STEADYPHOTO> = "steadyphoto";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_SPORTS> = "sports";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_SNOW> = "snow";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_PORTRAIT> = "portrait";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_PARTY> = "party";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_NIGHT_PORTRAIT> = "night-portrait";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_NIGHT> = "night";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_LANDSCAPE> = "landscape";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_HDR> = "hdr";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_FIREWORKS> = "fireworks";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_CANDLELIGHT> = "candlelight";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_BEACH> = "beach";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_BARCODE> = "barcode";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_AUTO> = "auto";

        <android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_ACTION> = "action";

        <android.hardware.Camera$Parameters: int PREVIEW_FPS_MIN_INDEX> = 0;

        <android.hardware.Camera$Parameters: int PREVIEW_FPS_MAX_INDEX> = 1;

        <android.hardware.Camera$Parameters: java.lang.String PIXEL_FORMAT_YUV422SP> = "yuv422sp";

        <android.hardware.Camera$Parameters: java.lang.String PIXEL_FORMAT_YUV422I> = "yuv422i-yuyv";

        <android.hardware.Camera$Parameters: java.lang.String PIXEL_FORMAT_YUV420SP> = "yuv420sp";

        <android.hardware.Camera$Parameters: java.lang.String PIXEL_FORMAT_YUV420P> = "yuv420p";

        <android.hardware.Camera$Parameters: java.lang.String PIXEL_FORMAT_RGB565> = "rgb565";

        <android.hardware.Camera$Parameters: java.lang.String PIXEL_FORMAT_JPEG> = "jpeg";

        <android.hardware.Camera$Parameters: java.lang.String PIXEL_FORMAT_BAYER_RGGB> = "bayer-rggb";

        <android.hardware.Camera$Parameters: java.lang.String KEY_ZOOM_SUPPORTED> = "zoom-supported";

        <android.hardware.Camera$Parameters: java.lang.String KEY_ZOOM_RATIOS> = "zoom-ratios";

        <android.hardware.Camera$Parameters: java.lang.String KEY_ZOOM> = "zoom";

        <android.hardware.Camera$Parameters: java.lang.String KEY_WHITE_BALANCE> = "whitebalance";

        <android.hardware.Camera$Parameters: java.lang.String KEY_VIDEO_STABILIZATION_SUPPORTED> = "video-stabilization-supported";

        <android.hardware.Camera$Parameters: java.lang.String KEY_VIDEO_STABILIZATION> = "video-stabilization";

        <android.hardware.Camera$Parameters: java.lang.String KEY_VIDEO_SNAPSHOT_SUPPORTED> = "video-snapshot-supported";

        <android.hardware.Camera$Parameters: java.lang.String KEY_VIDEO_SIZE> = "video-size";

        <android.hardware.Camera$Parameters: java.lang.String KEY_VERTICAL_VIEW_ANGLE> = "vertical-view-angle";

        <android.hardware.Camera$Parameters: java.lang.String KEY_SMOOTH_ZOOM_SUPPORTED> = "smooth-zoom-supported";

        <android.hardware.Camera$Parameters: java.lang.String KEY_SCENE_MODE> = "scene-mode";

        <android.hardware.Camera$Parameters: java.lang.String KEY_ROTATION> = "rotation";

        <android.hardware.Camera$Parameters: java.lang.String KEY_RECORDING_HINT> = "recording-hint";

        <android.hardware.Camera$Parameters: java.lang.String KEY_PREVIEW_SIZE> = "preview-size";

        <android.hardware.Camera$Parameters: java.lang.String KEY_PREVIEW_FRAME_RATE> = "preview-frame-rate";

        <android.hardware.Camera$Parameters: java.lang.String KEY_PREVIEW_FPS_RANGE> = "preview-fps-range";

        <android.hardware.Camera$Parameters: java.lang.String KEY_PREVIEW_FORMAT> = "preview-format";

        <android.hardware.Camera$Parameters: java.lang.String KEY_PREFERRED_PREVIEW_SIZE_FOR_VIDEO> = "preferred-preview-size-for-video";

        <android.hardware.Camera$Parameters: java.lang.String KEY_PICTURE_SIZE> = "picture-size";

        <android.hardware.Camera$Parameters: java.lang.String KEY_PICTURE_FORMAT> = "picture-format";

        <android.hardware.Camera$Parameters: java.lang.String KEY_MIN_EXPOSURE_COMPENSATION> = "min-exposure-compensation";

        <android.hardware.Camera$Parameters: java.lang.String KEY_METERING_AREAS> = "metering-areas";

        <android.hardware.Camera$Parameters: java.lang.String KEY_MAX_ZOOM> = "max-zoom";

        <android.hardware.Camera$Parameters: java.lang.String KEY_MAX_NUM_METERING_AREAS> = "max-num-metering-areas";

        <android.hardware.Camera$Parameters: java.lang.String KEY_MAX_NUM_FOCUS_AREAS> = "max-num-focus-areas";

        <android.hardware.Camera$Parameters: java.lang.String KEY_MAX_NUM_DETECTED_FACES_SW> = "max-num-detected-faces-sw";

        <android.hardware.Camera$Parameters: java.lang.String KEY_MAX_NUM_DETECTED_FACES_HW> = "max-num-detected-faces-hw";

        <android.hardware.Camera$Parameters: java.lang.String KEY_MAX_EXPOSURE_COMPENSATION> = "max-exposure-compensation";

        <android.hardware.Camera$Parameters: java.lang.String KEY_JPEG_THUMBNAIL_WIDTH> = "jpeg-thumbnail-width";

        <android.hardware.Camera$Parameters: java.lang.String KEY_JPEG_THUMBNAIL_SIZE> = "jpeg-thumbnail-size";

        <android.hardware.Camera$Parameters: java.lang.String KEY_JPEG_THUMBNAIL_QUALITY> = "jpeg-thumbnail-quality";

        <android.hardware.Camera$Parameters: java.lang.String KEY_JPEG_THUMBNAIL_HEIGHT> = "jpeg-thumbnail-height";

        <android.hardware.Camera$Parameters: java.lang.String KEY_JPEG_QUALITY> = "jpeg-quality";

        <android.hardware.Camera$Parameters: java.lang.String KEY_HORIZONTAL_VIEW_ANGLE> = "horizontal-view-angle";

        <android.hardware.Camera$Parameters: java.lang.String KEY_GPS_TIMESTAMP> = "gps-timestamp";

        <android.hardware.Camera$Parameters: java.lang.String KEY_GPS_PROCESSING_METHOD> = "gps-processing-method";

        <android.hardware.Camera$Parameters: java.lang.String KEY_GPS_LONGITUDE> = "gps-longitude";

        <android.hardware.Camera$Parameters: java.lang.String KEY_GPS_LATITUDE> = "gps-latitude";

        <android.hardware.Camera$Parameters: java.lang.String KEY_GPS_ALTITUDE> = "gps-altitude";

        <android.hardware.Camera$Parameters: java.lang.String KEY_FOCUS_MODE> = "focus-mode";

        <android.hardware.Camera$Parameters: java.lang.String KEY_FOCUS_DISTANCES> = "focus-distances";

        <android.hardware.Camera$Parameters: java.lang.String KEY_FOCUS_AREAS> = "focus-areas";

        <android.hardware.Camera$Parameters: java.lang.String KEY_FOCAL_LENGTH> = "focal-length";

        <android.hardware.Camera$Parameters: java.lang.String KEY_FLASH_MODE> = "flash-mode";

        <android.hardware.Camera$Parameters: java.lang.String KEY_EXPOSURE_COMPENSATION_STEP> = "exposure-compensation-step";

        <android.hardware.Camera$Parameters: java.lang.String KEY_EXPOSURE_COMPENSATION> = "exposure-compensation";

        <android.hardware.Camera$Parameters: java.lang.String KEY_EFFECT> = "effect";

        <android.hardware.Camera$Parameters: java.lang.String KEY_AUTO_WHITEBALANCE_LOCK_SUPPORTED> = "auto-whitebalance-lock-supported";

        <android.hardware.Camera$Parameters: java.lang.String KEY_AUTO_WHITEBALANCE_LOCK> = "auto-whitebalance-lock";

        <android.hardware.Camera$Parameters: java.lang.String KEY_AUTO_EXPOSURE_LOCK_SUPPORTED> = "auto-exposure-lock-supported";

        <android.hardware.Camera$Parameters: java.lang.String KEY_AUTO_EXPOSURE_LOCK> = "auto-exposure-lock";

        <android.hardware.Camera$Parameters: java.lang.String KEY_ANTIBANDING> = "antibanding";

        <android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_MACRO> = "macro";

        <android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_INFINITY> = "infinity";

        <android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_FIXED> = "fixed";

        <android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_EDOF> = "edof";

        <android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_CONTINUOUS_VIDEO> = "continuous-video";

        <android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_CONTINUOUS_PICTURE> = "continuous-picture";

        <android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_AUTO> = "auto";

        <android.hardware.Camera$Parameters: int FOCUS_DISTANCE_OPTIMAL_INDEX> = 1;

        <android.hardware.Camera$Parameters: int FOCUS_DISTANCE_NEAR_INDEX> = 0;

        <android.hardware.Camera$Parameters: int FOCUS_DISTANCE_FAR_INDEX> = 2;

        <android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_TORCH> = "torch";

        <android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_RED_EYE> = "red-eye";

        <android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_ON> = "on";

        <android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_OFF> = "off";

        <android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_AUTO> = "auto";

        <android.hardware.Camera$Parameters: java.lang.String FALSE> = "false";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_WHITEBOARD> = "whiteboard";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_SOLARIZE> = "solarize";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_SEPIA> = "sepia";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_POSTERIZE> = "posterize";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_NONE> = "none";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_NEGATIVE> = "negative";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_MONO> = "mono";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_BLACKBOARD> = "blackboard";

        <android.hardware.Camera$Parameters: java.lang.String EFFECT_AQUA> = "aqua";

        <android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_OFF> = "off";

        <android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_AUTO> = "auto";

        <android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_60HZ> = "60hz";

        <android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_50HZ> = "50hz";

        return;
    }
}
