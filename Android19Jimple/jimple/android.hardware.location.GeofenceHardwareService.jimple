public class android.hardware.location.GeofenceHardwareService extends android.app.Service
{
    private android.os.IBinder mBinder;
    private android.content.Context mContext;
    private android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareImpl;

    public void <init>()
    {
        android.hardware.location.GeofenceHardwareService r0;
        android.hardware.location.GeofenceHardwareService$1 $r1;

        r0 := @this: android.hardware.location.GeofenceHardwareService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        $r1 = new android.hardware.location.GeofenceHardwareService$1;

        specialinvoke $r1.<android.hardware.location.GeofenceHardwareService$1: void <init>(android.hardware.location.GeofenceHardwareService)>(r0);

        r0.<android.hardware.location.GeofenceHardwareService: android.os.IBinder mBinder> = $r1;

        return;
    }

    static android.hardware.location.GeofenceHardwareImpl access$000(android.hardware.location.GeofenceHardwareService)
    {
        android.hardware.location.GeofenceHardwareService r0;
        android.hardware.location.GeofenceHardwareImpl $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareService;

        $r1 = r0.<android.hardware.location.GeofenceHardwareService: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareImpl>;

        return $r1;
    }

    static android.content.Context access$100(android.hardware.location.GeofenceHardwareService)
    {
        android.hardware.location.GeofenceHardwareService r0;
        android.content.Context $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareService;

        $r1 = r0.<android.hardware.location.GeofenceHardwareService: android.content.Context mContext>;

        return $r1;
    }

    static void access$200(android.hardware.location.GeofenceHardwareService, int, int, int)
    {
        android.hardware.location.GeofenceHardwareService r0;
        int i0, i1, i2;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareService: void checkPermission(int,int,int)>(i0, i1, i2);

        return;
    }

    private void checkPermission(int, int, int)
    {
        android.hardware.location.GeofenceHardwareService r0;
        int i0, i1, i2, $i3, $i4;
        android.hardware.location.GeofenceHardwareImpl $r1, $r2;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: android.hardware.location.GeofenceHardwareService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<android.hardware.location.GeofenceHardwareService: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareImpl>;

        $i3 = virtualinvoke $r1.<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)>(i0, i1);

        $r2 = r0.<android.hardware.location.GeofenceHardwareService: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareImpl>;

        $i4 = virtualinvoke $r2.<android.hardware.location.GeofenceHardwareImpl: int getMonitoringResolutionLevel(int)>(i2);

        if $i3 >= $i4 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Insufficient permissions to access hardware geofence for type: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    public android.os.IBinder onBind(android.content.Intent)
    {
        android.hardware.location.GeofenceHardwareService r0;
        android.content.Intent r1;
        android.os.IBinder $r2;

        r0 := @this: android.hardware.location.GeofenceHardwareService;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<android.hardware.location.GeofenceHardwareService: android.os.IBinder mBinder>;

        return $r2;
    }

    public void onCreate()
    {
        android.hardware.location.GeofenceHardwareService r0;
        android.content.Context $r1;
        android.hardware.location.GeofenceHardwareImpl $r2;

        r0 := @this: android.hardware.location.GeofenceHardwareService;

        r0.<android.hardware.location.GeofenceHardwareService: android.content.Context mContext> = r0;

        $r1 = r0.<android.hardware.location.GeofenceHardwareService: android.content.Context mContext>;

        $r2 = staticinvoke <android.hardware.location.GeofenceHardwareImpl: android.hardware.location.GeofenceHardwareImpl getInstance(android.content.Context)>($r1);

        r0.<android.hardware.location.GeofenceHardwareService: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareImpl> = $r2;

        return;
    }

    public void onDestroy()
    {
        android.hardware.location.GeofenceHardwareService r0;

        r0 := @this: android.hardware.location.GeofenceHardwareService;

        r0.<android.hardware.location.GeofenceHardwareService: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareImpl> = null;

        return;
    }

    public boolean onUnbind(android.content.Intent)
    {
        android.hardware.location.GeofenceHardwareService r0;
        android.content.Intent r1;

        r0 := @this: android.hardware.location.GeofenceHardwareService;

        r1 := @parameter0: android.content.Intent;

        return 0;
    }
}
