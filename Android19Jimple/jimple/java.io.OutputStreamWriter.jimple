public class java.io.OutputStreamWriter extends java.io.Writer
{
    private java.nio.ByteBuffer bytes;
    private java.nio.charset.CharsetEncoder encoder;
    private final java.io.OutputStream out;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStreamWriter r0;
        java.io.OutputStream r1;
        java.nio.charset.Charset $r2;

        r0 := @this: java.io.OutputStreamWriter;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r1, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStreamWriter r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.nio.ByteBuffer $r4;
        java.nio.charset.Charset $r5;
        java.nio.charset.CharsetEncoder $r6, $r8, $r11;
        java.nio.charset.CodingErrorAction $r7, $r10;
        java.lang.NullPointerException $r13;
        java.lang.Exception $r14;
        java.io.UnsupportedEncodingException $r15;

        r0 := @this: java.io.OutputStreamWriter;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.io.Writer: void <init>(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes> = $r4;

        if r2 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("charsetName == null");

        throw $r13;

     label1:
        r0.<java.io.OutputStreamWriter: java.io.OutputStream out> = r1;

     label2:
        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder> = $r6;

     label3:
        $r8 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        virtualinvoke $r8.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r7);

        $r11 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r10 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        virtualinvoke $r11.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r10);

        return;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.io.UnsupportedEncodingException;

        specialinvoke $r15.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r2);

        throw $r15;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void <init>(java.io.OutputStream, java.nio.charset.Charset)
    {
        java.io.OutputStreamWriter r0;
        java.io.OutputStream r1;
        java.nio.charset.Charset r2;
        java.nio.ByteBuffer $r3;
        java.nio.charset.CharsetEncoder $r4, $r6, $r9;
        java.nio.charset.CodingErrorAction $r5, $r8;

        r0 := @this: java.io.OutputStreamWriter;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<java.io.Writer: void <init>(java.lang.Object)>(r1);

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes> = $r3;

        r0.<java.io.OutputStreamWriter: java.io.OutputStream out> = r1;

        $r4 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder> = $r4;

        $r6 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        virtualinvoke $r6.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r5);

        $r9 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r8 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        virtualinvoke $r9.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r8);

        return;
    }

    public void <init>(java.io.OutputStream, java.nio.charset.CharsetEncoder)
    {
        java.io.OutputStreamWriter r0;
        java.io.OutputStream r1;
        java.nio.charset.CharsetEncoder r2;
        java.nio.ByteBuffer $r3;

        r0 := @this: java.io.OutputStreamWriter;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.nio.charset.CharsetEncoder;

        specialinvoke r0.<java.io.Writer: void <init>(java.lang.Object)>(r1);

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes> = $r3;

        virtualinvoke r2.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>();

        r0.<java.io.OutputStreamWriter: java.io.OutputStream out> = r1;

        r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder> = r2;

        return;
    }

    private void checkStatus() throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        java.nio.charset.CharsetEncoder $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.OutputStreamWriter;

        $r1 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("OutputStreamWriter is closed");

        throw $r2;

     label1:
        return;
    }

    private void convert(java.nio.CharBuffer) throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        java.nio.CharBuffer r1;
        java.nio.charset.CoderResult r2;
        java.nio.ByteBuffer $r3;
        java.nio.charset.CharsetEncoder $r4;
        boolean $z0, $z1;

        r0 := @this: java.io.OutputStreamWriter;

        r1 := @parameter0: java.nio.CharBuffer;

     label1:
        $r4 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r3 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        r2 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r1, $r3, 0);

        $z0 = virtualinvoke r2.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<java.io.OutputStreamWriter: void flushBytes(boolean)>(0);

        goto label1;

     label2:
        $z1 = virtualinvoke r2.<java.nio.charset.CoderResult: boolean isError()>();

        if $z1 == 0 goto label3;

        virtualinvoke r2.<java.nio.charset.CoderResult: void throwException()>();

     label3:
        return;
    }

    private void drainEncoder() throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        java.nio.CharBuffer r1;
        java.nio.charset.CoderResult r2, r3;
        java.nio.ByteBuffer $r4, $r6, $r8;
        java.nio.charset.CharsetEncoder $r5, $r7, $r9;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.io.OutputStreamWriter;

        r1 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(0);

     label1:
        $r5 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r4 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        r2 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r1, $r4, 1);

        $z0 = virtualinvoke r2.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label4;

        virtualinvoke r2.<java.nio.charset.CoderResult: void throwException()>();

     label2:
        $r7 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r6 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        r3 = virtualinvoke $r7.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>($r6);

     label3:
        $z2 = virtualinvoke r3.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z2 != 0 goto label6;

        $z3 = virtualinvoke r3.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z3 == 0 goto label5;

        specialinvoke r0.<java.io.OutputStreamWriter: void flushBytes(boolean)>(0);

        $r9 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r8 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        r3 = virtualinvoke $r9.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>($r8);

        goto label3;

     label4:
        $z1 = virtualinvoke r2.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<java.io.OutputStreamWriter: void flushBytes(boolean)>(0);

        goto label1;

     label5:
        virtualinvoke r3.<java.nio.charset.CoderResult: void throwException()>();

        goto label3;

     label6:
        return;
    }

    private void flushBytes(boolean) throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r12;
        int i0, $i1;
        java.nio.ByteBuffer $r3, $r5, $r7, $r10, $r11;
        java.io.OutputStream $r4, $r8;
        byte[] $r9;

        r0 := @this: java.io.OutputStreamWriter;

        z0 := @parameter0: boolean;

        r1 = r0.<java.io.OutputStreamWriter: java.lang.Object lock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<java.io.OutputStreamWriter: void checkStatus()>();

        $r3 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

     label02:
        if i0 <= 0 goto label04;

     label03:
        $r5 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r8 = r0.<java.io.OutputStreamWriter: java.io.OutputStream out>;

        $r7 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        $r9 = virtualinvoke $r7.<java.nio.ByteBuffer: byte[] array()>();

        $r10 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        $i1 = virtualinvoke $r10.<java.nio.ByteBuffer: int arrayOffset()>();

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[],int,int)>($r9, $i1, i0);

        $r11 = r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes>;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label04:
        if z0 == 0 goto label06;

     label05:
        $r4 = r0.<java.io.OutputStreamWriter: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void flush()>();

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r12 := @caughtexception;

        r2 = $r12;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    boolean checkError()
    {
        java.io.OutputStreamWriter r0;
        java.io.OutputStream $r1;
        boolean $z0;

        r0 := @this: java.io.OutputStreamWriter;

        $r1 = r0.<java.io.OutputStreamWriter: java.io.OutputStream out>;

        $z0 = virtualinvoke $r1.<java.io.OutputStream: boolean checkError()>();

        return $z0;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.nio.charset.CharsetEncoder $r3;
        java.io.OutputStream $r4;

        r0 := @this: java.io.OutputStreamWriter;

        r1 = r0.<java.io.OutputStreamWriter: java.lang.Object lock>;

        entermonitor r1;

     label1:
        $r3 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        if $r3 == null goto label2;

        specialinvoke r0.<java.io.OutputStreamWriter: void drainEncoder()>();

        specialinvoke r0.<java.io.OutputStreamWriter: void flushBytes(boolean)>(0);

        $r4 = r0.<java.io.OutputStreamWriter: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void close()>();

        r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder> = null;

        r0.<java.io.OutputStreamWriter: java.nio.ByteBuffer bytes> = null;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;

        r0 := @this: java.io.OutputStreamWriter;

        specialinvoke r0.<java.io.OutputStreamWriter: void flushBytes(boolean)>(1);

        return;
    }

    public java.lang.String getEncoding()
    {
        java.io.OutputStreamWriter r0;
        java.nio.charset.CharsetEncoder $r1, $r2;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;

        r0 := @this: java.io.OutputStreamWriter;

        $r1 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<java.io.OutputStreamWriter: java.nio.charset.CharsetEncoder encoder>;

        $r3 = virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>();

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        return $r4;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        char[] r3;
        char $c1;
        java.nio.CharBuffer $r4;

        r0 := @this: java.io.OutputStreamWriter;

        i0 := @parameter0: int;

        r1 = r0.<java.io.OutputStreamWriter: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.OutputStreamWriter: void checkStatus()>();

        r3 = newarray (char)[1];

        $c1 = (char) i0;

        r3[0] = $c1;

        $r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r3);

        specialinvoke r0.<java.io.OutputStreamWriter: void convert(java.nio.CharBuffer)>($r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r2;
        java.lang.Throwable r3, $r8;
        java.lang.StringIndexOutOfBoundsException $r4, $r7;
        java.nio.CharBuffer $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: java.io.OutputStreamWriter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<java.io.OutputStreamWriter: java.lang.Object lock>;

        entermonitor r2;

        if i1 >= 0 goto label05;

     label01:
        $r7 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String,int,int)>(r1, i0, i1);

        throw $r7;

     label02:
        $r8 := @caughtexception;

        r3 = $r8;

     label03:
        exitmonitor r2;

     label04:
        throw r3;

     label05:
        if r1 != null goto label07;

     label06:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("str == null");

        throw $r6;

     label07:
        $i2 = i0 | i1;

        if $i2 < 0 goto label09;

     label08:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = $i3 - i1;

        if i0 <= $i4 goto label10;

     label09:
        $r4 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String,int,int)>(r1, i0, i1);

        throw $r4;

     label10:
        specialinvoke r0.<java.io.OutputStreamWriter: void checkStatus()>();

        $i5 = i1 + i0;

        $r5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>(r1, i0, $i5);

        specialinvoke r0.<java.io.OutputStreamWriter: void convert(java.nio.CharBuffer)>($r5);

        exitmonitor r2;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        char[] r1;
        int i0, i1, $i2;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        java.nio.CharBuffer $r4;

        r0 := @this: java.io.OutputStreamWriter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<java.io.OutputStreamWriter: java.lang.Object lock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<java.io.OutputStreamWriter: void checkStatus()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);

        specialinvoke r0.<java.io.OutputStreamWriter: void convert(java.nio.CharBuffer)>($r4);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
