final class java.util.Timer$TimerImpl$TimerHeap extends java.lang.Object
{
    private int DEFAULT_HEAP_SIZE;
    private int deletedCancelledNumber;
    private int size;
    private java.util.TimerTask[] timers;

    private void <init>()
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int $i0;
        java.util.TimerTask[] $r1;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Timer$TimerImpl$TimerHeap: int DEFAULT_HEAP_SIZE> = 256;

        $i0 = r0.<java.util.Timer$TimerImpl$TimerHeap: int DEFAULT_HEAP_SIZE>;

        $r1 = newarray (java.util.TimerTask)[$i0];

        r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers> = $r1;

        r0.<java.util.Timer$TimerImpl$TimerHeap: int size> = 0;

        r0.<java.util.Timer$TimerImpl$TimerHeap: int deletedCancelledNumber> = 0;

        return;
    }

    void <init>(java.util.Timer$1)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        java.util.Timer$1 r1;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        r1 := @parameter0: java.util.Timer$1;

        specialinvoke r0.<java.util.Timer$TimerImpl$TimerHeap: void <init>()>();

        return;
    }

    static int access$100(java.util.Timer$TimerImpl$TimerHeap, java.util.TimerTask)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        java.util.TimerTask r1;
        int $i0;

        r0 := @parameter0: java.util.Timer$TimerImpl$TimerHeap;

        r1 := @parameter1: java.util.TimerTask;

        $i0 = specialinvoke r0.<java.util.Timer$TimerImpl$TimerHeap: int getTask(java.util.TimerTask)>(r1);

        return $i0;
    }

    static int access$200(java.util.Timer$TimerImpl$TimerHeap)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int $i0;

        r0 := @parameter0: java.util.Timer$TimerImpl$TimerHeap;

        $i0 = r0.<java.util.Timer$TimerImpl$TimerHeap: int deletedCancelledNumber>;

        return $i0;
    }

    static int access$202(java.util.Timer$TimerImpl$TimerHeap, int)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int i0;

        r0 := @parameter0: java.util.Timer$TimerImpl$TimerHeap;

        i0 := @parameter1: int;

        r0.<java.util.Timer$TimerImpl$TimerHeap: int deletedCancelledNumber> = i0;

        return i0;
    }

    private void downHeap(int)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i11, $i12;
        java.util.TimerTask r1, $r3, $r5, $r7, $r11, $r13;
        java.util.TimerTask[] $r2, $r4, $r6, $r8, $r9, $r10, $r12, $r14;
        long $l8, $l9, $l13, $l14;
        byte $b10, $b15;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        i0 := @parameter0: int;

        i1 = i0;

        $i3 = i1 * 2;

        i2 = 1 + $i3;

     label1:
        $i4 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        if i2 >= $i4 goto label3;

        $i5 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        if $i5 <= 0 goto label3;

        $i7 = i2 + 1;

        $i6 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        if $i7 >= $i6 goto label2;

        $r12 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $i11 = i2 + 1;

        $r11 = $r12[$i11];

        $l13 = $r11.<java.util.TimerTask: long when>;

        $r14 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r13 = $r14[i2];

        $l14 = $r13.<java.util.TimerTask: long when>;

        $b15 = $l13 cmp $l14;

        if $b15 >= 0 goto label2;

        i2 = i2 + 1;

     label2:
        $r2 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r3 = $r2[i1];

        $l9 = $r3.<java.util.TimerTask: long when>;

        $r4 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r5 = $r4[i2];

        $l8 = $r5.<java.util.TimerTask: long when>;

        $b10 = $l9 cmp $l8;

        if $b10 >= 0 goto label4;

     label3:
        return;

     label4:
        $r6 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        r1 = $r6[i1];

        $r10 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r8 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r7 = $r8[i2];

        $r10[i1] = $r7;

        $r9 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r9[i2] = r1;

        i1 = i2;

        $i12 = i1 * 2;

        i2 = 1 + $i12;

        goto label1;
    }

    private int getTask(java.util.TimerTask)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        java.util.TimerTask r1, $r4;
        int i0, $i1;
        java.util.TimerTask[] $r2, $r3;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        r1 := @parameter0: java.util.TimerTask;

        i0 = 0;

     label1:
        $r2 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label3;

        $r3 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r4 = $r3[i0];

        if $r4 != r1 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void upHeap()
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int i0, i1, $i2, $i3, $i7;
        java.util.TimerTask r1, $r3, $r5, $r8;
        java.util.TimerTask[] $r2, $r4, $r6, $r7, $r9, $r10;
        long $l4, $l5;
        byte $b6;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        $i2 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        i0 = -1 + $i2;

        $i3 = i0 - 1;

        i1 = $i3 / 2;

     label1:
        $r2 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r3 = $r2[i0];

        $l5 = $r3.<java.util.TimerTask: long when>;

        $r4 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r5 = $r4[i1];

        $l4 = $r5.<java.util.TimerTask: long when>;

        $b6 = $l5 cmp $l4;

        if $b6 >= 0 goto label2;

        $r6 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        r1 = $r6[i0];

        $r10 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r7 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r8 = $r7[i1];

        $r10[i0] = $r8;

        $r9 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r9[i1] = r1;

        i0 = i1;

        $i7 = i0 - 1;

        i1 = $i7 / 2;

        goto label1;

     label2:
        return;
    }

    public void adjustMinimum()
    {
        java.util.Timer$TimerImpl$TimerHeap r0;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        specialinvoke r0.<java.util.Timer$TimerImpl$TimerHeap: void downHeap(int)>(0);

        return;
    }

    public void delete(int)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int i0, i1, $i2, $i3, $i4;
        java.util.TimerTask[] r1, r2, $r4;
        java.util.TimerTask $r3;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        if i0 >= $i2 goto label1;

        r1 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        r2 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $i3 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        i1 = -1 + $i3;

        r0.<java.util.Timer$TimerImpl$TimerHeap: int size> = i1;

        $r3 = r2[i1];

        r1[i0] = $r3;

        $r4 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $i4 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        $r4[$i4] = null;

        specialinvoke r0.<java.util.Timer$TimerImpl$TimerHeap: void downHeap(int)>(i0);

     label1:
        return;
    }

    public void deleteIfCancelled()
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int i0, $i1, $i2, $i3;
        java.util.TimerTask[] $r1;
        java.util.TimerTask $r2;
        boolean $z0;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        i0 = 0;

     label1:
        $i1 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        if i0 >= $i1 goto label3;

        $r1 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r2 = $r1[i0];

        $z0 = $r2.<java.util.TimerTask: boolean cancelled>;

        if $z0 == 0 goto label2;

        $i2 = r0.<java.util.Timer$TimerImpl$TimerHeap: int deletedCancelledNumber>;

        $i3 = 1 + $i2;

        r0.<java.util.Timer$TimerImpl$TimerHeap: int deletedCancelledNumber> = $i3;

        virtualinvoke r0.<java.util.Timer$TimerImpl$TimerHeap: void delete(int)>(i0);

        i0 = i0 + -1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public void insert(java.util.TimerTask)
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        java.util.TimerTask r1;
        java.util.TimerTask[] r2, r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        r1 := @parameter0: java.util.TimerTask;

        $r4 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $i2 = lengthof $r4;

        $i1 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        if $i2 != $i1 goto label1;

        $i4 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        $i5 = 2 * $i4;

        r3 = newarray (java.util.TimerTask)[$i5];

        $r5 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $i6 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i6);

        r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers> = r3;

     label1:
        r2 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        i0 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        $i3 = i0 + 1;

        r0.<java.util.Timer$TimerImpl$TimerHeap: int size> = $i3;

        r2[i0] = r1;

        specialinvoke r0.<java.util.Timer$TimerImpl$TimerHeap: void upHeap()>();

        return;
    }

    public boolean isEmpty()
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int $i0;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        $i0 = r0.<java.util.Timer$TimerImpl$TimerHeap: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.TimerTask minimum()
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        java.util.TimerTask[] $r1;
        java.util.TimerTask $r2;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        $r1 = r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers>;

        $r2 = $r1[0];

        return $r2;
    }

    public void reset()
    {
        java.util.Timer$TimerImpl$TimerHeap r0;
        int $i0;
        java.util.TimerTask[] $r1;

        r0 := @this: java.util.Timer$TimerImpl$TimerHeap;

        $i0 = r0.<java.util.Timer$TimerImpl$TimerHeap: int DEFAULT_HEAP_SIZE>;

        $r1 = newarray (java.util.TimerTask)[$i0];

        r0.<java.util.Timer$TimerImpl$TimerHeap: java.util.TimerTask[] timers> = $r1;

        r0.<java.util.Timer$TimerImpl$TimerHeap: int size> = 0;

        return;
    }
}
