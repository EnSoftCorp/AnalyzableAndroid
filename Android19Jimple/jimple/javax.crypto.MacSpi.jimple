public abstract class javax.crypto.MacSpi extends java.lang.Object
{

    public void <init>()
    {
        javax.crypto.MacSpi r0;

        r0 := @this: javax.crypto.MacSpi;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        javax.crypto.MacSpi r0;
        java.lang.Object $r1;

        r0 := @this: javax.crypto.MacSpi;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    protected abstract byte[] engineDoFinal();

    protected abstract int engineGetMacLength();

    protected abstract void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

    protected abstract void engineReset();

    protected abstract void engineUpdate(byte);

    protected void engineUpdate(java.nio.ByteBuffer)
    {
        javax.crypto.MacSpi r0;
        java.nio.ByteBuffer r1;
        byte[] r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;

        r0 := @this: javax.crypto.MacSpi;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label2;

        r3 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i8 = i0 + i1;

        $i7 = i2 - i1;

        virtualinvoke r0.<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>(r3, $i8, $i7);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);

        return;

     label2:
        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i5 = $i3 - $i4;

        r2 = newarray (byte)[$i5];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        $i6 = lengthof r2;

        virtualinvoke r0.<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>(r2, 0, $i6);

        return;
    }

    protected abstract void engineUpdate(byte[], int, int);
}
