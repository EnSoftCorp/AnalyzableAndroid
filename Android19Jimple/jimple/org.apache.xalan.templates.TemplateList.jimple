public class org.apache.xalan.templates.TemplateList extends java.lang.Object implements java.io.Serializable
{
    static final boolean DEBUG;
    static final long serialVersionUID;
    private org.apache.xalan.templates.TemplateSubPatternAssociation m_commentPatterns;
    private org.apache.xalan.templates.TemplateSubPatternAssociation m_docPatterns;
    private java.util.Hashtable m_namedTemplates;
    private java.util.Hashtable m_patternTable;
    private org.apache.xalan.templates.TemplateSubPatternAssociation m_textPatterns;
    private org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns;

    public void <init>()
    {
        org.apache.xalan.templates.TemplateList r0;
        java.util.Hashtable $r1, $r2;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(89);

        r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>(int)>(89);

        r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable> = $r2;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns> = null;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_textPatterns> = null;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_docPatterns> = null;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_commentPatterns> = null;

        return;
    }

    static java.util.Hashtable access$100(org.apache.xalan.templates.TemplateList)
    {
        org.apache.xalan.templates.TemplateList r0;
        java.util.Hashtable $r1;

        r0 := @parameter0: org.apache.xalan.templates.TemplateList;

        $r1 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        return $r1;
    }

    static java.util.Hashtable access$200(org.apache.xalan.templates.TemplateList)
    {
        org.apache.xalan.templates.TemplateList r0;
        java.util.Hashtable $r1;

        r0 := @parameter0: org.apache.xalan.templates.TemplateList;

        $r1 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates>;

        return $r1;
    }

    private void addObjectIfNotFound(java.lang.Object, java.util.Vector)
    {
        org.apache.xalan.templates.TemplateList r0;
        java.lang.Object r1, $r3;
        java.util.Vector r2;
        int i0, i1;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.Vector;

        i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        z0 = 1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        if $r3 != r1 goto label4;

        z0 = 0;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label3:
        return;

     label4:
        i1 = i1 + 1;

        goto label1;
    }

    private void checkConflicts(org.apache.xalan.templates.TemplateSubPatternAssociation, org.apache.xpath.XPathContext, int, org.apache.xml.utils.QName)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xalan.templates.TemplateSubPatternAssociation r1;
        org.apache.xpath.XPathContext r2;
        int i0;
        org.apache.xml.utils.QName r3;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xalan.templates.TemplateSubPatternAssociation;

        r2 := @parameter1: org.apache.xpath.XPathContext;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.utils.QName;

        return;
    }

    private org.apache.xalan.templates.TemplateSubPatternAssociation getHead(java.lang.String)
    {
        org.apache.xalan.templates.TemplateList r0;
        java.lang.String r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.apache.xalan.templates.TemplateSubPatternAssociation $r4;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r3;

        return $r4;
    }

    private java.util.Hashtable getNamedTemplates()
    {
        org.apache.xalan.templates.TemplateList r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        $r1 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates>;

        return $r1;
    }

    private double getPriorityOrScore(org.apache.xalan.templates.TemplateSubPatternAssociation)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xalan.templates.TemplateSubPatternAssociation r1;
        double d0;
        org.apache.xpath.patterns.StepPattern r2;
        org.apache.xalan.templates.ElemTemplate $r3;
        byte $b0;
        boolean $z0;
        org.apache.xpath.patterns.NodeTest $r4;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xalan.templates.TemplateSubPatternAssociation;

        $r3 = virtualinvoke r1.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.ElemTemplate getTemplate()>();

        d0 = virtualinvoke $r3.<org.apache.xalan.templates.ElemTemplate: double getPriority()>();

        $b0 = d0 cmpl #-Infinity;

        if $b0 != 0 goto label1;

        r2 = virtualinvoke r1.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xpath.patterns.StepPattern getStepPattern()>();

        $z0 = r2 instanceof org.apache.xpath.patterns.NodeTest;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.xpath.patterns.NodeTest) r2;

        d0 = virtualinvoke $r4.<org.apache.xpath.patterns.NodeTest: double getDefaultScore()>();

     label1:
        return d0;
    }

    private org.apache.xalan.templates.TemplateSubPatternAssociation insertAssociationIntoList(org.apache.xalan.templates.TemplateSubPatternAssociation, org.apache.xalan.templates.TemplateSubPatternAssociation, boolean)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xalan.templates.TemplateSubPatternAssociation r1, r2, r3, r4;
        boolean z0, z1, $z2, $z3;
        double d0, d1, d2;
        int i0, i1, $i2, $i3, $i5, $i6, $i9, $i10;
        java.lang.String r5, $r6;
        byte $b4, $b7, $b8, $b11;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xalan.templates.TemplateSubPatternAssociation;

        r2 := @parameter1: org.apache.xalan.templates.TemplateSubPatternAssociation;

        z0 := @parameter2: boolean;

        d0 = specialinvoke r0.<org.apache.xalan.templates.TemplateList: double getPriorityOrScore(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r2);

        i0 = virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

        i1 = virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getDocOrderPos()>();

        r3 = r1;

     label01:
        r4 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.TemplateSubPatternAssociation getNext()>();

        if r4 != null goto label05;

     label02:
        if r4 == null goto label03;

        if r3 != r1 goto label13;

     label03:
        d2 = specialinvoke r0.<org.apache.xalan.templates.TemplateList: double getPriorityOrScore(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r3);

        $i3 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

        if i0 <= $i3 goto label08;

        z1 = 1;

     label04:
        if z0 == 0 goto label15;

        if z1 == 0 goto label14;

        virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: void setNext(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r3);

        r5 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: java.lang.String getTargetString()>();

        virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: void setTargetString(java.lang.String)>(r5);

        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void putHead(java.lang.String,org.apache.xalan.templates.TemplateSubPatternAssociation)>(r5, r2);

        return r2;

     label05:
        d1 = specialinvoke r0.<org.apache.xalan.templates.TemplateList: double getPriorityOrScore(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r4);

        $i2 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

        if i0 > $i2 goto label02;

        $i10 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

        if i0 >= $i10 goto label06;

        r3 = r4;

        goto label01;

     label06:
        $b11 = d0 cmpl d1;

        if $b11 > 0 goto label02;

        $b8 = d0 cmpg d1;

        if $b8 >= 0 goto label07;

        r3 = r4;

        goto label01;

     label07:
        $i9 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getDocOrderPos()>();

        if i1 >= $i9 goto label02;

        r3 = r4;

        goto label01;

     label08:
        $i5 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

        if i0 >= $i5 goto label09;

        z1 = 0;

        goto label04;

     label09:
        $b4 = d0 cmpl d2;

        if $b4 <= 0 goto label10;

        z1 = 1;

        goto label04;

     label10:
        $b7 = d0 cmpg d2;

        if $b7 >= 0 goto label11;

        z1 = 0;

        goto label04;

     label11:
        $i6 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getDocOrderPos()>();

        if i1 < $i6 goto label12;

        z1 = 1;

        goto label04;

     label12:
        z1 = 0;

        goto label04;

     label13:
        z1 = 0;

        goto label04;

     label14:
        virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: void setNext(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r4);

        virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: void setNext(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r2);

        return r1;

     label15:
        if z1 == 0 goto label18;

        virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: void setNext(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r3);

        $z3 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: boolean isWild()>();

        if $z3 != 0 goto label16;

        $z2 = virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: boolean isWild()>();

        if $z2 == 0 goto label17;

     label16:
        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns> = r2;

        return r2;

     label17:
        $r6 = virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: java.lang.String getTargetString()>();

        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void putHead(java.lang.String,org.apache.xalan.templates.TemplateSubPatternAssociation)>($r6, r2);

        return r2;

     label18:
        virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: void setNext(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r4);

        virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: void setNext(org.apache.xalan.templates.TemplateSubPatternAssociation)>(r2);

        return r1;
    }

    private void insertPatternInTable(org.apache.xpath.patterns.StepPattern, org.apache.xalan.templates.ElemTemplate)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xpath.patterns.StepPattern r1;
        org.apache.xalan.templates.ElemTemplate r2;
        java.lang.String r3, $r8;
        org.apache.xalan.templates.TemplateSubPatternAssociation r4, r5, $r6;
        boolean z0;
        org.apache.xpath.XPath $r7;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xpath.patterns.StepPattern;

        r2 := @parameter1: org.apache.xalan.templates.ElemTemplate;

        r3 = virtualinvoke r1.<org.apache.xpath.patterns.StepPattern: java.lang.String getTargetString()>();

        if r3 == null goto label2;

        $r6 = new org.apache.xalan.templates.TemplateSubPatternAssociation;

        $r7 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplate: org.apache.xpath.XPath getMatch()>();

        $r8 = virtualinvoke $r7.<org.apache.xpath.XPath: java.lang.String getPatternString()>();

        specialinvoke $r6.<org.apache.xalan.templates.TemplateSubPatternAssociation: void <init>(org.apache.xalan.templates.ElemTemplate,org.apache.xpath.patterns.StepPattern,java.lang.String)>(r2, r1, $r8);

        r4 = $r6;

        z0 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: boolean isWild()>();

        if z0 == 0 goto label3;

        r5 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns>;

     label1:
        if r5 != null goto label5;

        if z0 == 0 goto label4;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns> = r4;

     label2:
        return;

     label3:
        r5 = specialinvoke r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation getHead(java.lang.String)>(r3);

        goto label1;

     label4:
        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void putHead(java.lang.String,org.apache.xalan.templates.TemplateSubPatternAssociation)>(r3, r4);

        return;

     label5:
        specialinvoke r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation insertAssociationIntoList(org.apache.xalan.templates.TemplateSubPatternAssociation,org.apache.xalan.templates.TemplateSubPatternAssociation,boolean)>(r5, r4, 0);

        return;
    }

    private void putHead(java.lang.String, org.apache.xalan.templates.TemplateSubPatternAssociation)
    {
        org.apache.xalan.templates.TemplateList r0;
        java.lang.String r1;
        org.apache.xalan.templates.TemplateSubPatternAssociation r2;
        boolean $z0, $z1, $z2;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xalan.templates.TemplateSubPatternAssociation;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("#text");

        if $z0 == 0 goto label2;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_textPatterns> = r2;

     label1:
        $r3 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z1 == 0 goto label3;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_docPatterns> = r2;

        goto label1;

     label3:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("#comment");

        if $z2 == 0 goto label1;

        r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_commentPatterns> = r2;

        goto label1;
    }

    private void setNamedTemplates(java.util.Hashtable)
    {
        org.apache.xalan.templates.TemplateList r0;
        java.util.Hashtable r1;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: java.util.Hashtable;

        r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates> = r1;

        return;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        java.util.Enumeration r2;
        org.apache.xalan.templates.TemplateSubPatternAssociation r3, r4, r6, $r7, $r11;
        java.util.Hashtable $r8;
        boolean $z0;
        java.lang.Object $r9, $r10;
        java.lang.CloneNotSupportedException $r12;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        $r7 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns>;

        if $r7 == null goto label6;

        $r8 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        r2 = virtualinvoke $r8.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r9;

        r4 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns>;

     label2:
        if r4 == null goto label1;

     label3:
        $r10 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: java.lang.Object clone()>();

        $r11 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r10;

        r6 = specialinvoke r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation insertAssociationIntoList(org.apache.xalan.templates.TemplateSubPatternAssociation,org.apache.xalan.templates.TemplateSubPatternAssociation,boolean)>(r3, $r11, 1);

     label4:
        r3 = r6;

     label5:
        r4 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.TemplateSubPatternAssociation getNext()>();

        goto label2;

     label6:
        return;

     label7:
        $r12 := @caughtexception;

        goto label5;

        catch java.lang.CloneNotSupportedException from label3 to label4 with label7;
    }

    void dumpAssociationTables()
    {
        org.apache.xalan.templates.TemplateList r0;
        java.util.Enumeration r1;
        org.apache.xalan.templates.TemplateSubPatternAssociation r2, r3;
        java.util.Hashtable $r4;
        boolean $z0;
        java.io.PrintStream $r5, $r6, $r8, $r17, $r19;
        java.lang.StringBuilder $r7, $r9, $r11, $r12, $r14, $r15, $r20, $r22, $r23, $r24, $r25, $r28;
        java.lang.String $r10, $r13, $r16, $r21, $r26, $r27;
        java.lang.Object $r18;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        $r4 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        r1 = virtualinvoke $r4.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r18;

     label2:
        if r3 == null goto label3;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r21 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: java.lang.String getTargetString()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r26 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: java.lang.String getPattern()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void print(java.lang.String)>($r27);

        r3 = virtualinvoke r3.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.TemplateSubPatternAssociation getNext()>();

        goto label2;

     label3:
        $r17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("\n.....");

        goto label1;

     label4:
        r2 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns>;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>("wild card list: ");

     label5:
        if r2 == null goto label6;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: java.lang.String getTargetString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: java.lang.String getPattern()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void print(java.lang.String)>($r16);

        r2 = virtualinvoke r2.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.TemplateSubPatternAssociation getNext()>();

        goto label5;

     label6:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("\n.....");

        return;
    }

    public org.apache.xalan.templates.TemplateSubPatternAssociation getHead(org.apache.xpath.XPathContext, int, org.apache.xml.dtm.DTM)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xpath.XPathContext r1;
        int i0;
        org.apache.xml.dtm.DTM r2;
        org.apache.xalan.templates.TemplateSubPatternAssociation r3;
        short $s1;
        java.util.Hashtable $r4, $r7, $r10, $r13;
        java.lang.String $r5, $r8, $r11, $r15;
        java.lang.Object $r6, $r9, $r12, $r14;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xml.dtm.DTM;

        $s1 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i0);

        tableswitch($s1)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label8;
            case 9: goto label9;
            case 10: goto label1;
            case 11: goto label9;
            default: goto label1;
        };

     label1:
        $r4 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r5 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r6 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r6;

     label2:
        if r3 != null goto label3;

        r3 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns>;

     label3:
        return r3;

     label4:
        $r13 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r15 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i0);

        $r14 = virtualinvoke $r13.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r15);

        r3 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r14;

        goto label2;

     label5:
        r3 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_textPatterns>;

        goto label2;

     label6:
        $r10 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r11 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r12 = virtualinvoke $r10.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r11);

        r3 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r12;

        goto label2;

     label7:
        $r7 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r8 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i0);

        $r9 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r8);

        r3 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r9;

        goto label2;

     label8:
        r3 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_commentPatterns>;

        goto label2;

     label9:
        r3 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_docPatterns>;

        goto label2;
    }

    public org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xml.utils.QName)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xml.utils.QName r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.apache.xalan.templates.ElemTemplate $r4;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xml.utils.QName;

        $r2 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.xalan.templates.ElemTemplate) $r3;

        return $r4;
    }

    public org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xpath.XPathContext, int, org.apache.xml.utils.QName, int, int, boolean, org.apache.xml.dtm.DTM) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xpath.XPathContext r1;
        int i0, i1, i2, i3, $i4, $i5;
        org.apache.xml.utils.QName r2;
        boolean z0, $z1;
        org.apache.xml.dtm.DTM r3;
        org.apache.xalan.templates.TemplateSubPatternAssociation r4, r7;
        java.lang.Throwable r5, $r11;
        org.apache.xalan.templates.ElemTemplate r6;
        org.apache.xpath.patterns.StepPattern $r8;
        org.apache.xpath.objects.XNumber $r9;
        org.apache.xpath.objects.XObject $r10;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xml.utils.QName;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        r3 := @parameter6: org.apache.xml.dtm.DTM;

        r4 = virtualinvoke r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation getHead(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM)>(r1, i0, r3);

        if r4 == null goto label05;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushNamespaceContextNull()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushCurrentNodeAndExpression(int,int)>(i0, i0);

     label01:
        if i1 <= -1 goto label06;

     label02:
        $i5 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

        if $i5 <= i1 goto label06;

     label03:
        r7 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.TemplateSubPatternAssociation getNext()>();

     label04:
        r4 = r7;

        if r4 != null goto label01;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

     label05:
        return null;

     label06:
        i3 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

     label07:
        $i4 = i1 - i2;

        if i3 > $i4 goto label08;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        return null;

     label08:
        r6 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.ElemTemplate getTemplate()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void setNamespaceContext(org.apache.xml.utils.PrefixResolver)>(r6);

        $r8 = r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xpath.patterns.StepPattern m_stepPattern>;

        $r10 = virtualinvoke $r8.<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int)>(r1, i0);

        $r9 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        if $r10 == $r9 goto label03;

        $z1 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: boolean matchMode(org.apache.xml.utils.QName)>(r2);

        if $z1 == 0 goto label03;

     label09:
        if z0 == 0 goto label11;

     label10:
        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void checkConflicts(org.apache.xalan.templates.TemplateSubPatternAssociation,org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName)>(r4, r1, i0, r2);

     label11:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        return r6;

     label12:
        $r11 := @caughtexception;

        r5 = $r11;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        throw r5;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public org.apache.xalan.templates.ElemTemplate getTemplate(org.apache.xpath.XPathContext, int, org.apache.xml.utils.QName, boolean, org.apache.xml.dtm.DTM) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xpath.XPathContext r1;
        int i0;
        org.apache.xml.utils.QName r2;
        boolean z0, $z1;
        org.apache.xml.dtm.DTM r3;
        org.apache.xalan.templates.TemplateSubPatternAssociation r4, r7;
        java.lang.Throwable r5, $r11;
        org.apache.xalan.templates.ElemTemplate r6;
        org.apache.xpath.patterns.StepPattern $r8;
        org.apache.xpath.objects.XObject $r9;
        org.apache.xpath.objects.XNumber $r10;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xml.utils.QName;

        z0 := @parameter3: boolean;

        r3 := @parameter4: org.apache.xml.dtm.DTM;

        r4 = virtualinvoke r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation getHead(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM)>(r1, i0, r3);

        if r4 == null goto label7;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushNamespaceContextNull()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushCurrentNodeAndExpression(int,int)>(i0, i0);

     label1:
        r6 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.ElemTemplate getTemplate()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void setNamespaceContext(org.apache.xml.utils.PrefixResolver)>(r6);

        $r8 = r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xpath.patterns.StepPattern m_stepPattern>;

        $r9 = virtualinvoke $r8.<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int)>(r1, i0);

        $r10 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        if $r9 == $r10 goto label5;

        $z1 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: boolean matchMode(org.apache.xml.utils.QName)>(r2);

        if $z1 == 0 goto label5;

     label2:
        if z0 == 0 goto label4;

     label3:
        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void checkConflicts(org.apache.xalan.templates.TemplateSubPatternAssociation,org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName)>(r4, r1, i0, r2);

     label4:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        return r6;

     label5:
        r7 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.TemplateSubPatternAssociation getNext()>();

     label6:
        r4 = r7;

        if r4 != null goto label1;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

     label7:
        return null;

     label8:
        $r11 := @caughtexception;

        r5 = $r11;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public org.apache.xalan.templates.ElemTemplate getTemplateFast(org.apache.xpath.XPathContext, int, int, org.apache.xml.utils.QName, int, boolean, org.apache.xml.dtm.DTM) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xpath.XPathContext r1;
        int i0, i1, i2, $i4;
        org.apache.xml.utils.QName r2;
        boolean z0, $z1;
        org.apache.xml.dtm.DTM r3;
        org.apache.xalan.templates.TemplateSubPatternAssociation r4, r7;
        java.lang.Throwable r5, $r23;
        org.apache.xalan.templates.ElemTemplate r6;
        short $s3;
        java.util.Hashtable $r8, $r14, $r18, $r19;
        java.lang.String $r9, $r16, $r17, $r22;
        java.lang.Object $r10, $r15, $r20, $r21;
        org.apache.xpath.patterns.StepPattern $r11;
        org.apache.xpath.objects.XNumber $r12;
        org.apache.xpath.objects.XObject $r13;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.apache.xml.utils.QName;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        r3 := @parameter6: org.apache.xml.dtm.DTM;

        $s3 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i0);

        tableswitch($s3)
        {
            case 1: goto label03;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label01;
            case 11: goto label08;
            default: goto label01;
        };

     label01:
        $r8 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r9 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r10 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r9);

        r4 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r10;

     label02:
        if r4 != null goto label09;

        r4 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_wildCardPatterns>;

        if r4 != null goto label09;

        return null;

     label03:
        $r19 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r22 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getLocalNameFromExpandedNameID(int)>(i1);

        $r21 = virtualinvoke $r19.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r22);

        r4 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r21;

        goto label02;

     label04:
        r4 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_textPatterns>;

        goto label02;

     label05:
        $r18 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r17 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r20 = virtualinvoke $r18.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r17);

        r4 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r20;

        goto label02;

     label06:
        $r14 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_patternTable>;

        $r16 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i0);

        $r15 = virtualinvoke $r14.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r16);

        r4 = (org.apache.xalan.templates.TemplateSubPatternAssociation) $r15;

        goto label02;

     label07:
        r4 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_commentPatterns>;

        goto label02;

     label08:
        r4 = r0.<org.apache.xalan.templates.TemplateList: org.apache.xalan.templates.TemplateSubPatternAssociation m_docPatterns>;

        goto label02;

     label09:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushNamespaceContextNull()>();

     label10:
        if i2 <= -1 goto label14;

     label11:
        $i4 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: int getImportLevel()>();

        if $i4 <= i2 goto label14;

     label12:
        r7 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.TemplateSubPatternAssociation getNext()>();

     label13:
        r4 = r7;

        if r4 != null goto label10;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        return null;

     label14:
        r6 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xalan.templates.ElemTemplate getTemplate()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void setNamespaceContext(org.apache.xml.utils.PrefixResolver)>(r6);

        $r11 = r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: org.apache.xpath.patterns.StepPattern m_stepPattern>;

        $r13 = virtualinvoke $r11.<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM,int)>(r1, i0, r3, i1);

        $r12 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        if $r13 == $r12 goto label12;

        $z1 = virtualinvoke r4.<org.apache.xalan.templates.TemplateSubPatternAssociation: boolean matchMode(org.apache.xml.utils.QName)>(r2);

        if $z1 == 0 goto label12;

     label15:
        if z0 == 0 goto label17;

     label16:
        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void checkConflicts(org.apache.xalan.templates.TemplateSubPatternAssociation,org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName)>(r4, r1, i0, r2);

     label17:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        return r6;

     label18:
        $r23 := @caughtexception;

        r5 = $r23;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popNamespaceContext()>();

        throw r5;

        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    public org.apache.xalan.templates.TemplateList$TemplateWalker getWalker()
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xalan.templates.TemplateList$TemplateWalker $r1;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        $r1 = new org.apache.xalan.templates.TemplateList$TemplateWalker;

        specialinvoke $r1.<org.apache.xalan.templates.TemplateList$TemplateWalker: void <init>(org.apache.xalan.templates.TemplateList,org.apache.xalan.templates.TemplateList$1)>(r0, null);

        return $r1;
    }

    public void setTemplate(org.apache.xalan.templates.ElemTemplate)
    {
        org.apache.xalan.templates.TemplateList r0;
        org.apache.xalan.templates.ElemTemplate r1, r5;
        org.apache.xpath.XPath r2;
        org.apache.xpath.Expression r3;
        org.apache.xpath.patterns.StepPattern[] r4;
        int i0, i1, i2, i3;
        java.lang.Object[] r6, $r24;
        org.apache.xml.utils.QName $r7, $r8, $r14, $r17, $r18, $r20;
        boolean $z0, $z1;
        org.apache.xpath.patterns.UnionPattern $r9;
        org.apache.xpath.patterns.StepPattern $r10, $r12;
        java.util.Hashtable $r11, $r19, $r23;
        java.lang.Object $r13;
        org.apache.xalan.templates.StylesheetComposed $r15, $r16;

        r0 := @this: org.apache.xalan.templates.TemplateList;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplate;

        r2 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xpath.XPath getMatch()>();

        $r7 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        if $r7 != null goto label1;

        if r2 != null goto label1;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = "xsl:template";

        virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: void error(java.lang.String,java.lang.Object[])>("ER_NEED_NAME_OR_MATCH_ATTRIB", $r24);

     label1:
        $r8 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        if $r8 == null goto label2;

        $r11 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates>;

        $r14 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        $r13 = virtualinvoke $r11.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r14);

        r5 = (org.apache.xalan.templates.ElemTemplate) $r13;

        if r5 != null goto label4;

        $r23 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates>;

        $r20 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        virtualinvoke $r23.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r1);

     label2:
        if r2 == null goto label3;

        r3 = virtualinvoke r2.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $z0 = r3 instanceof org.apache.xpath.patterns.StepPattern;

        if $z0 == 0 goto label6;

        $r12 = (org.apache.xpath.patterns.StepPattern) r3;

        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void insertPatternInTable(org.apache.xpath.patterns.StepPattern,org.apache.xalan.templates.ElemTemplate)>($r12, r1);

     label3:
        return;

     label4:
        $r15 = virtualinvoke r5.<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.StylesheetComposed getStylesheetComposed()>();

        i2 = virtualinvoke $r15.<org.apache.xalan.templates.StylesheetComposed: int getImportCountComposed()>();

        $r16 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.StylesheetComposed getStylesheetComposed()>();

        i3 = virtualinvoke $r16.<org.apache.xalan.templates.StylesheetComposed: int getImportCountComposed()>();

        if i3 <= i2 goto label5;

        $r19 = r0.<org.apache.xalan.templates.TemplateList: java.util.Hashtable m_namedTemplates>;

        $r18 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        virtualinvoke $r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r1);

        goto label2;

     label5:
        if i3 != i2 goto label2;

        r6 = newarray (java.lang.Object)[1];

        $r17 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        r6[0] = $r17;

        virtualinvoke r1.<org.apache.xalan.templates.ElemTemplate: void error(java.lang.String,java.lang.Object[])>("ER_DUPLICATE_NAMED_TEMPLATE", r6);

        goto label2;

     label6:
        $z1 = r3 instanceof org.apache.xpath.patterns.UnionPattern;

        if $z1 == 0 goto label3;

        $r9 = (org.apache.xpath.patterns.UnionPattern) r3;

        r4 = virtualinvoke $r9.<org.apache.xpath.patterns.UnionPattern: org.apache.xpath.patterns.StepPattern[] getPatterns()>();

        i0 = lengthof r4;

        i1 = 0;

     label7:
        if i1 >= i0 goto label3;

        $r10 = r4[i1];

        specialinvoke r0.<org.apache.xalan.templates.TemplateList: void insertPatternInTable(org.apache.xpath.patterns.StepPattern,org.apache.xalan.templates.ElemTemplate)>($r10, r1);

        i1 = i1 + 1;

        goto label7;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.templates.TemplateList: long serialVersionUID> = 5803675288911728791L;

        <org.apache.xalan.templates.TemplateList: boolean DEBUG> = 0;

        return;
    }
}
