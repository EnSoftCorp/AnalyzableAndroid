public class java.sql.Timestamp extends java.util.Date
{
    private static final java.lang.String PADDING;
    private static final java.lang.String TIME_FORMAT_REGEX;
    private static final long serialVersionUID;
    private int nanos;

    public void <init>(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        java.sql.Timestamp r0;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.sql.Timestamp;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        specialinvoke r0.<java.util.Date: void <init>(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        if i6 < 0 goto label1;

        if i6 <= 999999999 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        r0.<java.sql.Timestamp: int nanos> = i6;

        return;
    }

    public void <init>(long)
    {
        java.sql.Timestamp r0;
        long l0;

        r0 := @this: java.sql.Timestamp;

        l0 := @parameter0: long;

        specialinvoke r0.<java.util.Date: void <init>(long)>(l0);

        specialinvoke r0.<java.sql.Timestamp: void setTimeImpl(long)>(l0);

        return;
    }

    private static java.lang.IllegalArgumentException badTimestampString(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timestamp format must be yyyy-MM-dd HH:mm:ss.fffffffff; was \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    private void format(int, int, java.lang.StringBuilder)
    {
        java.sql.Timestamp r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder r1;
        java.lang.String r2, $r4, $r5;

        r0 := @this: java.sql.Timestamp;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuilder;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = i1 - $i2;

        if $i3 <= 0 goto label1;

        $r4 = "000000000";

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = i1 - $i4;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        return;
    }

    private void setTimeImpl(long)
    {
        java.sql.Timestamp r0;
        long l0, l2, $l3, $l4;
        int i1, $i5;

        r0 := @this: java.sql.Timestamp;

        l0 := @parameter0: long;

        $l3 = l0 % 1000L;

        i1 = (int) $l3;

        $l4 = (long) i1;

        l2 = l0 - $l4;

        if i1 >= 0 goto label1;

        l2 = l2 - 1000L;

        i1 = i1 + 1000;

     label1:
        specialinvoke r0.<java.util.Date: void setTime(long)>(l2);

        $i5 = 1000000 * i1;

        virtualinvoke r0.<java.sql.Timestamp: void setNanos(int)>($i5);

        return;
    }

    public static java.sql.Timestamp valueOf(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, r1, r6, r7, $r13, $r14, $r16, $r31;
        java.text.SimpleDateFormat r2, $r11;
        java.text.ParsePosition r3, $r12;
        java.util.Date r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17;
        java.sql.Timestamp r9, $r19;
        boolean $z0;
        java.util.Locale $r10;
        char $c11, $c19;
        java.lang.StringBuilder $r15, $r17, $r18, $r21, $r22, $r24, $r25, $r26, $r27;
        long $l18;
        java.lang.IllegalArgumentException $r20, $r28, $r29, $r30, $r32, $r34, $r35, $r37;
        java.lang.NumberFormatException $r23;
        java.lang.Exception $r33, $r36;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Argument cannot be null");

        throw $r34;

     label01:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.*", r1);

        if $z0 != 0 goto label02;

        $r35 = staticinvoke <java.sql.Timestamp: java.lang.IllegalArgumentException badTimestampString(java.lang.String)>(r1);

        throw $r35;

     label02:
        $r11 = new java.text.SimpleDateFormat;

        $r10 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r11.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd HH:mm:ss", $r10);

        r2 = $r11;

        $r12 = new java.text.ParsePosition;

        specialinvoke $r12.<java.text.ParsePosition: void <init>(int)>(0);

        r3 = $r12;

     label03:
        r5 = virtualinvoke r2.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(r1, r3);

     label04:
        if r5 != null goto label06;

        $r28 = staticinvoke <java.sql.Timestamp: java.lang.IllegalArgumentException badTimestampString(java.lang.String)>(r1);

        throw $r28;

     label05:
        $r36 := @caughtexception;

        $r37 = staticinvoke <java.sql.Timestamp: java.lang.IllegalArgumentException badTimestampString(java.lang.String)>(r1);

        throw $r37;

     label06:
        i0 = virtualinvoke r3.<java.text.ParsePosition: int getIndex()>();

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i4 - i0;

        if $i6 != 0 goto label09;

        i3 = 0;

     label07:
        if i3 < 0 goto label08;

        if i3 <= 999999999 goto label16;

     label08:
        $r20 = staticinvoke <java.sql.Timestamp: java.lang.IllegalArgumentException badTimestampString(java.lang.String)>(r1);

        throw $r20;

     label09:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i7 = $i5 - i0;

        $r13 = ".n";

        $i9 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i7 >= $i9 goto label10;

        $r29 = staticinvoke <java.sql.Timestamp: java.lang.IllegalArgumentException badTimestampString(java.lang.String)>(r1);

        throw $r29;

     label10:
        $i8 = virtualinvoke r1.<java.lang.String: int length()>();

        $i10 = $i8 - i0;

        $r14 = ".nnnnnnnnn";

        $i12 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i10 <= $i12 goto label11;

        $r30 = staticinvoke <java.sql.Timestamp: java.lang.IllegalArgumentException badTimestampString(java.lang.String)>(r1);

        throw $r30;

     label11:
        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if $c11 == 46 goto label12;

        $r23 = new java.lang.NumberFormatException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad input string format: expected \'.\' not \'");

        $c19 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        $r27 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c19);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in \"");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r31 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r31);

        throw $r23;

     label12:
        $i15 = virtualinvoke r1.<java.lang.String: int length()>();

        $i13 = $i15 - i0;

        i1 = -1 + $i13;

        $i17 = i0 + 1;

        $i14 = i0 + 1;

        $i16 = i1 + $i14;

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i17, $i16);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000000000");

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(0, 9);

     label13:
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r7);

     label14:
        i3 = i2;

        goto label07;

     label15:
        $r33 := @caughtexception;

        $r32 = staticinvoke <java.sql.Timestamp: java.lang.IllegalArgumentException badTimestampString(java.lang.String)>(r1);

        throw $r32;

     label16:
        $r19 = new java.sql.Timestamp;

        $l18 = virtualinvoke r5.<java.util.Date: long getTime()>();

        specialinvoke $r19.<java.sql.Timestamp: void <init>(long)>($l18);

        r9 = $r19;

        virtualinvoke r9.<java.sql.Timestamp: void setNanos(int)>(i3);

        return r9;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public boolean after(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        long l0, l1;
        byte $b2, $b3;
        int $i4, $i5;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        l0 = virtualinvoke r0.<java.sql.Timestamp: long getTime()>();

        l1 = virtualinvoke r1.<java.sql.Timestamp: long getTime()>();

        $b2 = l0 cmp l1;

        if $b2 <= 0 goto label2;

     label1:
        return 1;

     label2:
        $b3 = l0 cmp l1;

        if $b3 >= 0 goto label3;

        return 0;

     label3:
        $i4 = virtualinvoke r0.<java.sql.Timestamp: int getNanos()>();

        $i5 = virtualinvoke r1.<java.sql.Timestamp: int getNanos()>();

        if $i4 > $i5 goto label1;

        return 0;
    }

    public boolean before(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        long l0, l1;
        byte $b2, $b3;
        int $i4, $i5;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        l0 = virtualinvoke r0.<java.sql.Timestamp: long getTime()>();

        l1 = virtualinvoke r1.<java.sql.Timestamp: long getTime()>();

        $b2 = l0 cmp l1;

        if $b2 >= 0 goto label2;

     label1:
        return 1;

     label2:
        $b3 = l0 cmp l1;

        if $b3 <= 0 goto label3;

        return 0;

     label3:
        $i4 = virtualinvoke r0.<java.sql.Timestamp: int getNanos()>();

        $i5 = virtualinvoke r1.<java.sql.Timestamp: int getNanos()>();

        if $i4 < $i5 goto label1;

        return 0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.sql.Timestamp r0;
        java.lang.Object r1;
        java.util.Date $r2;
        int $i0;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Date) r1;

        $i0 = virtualinvoke r0.<java.sql.Timestamp: int compareTo(java.util.Date)>($r2);

        return $i0;
    }

    public int compareTo(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        int i0, i1, i2;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        i0 = specialinvoke r0.<java.util.Date: int compareTo(java.util.Date)>(r1);

        if i0 != 0 goto label1;

        i1 = virtualinvoke r0.<java.sql.Timestamp: int getNanos()>();

        i2 = virtualinvoke r1.<java.sql.Timestamp: int getNanos()>();

        if i1 <= i2 goto label2;

        i0 = 1;

     label1:
        return i0;

     label2:
        if i1 != i2 goto label3;

        return 0;

     label3:
        return -1;
    }

    public int compareTo(java.util.Date) throws java.lang.ClassCastException
    {
        java.sql.Timestamp r0, $r2;
        java.util.Date r1;
        int $i0;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.util.Date;

        $r2 = (java.sql.Timestamp) r1;

        $i0 = virtualinvoke r0.<java.sql.Timestamp: int compareTo(java.sql.Timestamp)>($r2);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.sql.Timestamp r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.sql.Timestamp;

        if $z0 == 0 goto label1;

        $r2 = (java.sql.Timestamp) r1;

        $z1 = virtualinvoke r0.<java.sql.Timestamp: boolean equals(java.sql.Timestamp)>($r2);

        return $z1;

     label1:
        return 0;
    }

    public boolean equals(java.sql.Timestamp)
    {
        java.sql.Timestamp r0, r1;
        long $l0, $l1;
        byte $b2;
        int $i3, $i4;

        r0 := @this: java.sql.Timestamp;

        r1 := @parameter0: java.sql.Timestamp;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $l0 = virtualinvoke r0.<java.sql.Timestamp: long getTime()>();

        $l1 = virtualinvoke r1.<java.sql.Timestamp: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $i3 = virtualinvoke r0.<java.sql.Timestamp: int getNanos()>();

        $i4 = virtualinvoke r1.<java.sql.Timestamp: int getNanos()>();

        if $i3 != $i4 goto label1;

        return 1;
    }

    public int getNanos()
    {
        java.sql.Timestamp r0;
        int $i0;

        r0 := @this: java.sql.Timestamp;

        $i0 = r0.<java.sql.Timestamp: int nanos>;

        return $i0;
    }

    public long getTime()
    {
        java.sql.Timestamp r0;
        long $l0, $l3, $l4;
        int $i1, $i2;

        r0 := @this: java.sql.Timestamp;

        $l0 = specialinvoke r0.<java.util.Date: long getTime()>();

        $i1 = r0.<java.sql.Timestamp: int nanos>;

        $i2 = $i1 / 1000000;

        $l3 = (long) $i2;

        $l4 = $l0 + $l3;

        return $l4;
    }

    public void setNanos(int) throws java.lang.IllegalArgumentException
    {
        java.sql.Timestamp r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Timestamp;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 999999999 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value out of range");

        throw $r1;

     label2:
        r0.<java.sql.Timestamp: int nanos> = i0;

        return;
    }

    public void setTime(long)
    {
        java.sql.Timestamp r0;
        long l0;

        r0 := @this: java.sql.Timestamp;

        l0 := @parameter0: long;

        specialinvoke r0.<java.sql.Timestamp: void setTimeImpl(long)>(l0);

        return;
    }

    public java.lang.String toString()
    {
        java.sql.Timestamp r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14;
        java.lang.String $r9;
        char $c12;

        r0 := @this: java.sql.Timestamp;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(29);

        r1 = $r2;

        $i0 = virtualinvoke r0.<java.sql.Timestamp: int getYear()>();

        $i1 = 1900 + $i0;

        specialinvoke r0.<java.sql.Timestamp: void format(int,int,java.lang.StringBuilder)>($i1, 4, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i2 = virtualinvoke r0.<java.sql.Timestamp: int getMonth()>();

        $i3 = 1 + $i2;

        specialinvoke r0.<java.sql.Timestamp: void format(int,int,java.lang.StringBuilder)>($i3, 2, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i4 = virtualinvoke r0.<java.sql.Timestamp: int getDate()>();

        specialinvoke r0.<java.sql.Timestamp: void format(int,int,java.lang.StringBuilder)>($i4, 2, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i5 = virtualinvoke r0.<java.sql.Timestamp: int getHours()>();

        specialinvoke r0.<java.sql.Timestamp: void format(int,int,java.lang.StringBuilder)>($i5, 2, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i6 = virtualinvoke r0.<java.sql.Timestamp: int getMinutes()>();

        specialinvoke r0.<java.sql.Timestamp: void format(int,int,java.lang.StringBuilder)>($i6, 2, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i7 = virtualinvoke r0.<java.sql.Timestamp: int getSeconds()>();

        specialinvoke r0.<java.sql.Timestamp: void format(int,int,java.lang.StringBuilder)>($i7, 2, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i8 = r0.<java.sql.Timestamp: int nanos>;

        if $i8 != 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label1:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label2:
        $i9 = r0.<java.sql.Timestamp: int nanos>;

        specialinvoke r0.<java.sql.Timestamp: void format(int,int,java.lang.StringBuilder)>($i9, 9, r1);

     label3:
        $i11 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i10 = -1 + $i11;

        $c12 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i10);

        if $c12 != 48 goto label1;

        $i13 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i14 = -1 + $i13;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>($i14);

        goto label3;
    }

    public static void <clinit>()
    {
        <java.sql.Timestamp: long serialVersionUID> = 2745179027874758501L;

        <java.sql.Timestamp: java.lang.String TIME_FORMAT_REGEX> = "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.*";

        <java.sql.Timestamp: java.lang.String PADDING> = "000000000";

        return;
    }
}
