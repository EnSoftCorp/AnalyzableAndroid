public class java.util.concurrent.locks.ReentrantLock extends java.lang.Object implements java.util.concurrent.locks.Lock, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.locks.ReentrantLock$Sync sync;

    public void <init>()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$NonfairSync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock$NonfairSync;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock$NonfairSync: void <init>()>();

        r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync> = $r1;

        return;
    }

    public void <init>(boolean)
    {
        java.util.concurrent.locks.ReentrantLock r0;
        boolean z0;
        java.util.concurrent.locks.ReentrantLock$Sync r1;
        java.util.concurrent.locks.ReentrantLock$NonfairSync $r2;
        java.util.concurrent.locks.ReentrantLock$FairSync $r3;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label2;

        $r3 = new java.util.concurrent.locks.ReentrantLock$FairSync;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock$FairSync: void <init>()>();

        r1 = $r3;

     label1:
        r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync> = r1;

        return;

     label2:
        $r2 = new java.util.concurrent.locks.ReentrantLock$NonfairSync;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock$NonfairSync: void <init>()>();

        r1 = $r2;

        goto label1;
    }

    public int getHoldCount()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: int getHoldCount()>();

        return $i0;
    }

    protected java.lang.Thread getOwner()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        java.lang.Thread $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: java.lang.Thread getOwner()>();

        return $r2;
    }

    public final int getQueueLength()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: int getQueueLength()>();

        return $i0;
    }

    protected java.util.Collection getQueuedThreads()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: java.util.Collection getQueuedThreads()>();

        return $r2;
    }

    public int getWaitQueueLength(java.util.concurrent.locks.Condition)
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.Condition r1;
        boolean $z0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;
        java.util.concurrent.locks.ReentrantLock$Sync $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        r1 := @parameter0: java.util.concurrent.locks.Condition;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        $z0 = r1 instanceof java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not owner");

        throw $r4;

     label2:
        $r3 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $r2 = (java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) r1;

        $i0 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock$Sync: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>($r2);

        return $i0;
    }

    protected java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.Condition r1;
        boolean $z0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;
        java.util.concurrent.locks.ReentrantLock$Sync $r3;
        java.util.Collection $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        r1 := @parameter0: java.util.concurrent.locks.Condition;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        $z0 = r1 instanceof java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not owner");

        throw $r5;

     label2:
        $r3 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $r2 = (java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) r1;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock$Sync: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>($r2);

        return $r4;
    }

    public final boolean hasQueuedThread(java.lang.Thread)
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.lang.Thread r1;
        java.util.concurrent.locks.ReentrantLock$Sync $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        r1 := @parameter0: java.lang.Thread;

        $r2 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock$Sync: boolean isQueued(java.lang.Thread)>(r1);

        return $z0;
    }

    public final boolean hasQueuedThreads()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: boolean hasQueuedThreads()>();

        return $z0;
    }

    public boolean hasWaiters(java.util.concurrent.locks.Condition)
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.Condition r1;
        boolean $z0, $z1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;
        java.util.concurrent.locks.ReentrantLock$Sync $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        r1 := @parameter0: java.util.concurrent.locks.Condition;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        $z0 = r1 instanceof java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not owner");

        throw $r4;

     label2:
        $r3 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $r2 = (java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) r1;

        $z1 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock$Sync: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>($r2);

        return $z1;
    }

    public final boolean isFair()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $z0 = $r1 instanceof java.util.concurrent.locks.ReentrantLock$FairSync;

        return $z0;
    }

    public boolean isHeldByCurrentThread()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: boolean isHeldExclusively()>();

        return $z0;
    }

    public boolean isLocked()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: boolean isLocked()>();

        return $z0;
    }

    public void lock()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: void lock()>();

        return;
    }

    public void lockInterruptibly() throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: void acquireInterruptibly(int)>(1);

        return;
    }

    public java.util.concurrent.locks.Condition newCondition()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.lang.Thread r1;
        java.lang.StringBuilder r2, $r5, $r7, $r8, $r10, $r11, $r12;
        java.lang.String r3, $r6, $r9, $r13;
        java.util.concurrent.locks.ReentrantLock$Sync $r4;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r4 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        r1 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock$Sync: java.lang.Thread getOwner()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        if r1 != null goto label2;

        r3 = "[Unlocked]";

     label1:
        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Locked by thread ");

        $r9 = virtualinvoke r1.<java.lang.Thread: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    public boolean tryLock()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: boolean nonfairTryAcquire(int)>(1);

        return $z0;
    }

    public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.ReentrantLock r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock$Sync $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock$Sync: boolean tryAcquireNanos(int,long)>(1, $l1);

        return $z0;
    }

    public void unlock()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.util.concurrent.locks.ReentrantLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock$Sync: boolean release(int)>(1);

        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantLock: long serialVersionUID> = 7373984872572414699L;

        return;
    }
}
