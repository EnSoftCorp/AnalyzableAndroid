public class android.text.BoringLayout extends android.text.Layout implements android.text.TextUtils$EllipsizeCallback
{
    private static final char FIRST_RIGHT_TO_LEFT;
    private static final android.text.TextPaint sTemp;
    int mBottom;
    private int mBottomPadding;
    int mDesc;
    private java.lang.String mDirect;
    private int mEllipsizedCount;
    private int mEllipsizedStart;
    private int mEllipsizedWidth;
    private float mMax;
    private android.graphics.Paint mPaint;
    private int mTopPadding;

    static void <clinit>()
    {
        android.text.TextPaint $r0;

        <android.text.BoringLayout: char FIRST_RIGHT_TO_LEFT> = 1424;

        $r0 = new android.text.TextPaint;

        specialinvoke $r0.<android.text.TextPaint: void <init>()>();

        <android.text.BoringLayout: android.text.TextPaint sTemp> = $r0;

        return;
    }

    public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0;
        android.text.Layout$Alignment r3;
        float f0, f1;
        android.text.BoringLayout$Metrics r4;
        boolean z0;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        specialinvoke r0.<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,boolean)>(r1, r2, i0, r3, f0, f1, r4, z0, 1);

        return;
    }

    public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1, $r6, $r8;
        android.text.TextPaint r2;
        int i0, i1;
        android.text.Layout$Alignment r3;
        float f0, f1, $f2;
        android.text.BoringLayout$Metrics r4;
        boolean z0, z1;
        android.text.TextUtils$TruncateAt r5, $r7;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        r5 := @parameter8: android.text.TextUtils$TruncateAt;

        i1 := @parameter9: int;

        specialinvoke r0.<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        if r5 == null goto label1;

        $r7 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MARQUEE>;

        if r5 != $r7 goto label3;

     label1:
        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        z1 = 1;

     label2:
        $r6 = virtualinvoke r0.<android.text.BoringLayout: java.lang.CharSequence getText()>();

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,boolean)>($r6, r2, i0, r3, f0, f1, r4, z0, z1);

        return;

     label3:
        $f2 = (float) i1;

        $r8 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>(r1, r2, $f2, r5, 1, r0);

        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>($r8, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i1;

        z1 = 0;

        goto label2;
    }

    public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        android.text.TextDirectionHeuristic $r2;
        android.text.BoringLayout$Metrics $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        $r2 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r3 = staticinvoke <android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,android.text.BoringLayout$Metrics)>(r0, r1, $r2, null);

        return $r3;
    }

    public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.BoringLayout$Metrics)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        android.text.BoringLayout$Metrics r2, $r4;
        android.text.TextDirectionHeuristic $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        r2 := @parameter2: android.text.BoringLayout$Metrics;

        $r3 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r4 = staticinvoke <android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,android.text.BoringLayout$Metrics)>(r0, r1, $r3, r2);

        return $r4;
    }

    public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        android.text.TextDirectionHeuristic r2;
        android.text.BoringLayout$Metrics $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        r2 := @parameter2: android.text.TextDirectionHeuristic;

        $r3 = staticinvoke <android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,android.text.BoringLayout$Metrics)>(r0, r1, r2, null);

        return $r3;
    }

    public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic, android.text.BoringLayout$Metrics)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        android.text.TextDirectionHeuristic r2;
        android.text.BoringLayout$Metrics r3, r5, $r8;
        char[] r4;
        int i0, i1, i2, i3, i4, i5, $i7;
        boolean z0, $z1, $z2;
        android.text.TextLine r6;
        char c6;
        android.text.Layout$Directions $r7;
        float $f0, $f1;
        android.text.Spanned $r10;
        java.lang.Object[] $r11;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        r2 := @parameter2: android.text.TextDirectionHeuristic;

        r3 := @parameter3: android.text.BoringLayout$Metrics;

        r4 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        z0 = 1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label05;

        i3 = 500 + i1;

        if i3 <= i0 goto label02;

        i3 = i0;

     label02:
        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i1, i3, r4, 0);

        i4 = i3 - i1;

        i5 = 0;

     label03:
        if i5 >= i4 goto label09;

        c6 = r4[i5];

        if c6 == 10 goto label04;

        if c6 == 9 goto label04;

        if c6 < 1424 goto label08;

     label04:
        z0 = 0;

     label05:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r4);

        if z0 == 0 goto label06;

        $z1 = r0 instanceof android.text.Spanned;

        if $z1 == 0 goto label06;

        $r10 = (android.text.Spanned) r0;

        $r11 = interfaceinvoke $r10.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, i0, class "android/text/style/ParagraphStyle");

        $i7 = lengthof $r11;

        if $i7 <= 0 goto label06;

        z0 = 0;

     label06:
        if z0 == 0 goto label11;

        r5 = r3;

        if r5 != null goto label07;

        $r8 = new android.text.BoringLayout$Metrics;

        specialinvoke $r8.<android.text.BoringLayout$Metrics: void <init>()>();

        r5 = $r8;

     label07:
        r6 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r7 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        virtualinvoke r6.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>(r1, r0, 0, i0, 1, $r7, 0, null);

        $f1 = virtualinvoke r6.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(r5);

        $f0 = staticinvoke <android.util.FloatMath: float ceil(float)>($f1);

        i2 = (int) $f0;

        r5.<android.text.BoringLayout$Metrics: int width> = i2;

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r6);

        return r5;

     label08:
        i5 = i5 + 1;

        goto label03;

     label09:
        if r2 == null goto label10;

        $z2 = interfaceinvoke r2.<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>(r4, 0, i4);

        if $z2 == 0 goto label10;

        z0 = 0;

        goto label05;

     label10:
        i1 = i1 + 500;

        goto label01;

     label11:
        return null;
    }

    public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        int i0;
        android.text.Layout$Alignment r2;
        float f0, f1;
        android.text.BoringLayout$Metrics r3;
        boolean z0;
        android.text.BoringLayout $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r2 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r3 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        $r4 = new android.text.BoringLayout;

        specialinvoke $r4.<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>(r0, r1, i0, r2, f0, f1, r3, z0);

        return $r4;
    }

    public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        int i0, i1;
        android.text.Layout$Alignment r2;
        float f0, f1;
        android.text.BoringLayout$Metrics r3;
        boolean z0;
        android.text.TextUtils$TruncateAt r4;
        android.text.BoringLayout $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r2 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r3 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        r4 := @parameter8: android.text.TextUtils$TruncateAt;

        i1 := @parameter9: int;

        $r5 = new android.text.BoringLayout;

        specialinvoke $r5.<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>(r0, r1, i0, r2, f0, f1, r3, z0, r4, i1);

        return $r5;
    }

    public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int)
    {
        android.text.BoringLayout r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        android.graphics.Paint r3, $r5;
        int i0, $i1, $i2, $i3;
        java.lang.String $r4, $r6;
        float $f0;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        r3 := @parameter2: android.graphics.Paint;

        i0 := @parameter3: int;

        $r4 = r0.<android.text.BoringLayout: java.lang.String mDirect>;

        if $r4 == null goto label1;

        if r2 != null goto label1;

        $r6 = r0.<android.text.BoringLayout: java.lang.String mDirect>;

        $i2 = r0.<android.text.BoringLayout: int mBottom>;

        $i1 = r0.<android.text.BoringLayout: int mDesc>;

        $i3 = $i2 - $i1;

        $f0 = (float) $i3;

        $r5 = r0.<android.text.BoringLayout: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>($r6, 0.0F, $f0, $r5);

        return;

     label1:
        specialinvoke r0.<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>(r1, r2, r3, i0);

        return;
    }

    public void ellipsized(int, int)
    {
        android.text.BoringLayout r0;
        int i0, i1, $i2;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = i0;

        $i2 = i1 - i0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = $i2;

        return;
    }

    public int getBottomPadding()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mBottomPadding>;

        return $i0;
    }

    public int getEllipsisCount(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.BoringLayout: int mEllipsizedCount>;

        return $i1;
    }

    public int getEllipsisStart(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.BoringLayout: int mEllipsizedStart>;

        return $i1;
    }

    public int getEllipsizedWidth()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mEllipsizedWidth>;

        return $i0;
    }

    public int getHeight()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mBottom>;

        return $i0;
    }

    public boolean getLineContainsTab(int)
    {
        android.text.BoringLayout r0;
        int i0;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        return 0;
    }

    public int getLineCount()
    {
        android.text.BoringLayout r0;

        r0 := @this: android.text.BoringLayout;

        return 1;
    }

    public int getLineDescent(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.BoringLayout: int mDesc>;

        return $i1;
    }

    public final android.text.Layout$Directions getLineDirections(int)
    {
        android.text.BoringLayout r0;
        int i0;
        android.text.Layout$Directions $r1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $r1 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        return $r1;
    }

    public float getLineMax(int)
    {
        android.text.BoringLayout r0;
        int i0;
        float $f0;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $f0 = r0.<android.text.BoringLayout: float mMax>;

        return $f0;
    }

    public int getLineStart(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;
        java.lang.CharSequence $r1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<android.text.BoringLayout: java.lang.CharSequence getText()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        return $i1;
    }

    public int getLineTop(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<android.text.BoringLayout: int mBottom>;

        return $i1;
    }

    public int getParagraphDirection(int)
    {
        android.text.BoringLayout r0;
        int i0;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        return 1;
    }

    public int getTopPadding()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mTopPadding>;

        return $i0;
    }

    void init(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, boolean)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        android.text.Layout$Alignment r3, $r8;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.text.BoringLayout$Metrics r4;
        boolean z0, z1, $z2;
        android.text.TextLine r5;
        byte $b4, $b20;
        android.text.Layout$Directions $r6;
        java.lang.String $r9;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        z1 := @parameter8: boolean;

        $z2 = r1 instanceof java.lang.String;

        if $z2 == 0 goto label08;

        $r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r3 != $r8 goto label08;

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r0.<android.text.BoringLayout: java.lang.String mDirect> = $r9;

     label01:
        r0.<android.text.BoringLayout: android.graphics.Paint mPaint> = r2;

        if z0 == 0 goto label09;

        $i18 = r4.<android.text.BoringLayout$Metrics: int bottom>;

        $i17 = r4.<android.text.BoringLayout$Metrics: int top>;

        i1 = $i18 - $i17;

     label02:
        $b4 = f0 cmpl 1.0F;

        if $b4 != 0 goto label03;

        $b20 = f1 cmpl 0.0F;

        if $b20 == 0 goto label04;

     label03:
        $f3 = (float) i1;

        $f2 = f0 * $f3;

        $f5 = f1 + $f2;

        $f4 = 0.5F + $f5;

        i1 = (int) $f4;

     label04:
        r0.<android.text.BoringLayout: int mBottom> = i1;

        if z0 == 0 goto label10;

        $i14 = r4.<android.text.BoringLayout$Metrics: int top>;

        $i19 = i1 + $i14;

        r0.<android.text.BoringLayout: int mDesc> = $i19;

     label05:
        if z1 == 0 goto label11;

        $i16 = r4.<android.text.BoringLayout$Metrics: int width>;

        $f9 = (float) $i16;

        r0.<android.text.BoringLayout: float mMax> = $f9;

     label06:
        if z0 == 0 goto label07;

        $i12 = r4.<android.text.BoringLayout$Metrics: int top>;

        $i9 = r4.<android.text.BoringLayout$Metrics: int ascent>;

        $i13 = $i12 - $i9;

        r0.<android.text.BoringLayout: int mTopPadding> = $i13;

        $i11 = r4.<android.text.BoringLayout$Metrics: int bottom>;

        $i10 = r4.<android.text.BoringLayout$Metrics: int descent>;

        $i15 = $i11 - $i10;

        r0.<android.text.BoringLayout: int mBottomPadding> = $i15;

     label07:
        return;

     label08:
        r0.<android.text.BoringLayout: java.lang.String mDirect> = null;

        goto label01;

     label09:
        $i3 = r4.<android.text.BoringLayout$Metrics: int descent>;

        $i2 = r4.<android.text.BoringLayout$Metrics: int ascent>;

        i1 = $i3 - $i2;

        goto label02;

     label10:
        $i6 = r4.<android.text.BoringLayout$Metrics: int ascent>;

        $i5 = i1 + $i6;

        r0.<android.text.BoringLayout: int mDesc> = $i5;

        goto label05;

     label11:
        r5 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $i7 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r6 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        virtualinvoke r5.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>(r2, r1, 0, $i7, 1, $r6, 0, null);

        $f7 = virtualinvoke r5.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

        $f6 = staticinvoke <android.util.FloatMath: float ceil(float)>($f7);

        $i8 = (int) $f6;

        $f8 = (float) $i8;

        r0.<android.text.BoringLayout: float mMax> = $f8;

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r5);

        goto label06;
    }

    public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0;
        android.text.Layout$Alignment r3;
        float f0, f1;
        android.text.BoringLayout$Metrics r4;
        boolean z0;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,boolean)>(r1, r2, i0, r3, f0, f1, r4, z0, 1);

        return r0;
    }

    public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1, $r6, $r8;
        android.text.TextPaint r2;
        int i0, i1;
        android.text.Layout$Alignment r3;
        float f0, f1, $f2;
        android.text.BoringLayout$Metrics r4;
        boolean z0, z1;
        android.text.TextUtils$TruncateAt r5, $r7;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        r5 := @parameter8: android.text.TextUtils$TruncateAt;

        i1 := @parameter9: int;

        if r5 == null goto label1;

        $r7 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MARQUEE>;

        if r5 != $r7 goto label3;

     label1:
        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        z1 = 1;

     label2:
        $r6 = virtualinvoke r0.<android.text.BoringLayout: java.lang.CharSequence getText()>();

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,boolean)>($r6, r2, i0, r3, f0, f1, r4, z0, z1);

        return r0;

     label3:
        $f2 = (float) i1;

        $r8 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>(r1, r2, $f2, r5, 1, r0);

        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>($r8, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i1;

        z1 = 0;

        goto label2;
    }
}
