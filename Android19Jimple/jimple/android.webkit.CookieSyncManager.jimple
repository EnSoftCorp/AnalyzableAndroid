public final class android.webkit.CookieSyncManager extends android.webkit.WebSyncManager
{
    private static boolean sGetInstanceAllowed;
    private static android.webkit.CookieSyncManager sRef;

    static void <clinit>()
    {
        <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed> = 0;

        return;
    }

    private void <init>()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void <init>(java.lang.String)>("CookieSyncManager");

        return;
    }

    private static void checkInstanceIsAllowed()
    {
        boolean $z0;
        java.lang.IllegalStateException $r0;

        $z0 = <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed>;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CookieSyncManager::createInstance() needs to be called before CookieSyncManager::getInstance()");

        throw $r0;

     label1:
        return;
    }

    public static android.webkit.CookieSyncManager createInstance(android.content.Context)
    {
        android.content.Context r0;
        android.webkit.CookieSyncManager r1;
        java.lang.Throwable r2, $r4;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: android.content.Context;

        entermonitor class "android/webkit/CookieSyncManager";

        if r0 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid context argument");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor class "android/webkit/CookieSyncManager";

        throw r2;

     label3:
        staticinvoke <android.webkit.CookieSyncManager: void setGetInstanceIsAllowed()>();

        r1 = staticinvoke <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>();

     label4:
        exitmonitor class "android/webkit/CookieSyncManager";

        return r1;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public static android.webkit.CookieSyncManager getInstance()
    {
        java.lang.Throwable r0, $r4;
        android.webkit.CookieSyncManager r1, $r2, $r3;

        entermonitor class "android/webkit/CookieSyncManager";

     label1:
        staticinvoke <android.webkit.CookieSyncManager: void checkInstanceIsAllowed()>();

        $r2 = <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef>;

        if $r2 != null goto label2;

        $r3 = new android.webkit.CookieSyncManager;

        specialinvoke $r3.<android.webkit.CookieSyncManager: void <init>()>();

        <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef> = $r3;

     label2:
        r1 = <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef>;

     label3:
        exitmonitor class "android/webkit/CookieSyncManager";

        return r1;

     label4:
        $r4 := @caughtexception;

        r0 = $r4;

        exitmonitor class "android/webkit/CookieSyncManager";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    static void setGetInstanceIsAllowed()
    {
        <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed> = 1;

        return;
    }

    public volatile void resetSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void resetSync()>();

        return;
    }

    public volatile void run()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void run()>();

        return;
    }

    public volatile void startSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void startSync()>();

        return;
    }

    public volatile void stopSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void stopSync()>();

        return;
    }

    public volatile void sync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void sync()>();

        return;
    }

    protected void syncFromRamToFlash()
    {
        android.webkit.CookieSyncManager r0;
        android.webkit.CookieManager r1;
        boolean $z0;

        r0 := @this: android.webkit.CookieSyncManager;

        r1 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        $z0 = virtualinvoke r1.<android.webkit.CookieManager: boolean acceptCookie()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<android.webkit.CookieManager: void flushCookieStore()>();

        return;
    }
}
