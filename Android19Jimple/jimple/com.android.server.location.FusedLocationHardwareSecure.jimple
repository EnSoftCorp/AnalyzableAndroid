public class com.android.server.location.FusedLocationHardwareSecure extends android.hardware.location.IFusedLocationHardware$Stub
{
    private final android.content.Context mContext;
    private final android.hardware.location.IFusedLocationHardware mLocationHardware;
    private final java.lang.String mPermissionId;

    public void <init>(android.hardware.location.IFusedLocationHardware, android.content.Context, java.lang.String)
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        android.hardware.location.IFusedLocationHardware r1;
        android.content.Context r2;
        java.lang.String r3;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        r1 := @parameter0: android.hardware.location.IFusedLocationHardware;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.hardware.location.IFusedLocationHardware$Stub: void <init>()>();

        r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware> = r1;

        r0.<com.android.server.location.FusedLocationHardwareSecure: android.content.Context mContext> = r2;

        r0.<com.android.server.location.FusedLocationHardwareSecure: java.lang.String mPermissionId> = r3;

        return;
    }

    private void checkPermissions()
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        android.content.Context r1;
        java.lang.String r2, $r4, $r5;
        java.lang.Object[] r3;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        r1 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.content.Context mContext>;

        r2 = r0.<com.android.server.location.FusedLocationHardwareSecure: java.lang.String mPermissionId>;

        r3 = newarray (java.lang.Object)[1];

        $r4 = r0.<com.android.server.location.FusedLocationHardwareSecure: java.lang.String mPermissionId>;

        r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission \'%s\' not granted to access FusedLocationHardware", r3);

        virtualinvoke r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>(r2, $r5);

        return;
    }

    public int getSupportedBatchSize() throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        android.hardware.location.IFusedLocationHardware $r1;
        int $i0;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r1 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $i0 = interfaceinvoke $r1.<android.hardware.location.IFusedLocationHardware: int getSupportedBatchSize()>();

        return $i0;
    }

    public void injectDeviceContext(int) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        int i0;
        android.hardware.location.IFusedLocationHardware $r1;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r1 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r1.<android.hardware.location.IFusedLocationHardware: void injectDeviceContext(int)>(i0);

        return;
    }

    public void injectDiagnosticData(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        java.lang.String r1;
        android.hardware.location.IFusedLocationHardware $r2;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r2 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void injectDiagnosticData(java.lang.String)>(r1);

        return;
    }

    public void registerSink(android.hardware.location.IFusedLocationHardwareSink) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        android.hardware.location.IFusedLocationHardwareSink r1;
        android.hardware.location.IFusedLocationHardware $r2;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        r1 := @parameter0: android.hardware.location.IFusedLocationHardwareSink;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r2 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void registerSink(android.hardware.location.IFusedLocationHardwareSink)>(r1);

        return;
    }

    public void requestBatchOfLocations(int) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        int i0;
        android.hardware.location.IFusedLocationHardware $r1;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r1 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r1.<android.hardware.location.IFusedLocationHardware: void requestBatchOfLocations(int)>(i0);

        return;
    }

    public void startBatching(int, android.location.FusedBatchOptions) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        int i0;
        android.location.FusedBatchOptions r1;
        android.hardware.location.IFusedLocationHardware $r2;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        i0 := @parameter0: int;

        r1 := @parameter1: android.location.FusedBatchOptions;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r2 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void startBatching(int,android.location.FusedBatchOptions)>(i0, r1);

        return;
    }

    public void stopBatching(int) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        int i0;
        android.hardware.location.IFusedLocationHardware $r1;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r1 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r1.<android.hardware.location.IFusedLocationHardware: void stopBatching(int)>(i0);

        return;
    }

    public boolean supportsDeviceContextInjection() throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        android.hardware.location.IFusedLocationHardware $r1;
        boolean $z0;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r1 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $z0 = interfaceinvoke $r1.<android.hardware.location.IFusedLocationHardware: boolean supportsDeviceContextInjection()>();

        return $z0;
    }

    public boolean supportsDiagnosticDataInjection() throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        android.hardware.location.IFusedLocationHardware $r1;
        boolean $z0;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r1 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $z0 = interfaceinvoke $r1.<android.hardware.location.IFusedLocationHardware: boolean supportsDiagnosticDataInjection()>();

        return $z0;
    }

    public void unregisterSink(android.hardware.location.IFusedLocationHardwareSink) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        android.hardware.location.IFusedLocationHardwareSink r1;
        android.hardware.location.IFusedLocationHardware $r2;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        r1 := @parameter0: android.hardware.location.IFusedLocationHardwareSink;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r2 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void unregisterSink(android.hardware.location.IFusedLocationHardwareSink)>(r1);

        return;
    }

    public void updateBatchingOptions(int, android.location.FusedBatchOptions) throws android.os.RemoteException
    {
        com.android.server.location.FusedLocationHardwareSecure r0;
        int i0;
        android.location.FusedBatchOptions r1;
        android.hardware.location.IFusedLocationHardware $r2;

        r0 := @this: com.android.server.location.FusedLocationHardwareSecure;

        i0 := @parameter0: int;

        r1 := @parameter1: android.location.FusedBatchOptions;

        specialinvoke r0.<com.android.server.location.FusedLocationHardwareSecure: void checkPermissions()>();

        $r2 = r0.<com.android.server.location.FusedLocationHardwareSecure: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void updateBatchingOptions(int,android.location.FusedBatchOptions)>(i0, r1);

        return;
    }
}
