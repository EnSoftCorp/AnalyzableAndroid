class java.nio.SocketChannelImpl$SocketChannelOutputStream extends java.io.OutputStream
{
    private final java.nio.channels.SocketChannel channel;

    public void <init>(java.nio.channels.SocketChannel)
    {
        java.nio.SocketChannelImpl$SocketChannelOutputStream r0;
        java.nio.channels.SocketChannel r1;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelOutputStream;

        r1 := @parameter0: java.nio.channels.SocketChannel;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<java.nio.SocketChannelImpl$SocketChannelOutputStream: java.nio.channels.SocketChannel channel> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketChannelOutputStream r0;
        java.nio.channels.SocketChannel $r1;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelOutputStream;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketChannelOutputStream: java.nio.channels.SocketChannel channel>;

        virtualinvoke $r1.<java.nio.channels.SocketChannel: void close()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketChannelOutputStream r0;
        int i0, $i1;
        java.nio.ByteBuffer r1;
        java.nio.channels.SocketChannel $r2, $r4;
        boolean $z0;
        byte $b2;
        java.nio.channels.IllegalBlockingModeException $r5;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelOutputStream;

        i0 := @parameter0: int;

        $r2 = r0.<java.nio.SocketChannelImpl$SocketChannelOutputStream: java.nio.channels.SocketChannel channel>;

        $z0 = virtualinvoke $r2.<java.nio.channels.SocketChannel: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r5 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r5.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r5;

     label1:
        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1);

        $i1 = i0 & 255;

        $b2 = (byte) $i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(0, $b2);

        $r4 = r0.<java.nio.SocketChannelImpl$SocketChannelOutputStream: java.nio.channels.SocketChannel channel>;

        virtualinvoke $r4.<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>(r1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketChannelOutputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.nio.ByteBuffer r2;
        java.nio.channels.SocketChannel $r3, $r4;
        boolean $z0;
        java.nio.channels.IllegalBlockingModeException $r5;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, i0, i1);

        $r3 = r0.<java.nio.SocketChannelImpl$SocketChannelOutputStream: java.nio.channels.SocketChannel channel>;

        $z0 = virtualinvoke $r3.<java.nio.channels.SocketChannel: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r5 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r5.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r5;

     label1:
        $r4 = r0.<java.nio.SocketChannelImpl$SocketChannelOutputStream: java.nio.channels.SocketChannel channel>;

        virtualinvoke $r4.<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>(r2);

        return;
    }
}
