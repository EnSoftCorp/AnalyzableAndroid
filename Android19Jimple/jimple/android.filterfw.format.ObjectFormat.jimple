public class android.filterfw.format.ObjectFormat extends java.lang.Object
{

    public void <init>()
    {
        android.filterfw.format.ObjectFormat r0;

        r0 := @this: android.filterfw.format.ObjectFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int bytesPerSampleForClass(java.lang.Class, int)
    {
        java.lang.Class r0, $r2;
        int i0, i1;
        boolean $z0;
        java.lang.Object $r3;
        android.filterfw.core.NativeBuffer $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r12, $r14, $r15, $r16, $r17;
        java.lang.String $r10, $r18;
        java.lang.Exception $r11;
        java.lang.RuntimeException $r13;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        if i0 != 2 goto label4;

        $r2 = class "android/filterfw/core/NativeBuffer";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Native object-based formats must be of a NativeBuffer subclass! (Received class: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (android.filterfw.core.NativeBuffer) $r3;

        i1 = virtualinvoke $r4.<android.filterfw.core.NativeBuffer: int getElementSize()>();

     label2:
        return i1;

     label3:
        $r11 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not determine the size of an element in a native object-based frame of type ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("! Perhaps it is missing a ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("default constructor?");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label4:
        return 1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class, int)
    {
        java.lang.Class r0;
        int i0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)>(r0, 0, i0);

        return $r1;
    }

    public static android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class, int, int)
    {
        java.lang.Class r0, $r3;
        int i0, i1, $i2;
        android.filterfw.core.MutableFrameFormat r1, $r2;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r2.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(8, i1);

        r1 = $r2;

        $r3 = staticinvoke <android.filterfw.format.ObjectFormat: java.lang.Class getBoxedClass(java.lang.Class)>(r0);

        virtualinvoke r1.<android.filterfw.core.MutableFrameFormat: void setObjectClass(java.lang.Class)>($r3);

        if i0 == 0 goto label1;

        virtualinvoke r1.<android.filterfw.core.MutableFrameFormat: void setDimensions(int)>(i0);

     label1:
        $i2 = staticinvoke <android.filterfw.format.ObjectFormat: int bytesPerSampleForClass(java.lang.Class,int)>(r0, i1);

        virtualinvoke r1.<android.filterfw.core.MutableFrameFormat: void setBytesPerSample(int)>($i2);

        return r1;
    }

    public static android.filterfw.core.MutableFrameFormat fromObject(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0;
        java.lang.Class $r1;
        android.filterfw.core.MutableFrameFormat $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r3.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(8, i0);

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)>($r1, 0, i0);

        return $r2;
    }

    public static android.filterfw.core.MutableFrameFormat fromObject(java.lang.Object, int, int)
    {
        java.lang.Object r0;
        int i0, i1;
        java.lang.Class $r1;
        android.filterfw.core.MutableFrameFormat $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r3 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r3.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(8, i1);

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)>($r1, i0, i1);

        return $r2;
    }

    private static java.lang.Class getBoxedClass(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;
        java.lang.String $r12, $r15;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r1 goto label2;

        r0 = class "java/lang/Boolean";

     label1:
        return r0;

     label2:
        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r2 goto label3;

        return class "java/lang/Byte";

     label3:
        $r3 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r3 goto label4;

        return class "java/lang/Character";

     label4:
        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r4 goto label5;

        return class "java/lang/Short";

     label5:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r5 goto label6;

        return class "java/lang/Integer";

     label6:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r6 goto label7;

        return class "java/lang/Long";

     label7:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r7 goto label8;

        return class "java/lang/Float";

     label8:
        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r8 goto label9;

        return class "java/lang/Double";

     label9:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown primitive type: ");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;
    }
}
