public final class com.android.okhttp.internal.http.Dispatcher extends java.lang.Object
{
    private final java.util.Map enqueuedJobs;
    private final java.util.concurrent.ThreadPoolExecutor executorService;

    public void <init>()
    {
        com.android.okhttp.internal.http.Dispatcher r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.util.concurrent.TimeUnit $r3;
        java.util.LinkedHashMap $r4;

        r0 := @this: com.android.okhttp.internal.http.Dispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(8, 8, 60L, $r3, $r2);

        r0.<com.android.okhttp.internal.http.Dispatcher: java.util.concurrent.ThreadPoolExecutor executorService> = $r1;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.android.okhttp.internal.http.Dispatcher: java.util.Map enqueuedJobs> = $r4;

        return;
    }

    public void cancel(java.lang.Object)
    {
        com.android.okhttp.internal.http.Dispatcher r0;
        java.lang.Object r1, $r7, $r8;
        java.lang.Throwable r2, $r10;
        java.util.List r3;
        java.util.Iterator r4;
        com.android.okhttp.internal.http.Job r5;
        java.util.Map $r6;
        boolean $z0;
        java.util.concurrent.ThreadPoolExecutor $r9;

        r0 := @this: com.android.okhttp.internal.http.Dispatcher;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $r6 = r0.<com.android.okhttp.internal.http.Dispatcher: java.util.Map enqueuedJobs>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.util.List) $r7;

     label2:
        if r3 != null goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.okhttp.internal.http.Job) $r8;

        $r9 = r0.<com.android.okhttp.internal.http.Dispatcher: java.util.concurrent.ThreadPoolExecutor executorService>;

        virtualinvoke $r9.<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>(r5);

     label6:
        goto label5;

     label7:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void enqueue(java.net.HttpURLConnection, com.android.okhttp.Request, com.android.okhttp.Response$Receiver)
    {
        com.android.okhttp.internal.http.Dispatcher r0;
        java.net.HttpURLConnection r1;
        com.android.okhttp.Request r2;
        com.android.okhttp.Response$Receiver r3;
        com.android.okhttp.internal.http.Job r4, $r7;
        java.lang.Throwable r5, $r15;
        java.util.List r6;
        java.util.Map $r8, $r14;
        java.lang.Object $r9, $r10, $r13;
        java.util.concurrent.ThreadPoolExecutor $r11;
        java.util.ArrayList $r12;

        r0 := @this: com.android.okhttp.internal.http.Dispatcher;

        r1 := @parameter0: java.net.HttpURLConnection;

        r2 := @parameter1: com.android.okhttp.Request;

        r3 := @parameter2: com.android.okhttp.Response$Receiver;

        entermonitor r0;

     label1:
        $r7 = new com.android.okhttp.internal.http.Job;

        specialinvoke $r7.<com.android.okhttp.internal.http.Job: void <init>(com.android.okhttp.internal.http.Dispatcher,java.net.HttpURLConnection,com.android.okhttp.Request,com.android.okhttp.Response$Receiver)>(r0, r1, r2, r3);

        r4 = $r7;

        $r8 = r0.<com.android.okhttp.internal.http.Dispatcher: java.util.Map enqueuedJobs>;

        $r9 = virtualinvoke r2.<com.android.okhttp.Request: java.lang.Object tag()>();

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r6 = (java.util.List) $r10;

     label2:
        if r6 != null goto label4;

     label3:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(2);

        r6 = $r12;

        $r14 = r0.<com.android.okhttp.internal.http.Dispatcher: java.util.Map enqueuedJobs>;

        $r13 = virtualinvoke r2.<com.android.okhttp.Request: java.lang.Object tag()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r6);

     label4:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r11 = r0.<com.android.okhttp.internal.http.Dispatcher: java.util.concurrent.ThreadPoolExecutor executorService>;

        virtualinvoke $r11.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>(r4);

     label5:
        exitmonitor r0;

        return;

     label6:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r0;

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void finished(com.android.okhttp.internal.http.Job)
    {
        com.android.okhttp.internal.http.Dispatcher r0;
        com.android.okhttp.internal.http.Job r1;
        java.lang.Throwable r2, $r8;
        java.util.List r3;
        com.android.okhttp.Request $r4;
        java.util.Map $r5;
        java.lang.Object $r6, $r7;

        r0 := @this: com.android.okhttp.internal.http.Dispatcher;

        r1 := @parameter0: com.android.okhttp.internal.http.Job;

        entermonitor r0;

     label1:
        $r5 = r0.<com.android.okhttp.internal.http.Dispatcher: java.util.Map enqueuedJobs>;

        $r4 = r1.<com.android.okhttp.internal.http.Job: com.android.okhttp.Request request>;

        $r6 = virtualinvoke $r4.<com.android.okhttp.Request: java.lang.Object tag()>();

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r3 = (java.util.List) $r7;

     label2:
        if r3 == null goto label4;

     label3:
        interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
