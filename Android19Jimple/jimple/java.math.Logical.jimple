class java.math.Logical extends java.lang.Object
{

    private void <init>()
    {
        java.math.Logical r0;

        r0 := @this: java.math.Logical;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.math.BigInteger and(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 == 0 goto label1;

        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label3;

     label1:
        r0 = <java.math.BigInteger: java.math.BigInteger ZERO>;

     label2:
        return r0;

     label3:
        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        return r1;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label6;

        $i6 = r1.<java.math.BigInteger: int sign>;

        if $i6 <= 0 goto label5;

        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger andPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r7;

     label5:
        $r8 = staticinvoke <java.math.Logical: java.math.BigInteger andDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r8;

     label6:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label7;

        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger andDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r6;

     label7:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        $i4 = r1.<java.math.BigInteger: int numberLength>;

        if $i5 <= $i4 goto label8;

        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger andNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r5;

     label8:
        $r4 = staticinvoke <java.math.Logical: java.math.BigInteger andNegative(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r4;
    }

    static java.math.BigInteger andDiffSigns(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r9;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        int[] r2, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = r0.<java.math.BigInteger: int numberLength>;

        if i1 < $i5 goto label1;

        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r9;

     label1:
        i2 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i2];

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        if i3 != i1 goto label2;

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i15 = $r7[i3];

        $i18 = neg $i15;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i16 = $r8[i3];

        $i17 = $i18 & $i16;

        r2[i3] = $i17;

        i3 = i3 + 1;

     label2:
        $i7 = r1.<java.math.BigInteger: int numberLength>;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

     label3:
        if i3 >= i4 goto label4;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i11 = $r5[i3];

        $i14 = -1 ^ $i11;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i12 = $r6[i3];

        $i13 = $i14 & $i12;

        r2[i3] = $i13;

        i3 = i3 + 1;

        goto label3;

     label4:
        $i8 = r1.<java.math.BigInteger: int numberLength>;

        if i3 < $i8 goto label6;

     label5:
        $i9 = r0.<java.math.BigInteger: int numberLength>;

        if i3 >= $i9 goto label6;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i10 = $r4[i3];

        r2[i3] = $i10;

        i3 = i3 + 1;

        goto label5;

     label6:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i2, r2);

        return $r3;
    }

    static java.math.BigInteger andNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r7, $r11;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        int[] r2, r3, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        if i0 < $i7 goto label01;

        return r0;

     label01:
        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i0);

        if i1 <= i0 goto label04;

        $r16 = r1.<java.math.BigInteger: int[] digits>;

        $i29 = $r16[i2];

        $i32 = neg $i29;

        $r17 = r0.<java.math.BigInteger: int[] digits>;

        $i34 = $r17[i2];

        $i33 = -1 ^ $i34;

        i3 = $i32 & $i33;

     label02:
        if i3 != 0 goto label09;

        i2 = i2 + 1;

     label03:
        $i21 = r1.<java.math.BigInteger: int numberLength>;

        if i2 >= $i21 goto label06;

        $r10 = r0.<java.math.BigInteger: int[] digits>;

        $i24 = $r10[i2];

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i26 = $r13[i2];

        $i25 = $i24 | $i26;

        i3 = -1 ^ $i25;

        if i3 != 0 goto label06;

        i2 = i2 + 1;

        goto label03;

     label04:
        if i1 >= i0 goto label05;

        $r15 = r1.<java.math.BigInteger: int[] digits>;

        $i28 = $r15[i2];

        $i30 = -1 ^ $i28;

        $r14 = r0.<java.math.BigInteger: int[] digits>;

        $i27 = $r14[i2];

        $i31 = neg $i27;

        i3 = $i30 & $i31;

        goto label02;

     label05:
        $r4 = r1.<java.math.BigInteger: int[] digits>;

        $i8 = $r4[i2];

        $i12 = neg $i8;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i10 = $r5[i2];

        $i9 = neg $i10;

        i3 = $i12 & $i9;

        goto label02;

     label06:
        if i3 != 0 goto label09;

     label07:
        $i22 = r0.<java.math.BigInteger: int numberLength>;

        if i2 >= $i22 goto label08;

        $r12 = r0.<java.math.BigInteger: int[] digits>;

        $i23 = $r12[i2];

        i3 = -1 ^ $i23;

        if i3 != 0 goto label08;

        i2 = i2 + 1;

        goto label07;

     label08:
        if i3 != 0 goto label09;

        $i19 = r0.<java.math.BigInteger: int numberLength>;

        i6 = 1 + $i19;

        r3 = newarray (int)[i6];

        $i20 = i6 - 1;

        r3[$i20] = 1;

        $r11 = new java.math.BigInteger;

        specialinvoke $r11.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i6, r3);

        return $r11;

     label09:
        i4 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i4];

        $i11 = neg i3;

        r2[i2] = $i11;

        i5 = i2 + 1;

     label10:
        $i14 = r1.<java.math.BigInteger: int numberLength>;

        if i5 >= $i14 goto label11;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i18 = $r8[i5];

        $r9 = r1.<java.math.BigInteger: int[] digits>;

        $i16 = $r9[i5];

        $i17 = $i18 | $i16;

        r2[i5] = $i17;

        i5 = i5 + 1;

        goto label10;

     label11:
        $i13 = r0.<java.math.BigInteger: int numberLength>;

        if i5 >= $i13 goto label12;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i15 = $r6[i5];

        r2[i5] = $i15;

        i5 = i5 + 1;

        goto label11;

     label12:
        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i4, r2);

        return $r7;
    }

    static java.math.BigInteger andNot(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label2;

        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r9;

     label2:
        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger not()>();

        return $r10;

     label3:
        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r8;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label6;

        $i4 = r1.<java.math.BigInteger: int sign>;

        if $i4 <= 0 goto label5;

        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger andNotPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r7;

     label5:
        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger andNotPositiveNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r6;

     label6:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label7;

        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger andNotNegativePositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r5;

     label7:
        $r4 = staticinvoke <java.math.Logical: java.math.BigInteger andNotNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r4;
    }

    static java.math.BigInteger andNotNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6, $r16;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37;
        int[] r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        if i0 < $i7 goto label01;

        $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r16;

     label01:
        i2 = r1.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i2];

        i3 = i0;

        if i0 >= i1 goto label09;

        $r11 = r0.<java.math.BigInteger: int[] digits>;

        $i26 = $r11[i3];

        $i27 = neg $i26;

        r2[i3] = $i27;

        $i25 = r0.<java.math.BigInteger: int numberLength>;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i25, i1);

        i3 = i3 + 1;

     label02:
        if i3 >= i6 goto label03;

        $r14 = r0.<java.math.BigInteger: int[] digits>;

        $i37 = $r14[i3];

        $i36 = -1 ^ $i37;

        r2[i3] = $i36;

        i3 = i3 + 1;

        goto label02;

     label03:
        $i29 = r0.<java.math.BigInteger: int numberLength>;

        if i3 != $i29 goto label08;

     label04:
        if i3 >= i1 goto label05;

        r2[i3] = -1;

        i3 = i3 + 1;

        goto label04;

     label05:
        $r15 = r1.<java.math.BigInteger: int[] digits>;

        $i35 = $r15[i3];

        $i34 = -1 + $i35;

        r2[i3] = $i34;

     label06:
        $i13 = r0.<java.math.BigInteger: int numberLength>;

        $i14 = r1.<java.math.BigInteger: int numberLength>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i14);

        i5 = i3 + 1;

     label07:
        if i5 >= i4 goto label11;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i17 = $r7[i5];

        $i18 = -1 ^ $i17;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i19 = $r8[i5];

        $i21 = $i18 & $i19;

        r2[i5] = $i21;

        i5 = i5 + 1;

        goto label07;

     label08:
        $r13 = r0.<java.math.BigInteger: int[] digits>;

        $i28 = $r13[i3];

        $i31 = -1 ^ $i28;

        $r12 = r1.<java.math.BigInteger: int[] digits>;

        $i33 = $r12[i3];

        $i32 = -1 + $i33;

        $i30 = $i31 & $i32;

        r2[i3] = $i30;

        goto label06;

     label09:
        if i1 >= i0 goto label10;

        $r10 = r0.<java.math.BigInteger: int[] digits>;

        $i20 = $r10[i3];

        $i24 = neg $i20;

        $r9 = r1.<java.math.BigInteger: int[] digits>;

        $i23 = $r9[i3];

        $i22 = $i24 & $i23;

        r2[i3] = $i22;

        goto label06;

     label10:
        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i8 = $r3[i3];

        $i12 = neg $i8;

        $r4 = r1.<java.math.BigInteger: int[] digits>;

        $i10 = $r4[i3];

        $i9 = -1 + $i10;

        $i11 = $i12 & $i9;

        r2[i3] = $i11;

        goto label06;

     label11:
        $i15 = r1.<java.math.BigInteger: int numberLength>;

        if i5 >= $i15 goto label12;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i16 = $r5[i5];

        r2[i5] = $i16;

        i5 = i5 + 1;

        goto label11;

     label12:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(1, i2, r2);

        return $r6;
    }

    static java.math.BigInteger andNotNegativePositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6, $r11;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;
        int[] r2, r3, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i9 = r1.<java.math.BigInteger: int numberLength>;

        if i0 < $i9 goto label01;

        return r0;

     label01:
        $i10 = r0.<java.math.BigInteger: int numberLength>;

        $i11 = r1.<java.math.BigInteger: int numberLength>;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i11);

        i3 = i0;

        if i1 <= i0 goto label05;

        r2 = newarray (int)[i2];

        $i36 = r0.<java.math.BigInteger: int numberLength>;

        i8 = staticinvoke <java.lang.Math: int min(int,int)>($i36, i1);

     label02:
        if i3 >= i8 goto label03;

        $r16 = r0.<java.math.BigInteger: int[] digits>;

        $i40 = $r16[i3];

        r2[i3] = $i40;

        i3 = i3 + 1;

        goto label02;

     label03:
        $i35 = r0.<java.math.BigInteger: int numberLength>;

        if i3 != $i35 goto label12;

        i3 = i1;

     label04:
        $i39 = r1.<java.math.BigInteger: int numberLength>;

        if i3 >= $i39 goto label12;

        $r17 = r1.<java.math.BigInteger: int[] digits>;

        $i38 = $r17[i3];

        r2[i3] = $i38;

        i3 = i3 + 1;

        goto label04;

     label05:
        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i12 = $r4[i3];

        $i16 = neg $i12;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i14 = $r5[i3];

        $i13 = -1 ^ $i14;

        i4 = $i16 & $i13;

        if i4 != 0 goto label11;

        $i25 = r1.<java.math.BigInteger: int numberLength>;

        $i27 = r0.<java.math.BigInteger: int numberLength>;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i25, $i27);

        i3 = i3 + 1;

     label06:
        if i3 >= i6 goto label07;

        $r15 = r0.<java.math.BigInteger: int[] digits>;

        $i33 = $r15[i3];

        $r14 = r1.<java.math.BigInteger: int[] digits>;

        $i34 = $r14[i3];

        $i37 = $i33 | $i34;

        i4 = -1 ^ $i37;

        if i4 != 0 goto label07;

        i3 = i3 + 1;

        goto label06;

     label07:
        if i4 != 0 goto label11;

     label08:
        $i29 = r1.<java.math.BigInteger: int numberLength>;

        if i3 >= $i29 goto label09;

        $r12 = r1.<java.math.BigInteger: int[] digits>;

        $i31 = $r12[i3];

        i4 = -1 ^ $i31;

        if i4 != 0 goto label09;

        i3 = i3 + 1;

        goto label08;

     label09:
        $i30 = r0.<java.math.BigInteger: int numberLength>;

        if i3 >= $i30 goto label10;

        $r13 = r0.<java.math.BigInteger: int[] digits>;

        $i32 = $r13[i3];

        i4 = -1 ^ $i32;

        if i4 != 0 goto label10;

        i3 = i3 + 1;

        goto label09;

     label10:
        if i4 != 0 goto label11;

        i7 = i2 + 1;

        r3 = newarray (int)[i7];

        $i28 = i7 - 1;

        r3[$i28] = 1;

        $r11 = new java.math.BigInteger;

        specialinvoke $r11.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i7, r3);

        return $r11;

     label11:
        r2 = newarray (int)[i2];

        $i15 = neg i4;

        r2[i3] = $i15;

        i3 = i3 + 1;

     label12:
        $i17 = r1.<java.math.BigInteger: int numberLength>;

        $i18 = r0.<java.math.BigInteger: int numberLength>;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i17, $i18);

     label13:
        if i3 >= i5 goto label14;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i24 = $r9[i3];

        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i23 = $r10[i3];

        $i26 = $i24 | $i23;

        r2[i3] = $i26;

        i3 = i3 + 1;

        goto label13;

     label14:
        $i19 = r0.<java.math.BigInteger: int numberLength>;

        if i3 >= $i19 goto label15;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i21 = $r7[i3];

        r2[i3] = $i21;

        i3 = i3 + 1;

        goto label14;

     label15:
        $i20 = r1.<java.math.BigInteger: int numberLength>;

        if i3 >= $i20 goto label16;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i22 = $r8[i3];

        r2[i3] = $i22;

        i3 = i3 + 1;

        goto label15;

     label16:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i2, r2);

        return $r6;
    }

    static java.math.BigInteger andNotPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int[] r2, $r4, $r5, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i2 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[$i2];

        $i4 = r0.<java.math.BigInteger: int numberLength>;

        $i3 = r1.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r5[i1];

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i8 = $r6[i1];

        $i10 = -1 ^ $i8;

        $i11 = $i9 & $i10;

        r2[i1] = $i11;

        i1 = i1 + 1;

        goto label1;

     label2:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        if i1 >= $i5 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i1];

        r2[i1] = $i7;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, $i6, r2);

        return $r3;
    }

    static java.math.BigInteger andNotPositiveNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        int[] r2, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i4 = r0.<java.math.BigInteger: int numberLength>;

        if i0 < $i4 goto label1;

        return r0;

     label1:
        $i6 = r0.<java.math.BigInteger: int numberLength>;

        $i5 = r1.<java.math.BigInteger: int numberLength>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5);

        r2 = newarray (int)[i2];

        i3 = i1;

     label2:
        if i3 >= i0 goto label3;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i14 = $r8[i3];

        r2[i3] = $i14;

        i3 = i3 + 1;

        goto label2;

     label3:
        if i3 != i0 goto label4;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i11 = $r6[i3];

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i10 = $r7[i3];

        $i12 = -1 + $i10;

        $i13 = $i11 & $i12;

        r2[i3] = $i13;

        i3 = i3 + 1;

     label4:
        if i3 >= i2 goto label5;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i3];

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i8 = $r5[i3];

        $i9 = $i7 & $i8;

        r2[i3] = $i9;

        i3 = i3 + 1;

        goto label4;

     label5:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i2, r2);

        return $r3;
    }

    static java.math.BigInteger andPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] r2, $r4, $r5;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i3 = r0.<java.math.BigInteger: int numberLength>;

        $i2 = r1.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $i4 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        if i1 < i0 goto label1;

        $r6 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r6;

     label1:
        r2 = newarray (int)[i0];

     label2:
        if i1 >= i0 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i1];

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i6 = $r5[i1];

        $i8 = $i7 & $i6;

        r2[i1] = $i8;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r3;
    }

    static java.math.BigInteger not(java.math.BigInteger)
    {
        java.math.BigInteger r0, $r2, $r5, $r8, $r11, $r12;
        int[] r1, $r3, $r4, $r6, $r7, $r9, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 != 0 goto label01;

        $r12 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        return $r12;

     label01:
        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        $r11 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r11;

     label02:
        $i3 = r0.<java.math.BigInteger: int numberLength>;

        $i4 = 1 + $i3;

        r1 = newarray (int)[$i4];

        $i5 = r0.<java.math.BigInteger: int sign>;

        if $i5 <= 0 goto label07;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i15 = r0.<java.math.BigInteger: int numberLength>;

        $i14 = -1 + $i15;

        $i16 = $r7[$i14];

        if $i16 == -1 goto label04;

        i0 = 0;

     label03:
        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i22 = $r9[i0];

        if $i22 != -1 goto label09;

        i0 = i0 + 1;

        goto label03;

     label04:
        i0 = 0;

     label05:
        $i18 = r0.<java.math.BigInteger: int numberLength>;

        if i0 >= $i18 goto label06;

        $r10 = r0.<java.math.BigInteger: int[] digits>;

        $i23 = $r10[i0];

        if $i23 != -1 goto label06;

        i0 = i0 + 1;

        goto label05;

     label06:
        $i17 = r0.<java.math.BigInteger: int numberLength>;

        if i0 != $i17 goto label09;

        r1[i0] = 1;

        $r8 = new java.math.BigInteger;

        $i19 = r0.<java.math.BigInteger: int sign>;

        $i20 = neg $i19;

        $i21 = i0 + 1;

        specialinvoke $r8.<java.math.BigInteger: void <init>(int,int,int[])>($i20, $i21, r1);

        return $r8;

     label07:
        i0 = 0;

     label08:
        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i6 = $r3[i0];

        if $i6 != 0 goto label09;

        r1[i0] = -1;

        i0 = i0 + 1;

        goto label08;

     label09:
        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i8 = $r4[i0];

        $i7 = r0.<java.math.BigInteger: int sign>;

        $i9 = $i8 + $i7;

        r1[i0] = $i9;

        i1 = i0 + 1;

     label10:
        $i10 = r0.<java.math.BigInteger: int numberLength>;

        if i1 >= $i10 goto label11;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i13 = $r6[i1];

        r1[i1] = $i13;

        i1 = i1 + 1;

        goto label10;

     label11:
        $r5 = new java.math.BigInteger;

        $i12 = r0.<java.math.BigInteger: int sign>;

        $i11 = neg $i12;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,int,int[])>($i11, i1, r1);

        return $r5;
    }

    static java.math.BigInteger or(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

     label1:
        r0 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

     label2:
        return r0;

     label3:
        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 == 0 goto label2;

        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label4;

        return r1;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label7;

        $i6 = r1.<java.math.BigInteger: int sign>;

        if $i6 <= 0 goto label6;

        $i8 = r0.<java.math.BigInteger: int numberLength>;

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        if $i8 <= $i7 goto label5;

        $r9 = staticinvoke <java.math.Logical: java.math.BigInteger orPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r9;

     label5:
        $r8 = staticinvoke <java.math.Logical: java.math.BigInteger orPositive(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r8;

     label6:
        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger orDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r7;

     label7:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label8;

        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger orDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r6;

     label8:
        $i4 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if $i4 <= $i5 goto label9;

        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger orNegative(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r5;

     label9:
        $r4 = staticinvoke <java.math.Logical: java.math.BigInteger orNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r4;
    }

    static java.math.BigInteger orDiffSigns(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        int[] r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        if i1 < $i7 goto label01;

        return r1;

     label01:
        i2 = r1.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i2];

        if i0 >= i1 goto label03;

        i3 = i0;

     label02:
        if i3 >= i1 goto label07;

        $r14 = r1.<java.math.BigInteger: int[] digits>;

        $i34 = $r14[i3];

        r2[i3] = $i34;

        i3 = i3 + 1;

        goto label02;

     label03:
        if i1 >= i0 goto label11;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i20 = $r9[i1];

        $i21 = neg $i20;

        r2[i1] = $i21;

        $i24 = r0.<java.math.BigInteger: int numberLength>;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i24, i0);

        i6 = i1 + 1;

     label04:
        if i6 >= i5 goto label05;

        $r13 = r0.<java.math.BigInteger: int[] digits>;

        $i32 = $r13[i6];

        $i31 = -1 ^ $i32;

        r2[i6] = $i31;

        i6 = i6 + 1;

        goto label04;

     label05:
        $i23 = r0.<java.math.BigInteger: int numberLength>;

        if i6 == $i23 goto label09;

        $r11 = r1.<java.math.BigInteger: int[] digits>;

        $i25 = $r11[i6];

        $i28 = neg $i25;

        $r12 = r0.<java.math.BigInteger: int[] digits>;

        $i30 = $r12[i6];

        $i29 = $i28 | $i30;

        $i33 = -1 ^ $i29;

        r2[i6] = $i33;

     label06:
        i3 = i6 + 1;

     label07:
        $i13 = r1.<java.math.BigInteger: int numberLength>;

        $i14 = r0.<java.math.BigInteger: int numberLength>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i14);

     label08:
        if i3 >= i4 goto label12;

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i18 = $r7[i3];

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i17 = $r8[i3];

        $i19 = -1 ^ $i17;

        $i22 = $i18 & $i19;

        r2[i3] = $i22;

        i3 = i3 + 1;

        goto label08;

     label09:
        if i6 >= i0 goto label10;

        r2[i6] = -1;

        i6 = i6 + 1;

        goto label09;

     label10:
        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i26 = $r10[i6];

        $i27 = -1 + $i26;

        r2[i6] = $i27;

        goto label06;

     label11:
        $r3 = r1.<java.math.BigInteger: int[] digits>;

        $i8 = $r3[i1];

        $i9 = neg $i8;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i10 = $r4[i1];

        $i12 = $i9 | $i10;

        $i11 = neg $i12;

        r2[i1] = $i11;

        i3 = i1 + 1;

        goto label07;

     label12:
        $i15 = r1.<java.math.BigInteger: int numberLength>;

        if i3 >= $i15 goto label13;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i16 = $r5[i3];

        r2[i3] = $i16;

        i3 = i3 + 1;

        goto label12;

     label13:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i2, r2);

        return $r6;
    }

    static java.math.BigInteger orNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r5;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        int[] r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = r1.<java.math.BigInteger: int numberLength>;

        if i1 < $i5 goto label1;

        return r1;

     label1:
        $i6 = r0.<java.math.BigInteger: int numberLength>;

        if i0 < $i6 goto label2;

        return r0;

     label2:
        $i8 = r0.<java.math.BigInteger: int numberLength>;

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i7);

        r2 = newarray (int)[i2];

        if i0 != i1 goto label5;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i17 = $r9[i1];

        $i18 = neg $i17;

        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i20 = $r10[i1];

        $i21 = neg $i20;

        $i19 = $i18 | $i21;

        $i22 = neg $i19;

        r2[i1] = $i22;

        i3 = i1;

     label3:
        i4 = i3 + 1;

     label4:
        if i4 >= i2 goto label8;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i13 = $r7[i4];

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i14 = $r6[i4];

        $i15 = $i13 & $i14;

        r2[i4] = $i15;

        i4 = i4 + 1;

        goto label4;

     label5:
        i3 = i0;

     label6:
        if i3 >= i1 goto label7;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i16 = $r8[i3];

        r2[i3] = $i16;

        i3 = i3 + 1;

        goto label6;

     label7:
        $r3 = r1.<java.math.BigInteger: int[] digits>;

        $i10 = $r3[i3];

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r4[i3];

        $i11 = -1 + $i9;

        $i12 = $i10 & $i11;

        r2[i3] = $i12;

        goto label3;

     label8:
        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i2, r2);

        return $r5;
    }

    static java.math.BigInteger orPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        int[] r2, $r4, $r5, $r6;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i0];

        i1 = 0;

     label1:
        $i2 = r1.<java.math.BigInteger: int numberLength>;

        if i1 >= $i2 goto label2;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i5 = $r5[i1];

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i4 = $r6[i1];

        $i6 = $i5 | $i4;

        r2[i1] = $i6;

        i1 = i1 + 1;

        goto label1;

     label2:
        if i1 >= i0 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i3 = $r4[i1];

        r2[i1] = $i3;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r3;
    }

    static java.math.BigInteger xor(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label2;

        return r1;

     label2:
        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r11 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger not()>();

        return $r11;

     label3:
        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger not()>();

        return $r9;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label7;

        $i6 = r1.<java.math.BigInteger: int sign>;

        if $i6 <= 0 goto label6;

        $i8 = r0.<java.math.BigInteger: int numberLength>;

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        if $i8 <= $i7 goto label5;

        $r10 = staticinvoke <java.math.Logical: java.math.BigInteger xorPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r10;

     label5:
        $r8 = staticinvoke <java.math.Logical: java.math.BigInteger xorPositive(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r8;

     label6:
        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger xorDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r7;

     label7:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label8;

        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger xorDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r6;

     label8:
        $i4 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if $i4 <= $i5 goto label9;

        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger xorNegative(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r5;

     label9:
        $r4 = staticinvoke <java.math.Logical: java.math.BigInteger xorNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r4;
    }

    static java.math.BigInteger xorDiffSigns(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6, $r12;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55;
        int[] r2, r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i12 = r1.<java.math.BigInteger: int numberLength>;

        $i11 = r0.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i11);

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i2 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if i1 >= i2 goto label04;

        r2 = newarray (int)[i0];

        $r20 = r1.<java.math.BigInteger: int[] digits>;

        $i47 = $r20[i1];

        r2[i1] = $i47;

        $i48 = r1.<java.math.BigInteger: int numberLength>;

        i10 = staticinvoke <java.lang.Math: int min(int,int)>($i48, i2);

        i5 = i1 + 1;

     label01:
        if i5 >= i10 goto label02;

        $r22 = r1.<java.math.BigInteger: int[] digits>;

        $i53 = $r22[i5];

        r2[i5] = $i53;

        i5 = i5 + 1;

        goto label01;

     label02:
        $i54 = r1.<java.math.BigInteger: int numberLength>;

        if i5 != $i54 goto label07;

     label03:
        $i55 = r0.<java.math.BigInteger: int numberLength>;

        if i5 >= $i55 goto label07;

        $r23 = r0.<java.math.BigInteger: int[] digits>;

        $i52 = $r23[i5];

        r2[i5] = $i52;

        i5 = i5 + 1;

        goto label03;

     label04:
        if i2 >= i1 goto label11;

        r2 = newarray (int)[i0];

        $r16 = r0.<java.math.BigInteger: int[] digits>;

        $i40 = $r16[i2];

        $i39 = neg $i40;

        r2[i2] = $i39;

        $i38 = r0.<java.math.BigInteger: int numberLength>;

        i9 = staticinvoke <java.lang.Math: int min(int,int)>($i38, i1);

        i5 = i2 + 1;

     label05:
        if i5 >= i9 goto label06;

        $r21 = r0.<java.math.BigInteger: int[] digits>;

        $i51 = $r21[i5];

        $i46 = -1 ^ $i51;

        r2[i5] = $i46;

        i5 = i5 + 1;

        goto label05;

     label06:
        if i5 != i1 goto label09;

        $r19 = r0.<java.math.BigInteger: int[] digits>;

        $i43 = $r19[i5];

        $r17 = r1.<java.math.BigInteger: int[] digits>;

        $i41 = $r17[i5];

        $i42 = neg $i41;

        $i49 = $i43 ^ $i42;

        $i50 = -1 ^ $i49;

        r2[i5] = $i50;

        i5 = i5 + 1;

     label07:
        $i17 = r1.<java.math.BigInteger: int numberLength>;

        $i18 = r0.<java.math.BigInteger: int numberLength>;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i17, $i18);

     label08:
        if i5 >= i6 goto label18;

        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i24 = $r10[i5];

        $i27 = -1 ^ $i24;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i23 = $r9[i5];

        $i28 = $i27 ^ $i23;

        $i25 = -1 ^ $i28;

        r2[i5] = $i25;

        i5 = i5 + 1;

        goto label08;

     label09:
        if i5 >= i1 goto label10;

        r2[i5] = -1;

        i5 = i5 + 1;

        goto label09;

     label10:
        $i44 = r1.<java.math.BigInteger: int numberLength>;

        if i5 >= $i44 goto label07;

        $r18 = r1.<java.math.BigInteger: int[] digits>;

        $i45 = $r18[i5];

        r2[i5] = $i45;

        i5 = i5 + 1;

        goto label10;

     label11:
        i3 = i1;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i16 = $r5[i3];

        $r4 = r1.<java.math.BigInteger: int[] digits>;

        $i14 = $r4[i3];

        $i13 = neg $i14;

        i4 = $i16 ^ $i13;

        if i4 != 0 goto label17;

        $i31 = r0.<java.math.BigInteger: int numberLength>;

        $i26 = r1.<java.math.BigInteger: int numberLength>;

        i7 = staticinvoke <java.lang.Math: int min(int,int)>($i31, $i26);

        i3 = i3 + 1;

     label12:
        if i3 >= i7 goto label13;

        $r14 = r0.<java.math.BigInteger: int[] digits>;

        $i35 = $r14[i3];

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i37 = $r13[i3];

        $i36 = -1 ^ $i37;

        i4 = $i35 ^ $i36;

        if i4 != 0 goto label13;

        i3 = i3 + 1;

        goto label12;

     label13:
        if i4 != 0 goto label17;

     label14:
        $i29 = r0.<java.math.BigInteger: int numberLength>;

        if i3 >= $i29 goto label15;

        $r15 = r0.<java.math.BigInteger: int[] digits>;

        $i34 = $r15[i3];

        i4 = -1 ^ $i34;

        if i4 != 0 goto label15;

        i3 = i3 + 1;

        goto label14;

     label15:
        $i30 = r1.<java.math.BigInteger: int numberLength>;

        if i3 >= $i30 goto label16;

        $r11 = r1.<java.math.BigInteger: int[] digits>;

        $i32 = $r11[i3];

        i4 = -1 ^ $i32;

        if i4 != 0 goto label16;

        i3 = i3 + 1;

        goto label15;

     label16:
        if i4 != 0 goto label17;

        i8 = i0 + 1;

        r3 = newarray (int)[i8];

        $i33 = i8 - 1;

        r3[$i33] = 1;

        $r12 = new java.math.BigInteger;

        specialinvoke $r12.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i8, r3);

        return $r12;

     label17:
        r2 = newarray (int)[i0];

        $i15 = neg i4;

        r2[i3] = $i15;

        i5 = i3 + 1;

        goto label07;

     label18:
        $i19 = r0.<java.math.BigInteger: int numberLength>;

        if i5 >= $i19 goto label19;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i21 = $r7[i5];

        r2[i5] = $i21;

        i5 = i5 + 1;

        goto label18;

     label19:
        $i20 = r1.<java.math.BigInteger: int numberLength>;

        if i5 >= $i20 goto label20;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i22 = $r8[i5];

        r2[i5] = $i22;

        i5 = i5 + 1;

        goto label19;

     label20:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i0, r2);

        return $r6;
    }

    static java.math.BigInteger xorNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r7;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        int[] r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i8 = r0.<java.math.BigInteger: int numberLength>;

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i7);

        r2 = newarray (int)[i0];

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i2 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i3 = i2;

        if i1 != i2 goto label03;

        $r14 = r0.<java.math.BigInteger: int[] digits>;

        $i30 = $r14[i3];

        $i33 = neg $i30;

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i35 = $r13[i3];

        $i34 = neg $i35;

        $i32 = $i33 ^ $i34;

        r2[i3] = $i32;

     label01:
        $i18 = r0.<java.math.BigInteger: int numberLength>;

        $i19 = r1.<java.math.BigInteger: int numberLength>;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i19);

        i6 = i3 + 1;

     label02:
        if i6 >= i5 goto label09;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i26 = $r8[i6];

        $r9 = r1.<java.math.BigInteger: int[] digits>;

        $i25 = $r9[i6];

        $i24 = $i26 ^ $i25;

        r2[i6] = $i24;

        i6 = i6 + 1;

        goto label02;

     label03:
        $r3 = r1.<java.math.BigInteger: int[] digits>;

        $i10 = $r3[i3];

        $i9 = neg $i10;

        r2[i3] = $i9;

        $i11 = r1.<java.math.BigInteger: int numberLength>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i11, i1);

        i3 = i3 + 1;

     label04:
        if i3 >= i4 goto label05;

        $r12 = r1.<java.math.BigInteger: int[] digits>;

        $i27 = $r12[i3];

        $i31 = -1 ^ $i27;

        r2[i3] = $i31;

        i3 = i3 + 1;

        goto label04;

     label05:
        $i12 = r1.<java.math.BigInteger: int numberLength>;

        if i3 != $i12 goto label08;

     label06:
        if i3 >= i1 goto label07;

        r2[i3] = -1;

        i3 = i3 + 1;

        goto label06;

     label07:
        $r11 = r0.<java.math.BigInteger: int[] digits>;

        $i28 = $r11[i3];

        $i29 = -1 + $i28;

        r2[i3] = $i29;

        goto label01;

     label08:
        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i13 = $r4[i3];

        $i17 = neg $i13;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i15 = $r5[i3];

        $i14 = -1 ^ $i15;

        $i16 = $i17 ^ $i14;

        r2[i3] = $i16;

        goto label01;

     label09:
        $i20 = r0.<java.math.BigInteger: int numberLength>;

        if i6 >= $i20 goto label10;

        $r10 = r0.<java.math.BigInteger: int[] digits>;

        $i23 = $r10[i6];

        r2[i6] = $i23;

        i6 = i6 + 1;

        goto label09;

     label10:
        $i22 = r1.<java.math.BigInteger: int numberLength>;

        if i6 >= $i22 goto label11;

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i21 = $r6[i6];

        r2[i6] = $i21;

        i6 = i6 + 1;

        goto label10;

     label11:
        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r7;
    }

    static java.math.BigInteger xorPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r2, $r4, $r5, $r6;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i0];

        $i2 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i3 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

     label1:
        $i4 = r1.<java.math.BigInteger: int numberLength>;

        if i1 >= $i4 goto label2;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r5[i1];

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i7 = $r6[i1];

        $i8 = $i9 ^ $i7;

        r2[i1] = $i8;

        i1 = i1 + 1;

        goto label1;

     label2:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        if i1 >= $i5 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i6 = $r4[i1];

        r2[i1] = $i6;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r3;
    }
}
