final class com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream extends com.android.okhttp.internal.AbstractOutputStream
{
    private long bytesRemaining;
    private final java.io.OutputStream socketOut;

    private void <init>(java.io.OutputStream, long)
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream r0;
        java.io.OutputStream r1;
        long l0;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.okhttp.internal.AbstractOutputStream: void <init>()>();

        r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: java.io.OutputStream socketOut> = r1;

        r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: long bytesRemaining> = l0;

        return;
    }

    void <init>(java.io.OutputStream, long, com.android.okhttp.internal.http.HttpTransport$1)
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream r0;
        java.io.OutputStream r1;
        long l0;
        com.android.okhttp.internal.http.HttpTransport$1 r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        l0 := @parameter1: long;

        r2 := @parameter2: com.android.okhttp.internal.http.HttpTransport$1;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: void <init>(java.io.OutputStream,long)>(r1, l0);

        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream r0;
        boolean $z0;
        long $l0;
        byte $b1;
        java.net.ProtocolException $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream;

        $z0 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: boolean closed>;

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: boolean closed> = 1;

        $l0 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: long bytesRemaining>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r1 = new java.net.ProtocolException;

        specialinvoke $r1.<java.net.ProtocolException: void <init>(java.lang.String)>("unexpected end of stream");

        throw $r1;
    }

    public void flush() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream r0;
        boolean $z0;
        java.io.OutputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream;

        $z0 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: java.io.OutputStream socketOut>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3, $l4, $l6, $l7, $l8, $l9;
        byte $b5;
        java.io.OutputStream $r2;
        java.net.ProtocolException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: void checkNotClosed()>();

        $i2 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $l4 = (long) i1;

        $l3 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: long bytesRemaining>;

        $b5 = $l4 cmp $l3;

        if $b5 <= 0 goto label1;

        $r3 = new java.net.ProtocolException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $l9 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: long bytesRemaining>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes but received ");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.net.ProtocolException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: java.io.OutputStream socketOut>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $l7 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: long bytesRemaining>;

        $l6 = (long) i1;

        $l8 = $l7 - $l6;

        r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: long bytesRemaining> = $l8;

        return;
    }
}
