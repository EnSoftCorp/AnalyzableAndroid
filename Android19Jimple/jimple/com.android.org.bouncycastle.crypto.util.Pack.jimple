public abstract class com.android.org.bouncycastle.crypto.util.Pack extends java.lang.Object
{

    public void <init>()
    {
        com.android.org.bouncycastle.crypto.util.Pack r0;

        r0 := @this: com.android.org.bouncycastle.crypto.util.Pack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int bigEndianToInt(byte[], int)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, $i8, $i11, $i12, $i15, $i16;
        byte $b5, $b6, $b9, $b13;
        short $s7, $s10, $s14;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b5 = r0[i0];

        i1 = $b5 << 24;

        i2 = i0 + 1;

        $b6 = r0[i2];

        $s7 = 255 & $b6;

        $i8 = $s7 << 16;

        i3 = i1 | $i8;

        i4 = i2 + 1;

        $b9 = r0[i4];

        $s10 = 255 & $b9;

        $i11 = $s10 << 8;

        $i16 = i3 | $i11;

        $i12 = i4 + 1;

        $b13 = r0[$i12];

        $s14 = 255 & $b13;

        $i15 = $i16 | $s14;

        return $i15;
    }

    public static void bigEndianToInt(byte[], int, int[])
    {
        byte[] r0;
        int i0, i1, $i2, $i3;
        int[] r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label2;

        $i3 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: int bigEndianToInt(byte[],int)>(r0, i0);

        r1[i1] = $i3;

        i0 = i0 + 4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static long bigEndianToLong(byte[], int)
    {
        byte[] r0;
        int i0, i1, i2, $i3;
        long $l4, $l5, $l6, $l7, $l8, $l9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: int bigEndianToInt(byte[],int)>(r0, i0);

        $i3 = i0 + 4;

        i2 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: int bigEndianToInt(byte[],int)>(r0, $i3);

        $l4 = (long) i1;

        $l5 = 4294967295L & $l4;

        $l8 = $l5 << 32;

        $l6 = (long) i2;

        $l7 = 4294967295L & $l6;

        $l9 = $l8 | $l7;

        return $l9;
    }

    public static void bigEndianToLong(byte[], int, long[])
    {
        byte[] r0;
        int i0, i1, $i2;
        long[] r1;
        long $l3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: long[];

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label2;

        $l3 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: long bigEndianToLong(byte[],int)>(r0, i0);

        r1[i1] = $l3;

        i0 = i0 + 8;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void intToBigEndian(int, byte[], int)
    {
        int i0, i1, i2, i3, $i4, $i6, $i8, $i11;
        byte[] r0;
        byte $b5, $b7, $b9, $b10;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $i4 = i0 >>> 24;

        $b5 = (byte) $i4;

        r0[i1] = $b5;

        i2 = i1 + 1;

        $i6 = i0 >>> 16;

        $b7 = (byte) $i6;

        r0[i2] = $b7;

        i3 = i2 + 1;

        $i8 = i0 >>> 8;

        $b9 = (byte) $i8;

        r0[i3] = $b9;

        $i11 = i3 + 1;

        $b10 = (byte) i0;

        r0[$i11] = $b10;

        return;
    }

    public static void intToBigEndian(int[], byte[], int)
    {
        int[] r0;
        byte[] r1;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: int[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        $i3 = r0[i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>($i3, r1, i0);

        i0 = i0 + 4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static byte[] intToBigEndian(int)
    {
        int i0;
        byte[] r0;

        i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>(i0, r0, 0);

        return r0;
    }

    public static byte[] intToBigEndian(int[])
    {
        int[] r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $i1 = 4 * $i0;

        r1 = newarray (byte)[$i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToBigEndian(int[],byte[],int)>(r0, r1, 0);

        return r1;
    }

    public static void intToLittleEndian(int, byte[], int)
    {
        int i0, i1, i2, i3, $i5, $i7, $i9, $i11;
        byte[] r0;
        byte $b4, $b6, $b8, $b10;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $b4 = (byte) i0;

        r0[i1] = $b4;

        i2 = i1 + 1;

        $i5 = i0 >>> 8;

        $b6 = (byte) $i5;

        r0[i2] = $b6;

        i3 = i2 + 1;

        $i7 = i0 >>> 16;

        $b8 = (byte) $i7;

        r0[i3] = $b8;

        $i11 = i3 + 1;

        $i9 = i0 >>> 24;

        $b10 = (byte) $i9;

        r0[$i11] = $b10;

        return;
    }

    public static void intToLittleEndian(int[], byte[], int)
    {
        int[] r0;
        byte[] r1;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: int[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        $i3 = r0[i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToLittleEndian(int,byte[],int)>($i3, r1, i0);

        i0 = i0 + 4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static byte[] intToLittleEndian(int)
    {
        int i0;
        byte[] r0;

        i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToLittleEndian(int,byte[],int)>(i0, r0, 0);

        return r0;
    }

    public static byte[] intToLittleEndian(int[])
    {
        int[] r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $i1 = 4 * $i0;

        r1 = newarray (byte)[$i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToLittleEndian(int[],byte[],int)>(r0, r1, 0);

        return r1;
    }

    public static int littleEndianToInt(byte[], int)
    {
        byte[] r0;
        int i0, i2, i3, i4, $i8, $i11, $i12, $i14, $i15, $i16;
        short s1, $s7, $s10;
        byte $b5, $b6, $b9, $b13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b5 = r0[i0];

        s1 = 255 & $b5;

        i2 = i0 + 1;

        $b6 = r0[i2];

        $s7 = 255 & $b6;

        $i8 = $s7 << 8;

        i3 = s1 | $i8;

        i4 = i2 + 1;

        $b9 = r0[i4];

        $s10 = 255 & $b9;

        $i11 = $s10 << 16;

        $i16 = i3 | $i11;

        $i12 = i4 + 1;

        $b13 = r0[$i12];

        $i14 = $b13 << 24;

        $i15 = $i16 | $i14;

        return $i15;
    }

    public static void littleEndianToInt(byte[], int, int[])
    {
        byte[] r0;
        int i0, i1, $i2, $i3;
        int[] r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label2;

        $i3 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: int littleEndianToInt(byte[],int)>(r0, i0);

        r1[i1] = $i3;

        i0 = i0 + 4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static long littleEndianToLong(byte[], int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3;
        long $l4, $l5, $l6, $l7, $l8, $l9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: int littleEndianToInt(byte[],int)>(r0, i0);

        $i2 = i0 + 4;

        $i3 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: int littleEndianToInt(byte[],int)>(r0, $i2);

        $l4 = (long) $i3;

        $l5 = 4294967295L & $l4;

        $l8 = $l5 << 32;

        $l6 = (long) i1;

        $l7 = 4294967295L & $l6;

        $l9 = $l8 | $l7;

        return $l9;
    }

    public static void littleEndianToLong(byte[], int, long[])
    {
        byte[] r0;
        int i0, i1, $i2;
        long[] r1;
        long $l3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: long[];

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label2;

        $l3 = staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: long littleEndianToLong(byte[],int)>(r0, i0);

        r1[i1] = $l3;

        i0 = i0 + 8;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void longToBigEndian(long, byte[], int)
    {
        long l0, $l2, $l4;
        byte[] r0;
        int i1, $i3, $i5, $i6;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $l2 = l0 >>> 32;

        $i3 = (int) $l2;

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>($i3, r0, i1);

        $l4 = 4294967295L & l0;

        $i6 = (int) $l4;

        $i5 = i1 + 4;

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToBigEndian(int,byte[],int)>($i6, r0, $i5);

        return;
    }

    public static void longToBigEndian(long[], byte[], int)
    {
        long[] r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3;

        r0 := @parameter0: long[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        $l3 = r0[i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void longToBigEndian(long,byte[],int)>($l3, r1, i0);

        i0 = i0 + 8;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static byte[] longToBigEndian(long)
    {
        long l0;
        byte[] r0;

        l0 := @parameter0: long;

        r0 = newarray (byte)[8];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void longToBigEndian(long,byte[],int)>(l0, r0, 0);

        return r0;
    }

    public static byte[] longToBigEndian(long[])
    {
        long[] r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        $i1 = 8 * $i0;

        r1 = newarray (byte)[$i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void longToBigEndian(long[],byte[],int)>(r0, r1, 0);

        return r1;
    }

    public static void longToLittleEndian(long, byte[], int)
    {
        long l0, $l2, $l4;
        byte[] r0;
        int i1, $i3, $i5, $i6;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $l2 = 4294967295L & l0;

        $i3 = (int) $l2;

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToLittleEndian(int,byte[],int)>($i3, r0, i1);

        $l4 = l0 >>> 32;

        $i6 = (int) $l4;

        $i5 = i1 + 4;

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToLittleEndian(int,byte[],int)>($i6, r0, $i5);

        return;
    }

    public static void longToLittleEndian(long[], byte[], int)
    {
        long[] r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3;

        r0 := @parameter0: long[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        $l3 = r0[i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void longToLittleEndian(long,byte[],int)>($l3, r1, i0);

        i0 = i0 + 8;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static byte[] longToLittleEndian(long)
    {
        long l0;
        byte[] r0;

        l0 := @parameter0: long;

        r0 = newarray (byte)[8];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void longToLittleEndian(long,byte[],int)>(l0, r0, 0);

        return r0;
    }

    public static byte[] longToLittleEndian(long[])
    {
        long[] r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        $i1 = 8 * $i0;

        r1 = newarray (byte)[$i1];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void longToLittleEndian(long[],byte[],int)>(r0, r1, 0);

        return r1;
    }
}
