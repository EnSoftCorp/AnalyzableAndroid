class java.util.Collections$SynchronizedMap extends java.lang.Object implements java.util.Map, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.Map m;
    final java.lang.Object mutex;

    void <init>(java.util.Map)
    {
        java.util.Collections$SynchronizedMap r0;
        java.util.Map r1;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Collections$SynchronizedMap: java.util.Map m> = r1;

        r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex> = r0;

        return;
    }

    void <init>(java.util.Map, java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.util.Map r1;
        java.lang.Object r2;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Collections$SynchronizedMap: java.util.Map m> = r1;

        r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex> = r2;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Collections$SynchronizedMap r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r2;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void clear()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        java.util.Map $r3;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2;
        java.lang.Throwable r3, $r5;
        boolean z0;
        java.util.Map $r4;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r2;

     label1:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2;
        java.lang.Throwable r3, $r5;
        boolean z0;
        java.util.Map $r4;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r2;

     label1:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        z0 = interfaceinvoke $r4.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Set entrySet()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r7;
        java.util.Collections$SynchronizedSet r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.Map $r5;
        java.util.Set $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r4 = new java.util.Collections$SynchronizedSet;

        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        specialinvoke $r4.<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>($r6, $r7);

        r2 = $r4;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

     label4:
        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2;
        java.lang.Throwable r3, $r5;
        boolean z0;
        java.util.Map $r4;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r2;

     label1:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, r4;
        java.lang.Throwable r3, $r6;
        java.util.Map $r5;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r2;

     label1:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        r4 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return r4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int hashCode()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        int i0;
        java.util.Map $r3;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isEmpty()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        java.util.Map $r3;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Set keySet()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r7;
        java.util.Collections$SynchronizedSet r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.Map $r5;
        java.util.Set $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r4 = new java.util.Collections$SynchronizedSet;

        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        specialinvoke $r4.<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>($r6, $r7);

        r2 = $r4;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

     label4:
        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, r3, r5;
        java.lang.Throwable r4, $r7;
        java.util.Map $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r3;

     label1:
        $r6 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        r5 = interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        exitmonitor r3;

     label2:
        return r5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void putAll(java.util.Map)
    {
        java.util.Collections$SynchronizedMap r0;
        java.util.Map r1, $r4;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.util.Map;

        r2 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r2;

     label1:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, r4;
        java.lang.Throwable r3, $r6;
        java.util.Map $r5;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r2;

     label1:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        r4 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return r4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int size()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        int i0;
        java.util.Map $r3;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String toString()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.lang.String r3;
        java.util.Map $r4;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Collection values()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r7;
        java.util.Collections$SynchronizedCollection r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.Map $r5;
        java.util.Collection $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;

        r1 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        entermonitor r1;

     label1:
        $r4 = new java.util.Collections$SynchronizedCollection;

        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r7 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;

        specialinvoke $r4.<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object)>($r6, $r7);

        r2 = $r4;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

     label4:
        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <java.util.Collections$SynchronizedMap: long serialVersionUID> = 1978198479659022715L;

        return;
    }
}
