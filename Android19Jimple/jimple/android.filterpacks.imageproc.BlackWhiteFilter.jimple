public class android.filterpacks.imageproc.BlackWhiteFilter extends android.filterfw.core.Filter
{
    private float mBlack;
    private final java.lang.String mBlackWhiteShader;
    private android.filterfw.core.Program mProgram;
    private java.util.Random mRandom;
    private int mTarget;
    private int mTileSize;
    private float mWhite;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.BlackWhiteFilter r0;
        java.lang.String r1;
        java.util.Random $r2;
        java.util.Date $r3;
        long $l0;

        r0 := @this: android.filterpacks.imageproc.BlackWhiteFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: float mBlack> = 0.0F;

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: float mWhite> = 1.0F;

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: int mTileSize> = 640;

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: int mTarget> = 0;

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: java.lang.String mBlackWhiteShader> = "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform vec2 seed;\nuniform float black;\nuniform float scale;\nuniform float stepsize;\nvarying vec2 v_texcoord;\nfloat rand(vec2 loc) {\n  float theta1 = dot(loc, vec2(0.9898, 0.233));\n  float theta2 = dot(loc, vec2(12.0, 78.0));\n  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\n  float temp = mod(197.0 * value, 1.0) + value;\n  float part1 = mod(220.0 * temp, 1.0) + temp;\n  float part2 = value * 0.5453;\n  float part3 = cos(theta1 + theta2) * 0.43758;\n  return fract(part1 + part2 + part3);\n}\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float dither = rand(v_texcoord + seed);\n  vec3 xform = clamp((color.rgb - black) * scale, 0.0, 1.0);\n  vec3 temp = clamp((color.rgb + stepsize - black) * scale, 0.0, 1.0);\n  vec3 new_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);\n  gl_FragColor = vec4(new_color, color.a);\n}\n";

        $r2 = new java.util.Random;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        specialinvoke $r2.<java.util.Random: void <init>(long)>($l0);

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: java.util.Random mRandom> = $r2;

        return;
    }

    private void updateParameters()
    {
        android.filterpacks.imageproc.BlackWhiteFilter r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        float[] r1;
        byte $b0;
        android.filterfw.core.Program $r2, $r4, $r6, $r10;
        java.lang.Float $r3, $r5, $r7;
        java.util.Random $r8, $r9;

        r0 := @this: android.filterpacks.imageproc.BlackWhiteFilter;

        $f2 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: float mBlack>;

        $f1 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: float mWhite>;

        $b0 = $f2 cmpl $f1;

        if $b0 == 0 goto label2;

        $f8 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: float mWhite>;

        $f6 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: float mBlack>;

        $f7 = $f8 - $f6;

        f0 = 1.0F / $f7;

     label1:
        $r2 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram>;

        $f3 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: float mBlack>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r2.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("black", $r3);

        $r4 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram>;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        virtualinvoke $r4.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("scale", $r5);

        $r6 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram>;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.003921569F);

        virtualinvoke $r6.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("stepsize", $r7);

        r1 = newarray (float)[2];

        $r8 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: java.util.Random mRandom>;

        $f4 = virtualinvoke $r8.<java.util.Random: float nextFloat()>();

        r1[0] = $f4;

        $r9 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: java.util.Random mRandom>;

        $f5 = virtualinvoke $r9.<java.util.Random: float nextFloat()>();

        r1[1] = $f5;

        $r10 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r10.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("seed", r1);

        return;

     label2:
        f0 = 2000.0F;

        goto label1;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.BlackWhiteFilter r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        android.filterfw.core.Program $r3;

        r0 := @this: android.filterpacks.imageproc.BlackWhiteFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $r3 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram>;

        if $r3 == null goto label1;

        specialinvoke r0.<android.filterpacks.imageproc.BlackWhiteFilter: void updateParameters()>();

     label1:
        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.BlackWhiteFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;

        r0 := @this: android.filterpacks.imageproc.BlackWhiteFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        return r2;
    }

    public void initProgram(android.filterfw.core.FilterContext, int)
    {
        android.filterpacks.imageproc.BlackWhiteFilter r0;
        android.filterfw.core.FilterContext r1;
        int i0, $i1;
        android.filterfw.core.ShaderProgram r2, $r9;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: android.filterpacks.imageproc.BlackWhiteFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter Sharpen does not support frames of target ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        $r9 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r9.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform vec2 seed;\nuniform float black;\nuniform float scale;\nuniform float stepsize;\nvarying vec2 v_texcoord;\nfloat rand(vec2 loc) {\n  float theta1 = dot(loc, vec2(0.9898, 0.233));\n  float theta2 = dot(loc, vec2(12.0, 78.0));\n  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\n  float temp = mod(197.0 * value, 1.0) + value;\n  float part1 = mod(220.0 * temp, 1.0) + temp;\n  float part2 = value * 0.5453;\n  float part3 = cos(theta1 + theta2) * 0.43758;\n  return fract(part1 + part2 + part3);\n}\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float dither = rand(v_texcoord + seed);\n  vec3 xform = clamp((color.rgb - black) * scale, 0.0, 1.0);\n  vec3 temp = clamp((color.rgb + stepsize - black) * scale, 0.0, 1.0);\n  vec3 new_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);\n  gl_FragColor = vec4(new_color, color.a);\n}\n");

        r2 = $r9;

        $i1 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: int mTileSize>;

        virtualinvoke r2.<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)>($i1);

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram> = r2;

        specialinvoke r0.<android.filterpacks.imageproc.BlackWhiteFilter: void updateParameters()>();

        r0.<android.filterpacks.imageproc.BlackWhiteFilter: int mTarget> = i0;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.BlackWhiteFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r4;
        android.filterfw.core.FrameFormat r3;
        android.filterfw.core.Program $r5, $r7;
        int $i0, $i1, $i2;
        android.filterfw.core.FrameManager $r6;

        r0 := @this: android.filterpacks.imageproc.BlackWhiteFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        r3 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r5 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram>;

        if $r5 == null goto label1;

        $i1 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        $i2 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: int mTarget>;

        if $i1 == $i2 goto label2;

     label1:
        $i0 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        virtualinvoke r0.<android.filterpacks.imageproc.BlackWhiteFilter: void initProgram(android.filterfw.core.FilterContext,int)>(r1, $i0);

     label2:
        $r6 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r4 = virtualinvoke $r6.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r3);

        $r7 = r0.<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r7.<android.filterfw.core.Program: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, r4);

        virtualinvoke r0.<android.filterpacks.imageproc.BlackWhiteFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r4);

        virtualinvoke r4.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.BlackWhiteFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.BlackWhiteFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>(3);

        virtualinvoke r0.<android.filterpacks.imageproc.BlackWhiteFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        virtualinvoke r0.<android.filterpacks.imageproc.BlackWhiteFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }
}
