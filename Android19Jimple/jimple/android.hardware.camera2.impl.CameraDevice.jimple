public class android.hardware.camera2.impl.CameraDevice extends java.lang.Object implements android.hardware.camera2.CameraDevice
{
    private static final int REQUEST_ID_NONE;
    private final boolean DEBUG;
    private final java.lang.String TAG;
    private final java.lang.Runnable mCallOnActive;
    private final java.lang.Runnable mCallOnBusy;
    private final java.lang.Runnable mCallOnClosed;
    private final java.lang.Runnable mCallOnDisconnected;
    private final java.lang.Runnable mCallOnIdle;
    private final java.lang.Runnable mCallOnOpened;
    private final java.lang.Runnable mCallOnUnconfigured;
    private final android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks mCallbacks;
    private final java.lang.String mCameraId;
    private final android.util.SparseArray mCaptureListenerMap;
    private final android.util.SparseArray mConfiguredOutputs;
    private final android.os.Handler mDeviceHandler;
    private final android.hardware.camera2.CameraDevice$StateListener mDeviceListener;
    private boolean mIdle;
    private final java.lang.Object mLock;
    private android.hardware.camera2.ICameraDeviceUser mRemoteDevice;
    private int mRepeatingRequestId;
    private final java.util.ArrayList mRepeatingRequestIdDeletedList;

    public void <init>(java.lang.String, android.hardware.camera2.CameraDevice$StateListener, android.os.Handler)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.String r1, $r18, $r19, $r20;
        android.hardware.camera2.CameraDevice$StateListener r2;
        android.os.Handler r3;
        java.lang.Object[] r4;
        java.lang.Object $r5;
        android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks $r6;
        android.util.SparseArray $r7, $r9;
        java.util.ArrayList $r8;
        android.hardware.camera2.impl.CameraDevice$1 $r10;
        android.hardware.camera2.impl.CameraDevice$2 $r11;
        android.hardware.camera2.impl.CameraDevice$3 $r12;
        android.hardware.camera2.impl.CameraDevice$4 $r13;
        android.hardware.camera2.impl.CameraDevice$5 $r14;
        android.hardware.camera2.impl.CameraDevice$6 $r15;
        java.lang.IllegalArgumentException $r16;
        android.hardware.camera2.impl.CameraDevice$7 $r17;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateListener;

        r3 := @parameter2: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock> = $r5;

        $r6 = new android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks;

        specialinvoke $r6.<android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks mCallbacks> = $r6;

        r0.<android.hardware.camera2.impl.CameraDevice: boolean mIdle> = 1;

        $r7 = new android.util.SparseArray;

        specialinvoke $r7.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mCaptureListenerMap> = $r7;

        r0.<android.hardware.camera2.impl.CameraDevice: int mRepeatingRequestId> = -1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDevice: java.util.ArrayList mRepeatingRequestIdDeletedList> = $r8;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mConfiguredOutputs> = $r9;

        $r10 = new android.hardware.camera2.impl.CameraDevice$1;

        specialinvoke $r10.<android.hardware.camera2.impl.CameraDevice$1: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnOpened> = $r10;

        $r11 = new android.hardware.camera2.impl.CameraDevice$2;

        specialinvoke $r11.<android.hardware.camera2.impl.CameraDevice$2: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnUnconfigured> = $r11;

        $r12 = new android.hardware.camera2.impl.CameraDevice$3;

        specialinvoke $r12.<android.hardware.camera2.impl.CameraDevice$3: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnActive> = $r12;

        $r13 = new android.hardware.camera2.impl.CameraDevice$4;

        specialinvoke $r13.<android.hardware.camera2.impl.CameraDevice$4: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnBusy> = $r13;

        $r14 = new android.hardware.camera2.impl.CameraDevice$5;

        specialinvoke $r14.<android.hardware.camera2.impl.CameraDevice$5: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnClosed> = $r14;

        $r15 = new android.hardware.camera2.impl.CameraDevice$6;

        specialinvoke $r15.<android.hardware.camera2.impl.CameraDevice$6: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnIdle> = $r15;

        $r17 = new android.hardware.camera2.impl.CameraDevice$7;

        specialinvoke $r17.<android.hardware.camera2.impl.CameraDevice$7: void <init>(android.hardware.camera2.impl.CameraDevice)>(r0);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnDisconnected> = $r17;

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument given");

        throw $r16;

     label2:
        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String mCameraId> = r1;

        r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.CameraDevice$StateListener mDeviceListener> = r2;

        r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler> = r3;

        r4 = newarray (java.lang.Object)[1];

        $r19 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String mCameraId>;

        r4[0] = $r19;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CameraDevice-%s-JV", r4);

        r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String TAG> = $r18;

        $r20 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String TAG>;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>($r20, 3);

        r0.<android.hardware.camera2.impl.CameraDevice: boolean DEBUG> = $z0;

        return;
    }

    static boolean access$000(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: boolean isClosed()>();

        return $z0;
    }

    static android.hardware.camera2.CameraDevice$StateListener access$100(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.hardware.camera2.CameraDevice$StateListener $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.CameraDevice$StateListener mDeviceListener>;

        return $r1;
    }

    static java.util.ArrayList access$1000(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.util.ArrayList mRepeatingRequestIdDeletedList>;

        return $r1;
    }

    static java.lang.Object access$200(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        return $r1;
    }

    static java.lang.Runnable access$300(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnDisconnected>;

        return $r1;
    }

    static java.lang.String access$400(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String TAG>;

        return $r1;
    }

    static android.os.Handler access$500(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        return $r1;
    }

    static boolean access$600(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $z0 = r0.<android.hardware.camera2.impl.CameraDevice: boolean DEBUG>;

        return $z0;
    }

    static boolean access$700(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $z0 = r0.<android.hardware.camera2.impl.CameraDevice: boolean mIdle>;

        return $z0;
    }

    static boolean access$702(android.hardware.camera2.impl.CameraDevice, boolean)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        boolean z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        z0 := @parameter1: boolean;

        r0.<android.hardware.camera2.impl.CameraDevice: boolean mIdle> = z0;

        return z0;
    }

    static java.lang.Runnable access$800(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnIdle>;

        return $r1;
    }

    static android.util.SparseArray access$900(android.hardware.camera2.impl.CameraDevice)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mCaptureListenerMap>;

        return $r1;
    }

    private android.os.Handler checkHandler(android.os.Handler)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.os.Handler r1, $r3;
        android.os.Looper r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: android.os.Handler;

        if r1 != null goto label2;

        r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No handler given, and current thread has no looper!");

        throw $r4;

     label1:
        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        r1 = $r3;

     label2:
        return r1;
    }

    private void checkIfCameraClosed()
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraDevice was already closed");

        throw $r2;

     label1:
        return;
    }

    private boolean isClosed()
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        android.hardware.camera2.ICameraDeviceUser $r3;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r3 != null goto label8;

     label2:
        z0 = 1;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private int submitCaptureRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraDevice$CaptureListener, android.os.Handler, boolean) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraDevice$CaptureListener r2;
        android.os.Handler r3, $r10;
        boolean z0, $z1;
        java.lang.Object r4;
        java.lang.Throwable r5, $r16;
        android.hardware.camera2.utils.CameraRuntimeException r7, $r13;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r8;
        java.lang.Runnable $r9;
        android.util.SparseArray $r11;
        android.hardware.camera2.impl.CameraDevice$CaptureListenerHolder $r12;
        android.os.RemoteException $r14;
        android.hardware.camera2.CameraAccessException $r15;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$CaptureListener;

        r3 := @parameter2: android.os.Handler;

        z0 := @parameter3: boolean;

        if r2 == null goto label01;

        r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler checkHandler(android.os.Handler)>(r3);

     label01:
        r4 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r4;

     label02:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: void checkIfCameraClosed()>();

     label03:
        if z0 == 0 goto label05;

     label04:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDevice: void stopRepeating()>();

     label05:
        $r8 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        i0 = interfaceinvoke $r8.<android.hardware.camera2.ICameraDeviceUser: int submitRequest(android.hardware.camera2.CaptureRequest,boolean)>(r1, z0);

     label06:
        if r2 == null goto label08;

     label07:
        $r11 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mCaptureListenerMap>;

        $r12 = new android.hardware.camera2.impl.CameraDevice$CaptureListenerHolder;

        specialinvoke $r12.<android.hardware.camera2.impl.CameraDevice$CaptureListenerHolder: void <init>(android.hardware.camera2.CameraDevice$CaptureListener,android.hardware.camera2.CaptureRequest,android.os.Handler,boolean)>(r2, r1, r3, z0);

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r12);

     label08:
        if z0 == 0 goto label10;

     label09:
        r0.<android.hardware.camera2.impl.CameraDevice: int mRepeatingRequestId> = i0;

     label10:
        $z1 = r0.<android.hardware.camera2.impl.CameraDevice: boolean mIdle>;

        if $z1 == 0 goto label11;

        $r10 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r9 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnActive>;

        virtualinvoke $r10.<android.os.Handler: boolean post(java.lang.Runnable)>($r9);

     label11:
        r0.<android.hardware.camera2.impl.CameraDevice: boolean mIdle> = 0;

        exitmonitor r4;

     label12:
        return i0;

     label13:
        $r13 := @caughtexception;

        r7 = $r13;

     label14:
        $r15 = virtualinvoke r7.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r15;

     label15:
        $r16 := @caughtexception;

        r5 = $r16;

     label16:
        exitmonitor r4;

     label17:
        throw r5;

     label18:
        $r14 := @caughtexception;

     label19:
        exitmonitor r4;

     label20:
        return -1;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch android.hardware.camera2.utils.CameraRuntimeException from label05 to label06 with label13;
        catch android.os.RemoteException from label05 to label06 with label18;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label19 to label20 with label15;
    }

    public int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraDevice$CaptureListener, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraDevice$CaptureListener r2;
        android.os.Handler r3;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$CaptureListener;

        r3 := @parameter2: android.os.Handler;

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: int submitCaptureRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraDevice$CaptureListener,android.os.Handler,boolean)>(r1, r2, r3, 0);

        return $i0;
    }

    public int captureBurst(java.util.List, android.hardware.camera2.CameraDevice$CaptureListener, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.util.List r1;
        android.hardware.camera2.CameraDevice$CaptureListener r2;
        android.os.Handler r3;
        boolean $z0;
        java.lang.UnsupportedOperationException $r4;
        java.lang.String $r5;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$CaptureListener;

        r3 := @parameter2: android.os.Handler;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "Capture burst request list is empty, do nothing!");

        return -1;

     label1:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Burst capture implemented yet");

        throw $r4;
    }

    public void close()
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Object r1;
        java.lang.Throwable r3, $r13;
        android.hardware.camera2.utils.CameraRuntimeException r4, $r10;
        android.hardware.camera2.ICameraDeviceUser $r5, $r6, $r9;
        java.lang.Runnable $r7;
        android.os.Handler $r8;
        java.lang.String $r11;
        android.hardware.camera2.CameraAccessException $r12;
        android.os.RemoteException $r14;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r5 == null goto label02;

        $r9 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r9.<android.hardware.camera2.ICameraDeviceUser: void disconnect()>();

     label02:
        $r6 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r6 == null goto label03;

        $r8 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r7 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnClosed>;

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

     label03:
        r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice> = null;

        exitmonitor r1;

     label04:
        return;

     label05:
        $r10 := @caughtexception;

        r4 = $r10;

     label06:
        $r11 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String TAG>;

        $r12 = virtualinvoke r4.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Exception while closing: ", $r12);

     label07:
        goto label02;

     label08:
        $r13 := @caughtexception;

        r3 = $r13;

     label09:
        exitmonitor r1;

     label10:
        throw r3;

     label11:
        $r14 := @caughtexception;

        goto label02;

        catch android.hardware.camera2.utils.CameraRuntimeException from label01 to label02 with label05;
        catch android.os.RemoteException from label01 to label02 with label11;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void configureOutputs(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.util.List r1;
        java.lang.Object r2, $r23, $r25, $r29;
        java.lang.Throwable r3, $r31;
        java.util.HashSet r4, $r13;
        java.util.ArrayList r5, $r15, $r32;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8;
        android.hardware.camera2.utils.CameraRuntimeException r7, $r35;
        java.util.Iterator r8, r9;
        android.view.Surface r10, r12;
        java.lang.Integer r11, $r33;
        android.util.SparseArray $r14, $r22, $r27, $r28, $r30;
        java.lang.Runnable $r16, $r19, $r21;
        android.os.Handler $r17, $r18, $r20;
        boolean $z1, $z2, $z6;
        android.hardware.camera2.ICameraDeviceUser $r24, $r26;
        android.hardware.camera2.CameraAccessException $r34;
        java.lang.IllegalStateException $r36;
        android.os.RemoteException $r37;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: java.util.List;

        if r1 != null goto label01;

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>()>();

        r1 = $r32;

     label01:
        r2 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: void checkIfCameraClosed()>();

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        r4 = $r13;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r5 = $r15;

     label03:
        i0 = 0;

     label04:
        $r14 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mConfiguredOutputs>;

        $i3 = virtualinvoke $r14.<android.util.SparseArray: int size()>();

        if i0 >= $i3 goto label11;

        $r27 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mConfiguredOutputs>;

        i2 = virtualinvoke $r27.<android.util.SparseArray: int keyAt(int)>(i0);

        $r30 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mConfiguredOutputs>;

        $r29 = virtualinvoke $r30.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r12 = (android.view.Surface) $r29;

        $z6 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r12);

        if $z6 != 0 goto label06;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r33);

     label05:
        goto label29;

     label06:
        virtualinvoke r4.<java.util.HashSet: boolean remove(java.lang.Object)>(r12);

     label07:
        goto label29;

     label08:
        $r31 := @caughtexception;

        r3 = $r31;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r17 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r16 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnBusy>;

        virtualinvoke $r17.<android.os.Handler: boolean post(java.lang.Runnable)>($r16);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraDevice: void stopRepeating()>();

     label12:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDevice: void waitUntilIdle()>();

        r8 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r25 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.Integer) $r25;

        $r26 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        $i5 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r26.<android.hardware.camera2.ICameraDeviceUser: int deleteStream(int)>($i5);

        $r28 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mConfiguredOutputs>;

        $i7 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        virtualinvoke $r28.<android.util.SparseArray: void delete(int)>($i7);

     label14:
        goto label13;

     label15:
        $r35 := @caughtexception;

        r7 = $r35;

     label16:
        $i8 = virtualinvoke r7.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i8 != 4 goto label23;

        $r36 = new java.lang.IllegalStateException;

        specialinvoke $r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The camera is currently busy. You must wait until the previous operation completes.");

        throw $r36;

     label17:
        r9 = virtualinvoke r4.<java.util.HashSet: java.util.Iterator iterator()>();

     label18:
        $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label24;

        $r23 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.view.Surface) $r23;

        $r24 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        i1 = interfaceinvoke $r24.<android.hardware.camera2.ICameraDeviceUser: int createStream(int,int,int,android.view.Surface)>(0, 0, 0, r10);

        $r22 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mConfiguredOutputs>;

        virtualinvoke $r22.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r10);

     label19:
        goto label18;

     label20:
        $r37 := @caughtexception;

     label21:
        exitmonitor r2;

     label22:
        return;

     label23:
        $r34 = virtualinvoke r7.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r34;

     label24:
        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i4 <= 0 goto label27;

        $r20 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r21 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnIdle>;

        virtualinvoke $r20.<android.os.Handler: boolean post(java.lang.Runnable)>($r21);

     label25:
        exitmonitor r2;

     label26:
        return;

     label27:
        $r18 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r19 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnUnconfigured>;

        virtualinvoke $r18.<android.os.Handler: boolean post(java.lang.Runnable)>($r19);

     label28:
        goto label25;

     label29:
        i0 = i0 + 1;

        goto label04;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
        catch android.hardware.camera2.utils.CameraRuntimeException from label12 to label13 with label15;
        catch android.os.RemoteException from label12 to label13 with label20;
        catch java.lang.Throwable from label12 to label13 with label08;
        catch android.hardware.camera2.utils.CameraRuntimeException from label13 to label14 with label15;
        catch android.os.RemoteException from label13 to label14 with label20;
        catch java.lang.Throwable from label13 to label14 with label08;
        catch java.lang.Throwable from label16 to label17 with label08;
        catch android.hardware.camera2.utils.CameraRuntimeException from label17 to label18 with label15;
        catch android.os.RemoteException from label17 to label18 with label20;
        catch java.lang.Throwable from label17 to label18 with label08;
        catch android.hardware.camera2.utils.CameraRuntimeException from label18 to label19 with label15;
        catch android.os.RemoteException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label08;
        catch java.lang.Throwable from label21 to label22 with label08;
        catch java.lang.Throwable from label23 to label24 with label08;
        catch java.lang.Throwable from label24 to label25 with label08;
        catch java.lang.Throwable from label25 to label26 with label08;
        catch java.lang.Throwable from label27 to label28 with label08;
    }

    public android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r12;
        android.hardware.camera2.impl.CameraMetadataNative r3, $r7;
        android.hardware.camera2.utils.CameraRuntimeException r5, $r11;
        android.hardware.camera2.CaptureRequest$Builder r6, $r9;
        android.hardware.camera2.ICameraDeviceUser $r8;
        android.os.RemoteException $r10;
        android.hardware.camera2.CameraAccessException $r13;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: void checkIfCameraClosed()>();

        $r7 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r7.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r3 = $r7;

     label02:
        $r8 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r8.<android.hardware.camera2.ICameraDeviceUser: int createDefaultRequest(int,android.hardware.camera2.impl.CameraMetadataNative)>(i0, r3);

     label03:
        $r9 = new android.hardware.camera2.CaptureRequest$Builder;

        specialinvoke $r9.<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r3);

        r6 = $r9;

        exitmonitor r1;

     label04:
        return r6;

     label05:
        $r11 := @caughtexception;

        r5 = $r11;

     label06:
        $r13 = virtualinvoke r5.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r13;

     label07:
        $r12 := @caughtexception;

        r2 = $r12;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        return null;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch android.hardware.camera2.utils.CameraRuntimeException from label02 to label03 with label05;
        catch android.os.RemoteException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

     label1:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDevice: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void flush() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r10;
        android.hardware.camera2.utils.CameraRuntimeException r4, $r8;
        java.lang.Runnable $r5;
        android.os.Handler $r6;
        android.hardware.camera2.ICameraDeviceUser $r7;
        android.hardware.camera2.CameraAccessException $r9;
        android.os.RemoteException $r11;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: void checkIfCameraClosed()>();

        $r6 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r5 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnBusy>;

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

     label02:
        $r7 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r7.<android.hardware.camera2.ICameraDeviceUser: int flush()>();

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r8 := @caughtexception;

        r4 = $r8;

     label06:
        $r9 = virtualinvoke r4.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r9;

     label07:
        $r10 := @caughtexception;

        r2 = $r10;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch android.hardware.camera2.utils.CameraRuntimeException from label02 to label03 with label05;
        catch android.os.RemoteException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks getCallbacks()
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks mCallbacks>;

        return $r1;
    }

    public java.lang.String getId()
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        $r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String mCameraId>;

        return $r1;
    }

    public void setRemoteDevice(android.hardware.camera2.ICameraDeviceUser)
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.hardware.camera2.ICameraDeviceUser r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r10;
        java.lang.Runnable $r6, $r8;
        android.os.Handler $r7, $r9;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: android.hardware.camera2.ICameraDeviceUser;

        r2 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = staticinvoke <android.hardware.camera2.utils.CameraBinderDecorator: java.lang.Object newInstance(java.lang.Object)>(r1);

        $r5 = (android.hardware.camera2.ICameraDeviceUser) $r4;

        r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice> = $r5;

        $r7 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r6 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnOpened>;

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        $r9 = r0.<android.hardware.camera2.impl.CameraDevice: android.os.Handler mDeviceHandler>;

        $r8 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Runnable mCallOnUnconfigured>;

        virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>($r8);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        r3 = $r10;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int setRepeatingBurst(java.util.List, android.hardware.camera2.CameraDevice$CaptureListener, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.util.List r1;
        android.hardware.camera2.CameraDevice$CaptureListener r2;
        android.os.Handler r3;
        boolean $z0;
        java.lang.UnsupportedOperationException $r4;
        java.lang.String $r5;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$CaptureListener;

        r3 := @parameter2: android.os.Handler;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "Set Repeating burst request list is empty, do nothing!");

        return -1;

     label1:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Burst capture implemented yet");

        throw $r4;
    }

    public int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraDevice$CaptureListener, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraDevice$CaptureListener r2;
        android.os.Handler r3;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$CaptureListener;

        r3 := @parameter2: android.os.Handler;

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: int submitCaptureRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraDevice$CaptureListener,android.os.Handler,boolean)>(r1, r2, r3, 1);

        return $i0;
    }

    public void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r9;
        int i0, $i1;
        android.hardware.camera2.utils.CameraRuntimeException r4, $r8;
        java.util.ArrayList $r5;
        java.lang.Integer $r6;
        android.hardware.camera2.ICameraDeviceUser $r7;
        android.hardware.camera2.CameraAccessException $r10;
        android.os.RemoteException $r11;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: void checkIfCameraClosed()>();

        $i1 = r0.<android.hardware.camera2.impl.CameraDevice: int mRepeatingRequestId>;

        if $i1 == -1 goto label03;

        i0 = r0.<android.hardware.camera2.impl.CameraDevice: int mRepeatingRequestId>;

        r0.<android.hardware.camera2.impl.CameraDevice: int mRepeatingRequestId> = -1;

        $r5 = r0.<android.hardware.camera2.impl.CameraDevice: java.util.ArrayList mRepeatingRequestIdDeletedList>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label02:
        $r7 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r7.<android.hardware.camera2.ICameraDeviceUser: int cancelRequest(int)>(i0);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r8 := @caughtexception;

        r4 = $r8;

     label06:
        $r10 = virtualinvoke r4.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r10;

     label07:
        $r9 := @caughtexception;

        r2 = $r9;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch android.hardware.camera2.utils.CameraRuntimeException from label02 to label03 with label05;
        catch android.os.RemoteException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public void waitUntilIdle() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDevice r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r12;
        android.hardware.camera2.utils.CameraRuntimeException r4, $r9;
        int $i0;
        android.hardware.camera2.ICameraDeviceUser $r5;
        java.util.ArrayList $r6;
        android.util.SparseArray $r7;
        java.lang.IllegalStateException $r8;
        android.hardware.camera2.CameraAccessException $r10;
        android.os.RemoteException $r11;

        r0 := @this: android.hardware.camera2.impl.CameraDevice;

        r1 = r0.<android.hardware.camera2.impl.CameraDevice: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDevice: void checkIfCameraClosed()>();

        $i0 = r0.<android.hardware.camera2.impl.CameraDevice: int mRepeatingRequestId>;

        if $i0 == -1 goto label05;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Active repeating request ongoing");

        throw $r8;

     label02:
        $r12 := @caughtexception;

        r2 = $r12;

     label03:
        exitmonitor r1;

     label04:
        throw r2;

     label05:
        $r5 = r0.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r5.<android.hardware.camera2.ICameraDeviceUser: int waitUntilIdle()>();

     label06:
        r0.<android.hardware.camera2.impl.CameraDevice: int mRepeatingRequestId> = -1;

        $r6 = r0.<android.hardware.camera2.impl.CameraDevice: java.util.ArrayList mRepeatingRequestIdDeletedList>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

        $r7 = r0.<android.hardware.camera2.impl.CameraDevice: android.util.SparseArray mCaptureListenerMap>;

        virtualinvoke $r7.<android.util.SparseArray: void clear()>();

        exitmonitor r1;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

        r4 = $r9;

     label09:
        $r10 = virtualinvoke r4.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r10;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch android.hardware.camera2.utils.CameraRuntimeException from label05 to label06 with label08;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label11 to label12 with label02;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.impl.CameraDevice: int REQUEST_ID_NONE> = -1;

        return;
    }
}
