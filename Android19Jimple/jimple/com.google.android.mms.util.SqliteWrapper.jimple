public final class com.google.android.mms.util.SqliteWrapper extends java.lang.Object
{
    private static final java.lang.String SQLITE_EXCEPTION_DETAIL_MESSAGE;
    private static final java.lang.String TAG;

    private void <init>()
    {
        com.google.android.mms.util.SqliteWrapper r0;

        r0 := @this: com.google.android.mms.util.SqliteWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkSQLiteException(android.content.Context, android.database.sqlite.SQLiteException)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteException r1;
        boolean $z0;
        android.widget.Toast $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteException;

        $z0 = staticinvoke <com.google.android.mms.util.SqliteWrapper: boolean isLowMemory(android.database.sqlite.SQLiteException)>(r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>(r0, 17039535, 0);

        virtualinvoke $r2.<android.widget.Toast: void show()>();

        return;

     label1:
        throw r1;
    }

    public static int delete(android.content.Context, android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.content.Context r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        java.lang.String r3;
        java.lang.String[] r4;
        android.database.sqlite.SQLiteException r5, $r6;
        int i0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.ContentResolver;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

     label1:
        i0 = virtualinvoke r1.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r2, r3, r4);

     label2:
        return i0;

     label3:
        $r6 := @caughtexception;

        r5 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SqliteWrapper", "Catch a SQLiteException when delete: ", r5);

        staticinvoke <com.google.android.mms.util.SqliteWrapper: void checkSQLiteException(android.content.Context,android.database.sqlite.SQLiteException)>(r0, r5);

        return -1;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    public static android.net.Uri insert(android.content.Context, android.content.ContentResolver, android.net.Uri, android.content.ContentValues)
    {
        android.content.Context r0;
        android.content.ContentResolver r1;
        android.net.Uri r2, r5;
        android.content.ContentValues r3;
        android.database.sqlite.SQLiteException r4, $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.ContentResolver;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: android.content.ContentValues;

     label1:
        r5 = virtualinvoke r1.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(r2, r3);

     label2:
        return r5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SqliteWrapper", "Catch a SQLiteException when insert: ", r4);

        staticinvoke <com.google.android.mms.util.SqliteWrapper: void checkSQLiteException(android.content.Context,android.database.sqlite.SQLiteException)>(r0, r4);

        return null;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    private static boolean isLowMemory(android.content.Context)
    {
        android.content.Context r0;
        android.app.ActivityManager r1;
        android.app.ActivityManager$MemoryInfo r2, $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        if r0 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        r1 = (android.app.ActivityManager) $r3;

        $r4 = new android.app.ActivityManager$MemoryInfo;

        specialinvoke $r4.<android.app.ActivityManager$MemoryInfo: void <init>()>();

        r2 = $r4;

        virtualinvoke r1.<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>(r2);

        $z0 = r2.<android.app.ActivityManager$MemoryInfo: boolean lowMemory>;

        return $z0;
    }

    private static boolean isLowMemory(android.database.sqlite.SQLiteException)
    {
        android.database.sqlite.SQLiteException r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: android.database.sqlite.SQLiteException;

        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("unable to open database file");

        return $z0;
    }

    public static android.database.Cursor query(android.content.Context, android.content.ContentResolver, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.content.Context r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        java.lang.String[] r3, r5;
        java.lang.String r4, r6;
        android.database.sqlite.SQLiteException r7, $r9;
        android.database.Cursor r8;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.ContentResolver;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String[];

        r6 := @parameter6: java.lang.String;

     label1:
        r8 = virtualinvoke r1.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r2, r3, r4, r5, r6);

     label2:
        return r8;

     label3:
        $r9 := @caughtexception;

        r7 = $r9;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SqliteWrapper", "Catch a SQLiteException when query: ", r7);

        staticinvoke <com.google.android.mms.util.SqliteWrapper: void checkSQLiteException(android.content.Context,android.database.sqlite.SQLiteException)>(r0, r7);

        return null;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    public static boolean requery(android.content.Context, android.database.Cursor)
    {
        android.content.Context r0;
        android.database.Cursor r1;
        android.database.sqlite.SQLiteException r2, $r3;
        boolean z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.Cursor;

     label1:
        z0 = interfaceinvoke r1.<android.database.Cursor: boolean requery()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SqliteWrapper", "Catch a SQLiteException when requery: ", r2);

        staticinvoke <com.google.android.mms.util.SqliteWrapper: void checkSQLiteException(android.content.Context,android.database.sqlite.SQLiteException)>(r0, r2);

        return 0;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    public static int update(android.content.Context, android.content.ContentResolver, android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.content.Context r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        android.content.ContentValues r3;
        java.lang.String r4;
        java.lang.String[] r5;
        android.database.sqlite.SQLiteException r6, $r7;
        int i0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.ContentResolver;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: android.content.ContentValues;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String[];

     label1:
        i0 = virtualinvoke r1.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(r2, r3, r4, r5);

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

        r6 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SqliteWrapper", "Catch a SQLiteException when update: ", r6);

        staticinvoke <com.google.android.mms.util.SqliteWrapper: void checkSQLiteException(android.content.Context,android.database.sqlite.SQLiteException)>(r0, r6);

        return -1;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.google.android.mms.util.SqliteWrapper: java.lang.String TAG> = "SqliteWrapper";

        <com.google.android.mms.util.SqliteWrapper: java.lang.String SQLITE_EXCEPTION_DETAIL_MESSAGE> = "unable to open database file";

        return;
    }
}
