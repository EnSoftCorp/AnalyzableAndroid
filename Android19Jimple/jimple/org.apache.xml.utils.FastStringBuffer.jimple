public class org.apache.xml.utils.FastStringBuffer extends java.lang.Object
{
    private static final int CARRY_WS;
    static final boolean DEBUG_FORCE_FIXED_CHUNKSIZE;
    static final int DEBUG_FORCE_INIT_BITS;
    static final char[] SINGLE_SPACE;
    public static final int SUPPRESS_BOTH;
    public static final int SUPPRESS_LEADING_WS;
    public static final int SUPPRESS_TRAILING_WS;
    char[][] m_array;
    int m_chunkBits;
    int m_chunkMask;
    int m_chunkSize;
    int m_firstFree;
    org.apache.xml.utils.FastStringBuffer m_innerFSB;
    int m_lastChunk;
    int m_maxChunkBits;
    int m_rebundleBits;

    static void <clinit>()
    {
        char[] $r0;

        <org.apache.xml.utils.FastStringBuffer: int SUPPRESS_TRAILING_WS> = 2;

        <org.apache.xml.utils.FastStringBuffer: int SUPPRESS_LEADING_WS> = 1;

        <org.apache.xml.utils.FastStringBuffer: int SUPPRESS_BOTH> = 3;

        <org.apache.xml.utils.FastStringBuffer: int DEBUG_FORCE_INIT_BITS> = 0;

        <org.apache.xml.utils.FastStringBuffer: boolean DEBUG_FORCE_FIXED_CHUNKSIZE> = 1;

        <org.apache.xml.utils.FastStringBuffer: int CARRY_WS> = 4;

        $r0 = newarray (char)[1];

        $r0[0] = 32;

        <org.apache.xml.utils.FastStringBuffer: char[] SINGLE_SPACE> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.xml.utils.FastStringBuffer r0;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        specialinvoke r0.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int,int)>(10, 15, 2);

        return;
    }

    public void <init>(int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int i0;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int,int)>(i0, 15, 2);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int i0, i1;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int,int)>(i0, i1, 2);

        return;
    }

    public void <init>(int, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        char[][] $r1, $r3;
        char[] $r2;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = 2;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = null;

        i3 = i0;

        $r1 = newarray (char[])[16];

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r1;

        if i0 <= i3 goto label1;

        i0 = i3;

     label1:
        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = i0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = i3;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = i2;

        $i4 = 1 << i0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i4;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i6 = -1 + $i5;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i6;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r2 = newarray (char)[$i7];

        $r3[0] = $r2;

        return;
    }

    private void <init>(org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xml.utils.FastStringBuffer r0, r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        char[][] $r2, $r4;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = 2;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = null;

        $i0 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i0;

        $i1 = r1.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = $i1;

        $i2 = r1.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = $i2;

        $i3 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i3;

        $i4 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i4;

        $r2 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r2;

        $r3 = r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r3;

        $i5 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i6 = -1 + $i5;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i6;

        $i7 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i7;

        $r4 = newarray (char[])[16];

        r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r4;

        r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = r0;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 1;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        $i9 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i10 = $i9 + $i8;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i10;

        $i12 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i11 = 1 << $i12;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i11;

        $i14 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i13 = -1 + $i14;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i13;

        return;
    }

    private void getChars(int, int, char[], int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i2 := @parameter3: int;

        return;
    }

    static int sendNormalizedSAXcharacters(char[], int, int, org.xml.sax.ContentHandler, int) throws org.xml.sax.SAXException
    {
        char[] r0, $r2;
        int i0, i1, i2, i3, i4, i6, i7, $i8, $i9, $i10, $i11, $i13;
        org.xml.sax.ContentHandler r1;
        boolean z0, z1, $z2, $z3, $z4;
        byte b5;
        char $c12, $c14, $c15;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.xml.sax.ContentHandler;

        i2 := @parameter4: int;

        $i8 = i2 & 1;

        if $i8 == 0 goto label04;

        z0 = 1;

     label01:
        $i9 = i2 & 4;

        if $i9 == 0 goto label05;

        z1 = 1;

     label02:
        i3 = i0;

        i4 = i0 + i1;

        if z0 == 0 goto label08;

     label03:
        if i3 >= i4 goto label06;

        $c15 = r0[i3];

        $z4 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c15);

        if $z4 == 0 goto label06;

        i3 = i3 + 1;

        goto label03;

     label04:
        z0 = 0;

        goto label01;

     label05:
        z1 = 0;

        goto label02;

     label06:
        if i3 != i4 goto label08;

        return i2;

     label07:
        if i7 == i3 goto label08;

        z1 = 1;

     label08:
        if i3 >= i4 goto label14;

        i6 = i3;

     label09:
        if i3 >= i4 goto label10;

        $c14 = r0[i3];

        $z3 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c14);

        if $z3 != 0 goto label10;

        i3 = i3 + 1;

        goto label09;

     label10:
        if i6 == i3 goto label12;

        if z1 == 0 goto label11;

        $r2 = <org.apache.xml.utils.FastStringBuffer: char[] SINGLE_SPACE>;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r2, 0, 1);

        z1 = 0;

     label11:
        $i13 = i3 - i6;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>(r0, i6, $i13);

     label12:
        i7 = i3;

     label13:
        if i3 >= i4 goto label07;

        $c12 = r0[i3];

        $z2 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c12);

        if $z2 == 0 goto label07;

        i3 = i3 + 1;

        goto label13;

     label14:
        b5 = 0;

        if z1 == 0 goto label15;

        b5 = 4;

     label15:
        $i10 = i2 & 2;

        $i11 = b5 | $i10;

        return $i11;
    }

    public static void sendNormalizedSAXcharacters(char[], int, int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        char[] r0;
        int i0, i1;
        org.xml.sax.ContentHandler r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.xml.sax.ContentHandler;

        staticinvoke <org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)>(r0, i0, i1, r1, 3);

        return;
    }

    private final void setLength(int, org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xml.utils.FastStringBuffer r0, r1, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        char[][] $r2;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i2 = i0 >>> $i1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i2;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        if $i3 != 0 goto label1;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r5 == null goto label1;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        specialinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void setLength(int,org.apache.xml.utils.FastStringBuffer)>(i0, r1);

        return;

     label1:
        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i4;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = $i5;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = $i6;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i7;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i8;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r2;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r3;

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i9;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i11 = i0 & $i10;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i11;

        return;
    }

    public final void append(char)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r6;
        char c0;
        int i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        char[][] r1, r3, r4, $r5, $r7, $r8;
        char[] r2;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        c0 := @parameter0: char;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        if $i6 >= $i5 goto label2;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i18 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r2 = $r8[$i18];

     label1:
        i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i11 = i3 + 1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i11;

        r2[i3] = c0;

        return;

     label2:
        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i1 = lengthof $r5;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i8 = 1 + $i7;

        if $i8 != i1 goto label3;

        $i17 = i1 + 16;

        r4 = newarray (char[])[$i17];

        $r7 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r4, 0, i1);

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r4;

     label3:
        r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        i2 = 1 + $i9;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = i2;

        r2 = r1[i2];

        if r2 != null goto label5;

        $i12 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i13 = 1 << $i10;

        if $i12 != $i13 goto label4;

        $i16 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i14 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i16 >= $i14 goto label4;

        $r6 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r6.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r0);

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r6;

     label4:
        r3 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i15 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r2 = newarray (char)[$i15];

        r3[i4] = r2;

     label5:
        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        goto label1;
    }

    public final void append(java.lang.String)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r13;
        java.lang.String r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        char[][] r2, r3, $r4, $r6, $r8, $r10, $r12;
        char[] $r5, $r7, $r9, $r11;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 == 0 goto label1;

        i1 = 0;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r5 = $r4[$i5];

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i2 = $i7 - $i6;

     label3:
        if i0 <= 0 goto label8;

        if i2 <= i0 goto label4;

        i2 = i0;

     label4:
        $i12 = i1 + i2;

        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r7 = $r6[$i10];

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i1, $i12, $r7, $i11);

        i0 = i0 - i2;

        i1 = i1 + i2;

        if i0 <= 0 goto label3;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i3 = lengthof $r8;

        $i14 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i13 = 1 + $i14;

        if $i13 != i3 goto label5;

        $i22 = i3 + 16;

        r3 = newarray (char[])[$i22];

        $r12 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r3, 0, i3);

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r3;

     label5:
        r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i15 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        i4 = 1 + $i15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = i4;

        $r9 = r2[i4];

        if $r9 != null goto label7;

        $i19 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i17 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i16 = 1 << $i17;

        if $i19 != $i16 goto label6;

        $i23 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i20 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i23 >= $i20 goto label6;

        $r13 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r13.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r0);

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r13;

     label6:
        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i21 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i18 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r11 = newarray (char)[$i18];

        $r10[$i21] = $r11;

     label7:
        i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        goto label3;

     label8:
        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i8 = i2 + $i9;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i8;

        return;
    }

    public final void append(java.lang.StringBuffer)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r13;
        java.lang.StringBuffer r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        char[][] r2, r3, $r4, $r6, $r8, $r10, $r12;
        char[] $r5, $r7, $r9, $r11;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: java.lang.StringBuffer;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        i0 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        if i0 == 0 goto label1;

        i1 = 0;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r5 = $r4[$i5];

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i2 = $i7 - $i6;

     label3:
        if i0 <= 0 goto label8;

        if i2 <= i0 goto label4;

        i2 = i0;

     label4:
        $i12 = i1 + i2;

        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r7 = $r6[$i10];

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        virtualinvoke r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(i1, $i12, $r7, $i11);

        i0 = i0 - i2;

        i1 = i1 + i2;

        if i0 <= 0 goto label3;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i3 = lengthof $r8;

        $i14 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i13 = 1 + $i14;

        if $i13 != i3 goto label5;

        $i22 = i3 + 16;

        r3 = newarray (char[])[$i22];

        $r12 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r3, 0, i3);

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r3;

     label5:
        r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i15 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        i4 = 1 + $i15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = i4;

        $r9 = r2[i4];

        if $r9 != null goto label7;

        $i19 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i17 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i16 = 1 << $i17;

        if $i19 != $i16 goto label6;

        $i23 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i20 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i23 >= $i20 goto label6;

        $r13 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r13.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r0);

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r13;

     label6:
        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i21 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i18 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r11 = newarray (char)[$i18];

        $r10[$i21] = $r11;

     label7:
        i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        goto label3;

     label8:
        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i8 = i2 + $i9;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i8;

        return;
    }

    public final void append(org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xml.utils.FastStringBuffer r0, r1, $r13;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        char[][] r2, r3, $r4, $r6, $r7, $r10, $r14, $r15, $r16, $r17;
        char[] $r5, $r8, $r9, $r11, $r12, $r18, $r19;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        if r1 != null goto label02;

     label01:
        return;

     label02:
        i0 = virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if i0 == 0 goto label01;

        i1 = 0;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r5 = $r4[$i8];

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i2 = $i11 - $i9;

     label03:
        if i0 <= 0 goto label10;

        if i2 <= i0 goto label04;

        i2 = i0;

     label04:
        $i12 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i15 = i1 + $i12;

        $i17 = -1 + $i15;

        $i14 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i3 = $i17 >>> $i14;

        $i16 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i4 = i1 & $i16;

        $i18 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        i5 = $i18 - i4;

        if i5 <= i2 goto label05;

        i5 = i2;

     label05:
        $r6 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r9 = $r6[i3];

        $r7 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i19 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r8 = $r7[$i19];

        $i20 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, i4, $r8, $i20, i5);

        if i5 == i2 goto label06;

        $r15 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i31 = i3 + 1;

        $r18 = $r15[$i31];

        $r17 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i35 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r19 = $r17[$i35];

        $i34 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i36 = i5 + $i34;

        $i33 = i2 - i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, $r19, $i36, $i33);

     label06:
        i0 = i0 - i2;

        i1 = i1 + i2;

        if i0 <= 0 goto label03;

        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i6 = lengthof $r10;

        $i21 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i22 = 1 + $i21;

        if $i22 != i6 goto label07;

        $i32 = i6 + 16;

        r3 = newarray (char[])[$i32];

        $r16 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r3, 0, i6);

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r3;

     label07:
        r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i25 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        i7 = 1 + $i25;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = i7;

        $r11 = r2[i7];

        if $r11 != null goto label09;

        $i27 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i23 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i24 = 1 << $i23;

        if $i27 != $i24 goto label08;

        $i29 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i30 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i29 >= $i30 goto label08;

        $r13 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r13.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r0);

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r13;

     label08:
        $r14 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i26 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i28 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r12 = newarray (char)[$i28];

        $r14[$i26] = $r12;

     label09:
        i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        goto label03;

     label10:
        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i13 = i2 + $i10;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i13;

        return;
    }

    public final void append(char[], int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r13;
        char[] r1, $r5, $r8, $r9, $r11;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        char[][] r2, r3, $r4, $r6, $r7, $r10, $r12;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1;

        if i2 != 0 goto label1;

        return;

     label1:
        i3 = i0;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r5 = $r4[$i7];

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i4 = $i10 - $i8;

     label2:
        if i2 <= 0 goto label7;

        if i4 <= i2 goto label3;

        i4 = i2;

     label3:
        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r8 = $r6[$i11];

        $i13 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, $r8, $i13, i4);

        i2 = i2 - i4;

        i3 = i3 + i4;

        if i2 <= 0 goto label2;

        $r7 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i5 = lengthof $r7;

        $i15 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i14 = 1 + $i15;

        if $i14 != i5 goto label4;

        $i23 = i5 + 16;

        r3 = newarray (char[])[$i23];

        $r12 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r3, 0, i5);

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r3;

     label4:
        r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i16 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        i6 = 1 + $i16;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = i6;

        $r9 = r2[i6];

        if $r9 != null goto label6;

        $i20 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i18 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i17 = 1 << $i18;

        if $i20 != $i17 goto label5;

        $i24 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i21 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i24 >= $i21 goto label5;

        $r13 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r13.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r0);

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r13;

     label5:
        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i22 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i19 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r11 = newarray (char)[$i19];

        $r10[$i22] = $r11;

     label6:
        i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        goto label2;

     label7:
        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i12 = i4 + $i9;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i12;

        return;
    }

    public char charAt(int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r3, $r4;
        int i0, i1, $i2, $i3, $i4, $i6, $i7;
        char[][] $r1;
        char[] $r2;
        char $c5, $c8;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i1 = i0 >>> $i2;

        if i1 != 0 goto label1;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i7 = i0 & $i6;

        $c8 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>($i7);

        return $c8;

     label1:
        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r2 = $r1[i1];

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i4 = i0 & $i3;

        $c5 = $r2[$i4];

        return $c5;
    }

    protected java.lang.String getOneChunkString(int, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int i0, i1, i2;
        java.lang.String $r1;
        char[][] $r2;
        char[] $r3;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r3 = $r2[i0];

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, i1, i2);

        return $r1;
    }

    public java.lang.String getString(int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuffer $r1, $r2;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i2 = i0 & $i4;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i3 = i0 >>> $i5;

        $i7 = i2 + i1;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        if $i7 >= $i6 goto label1;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r4 != null goto label1;

        $r5 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.String getOneChunkString(int,int,int)>(i3, i2, i1);

        return $r5;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i1);

        $r2 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int,int)>($r1, i3, i2, i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    java.lang.StringBuffer getString(java.lang.StringBuffer, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        java.lang.StringBuffer r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i5 = i0 >>> $i2;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i4 = i0 & $i3;

        $r2 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int,int)>(r1, $i5, $i4, i1);

        return $r2;
    }

    java.lang.StringBuffer getString(java.lang.StringBuffer, int, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r5, $r7, $r10, $r13;
        java.lang.StringBuffer r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        char[][] $r2, $r8;
        char[] $r4, $r9;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i8 = i0 << $i7;

        $i9 = i1 + $i8;

        i3 = i2 + $i9;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i4 = i3 >>> $i10;

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i5 = i3 & $i11;

        i6 = i0;

     label1:
        if i6 >= i4 goto label4;

        if i6 != 0 goto label3;

        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r10 == null goto label3;

        $r13 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i17 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i16 = $i17 - i1;

        virtualinvoke $r13.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int)>(r1, i1, $i16);

     label2:
        i6 = i6 + 1;

        i1 = 0;

        goto label1;

     label3:
        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r9 = $r8[i6];

        $i14 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i15 = $i14 - i1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r9, i1, $i15);

        goto label2;

     label4:
        if i4 != 0 goto label6;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r5 == null goto label6;

        $r7 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i13 = i5 - i1;

        virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int)>(r1, i1, $i13);

     label5:
        return r1;

     label6:
        if i5 <= i1 goto label5;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r4 = $r2[i4];

        $i12 = i5 - i1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r4, i1, $i12);

        return r1;
    }

    public boolean isWhitespace(int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r3, $r4;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        boolean z0;
        char[][] $r1;
        char[] $r2;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i2 = i0 >>> $i6;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i3 = i0 & $i7;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        i4 = $i8 - i3;

     label1:
        if i1 <= 0 goto label7;

        if i1 > i4 goto label4;

        i5 = i1;

     label2:
        if i2 != 0 goto label5;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r3 == null goto label5;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        z0 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>(i3, i5);

     label3:
        if z0 != 0 goto label6;

        return 0;

     label4:
        i5 = i4;

        goto label2;

     label5:
        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r2 = $r1[i2];

        z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char[],int,int)>($r2, i3, i5);

        goto label3;

     label6:
        i1 = i1 - i5;

        i2 = i2 + 1;

        i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        i3 = 0;

        goto label1;

     label7:
        return 1;
    }

    public final int length()
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i0 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i3 = $i1 << $i0;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public final void reset()
    {
        org.apache.xml.utils.FastStringBuffer r0, r1, $r3;
        int[] r2, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r5;
        java.lang.Object $r6;
        char[][] $r7, $r9;
        char[] $r8;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        r1 = r0;

     label1:
        $r3 = r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r3 == null goto label2;

        r1 = r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        goto label1;

     label2:
        $i0 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i0;

        $i1 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i1;

        $i2 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i2;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = null;

        $r4 = newarray (int)[2];

        $r4[0] = 16;

        $r4[1] = 0;

        r2 = $r4;

        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, r2);

        $r7 = (char[][]) $r6;

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r7;

        $r9 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r8 = newarray (char)[$i3];

        $r9[0] = $r8;

        return;
    }

    public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler, int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.FastStringBuffer r0, $r4, $r5, $r8, $r9;
        org.xml.sax.ContentHandler r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        char[][] $r2, $r6;
        char[] $r3, $r7;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = 1;

        i3 = i0 + i1;

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i4 = i0 >>> $i9;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i5 = i0 & $i10;

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i6 = i3 >>> $i11;

        $i12 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i7 = i3 & $i12;

        i8 = i4;

     label1:
        if i8 >= i6 goto label4;

        if i8 != 0 goto label3;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r8 == null goto label3;

        $r9 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i20 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i19 = $i20 - i5;

        i2 = virtualinvoke $r9.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i5, $i19);

     label2:
        i8 = i8 + 1;

        i5 = 0;

        goto label1;

     label3:
        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r7 = $r6[i8];

        $i17 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i18 = $i17 - i5;

        i2 = staticinvoke <org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)>($r7, i5, $i18, r1, i2);

        goto label2;

     label4:
        if i6 != 0 goto label6;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r4 == null goto label6;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i16 = i7 - i5;

        i2 = virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i5, $i16);

     label5:
        return i2;

     label6:
        if i7 <= i5 goto label5;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r3 = $r2[i6];

        $i13 = i7 - i5;

        $i14 = i2 | 2;

        $i15 = staticinvoke <org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)>($r3, i5, $i13, r1, $i14);

        return $i15;
    }

    public void sendSAXComment(org.xml.sax.ext.LexicalHandler, int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.FastStringBuffer r0;
        org.xml.sax.ext.LexicalHandler r1;
        int i0, i1;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: org.xml.sax.ext.LexicalHandler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i0, i1);

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        interfaceinvoke r1.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r3, 0, i1);

        return;
    }

    public void sendSAXcharacters(org.xml.sax.ContentHandler, int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.FastStringBuffer r0, $r3, $r5, $r8, $r9, $r11;
        org.xml.sax.ContentHandler r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        char[][] $r2, $r6, $r10;
        char[] $r4, $r7, $r12;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i2 = i0 >>> $i8;

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i3 = i0 & $i9;

        $i11 = i3 + i1;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        if $i11 >= $i10 goto label2;

        $r11 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r11 != null goto label2;

        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r12 = $r10[i2];

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r12, i3, i1);

     label1:
        return;

     label2:
        i4 = i0 + i1;

        $i12 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i5 = i4 >>> $i12;

        $i13 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i6 = i4 & $i13;

        i7 = i2;

     label3:
        if i7 >= i5 goto label6;

        if i7 != 0 goto label5;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r8 == null goto label5;

        $r9 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i18 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i19 = $i18 - i3;

        virtualinvoke $r9.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i3, $i19);

     label4:
        i7 = i7 + 1;

        i3 = 0;

        goto label3;

     label5:
        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r7 = $r6[i7];

        $i16 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i17 = $i16 - i3;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r7, i3, $i17);

        goto label4;

     label6:
        if i5 != 0 goto label7;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r3 == null goto label7;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i15 = i6 - i3;

        virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i3, $i15);

        return;

     label7:
        if i6 <= i3 goto label1;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r4 = $r2[i5];

        $i14 = i6 - i3;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r4, i3, $i14);

        return;
    }

    public final void setLength(int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i2 = i0 >>> $i1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i2;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        if $i3 != 0 goto label2;

        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        specialinvoke $r2.<org.apache.xml.utils.FastStringBuffer: void setLength(int,org.apache.xml.utils.FastStringBuffer)>(i0, r0);

     label1:
        return;

     label2:
        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i5 = i0 & $i4;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i5;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        if $i6 != 0 goto label1;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        if $i7 <= 0 goto label1;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i9 = -1 + $i8;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i9;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i10;

        return;
    }

    public final int size()
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i0 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i3 = $i1 << $i0;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public final java.lang.String toString()
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuffer $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i4 = $i2 << $i1;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i0 = $i4 + $i3;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int,int)>($r1, 0, 0, i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
