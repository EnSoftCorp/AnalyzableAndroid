public class android.net.arp.ArpPeer extends java.lang.Object
{
    private static final int ARP_LENGTH;
    private static final boolean DBG;
    private static final int ETHERNET_TYPE;
    private static final int IPV4_LENGTH;
    private static final int MAC_ADDR_LENGTH;
    private static final int MAX_LENGTH;
    private static final java.lang.String TAG;
    private final byte[] L2_BROADCAST;
    private java.lang.String mInterfaceName;
    private final java.net.InetAddress mMyAddr;
    private final byte[] mMyMac;
    private final java.net.InetAddress mPeer;
    private final libcore.net.RawSocket mSocket;

    public void <init>(java.lang.String, java.net.InetAddress, java.lang.String, java.net.InetAddress) throws java.net.SocketException
    {
        android.net.arp.ArpPeer r0;
        java.lang.String r1, r3, $r10, $r12;
        java.net.InetAddress r2, r4;
        int i0, $i1, $i2, $i3, $i4;
        byte[] $r5, $r7, $r8, $r11;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r6;
        libcore.net.RawSocket $r9;
        byte $b5;

        r0 := @this: android.net.arp.ArpPeer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.InetAddress;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.net.InetAddress;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = newarray (byte)[6];

        r0.<android.net.arp.ArpPeer: byte[] mMyMac> = $r5;

        r0.<android.net.arp.ArpPeer: java.lang.String mInterfaceName> = r1;

        r0.<android.net.arp.ArpPeer: java.net.InetAddress mMyAddr> = r2;

        if r3 == null goto label2;

        i0 = 0;

     label1:
        if i0 >= 6 goto label2;

        $r11 = r0.<android.net.arp.ArpPeer: byte[] mMyMac>;

        $i3 = i0 * 3;

        $i1 = i0 * 3;

        $i2 = 2 + $i1;

        $r12 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r12, 16);

        $b5 = (byte) $i4;

        $r11[i0] = $b5;

        i0 = i0 + 1;

        goto label1;

     label2:
        $z0 = r2 instanceof java.net.Inet6Address;

        if $z0 != 0 goto label3;

        $z1 = r4 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IPv6 unsupported");

        throw $r6;

     label4:
        r0.<android.net.arp.ArpPeer: java.net.InetAddress mPeer> = r4;

        $r7 = newarray (byte)[6];

        r0.<android.net.arp.ArpPeer: byte[] L2_BROADCAST> = $r7;

        $r8 = r0.<android.net.arp.ArpPeer: byte[] L2_BROADCAST>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, -1);

        $r9 = new libcore.net.RawSocket;

        $r10 = r0.<android.net.arp.ArpPeer: java.lang.String mInterfaceName>;

        specialinvoke $r9.<libcore.net.RawSocket: void <init>(java.lang.String,short)>($r10, 2054);

        r0.<android.net.arp.ArpPeer: libcore.net.RawSocket mSocket> = $r9;

        return;
    }

    public static boolean doArp(java.lang.String, android.net.LinkProperties, int, int, int)
    {
        java.lang.String r0, r2, $r19;
        android.net.LinkProperties r1;
        int i0, i1, i2, i3, i4;
        java.util.Iterator r3, r5;
        boolean z0, z1, z2;
        java.net.InetAddress r4, r6;
        android.net.arp.ArpPeer r7, $r11;
        java.net.SocketException r8, $r18;
        java.util.Collection $r9, $r10;
        java.lang.Object $r12, $r16;
        byte[] $r13;
        android.net.RouteInfo $r14;
        android.net.LinkAddress $r15;
        java.lang.StringBuilder $r17, $r20, $r21;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkProperties;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r9 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getLinkAddresses()>();

        r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

        z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        r4 = null;

        if z0 == 0 goto label01;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (android.net.LinkAddress) $r16;

        r4 = virtualinvoke $r15.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

     label01:
        $r10 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getRoutes()>();

        r5 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        r6 = null;

        if z1 == 0 goto label02;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (android.net.RouteInfo) $r12;

        r6 = virtualinvoke $r14.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

     label02:
        $r11 = new android.net.arp.ArpPeer;

        specialinvoke $r11.<android.net.arp.ArpPeer: void <init>(java.lang.String,java.net.InetAddress,java.lang.String,java.net.InetAddress)>(r2, r4, r0, r6);

        r7 = $r11;

     label03:
        i3 = 0;

        i4 = 0;

     label04:
        if i4 >= i1 goto label12;

     label05:
        $r13 = virtualinvoke r7.<android.net.arp.ArpPeer: byte[] doArp(int)>(i0);

        if $r13 == null goto label11;

     label06:
        i3 = i3 + 1;

        goto label11;

     label07:
        virtualinvoke r7.<android.net.arp.ArpPeer: void close()>();

     label08:
        return z2;

     label09:
        z2 = 0;

        goto label07;

     label10:
        $r18 := @caughtexception;

        r8 = $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ARP test initiation failure: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ArpPeer", $r19);

        return 1;

     label11:
        i4 = i4 + 1;

        goto label04;

     label12:
        if i3 < i2 goto label09;

        z2 = 1;

        goto label07;

        catch java.net.SocketException from label02 to label03 with label10;
        catch java.net.SocketException from label05 to label06 with label10;
        catch java.net.SocketException from label07 to label08 with label10;
    }

    public void close()
    {
        android.net.arp.ArpPeer r0;
        libcore.net.RawSocket $r2;
        java.io.IOException $r3;

        r0 := @this: android.net.arp.ArpPeer;

     label1:
        $r2 = r0.<android.net.arp.ArpPeer: libcore.net.RawSocket mSocket>;

        virtualinvoke $r2.<libcore.net.RawSocket: void close()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public byte[] doArp(int)
    {
        android.net.arp.ArpPeer r0;
        int i0, $i7, $i8, $i9, $i14;
        java.nio.ByteBuffer r1;
        byte[] r2, r3, r4, $r15, $r16, $r21, $r22, $r23;
        long l1, l2, $l3, $l4, $l5, $l10;
        java.net.InetAddress $r5, $r14;
        java.nio.ByteOrder $r6;
        libcore.net.RawSocket $r25, $r26;
        byte $b11, $b12, $b13, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23, $b24, $b25, $b26, $b27, $b28;

        r0 := @this: android.net.arp.ArpPeer;

        i0 := @parameter0: int;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1500);

        $r5 = r0.<android.net.arp.ArpPeer: java.net.InetAddress mPeer>;

        r2 = virtualinvoke $r5.<java.net.InetAddress: byte[] getAddress()>();

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = (long) i0;

        l1 = $l4 + $l3;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r6 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r6);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(2048);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(6);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(4);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(1);

        $r16 = r0.<android.net.arp.ArpPeer: byte[] mMyMac>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r16);

        $r14 = r0.<android.net.arp.ArpPeer: java.net.InetAddress mMyAddr>;

        $r15 = virtualinvoke $r14.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r15);

        $r21 = newarray (byte)[6];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r21);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r25 = r0.<android.net.arp.ArpPeer: libcore.net.RawSocket mSocket>;

        $r22 = r0.<android.net.arp.ArpPeer: byte[] L2_BROADCAST>;

        $r23 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r25.<libcore.net.RawSocket: int write(byte[],byte[],int,int)>($r22, $r23, 0, $i7);

        r3 = newarray (byte)[1500];

     label1:
        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b11 = $l5 cmp l1;

        if $b11 >= 0 goto label2;

        $l10 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = l1 - $l10;

        $r26 = r0.<android.net.arp.ArpPeer: libcore.net.RawSocket mSocket>;

        $i8 = lengthof r3;

        $i9 = (int) l2;

        $i14 = virtualinvoke $r26.<libcore.net.RawSocket: int read(byte[],int,int,int,int)>(r3, 0, $i8, -1, $i9);

        if $i14 < 28 goto label1;

        $b13 = r3[0];

        if $b13 != 0 goto label1;

        $b12 = r3[1];

        if $b12 != 1 goto label1;

        $b18 = r3[2];

        if $b18 != 8 goto label1;

        $b17 = r3[3];

        if $b17 != 0 goto label1;

        $b16 = r3[4];

        if $b16 != 6 goto label1;

        $b15 = r3[5];

        if $b15 != 4 goto label1;

        $b23 = r3[6];

        if $b23 != 0 goto label1;

        $b24 = r3[7];

        if $b24 != 2 goto label1;

        $b26 = r3[14];

        $b25 = r2[0];

        if $b26 != $b25 goto label1;

        $b20 = r3[15];

        $b19 = r2[1];

        if $b20 != $b19 goto label1;

        $b22 = r3[16];

        $b21 = r2[2];

        if $b22 != $b21 goto label1;

        $b28 = r3[17];

        $b27 = r2[3];

        if $b28 != $b27 goto label1;

        r4 = newarray (byte)[6];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 8, r4, 0, 6);

        return r4;

     label2:
        return null;
    }

    public static void <clinit>()
    {
        <android.net.arp.ArpPeer: java.lang.String TAG> = "ArpPeer";

        <android.net.arp.ArpPeer: int MAX_LENGTH> = 1500;

        <android.net.arp.ArpPeer: int MAC_ADDR_LENGTH> = 6;

        <android.net.arp.ArpPeer: int IPV4_LENGTH> = 4;

        <android.net.arp.ArpPeer: int ETHERNET_TYPE> = 1;

        <android.net.arp.ArpPeer: boolean DBG> = 0;

        <android.net.arp.ArpPeer: int ARP_LENGTH> = 28;

        return;
    }
}
