public class gov.nist.javax.sip.parser.ims.PServedUserParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PServedUserParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PServedUserParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PServedUserParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PServedUserParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PServedUserParser r0;
        java.lang.Throwable r1, $r15;
        gov.nist.javax.sip.header.ims.PServedUser r2, $r10;
        java.lang.String r3;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r4, $r6, $r7, $r9, $r11, $r12;
        gov.nist.javax.sip.address.AddressFactoryImpl $r13;
        javax.sip.address.Address $r14;

        r0 := @this: gov.nist.javax.sip.parser.ims.PServedUserParser;

        $z0 = <gov.nist.javax.sip.parser.ims.PServedUserParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: void dbg_enter(java.lang.String)>("PServedUser.parse");

     label1:
        $r4 = r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2143);

        $r6 = r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        $r7 = r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r9 = r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: void SPorHT()>();

        $r10 = new gov.nist.javax.sip.header.ims.PServedUser;

        specialinvoke $r10.<gov.nist.javax.sip.header.ims.PServedUser: void <init>()>();

        r2 = $r10;

        $r11 = r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

        $r12 = r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: gov.nist.core.LexerCore lexer>;

        r3 = virtualinvoke $r12.<gov.nist.core.LexerCore: java.lang.String byteStringNoSemicolon()>();

        $r13 = new gov.nist.javax.sip.address.AddressFactoryImpl;

        specialinvoke $r13.<gov.nist.javax.sip.address.AddressFactoryImpl: void <init>()>();

        $r14 = virtualinvoke $r13.<gov.nist.javax.sip.address.AddressFactoryImpl: javax.sip.address.Address createAddress(java.lang.String)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.header.ims.PServedUser: void setAddress(javax.sip.address.Address)>($r14);

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r2);

     label2:
        $z1 = <gov.nist.javax.sip.parser.ims.PServedUserParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: void dbg_leave(java.lang.String)>("PServedUser.parse");

     label3:
        return r2;

     label4:
        $r15 := @caughtexception;

        r1 = $r15;

        $z2 = <gov.nist.javax.sip.parser.ims.PServedUserParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PServedUserParser: void dbg_leave(java.lang.String)>("PServedUser.parse");

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
