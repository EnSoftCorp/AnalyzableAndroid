public class com.android.server.location.FlpHardwareProvider extends java.lang.Object
{
    private static final int FLP_RESULT_ERROR;
    private static final int FLP_RESULT_ID_EXISTS;
    private static final int FLP_RESULT_ID_UNKNOWN;
    private static final int FLP_RESULT_INSUFFICIENT_MEMORY;
    private static final int FLP_RESULT_INVALID_GEOFENCE_TRANSITION;
    private static final int FLP_RESULT_SUCCESS;
    private static final int FLP_RESULT_TOO_MANY_GEOFENCES;
    public static final java.lang.String GEOFENCING;
    public static final java.lang.String LOCATION;
    private static final java.lang.String TAG;
    private static com.android.server.location.FlpHardwareProvider sSingletonInstance;
    private final android.content.Context mContext;
    private final android.location.IFusedGeofenceHardware mGeofenceHardwareService;
    private android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareSink;
    private final android.hardware.location.IFusedLocationHardware mLocationHardware;
    private android.hardware.location.IFusedLocationHardwareSink mLocationSink;
    private final java.lang.Object mLocationSinkLock;

    static void <clinit>()
    {
        <com.android.server.location.FlpHardwareProvider: java.lang.String TAG> = "FlpHardwareProvider";

        <com.android.server.location.FlpHardwareProvider: java.lang.String LOCATION> = "Location";

        <com.android.server.location.FlpHardwareProvider: java.lang.String GEOFENCING> = "Geofencing";

        <com.android.server.location.FlpHardwareProvider: int FLP_RESULT_TOO_MANY_GEOFENCES> = -3;

        <com.android.server.location.FlpHardwareProvider: int FLP_RESULT_SUCCESS> = 0;

        <com.android.server.location.FlpHardwareProvider: int FLP_RESULT_INVALID_GEOFENCE_TRANSITION> = -6;

        <com.android.server.location.FlpHardwareProvider: int FLP_RESULT_INSUFFICIENT_MEMORY> = -2;

        <com.android.server.location.FlpHardwareProvider: int FLP_RESULT_ID_UNKNOWN> = -5;

        <com.android.server.location.FlpHardwareProvider: int FLP_RESULT_ID_EXISTS> = -4;

        <com.android.server.location.FlpHardwareProvider: int FLP_RESULT_ERROR> = -1;

        <com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider sSingletonInstance> = null;

        staticinvoke <com.android.server.location.FlpHardwareProvider: void nativeClassInit()>();

        return;
    }

    private void <init>(android.content.Context)
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.content.Context r1, $r7;
        android.location.LocationManager r2;
        android.location.LocationRequest r3;
        java.lang.Object $r4, $r8;
        com.android.server.location.FlpHardwareProvider$1 $r5;
        com.android.server.location.FlpHardwareProvider$2 $r6;
        com.android.server.location.FlpHardwareProvider$NetworkLocationListener $r9;
        android.os.Looper $r10;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareSink> = null;

        r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardwareSink mLocationSink> = null;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.location.FlpHardwareProvider: java.lang.Object mLocationSinkLock> = $r4;

        $r5 = new com.android.server.location.FlpHardwareProvider$1;

        specialinvoke $r5.<com.android.server.location.FlpHardwareProvider$1: void <init>(com.android.server.location.FlpHardwareProvider)>(r0);

        r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardware mLocationHardware> = $r5;

        $r6 = new com.android.server.location.FlpHardwareProvider$2;

        specialinvoke $r6.<com.android.server.location.FlpHardwareProvider$2: void <init>(com.android.server.location.FlpHardwareProvider)>(r0);

        r0.<com.android.server.location.FlpHardwareProvider: android.location.IFusedGeofenceHardware mGeofenceHardwareService> = $r6;

        r0.<com.android.server.location.FlpHardwareProvider: android.content.Context mContext> = r1;

        $r7 = r0.<com.android.server.location.FlpHardwareProvider: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("location");

        r2 = (android.location.LocationManager) $r8;

        r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>("passive", 0L, 0.0F, 0);

        virtualinvoke r3.<android.location.LocationRequest: void setHideFromAppOps(boolean)>(1);

        $r9 = new com.android.server.location.FlpHardwareProvider$NetworkLocationListener;

        specialinvoke $r9.<com.android.server.location.FlpHardwareProvider$NetworkLocationListener: void <init>(com.android.server.location.FlpHardwareProvider,com.android.server.location.FlpHardwareProvider$1)>(r0, null);

        $r10 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        virtualinvoke r2.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>(r3, $r9, $r10);

        return;
    }

    static java.lang.Object access$100(com.android.server.location.FlpHardwareProvider)
    {
        com.android.server.location.FlpHardwareProvider r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        $r1 = r0.<com.android.server.location.FlpHardwareProvider: java.lang.Object mLocationSinkLock>;

        return $r1;
    }

    static boolean access$1000(com.android.server.location.FlpHardwareProvider)
    {
        com.android.server.location.FlpHardwareProvider r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        $z0 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: boolean nativeIsDeviceContextSupported()>();

        return $z0;
    }

    static void access$1100(com.android.server.location.FlpHardwareProvider, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeInjectDeviceContext(int)>(i0);

        return;
    }

    static boolean access$1200(com.android.server.location.FlpHardwareProvider)
    {
        com.android.server.location.FlpHardwareProvider r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        $z0 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: boolean nativeIsGeofencingSupported()>();

        return $z0;
    }

    static void access$1300(com.android.server.location.FlpHardwareProvider, android.hardware.location.GeofenceHardwareRequestParcelable[])
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.hardware.location.GeofenceHardwareRequestParcelable[] r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter1: android.hardware.location.GeofenceHardwareRequestParcelable[];

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeAddGeofences(android.hardware.location.GeofenceHardwareRequestParcelable[])>(r1);

        return;
    }

    static void access$1400(com.android.server.location.FlpHardwareProvider, int[])
    {
        com.android.server.location.FlpHardwareProvider r0;
        int[] r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter1: int[];

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeRemoveGeofences(int[])>(r1);

        return;
    }

    static void access$1500(com.android.server.location.FlpHardwareProvider, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativePauseGeofence(int)>(i0);

        return;
    }

    static void access$1600(com.android.server.location.FlpHardwareProvider, int, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeResumeGeofence(int,int)>(i0, i1);

        return;
    }

    static void access$1700(com.android.server.location.FlpHardwareProvider, int, int, int, int, int, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeModifyGeofenceOption(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        return;
    }

    static void access$1800(com.android.server.location.FlpHardwareProvider, android.location.Location)
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.location.Location r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter1: android.location.Location;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeInjectLocation(android.location.Location)>(r1);

        return;
    }

    static android.hardware.location.IFusedLocationHardwareSink access$200(com.android.server.location.FlpHardwareProvider)
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.hardware.location.IFusedLocationHardwareSink $r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        $r1 = r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardwareSink mLocationSink>;

        return $r1;
    }

    static android.hardware.location.IFusedLocationHardwareSink access$202(com.android.server.location.FlpHardwareProvider, android.hardware.location.IFusedLocationHardwareSink)
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.hardware.location.IFusedLocationHardwareSink r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter1: android.hardware.location.IFusedLocationHardwareSink;

        r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardwareSink mLocationSink> = r1;

        return r1;
    }

    static int access$300(com.android.server.location.FlpHardwareProvider)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int $i0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        $i0 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: int nativeGetBatchSize()>();

        return $i0;
    }

    static void access$400(com.android.server.location.FlpHardwareProvider, int, android.location.FusedBatchOptions)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0;
        android.location.FusedBatchOptions r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        r1 := @parameter2: android.location.FusedBatchOptions;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeStartBatching(int,android.location.FusedBatchOptions)>(i0, r1);

        return;
    }

    static void access$500(com.android.server.location.FlpHardwareProvider, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeStopBatching(int)>(i0);

        return;
    }

    static void access$600(com.android.server.location.FlpHardwareProvider, int, android.location.FusedBatchOptions)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0;
        android.location.FusedBatchOptions r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        r1 := @parameter2: android.location.FusedBatchOptions;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeUpdateBatchingOptions(int,android.location.FusedBatchOptions)>(i0, r1);

        return;
    }

    static void access$700(com.android.server.location.FlpHardwareProvider, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeRequestBatchedLocation(int)>(i0);

        return;
    }

    static boolean access$800(com.android.server.location.FlpHardwareProvider)
    {
        com.android.server.location.FlpHardwareProvider r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        $z0 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: boolean nativeIsDiagnosticSupported()>();

        return $z0;
    }

    static void access$900(com.android.server.location.FlpHardwareProvider, java.lang.String)
    {
        com.android.server.location.FlpHardwareProvider r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeInjectDiagnosticData(java.lang.String)>(r1);

        return;
    }

    private android.hardware.location.GeofenceHardwareImpl getGeofenceHardwareSink()
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.hardware.location.GeofenceHardwareImpl $r1, $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        $r1 = r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareSink>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.location.FlpHardwareProvider: android.content.Context mContext>;

        $r4 = staticinvoke <android.hardware.location.GeofenceHardwareImpl: android.hardware.location.GeofenceHardwareImpl getInstance(android.content.Context)>($r3);

        r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareSink> = $r4;

     label1:
        $r2 = r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl mGeofenceHardwareSink>;

        return $r2;
    }

    public static com.android.server.location.FlpHardwareProvider getInstance(android.content.Context)
    {
        android.content.Context r0;
        com.android.server.location.FlpHardwareProvider $r1, $r2, $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = <com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider sSingletonInstance>;

        if $r1 != null goto label1;

        $r3 = new com.android.server.location.FlpHardwareProvider;

        specialinvoke $r3.<com.android.server.location.FlpHardwareProvider: void <init>(android.content.Context)>(r0);

        <com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider sSingletonInstance> = $r3;

     label1:
        $r2 = <com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider sSingletonInstance>;

        return $r2;
    }

    public static boolean isSupported()
    {
        boolean $z0;

        $z0 = staticinvoke <com.android.server.location.FlpHardwareProvider: boolean nativeIsSupported()>();

        return $z0;
    }

    private native void nativeAddGeofences(android.hardware.location.GeofenceHardwareRequestParcelable[]);

    private static native void nativeClassInit();

    private native void nativeCleanup();

    private native int nativeGetBatchSize();

    private native void nativeInit();

    private native void nativeInjectDeviceContext(int);

    private native void nativeInjectDiagnosticData(java.lang.String);

    private native void nativeInjectLocation(android.location.Location);

    private native boolean nativeIsDeviceContextSupported();

    private native boolean nativeIsDiagnosticSupported();

    private native boolean nativeIsGeofencingSupported();

    private static native boolean nativeIsSupported();

    private native void nativeModifyGeofenceOption(int, int, int, int, int, int);

    private native void nativePauseGeofence(int);

    private native void nativeRemoveGeofences(int[]);

    private native void nativeRequestBatchedLocation(int);

    private native void nativeResumeGeofence(int, int);

    private native void nativeStartBatching(int, android.location.FusedBatchOptions);

    private native void nativeStopBatching(int);

    private native void nativeUpdateBatchingOptions(int, android.location.FusedBatchOptions);

    private void onDataReport(java.lang.String)
    {
        com.android.server.location.FlpHardwareProvider r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        android.hardware.location.IFusedLocationHardwareSink r4, $r6;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.location.FlpHardwareProvider: java.lang.Object mLocationSinkLock>;

        entermonitor r2;

     label1:
        r4 = r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardwareSink mLocationSink>;

        exitmonitor r2;

     label2:
        $r6 = r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardwareSink mLocationSink>;

        if $r6 == null goto label3;

        interfaceinvoke r4.<android.hardware.location.IFusedLocationHardwareSink: void onDiagnosticDataAvailable(java.lang.String)>(r1);

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FlpHardwareProvider", "RemoteException calling onDiagnosticDataAvailable");

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void onGeofenceAdd(int, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1, $i2;
        android.hardware.location.GeofenceHardwareImpl $r1;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl getGeofenceHardwareSink()>();

        $i2 = staticinvoke <com.android.server.location.FlpHardwareProvider: int translateToGeofenceHardwareStatus(int)>(i1);

        virtualinvoke $r1.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceAddStatus(int,int)>(i0, $i2);

        return;
    }

    private void onGeofenceMonitorStatus(int, int, android.location.Location)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1;
        android.location.Location r1, r2;
        android.hardware.location.GeofenceHardwareImpl $r3;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.location.Location;

        r2 = null;

        if r1 == null goto label1;

        r2 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.location.Location updateLocationInformation(android.location.Location)>(r1);

     label1:
        $r3 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl getGeofenceHardwareSink()>();

        virtualinvoke $r3.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceMonitorStatus(int,int,android.location.Location,int)>(1, i0, r2, i1);

        return;
    }

    private void onGeofencePause(int, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1, $i2;
        android.hardware.location.GeofenceHardwareImpl $r1;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl getGeofenceHardwareSink()>();

        $i2 = staticinvoke <com.android.server.location.FlpHardwareProvider: int translateToGeofenceHardwareStatus(int)>(i1);

        virtualinvoke $r1.<android.hardware.location.GeofenceHardwareImpl: void reportGeofencePauseStatus(int,int)>(i0, $i2);

        return;
    }

    private void onGeofenceRemove(int, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1, $i2;
        android.hardware.location.GeofenceHardwareImpl $r1;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl getGeofenceHardwareSink()>();

        $i2 = staticinvoke <com.android.server.location.FlpHardwareProvider: int translateToGeofenceHardwareStatus(int)>(i1);

        virtualinvoke $r1.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceRemoveStatus(int,int)>(i0, $i2);

        return;
    }

    private void onGeofenceResume(int, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1, $i2;
        android.hardware.location.GeofenceHardwareImpl $r1;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl getGeofenceHardwareSink()>();

        $i2 = staticinvoke <com.android.server.location.FlpHardwareProvider: int translateToGeofenceHardwareStatus(int)>(i1);

        virtualinvoke $r1.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceResumeStatus(int,int)>(i0, $i2);

        return;
    }

    private void onGeofenceTransition(int, android.location.Location, int, long, int)
    {
        com.android.server.location.FlpHardwareProvider r0;
        int i0, i1, i3;
        android.location.Location r1, $r3;
        long l2;
        android.hardware.location.GeofenceHardwareImpl $r2;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        i0 := @parameter0: int;

        r1 := @parameter1: android.location.Location;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        i3 := @parameter4: int;

        $r2 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.GeofenceHardwareImpl getGeofenceHardwareSink()>();

        $r3 = specialinvoke r0.<com.android.server.location.FlpHardwareProvider: android.location.Location updateLocationInformation(android.location.Location)>(r1);

        virtualinvoke $r2.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceTransition(int,android.location.Location,int,long,int,int)>(i0, $r3, i1, l2, 1, i3);

        return;
    }

    private void onLocationReport(android.location.Location[])
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.location.Location[] r1;
        int i0, i1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        android.hardware.location.IFusedLocationHardwareSink r4;
        android.location.Location r6;
        long $l2;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter0: android.location.Location[];

        i0 = lengthof r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        r6 = r1[i1];

        virtualinvoke r6.<android.location.Location: void setProvider(java.lang.String)>("fused");

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        virtualinvoke r6.<android.location.Location: void setElapsedRealtimeNanos(long)>($l2);

        i1 = i1 + 1;

        goto label01;

     label02:
        r2 = r0.<com.android.server.location.FlpHardwareProvider: java.lang.Object mLocationSinkLock>;

        entermonitor r2;

     label03:
        r4 = r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardwareSink mLocationSink>;

        exitmonitor r2;

     label04:
        if r4 == null goto label06;

     label05:
        interfaceinvoke r4.<android.hardware.location.IFusedLocationHardwareSink: void onLocationAvailable(android.location.Location[])>(r1);

     label06:
        return;

     label07:
        $r7 := @caughtexception;

        r3 = $r7;

     label08:
        exitmonitor r2;

     label09:
        throw r3;

     label10:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FlpHardwareProvider", "RemoteException calling onLocationAvailable");

        return;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private static int translateToGeofenceHardwareStatus(int)
    {
        int i0;
        byte b1;
        java.lang.Object[] r0;
        java.lang.Integer $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        b1 = 0;

        tableswitch(i0)
        {
            case -6: goto label7;
            case -5: goto label6;
            case -4: goto label5;
            case -3: goto label4;
            case -2: goto label1;
            case -1: goto label3;
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0[0] = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid FlpHal result code: %d", r0);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FlpHardwareProvider", $r2);

        b1 = 5;

     label2:
        return b1;

     label3:
        return 5;

     label4:
        return 1;

     label5:
        return 2;

     label6:
        return 3;

     label7:
        return 4;
    }

    private android.location.Location updateLocationInformation(android.location.Location)
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.location.Location r1;
        long $l0;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        r1 := @parameter0: android.location.Location;

        virtualinvoke r1.<android.location.Location: void setProvider(java.lang.String)>("fused");

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        virtualinvoke r1.<android.location.Location: void setElapsedRealtimeNanos(long)>($l0);

        return r1;
    }

    public android.location.IFusedGeofenceHardware getGeofenceHardware()
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.location.IFusedGeofenceHardware $r1;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeInit()>();

        $r1 = r0.<com.android.server.location.FlpHardwareProvider: android.location.IFusedGeofenceHardware mGeofenceHardwareService>;

        return $r1;
    }

    public android.hardware.location.IFusedLocationHardware getLocationHardware()
    {
        com.android.server.location.FlpHardwareProvider r0;
        android.hardware.location.IFusedLocationHardware $r1;

        r0 := @this: com.android.server.location.FlpHardwareProvider;

        specialinvoke r0.<com.android.server.location.FlpHardwareProvider: void nativeInit()>();

        $r1 = r0.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        return $r1;
    }
}
