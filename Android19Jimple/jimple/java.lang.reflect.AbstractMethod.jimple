public abstract class java.lang.reflect.AbstractMethod extends java.lang.reflect.AccessibleObject
{
    protected final java.lang.reflect.ArtMethod artMethod;

    protected void <init>(java.lang.reflect.ArtMethod)
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.lang.reflect.AbstractMethod;

        r1 := @parameter0: java.lang.reflect.ArtMethod;

        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("artMethod == null");

        throw $r2;

     label1:
        r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod> = r1;

        return;
    }

    private static int fixMethodFlags(int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i2 = i0 & 1024;

        if $i2 == 0 goto label1;

        i0 = i0 & -257;

     label1:
        i1 = i0 & -33;

        $i3 = i1 & 131072;

        if $i3 == 0 goto label2;

        i1 = i1 | 32;

     label2:
        $i4 = 65535 & i1;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.AbstractMethod r0, $r2;
        java.lang.Object r1;
        boolean $z0;
        java.lang.reflect.ArtMethod $r3, $r4;

        r0 := @this: java.lang.reflect.AbstractMethod;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.reflect.AbstractMethod;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $r2 = (java.lang.reflect.AbstractMethod) r1;

        $r3 = $r2.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        if $r4 != $r3 goto label1;

        return 1;
    }

    public final int getAccessFlags()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        int $i0;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        return $i0;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.Class r1;
        java.lang.annotation.Annotation $r2;

        r0 := @this: java.lang.reflect.AbstractMethod;

        r1 := @parameter0: java.lang.Class;

        $r2 = specialinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(r1);

        return $r2;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.annotation.Annotation[] $r1;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = specialinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>();

        return $r1;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.AbstractMethod r0;
        java.util.List r1;
        int $i0;
        java.lang.annotation.Annotation[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.lang.reflect.AbstractMethod;

        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.util.List getDeclaredAnnotations(java.lang.reflect.AnnotatedElement)>(r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (java.lang.annotation.Annotation)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.annotation.Annotation[]) $r3;

        return $r4;
    }

    java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: java.lang.Class getDeclaringClass()>();

        return $r2;
    }

    public final int getDexMethodIndex()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        int $i0;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: int getDexMethodIndex()>();

        return $i0;
    }

    java.lang.reflect.Type[] getGenericExceptionTypes()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.AbstractMethod$GenericInfo $r1;
        libcore.reflect.ListOfTypes $r2;
        java.lang.reflect.Type[] $r3;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = virtualinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.AbstractMethod$GenericInfo getMethodOrConstructorGenericInfo()>();

        $r2 = $r1.<java.lang.reflect.AbstractMethod$GenericInfo: libcore.reflect.ListOfTypes genericExceptionTypes>;

        $r3 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r2, 0);

        return $r3;
    }

    java.lang.reflect.Type[] getGenericParameterTypes()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.AbstractMethod$GenericInfo $r1;
        libcore.reflect.ListOfTypes $r2;
        java.lang.reflect.Type[] $r3;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = virtualinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.AbstractMethod$GenericInfo getMethodOrConstructorGenericInfo()>();

        $r2 = $r1.<java.lang.reflect.AbstractMethod$GenericInfo: libcore.reflect.ListOfTypes genericParameterTypes>;

        $r3 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r2, 0);

        return $r3;
    }

    final java.lang.reflect.AbstractMethod$GenericInfo getMethodOrConstructorGenericInfo()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.String r1;
        boolean z0;
        java.lang.reflect.Constructor r2;
        java.lang.reflect.Member r3;
        java.lang.Class[] r4;
        libcore.reflect.GenericSignatureParser r5, $r7;
        java.lang.reflect.Method r6;
        java.lang.Class $r8;
        java.lang.ClassLoader $r9;
        java.lang.reflect.GenericDeclaration $r10, $r15;
        java.lang.reflect.AbstractMethod$GenericInfo $r11;
        java.lang.reflect.TypeVariable[] $r12;
        libcore.reflect.ListOfTypes $r13, $r16;
        java.lang.reflect.Type $r14;

        r0 := @this: java.lang.reflect.AbstractMethod;

        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

        z0 = r0 instanceof java.lang.reflect.Method;

        if z0 == 0 goto label3;

        r6 = (java.lang.reflect.Method) r0;

        r3 = r6;

        r4 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

     label1:
        $r7 = new libcore.reflect.GenericSignatureParser;

        $r8 = interfaceinvoke r3.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r7.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r9);

        r5 = $r7;

        if z0 == 0 goto label4;

        $r15 = (java.lang.reflect.GenericDeclaration) r0;

        virtualinvoke r5.<libcore.reflect.GenericSignatureParser: void parseForMethod(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.Class[])>($r15, r1, r4);

     label2:
        $r11 = new java.lang.reflect.AbstractMethod$GenericInfo;

        $r16 = r5.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes>;

        $r13 = r5.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes>;

        $r14 = r5.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type returnType>;

        $r12 = r5.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        specialinvoke $r11.<java.lang.reflect.AbstractMethod$GenericInfo: void <init>(libcore.reflect.ListOfTypes,libcore.reflect.ListOfTypes,java.lang.reflect.Type,java.lang.reflect.TypeVariable[])>($r16, $r13, $r14, $r12);

        return $r11;

     label3:
        r2 = (java.lang.reflect.Constructor) r0;

        r3 = r2;

        r4 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>();

        goto label1;

     label4:
        $r10 = (java.lang.reflect.GenericDeclaration) r0;

        virtualinvoke r5.<libcore.reflect.GenericSignatureParser: void parseForConstructor(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.Class[])>($r10, r1, r4);

        goto label2;
    }

    int getModifiers()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        int $i0, $i1;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        $i1 = staticinvoke <java.lang.reflect.AbstractMethod: int fixMethodFlags(int)>($i0);

        return $i1;
    }

    public abstract java.lang.String getName();

    public abstract java.lang.annotation.Annotation[][] getParameterAnnotations();

    public java.lang.Class[] getParameterTypes()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        java.lang.Class[] $r2;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: java.lang.Class[] getParameterTypes()>();

        return $r2;
    }

    abstract java.lang.String getSignature();

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.Class r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @this: java.lang.reflect.AbstractMethod;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r2;

     label1:
        $z0 = staticinvoke <libcore.reflect.AnnotationAccess: boolean isDeclaredAnnotationPresent(java.lang.reflect.AnnotatedElement,java.lang.Class)>(r0, r1);

        return $z0;
    }

    boolean isBridge()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        int $i0, $i1;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        $i1 = 64 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean isSynthetic()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        int $i0, $i1;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        $i1 = 4096 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean isVarArgs()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.reflect.ArtMethod $r1;
        int $i0, $i1;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.ArtMethod artMethod>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        $i1 = 128 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    java.lang.String toGenericString()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.String $r1;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r1 = virtualinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.String toGenericStringHelper()>();

        return $r1;
    }

    final java.lang.String toGenericStringHelper()
    {
        java.lang.reflect.AbstractMethod r0;
        java.lang.StringBuilder r1, $r5, $r13, $r30;
        java.lang.reflect.AbstractMethod$GenericInfo r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Class r3;
        java.lang.reflect.Type[] r4, $r19;
        java.lang.reflect.Member $r6, $r8;
        java.lang.reflect.TypeVariable[] $r7, $r24, $r26, $r27, $r29;
        java.lang.reflect.Type $r9, $r11;
        boolean $z0;
        java.lang.reflect.Method $r12;
        java.lang.String $r15, $r20, $r31;
        libcore.reflect.ListOfTypes $r16, $r21;
        java.lang.reflect.TypeVariable $r28;

        r0 := @this: java.lang.reflect.AbstractMethod;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(80);

        r1 = $r5;

        r2 = virtualinvoke r0.<java.lang.reflect.AbstractMethod: java.lang.reflect.AbstractMethod$GenericInfo getMethodOrConstructorGenericInfo()>();

        $r6 = (java.lang.reflect.Member) r0;

        i0 = interfaceinvoke $r6.<java.lang.reflect.Member: int getModifiers()>();

        if i0 == 0 goto label1;

        $i7 = i0 & -129;

        $r31 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i7);

        $r30 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r7 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        if $r7 == null goto label5;

        $r24 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $i3 = lengthof $r24;

        if $i3 <= 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        i1 = 0;

     label2:
        $r27 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $i4 = lengthof $r27;

        if i1 >= $i4 goto label4;

        $r26 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $r28 = $r26[i1];

        staticinvoke <libcore.reflect.Types: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r28);

        $r29 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $i5 = lengthof $r29;

        $i6 = -1 + $i5;

        if i1 >= $i6 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> ");

     label5:
        $r8 = (java.lang.reflect.Member) r0;

        r3 = interfaceinvoke $r8.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $z0 = r0 instanceof java.lang.reflect.Constructor;

        if $z0 == 0 goto label8;

        staticinvoke <libcore.reflect.Types: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, r3);

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r16 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: libcore.reflect.ListOfTypes genericParameterTypes>;

        $r19 = virtualinvoke $r16.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        staticinvoke <libcore.reflect.Types: void appendArrayGenericType(java.lang.StringBuilder,java.lang.reflect.Type[])>(r1, $r19);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r21 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: libcore.reflect.ListOfTypes genericExceptionTypes>;

        r4 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r21, 0);

        $i2 = lengthof r4;

        if $i2 <= 0 goto label7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" throws ");

        staticinvoke <libcore.reflect.Types: void appendArrayGenericType(java.lang.StringBuilder,java.lang.reflect.Type[])>(r1, r4);

     label7:
        $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r20;

     label8:
        $r9 = r2.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.Type genericReturnType>;

        $r11 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type getType(java.lang.reflect.Type)>($r9);

        staticinvoke <libcore.reflect.Types: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        staticinvoke <libcore.reflect.Types: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, r3);

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = (java.lang.reflect.Method) r0;

        $r15 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        goto label6;
    }
}
