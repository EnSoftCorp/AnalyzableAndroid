public abstract class android.os.UEventObserver extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static android.os.UEventObserver$UEventThread sThread;

    public void <init>()
    {
        android.os.UEventObserver r0;

        r0 := @this: android.os.UEventObserver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000()
    {
        staticinvoke <android.os.UEventObserver: void nativeSetup()>();

        return;
    }

    static java.lang.String access$100()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <android.os.UEventObserver: java.lang.String nativeWaitForNextEvent()>();

        return $r0;
    }

    static void access$200(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.UEventObserver: void nativeAddMatch(java.lang.String)>(r0);

        return;
    }

    static void access$300(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.UEventObserver: void nativeRemoveMatch(java.lang.String)>(r0);

        return;
    }

    private static android.os.UEventObserver$UEventThread getThread()
    {
        java.lang.Throwable r0, $r5;
        android.os.UEventObserver$UEventThread r1, $r2, $r3, $r4;

        entermonitor class "android/os/UEventObserver";

     label1:
        $r2 = <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>;

        if $r2 != null goto label2;

        $r3 = new android.os.UEventObserver$UEventThread;

        specialinvoke $r3.<android.os.UEventObserver$UEventThread: void <init>()>();

        <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread> = $r3;

        $r4 = <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>;

        virtualinvoke $r4.<android.os.UEventObserver$UEventThread: void start()>();

     label2:
        r1 = <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>;

        exitmonitor class "android/os/UEventObserver";

     label3:
        return r1;

     label4:
        $r5 := @caughtexception;

        r0 = $r5;

     label5:
        exitmonitor class "android/os/UEventObserver";

     label6:
        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static native void nativeAddMatch(java.lang.String);

    private static native void nativeRemoveMatch(java.lang.String);

    private static native void nativeSetup();

    private static native java.lang.String nativeWaitForNextEvent();

    private static android.os.UEventObserver$UEventThread peekThread()
    {
        java.lang.Throwable r0, $r2;
        android.os.UEventObserver$UEventThread r1;

        entermonitor class "android/os/UEventObserver";

     label1:
        r1 = <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>;

        exitmonitor class "android/os/UEventObserver";

     label2:
        return r1;

     label3:
        $r2 := @caughtexception;

        r0 = $r2;

     label4:
        exitmonitor class "android/os/UEventObserver";

     label5:
        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.os.UEventObserver r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.os.UEventObserver;

     label1:
        virtualinvoke r0.<android.os.UEventObserver: void stopObserving()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract void onUEvent(android.os.UEventObserver$UEvent);

    public final void startObserving(java.lang.String)
    {
        android.os.UEventObserver r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        android.os.UEventObserver$UEventThread $r3;

        r0 := @this: android.os.UEventObserver;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("match substring must be non-empty");

        throw $r2;

     label2:
        $r3 = staticinvoke <android.os.UEventObserver: android.os.UEventObserver$UEventThread getThread()>();

        virtualinvoke $r3.<android.os.UEventObserver$UEventThread: void addObserver(java.lang.String,android.os.UEventObserver)>(r1, r0);

        return;
    }

    public final void stopObserving()
    {
        android.os.UEventObserver r0;
        android.os.UEventObserver$UEventThread r1;

        r0 := @this: android.os.UEventObserver;

        r1 = staticinvoke <android.os.UEventObserver: android.os.UEventObserver$UEventThread getThread()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.UEventObserver$UEventThread: void removeObserver(android.os.UEventObserver)>(r0);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <android.os.UEventObserver: java.lang.String TAG> = "UEventObserver";

        <android.os.UEventObserver: boolean DEBUG> = 0;

        return;
    }
}
