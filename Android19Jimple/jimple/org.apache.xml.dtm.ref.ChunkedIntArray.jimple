final class org.apache.xml.dtm.ref.ChunkedIntArray extends java.lang.Object
{
    static final int chunkalloc;
    static final int lowbits;
    static final int lowmask;
    org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks;
    final int[] fastArray;
    int lastUsed;
    final int slotsize;

    void <init>(int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, $i1;
        java.io.PrintStream r1;
        java.lang.StringBuilder r2, $r10, $r11, $r12, $r14, $r15;
        java.lang.Object[] r3;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r4, $r9;
        int[] $r5, $r8;
        java.lang.String $r16, $r18, $r19;
        java.lang.ArrayIndexOutOfBoundsException $r17;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int slotsize> = 4;

        $r4 = new org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector;

        specialinvoke $r4.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void <init>(org.apache.xml.dtm.ref.ChunkedIntArray)>(r0);

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks> = $r4;

        $r5 = newarray (int)[1024];

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int[] fastArray> = $r5;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = 0;

        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if 4 >= i0 goto label1;

        r3 = newarray (java.lang.Object)[1];

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r3[0] = $r18;

        $r17 = new java.lang.ArrayIndexOutOfBoundsException;

        $r19 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CHUNKEDINTARRAY_NOT_SUPPORTED", r3);

        specialinvoke $r17.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r19);

        throw $r17;

     label1:
        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if 4 <= i0 goto label2;

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*****WARNING: ChunkedIntArray(");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") wasting ");

        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = 4 - i0;

        $r15 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" words per slot");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label2:
        $r9 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r8 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int[] fastArray>;

        virtualinvoke $r9.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r8);

        return;
    }

    int appendSlot(int, int, int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] r1, $r5;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2, $r3, $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i8 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i9 = 1 + $i8;

        i4 = 4 * $i9;

        i5 = i4 >> 10;

        i6 = i4 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i10 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i11 = -1 + $i10;

        if i5 <= $i11 goto label1;

        $r4 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r5 = newarray (int)[1024];

        virtualinvoke $r4.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r5);

     label1:
        $r3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r1 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i5);

        r1[i6] = i0;

        $i13 = i6 + 1;

        r1[$i13] = i1;

        $i12 = i6 + 2;

        r1[$i12] = i2;

        $i15 = i6 + 3;

        r1[$i15] = i3;

        $i14 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        i7 = 1 + $i14;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = i7;

        return i7;
    }

    void discardLast()
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int $i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i1 = -1 + $i0;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = $i1;

        return;
    }

    int readEntry(int, int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1;
        int[] $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 4 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_OFFSET_BIGGER_THAN_SLOT", null);

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        i2 = i0 * 4;

        i3 = i2 >> 10;

        i4 = i2 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i3);

        $i5 = i4 + i1;

        $i6 = $r2[$i5];

        return $i6;
    }

    void readSlot(int, int[])
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, $i4, $i5;
        int[] r1, $r4, $r5;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2, $r3, $r6;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 = i0 * 4;

        i2 = i1 >> 10;

        i3 = i1 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i4 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i5 = -1 + $i4;

        if i2 <= $i5 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r5 = newarray (int)[1024];

        virtualinvoke $r6.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r5);

     label1:
        $r3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r4 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i3, r1, 0, 4);

        return;
    }

    int slotsUsed()
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        return $i0;
    }

    int specialFind(int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1;
        int[] $r2;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0;

     label1:
        if i2 <= 0 goto label2;

        i3 = i2 * 4;

        i4 = i3 >> 10;

        i5 = i3 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i4);

        $i6 = i5 + 1;

        i2 = $r2[$i6];

        if i2 != i1 goto label1;

     label2:
        if i2 > 0 goto label3;

        return i1;

     label3:
        return -1;
    }

    void writeEntry(int, int, int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1;
        int[] $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 < 4 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_OFFSET_BIGGER_THAN_SLOT", null);

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        i3 = i0 * 4;

        i4 = i3 >> 10;

        i5 = i3 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i4);

        $i6 = i5 + i1;

        $r2[$i6] = i2;

        return;
    }

    void writeSlot(int, int, int, int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12;
        int[] r1, $r4;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2, $r3, $r5;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 = i0 * 4;

        i6 = i5 >> 10;

        i7 = i5 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i8 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i9 = -1 + $i8;

        if i6 <= $i9 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r4 = newarray (int)[1024];

        virtualinvoke $r5.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r4);

     label1:
        $r3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r1 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i6);

        r1[i7] = i1;

        $i11 = i7 + 1;

        r1[$i11] = i2;

        $i10 = i7 + 2;

        r1[$i10] = i3;

        $i12 = i7 + 3;

        r1[$i12] = i4;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.ChunkedIntArray: int lowmask> = 1023;

        <org.apache.xml.dtm.ref.ChunkedIntArray: int lowbits> = 10;

        <org.apache.xml.dtm.ref.ChunkedIntArray: int chunkalloc> = 1024;

        return;
    }
}
