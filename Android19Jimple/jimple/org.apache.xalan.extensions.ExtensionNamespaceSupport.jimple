public class org.apache.xalan.extensions.ExtensionNamespaceSupport extends java.lang.Object
{
    java.lang.Object[] m_args;
    java.lang.String m_handlerClass;
    java.lang.String m_namespace;
    java.lang.Class[] m_sig;

    public void <init>(java.lang.String, java.lang.String, java.lang.Object[])
    {
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        java.lang.String r1, r2;
        java.lang.Object[] r3, $r4, $r6, $r7, $r9;
        int i0, $i1, $i2;
        java.lang.Class[] $r5, $r11;
        java.lang.Object $r8, $r10;
        java.lang.Class $r12;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace> = r1;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass> = r2;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args> = r3;

        $r4 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i1 = lengthof $r4;

        $r5 = newarray (java.lang.Class)[$i1];

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = $r5;

        i0 = 0;

     label1:
        $r6 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i2 = lengthof $r6;

        if i0 >= $i2 goto label3;

        $r7 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r8 = $r7[i0];

        if $r8 == null goto label2;

        $r11 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        $r9 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r10 = $r9[i0];

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r11[i0] = $r12;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = null;

     label3:
        return;
    }

    public java.lang.String getNamespace()
    {
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r1 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace>;

        return $r1;
    }

    public org.apache.xalan.extensions.ExtensionHandler launch() throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        java.lang.Exception r1, $r16;
        java.lang.Class r2;
        java.lang.reflect.Constructor[] r3;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Constructor r4, $r11;
        java.lang.String $r5;
        java.lang.Class[] $r6, $r13, $r14;
        javax.xml.transform.TransformerException $r7, $r15;
        java.lang.Object[] $r8, $r12;
        java.lang.Object $r9;
        org.apache.xalan.extensions.ExtensionHandler $r10;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

     label01:
        $r5 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass>;

        r2 = staticinvoke <org.apache.xalan.extensions.ExtensionHandler: java.lang.Class getClassForName(java.lang.String)>($r5);

        $r6 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        if $r6 == null goto label04;

        $r14 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r14);

     label02:
        if r4 == null goto label10;

     label03:
        $r8 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r9 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        $r10 = (org.apache.xalan.extensions.ExtensionHandler) $r9;

        return $r10;

     label04:
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

     label05:
        i0 = 0;

     label06:
        i1 = lengthof r3;

     label07:
        r4 = null;

        if i0 >= i1 goto label02;

     label08:
        $r11 = r3[i0];

        $r13 = virtualinvoke $r11.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r13;

        $r12 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i3 = lengthof $r12;

        if $i2 != $i3 goto label12;

        r4 = r3[i0];

     label09:
        goto label02;

     label10:
        $r7 = new javax.xml.transform.TransformerException;

        specialinvoke $r7.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>("ExtensionHandler constructor not found");

        throw $r7;

     label11:
        $r16 := @caughtexception;

        r1 = $r16;

        $r15 = new javax.xml.transform.TransformerException;

        specialinvoke $r15.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r1);

        throw $r15;

     label12:
        i0 = i0 + 1;

        goto label06;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label04 to label05 with label11;
        catch java.lang.Exception from label06 to label07 with label11;
        catch java.lang.Exception from label08 to label09 with label11;
        catch java.lang.Exception from label10 to label11 with label11;
    }
}
