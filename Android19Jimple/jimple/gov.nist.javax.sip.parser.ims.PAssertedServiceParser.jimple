public class gov.nist.javax.sip.parser.ims.PAssertedServiceParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PAssertedServiceParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PAssertedServiceParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PAssertedServiceParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PAssertedServiceParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PAssertedServiceParser r0;
        java.lang.Throwable r1, $r27;
        gov.nist.javax.sip.header.ims.PAssertedService r2, $r12;
        java.lang.String r3, $r17, $r19, $r23, $r25, $r26, $r28;
        javax.sip.InvalidArgumentException r4, r5, r6, $r16, $r20, $r29, $r30, $r31, $r32;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        gov.nist.core.LexerCore $r7, $r9, $r11, $r13, $r14;
        java.lang.String[] $r18, $r21, $r22, $r24;

        r0 := @this: gov.nist.javax.sip.parser.ims.PAssertedServiceParser;

        $z2 = <gov.nist.javax.sip.parser.ims.PAssertedServiceParser: boolean debug>;

        if $z2 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: void dbg_enter(java.lang.String)>("PAssertedServiceParser.parse");

     label01:
        $r7 = r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2145);

        $r9 = r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: void SPorHT()>();

        $r11 = r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r13 = r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: void SPorHT()>();

        $r12 = new gov.nist.javax.sip.header.ims.PAssertedService;

        specialinvoke $r12.<gov.nist.javax.sip.header.ims.PAssertedService: void <init>()>();

        r2 = $r12;

        $r14 = r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: gov.nist.core.LexerCore lexer>;

        r3 = virtualinvoke $r14.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $z3 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("urn:urn-7:");

        if $z3 == 0 goto label06;

        $z4 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("3gpp-service");

        if $z4 == 0 goto label13;

        $r21 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-service.");

        $r25 = $r21[1];

        $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String trim()>();

        z1 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("");

     label02:
        if z1 == 0 goto label09;

     label03:
        $r29 = new javax.sip.InvalidArgumentException;

        specialinvoke $r29.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN should atleast have one sub-service");

        throw $r29;

     label04:
        $r30 := @caughtexception;

        r6 = $r30;

     label05:
        virtualinvoke r6.<javax.sip.InvalidArgumentException: void printStackTrace()>();

     label06:
        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.javax.sip.header.SIPHeader parse()>();

     label07:
        $z5 = <gov.nist.javax.sip.parser.ims.PAssertedServiceParser: boolean debug>;

        if $z5 == 0 goto label08;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: void dbg_enter(java.lang.String)>("PAssertedServiceParser.parse");

     label08:
        return r2;

     label09:
        $r24 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-service");

        $r28 = $r24[1];

        virtualinvoke r2.<gov.nist.javax.sip.header.ims.PAssertedService: void setSubserviceIdentifiers(java.lang.String)>($r28);

     label10:
        goto label06;

     label11:
        $r27 := @caughtexception;

        r1 = $r27;

        $z7 = <gov.nist.javax.sip.parser.ims.PAssertedServiceParser: boolean debug>;

        if $z7 == 0 goto label12;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PAssertedServiceParser: void dbg_enter(java.lang.String)>("PAssertedServiceParser.parse");

     label12:
        throw r1;

     label13:
        $z6 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("3gpp-application");

        if $z6 == 0 goto label21;

        $r18 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-application.");

        $r17 = $r18[1];

        $r19 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

        z0 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("");

     label14:
        if z0 == 0 goto label19;

     label15:
        $r20 = new javax.sip.InvalidArgumentException;

        specialinvoke $r20.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN should atleast have one sub-application");

        throw $r20;

     label16:
        $r31 := @caughtexception;

        r5 = $r31;

     label17:
        virtualinvoke r5.<javax.sip.InvalidArgumentException: void printStackTrace()>();

     label18:
        goto label06;

     label19:
        $r22 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-application");

        $r23 = $r22[1];

        virtualinvoke r2.<gov.nist.javax.sip.header.ims.PAssertedService: void setApplicationIdentifiers(java.lang.String)>($r23);

     label20:
        goto label06;

     label21:
        $r16 = new javax.sip.InvalidArgumentException;

        specialinvoke $r16.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN is not well formed");

        throw $r16;

     label22:
        $r32 := @caughtexception;

        r4 = $r32;

     label23:
        virtualinvoke r4.<javax.sip.InvalidArgumentException: void printStackTrace()>();

     label24:
        goto label06;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label04;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
        catch javax.sip.InvalidArgumentException from label15 to label16 with label16;
        catch java.lang.Throwable from label15 to label16 with label11;
        catch java.lang.Throwable from label17 to label18 with label11;
        catch java.lang.Throwable from label19 to label20 with label11;
        catch javax.sip.InvalidArgumentException from label21 to label22 with label22;
        catch java.lang.Throwable from label21 to label22 with label11;
        catch java.lang.Throwable from label23 to label24 with label11;
    }
}
