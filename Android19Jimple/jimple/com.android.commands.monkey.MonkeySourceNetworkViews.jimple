public class com.android.commands.monkey.MonkeySourceNetworkViews extends java.lang.Object
{
    private static final java.lang.String CLASS_NOT_FOUND;
    private static final java.util.Map COMMAND_MAP;
    private static final java.lang.String HANDLER_THREAD_NAME;
    private static final java.lang.String NO_ACCESSIBILITY_EVENT;
    private static final java.lang.String NO_CONNECTION;
    private static final java.lang.String NO_NODE;
    private static final java.lang.String REMOTE_ERROR;
    private static java.util.Map sClassMap;
    private static final android.os.HandlerThread sHandlerThread;
    private static android.content.pm.IPackageManager sPm;
    protected static android.app.UiAutomation sUiTestAutomationBridge;

    static void <clinit>()
    {
        android.os.IBinder $r0;
        android.content.pm.IPackageManager $r1;
        java.util.HashMap $r2, $r3;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetLocation $r4;
        java.util.Map $r5, $r8, $r11, $r13, $r16, $r19, $r22, $r27, $r30, $r33, $r36, $r38;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetText $r7;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetClass $r10;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetChecked $r14;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetEnabled $r17;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetSelected $r20;
        com.android.commands.monkey.MonkeySourceNetworkViews$SetSelected $r23;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetFocused $r26;
        com.android.commands.monkey.MonkeySourceNetworkViews$SetFocused $r29;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetParent $r32;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetChildren $r35;
        com.android.commands.monkey.MonkeySourceNetworkViews$GetAccessibilityIds $r39;
        android.os.HandlerThread $r40;

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.String REMOTE_ERROR> = "Unable to retrieve application info from PackageManager";

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.String NO_NODE> = "Node with given ID does not exist";

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.String NO_CONNECTION> = "Failed to connect to AccessibilityService, try restarting Monkey";

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.String NO_ACCESSIBILITY_EVENT> = "No accessibility event has occured yet";

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.String HANDLER_THREAD_NAME> = "UiAutomationHandlerThread";

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.String CLASS_NOT_FOUND> = "Error retrieving class information";

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("package");

        $r1 = staticinvoke <android.content.pm.IPackageManager$Stub: android.content.pm.IPackageManager asInterface(android.os.IBinder)>($r0);

        <com.android.commands.monkey.MonkeySourceNetworkViews: android.content.pm.IPackageManager sPm> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map sClassMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP> = $r3;

        $r5 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r4 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetLocation;

        specialinvoke $r4.<com.android.commands.monkey.MonkeySourceNetworkViews$GetLocation: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getlocation", $r4);

        $r8 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r7 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetText;

        specialinvoke $r7.<com.android.commands.monkey.MonkeySourceNetworkViews$GetText: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gettext", $r7);

        $r11 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r10 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetClass;

        specialinvoke $r10.<com.android.commands.monkey.MonkeySourceNetworkViews$GetClass: void <init>()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getclass", $r10);

        $r13 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r14 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetChecked;

        specialinvoke $r14.<com.android.commands.monkey.MonkeySourceNetworkViews$GetChecked: void <init>()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getchecked", $r14);

        $r16 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r17 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetEnabled;

        specialinvoke $r17.<com.android.commands.monkey.MonkeySourceNetworkViews$GetEnabled: void <init>()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getenabled", $r17);

        $r19 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r20 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetSelected;

        specialinvoke $r20.<com.android.commands.monkey.MonkeySourceNetworkViews$GetSelected: void <init>()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getselected", $r20);

        $r22 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r23 = new com.android.commands.monkey.MonkeySourceNetworkViews$SetSelected;

        specialinvoke $r23.<com.android.commands.monkey.MonkeySourceNetworkViews$SetSelected: void <init>()>();

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("setselected", $r23);

        $r27 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r26 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetFocused;

        specialinvoke $r26.<com.android.commands.monkey.MonkeySourceNetworkViews$GetFocused: void <init>()>();

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getfocused", $r26);

        $r30 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r29 = new com.android.commands.monkey.MonkeySourceNetworkViews$SetFocused;

        specialinvoke $r29.<com.android.commands.monkey.MonkeySourceNetworkViews$SetFocused: void <init>()>();

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("setfocused", $r29);

        $r33 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r32 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetParent;

        specialinvoke $r32.<com.android.commands.monkey.MonkeySourceNetworkViews$GetParent: void <init>()>();

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getparent", $r32);

        $r36 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r35 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetChildren;

        specialinvoke $r35.<com.android.commands.monkey.MonkeySourceNetworkViews$GetChildren: void <init>()>();

        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getchildren", $r35);

        $r38 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        $r39 = new com.android.commands.monkey.MonkeySourceNetworkViews$GetAccessibilityIds;

        specialinvoke $r39.<com.android.commands.monkey.MonkeySourceNetworkViews$GetAccessibilityIds: void <init>()>();

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getaccessibilityids", $r39);

        $r40 = new android.os.HandlerThread;

        specialinvoke $r40.<android.os.HandlerThread: void <init>(java.lang.String)>("UiAutomationHandlerThread");

        <com.android.commands.monkey.MonkeySourceNetworkViews: android.os.HandlerThread sHandlerThread> = $r40;

        return;
    }

    public void <init>()
    {
        com.android.commands.monkey.MonkeySourceNetworkViews r0;

        r0 := @this: com.android.commands.monkey.MonkeySourceNetworkViews;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.content.pm.IPackageManager access$000()
    {
        android.content.pm.IPackageManager $r0;

        $r0 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.content.pm.IPackageManager sPm>;

        return $r0;
    }

    static java.lang.Class access$100(java.lang.String, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0, r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.Class getIdClass(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    static android.view.accessibility.AccessibilityNodeInfo access$200(java.lang.String) throws com.android.commands.monkey.MonkeyViewException
    {
        java.lang.String r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.commands.monkey.MonkeySourceNetworkViews: android.view.accessibility.AccessibilityNodeInfo getNodeByViewId(java.lang.String)>(r0);

        return $r1;
    }

    static android.view.accessibility.AccessibilityNodeInfo access$300(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.view.accessibility.AccessibilityNodeInfo $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.android.commands.monkey.MonkeySourceNetworkViews: android.view.accessibility.AccessibilityNodeInfo getNodeByAccessibilityIds(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    static java.util.Map access$400()
    {
        java.util.Map $r0;

        $r0 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map COMMAND_MAP>;

        return $r0;
    }

    private static java.lang.Class getIdClass(java.lang.String, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0, r1, $r10;
        java.lang.Class r2;
        java.util.Map $r3, $r11;
        java.lang.Object $r4;
        dalvik.system.DexClassLoader $r5;
        java.lang.ClassLoader $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map sClassMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.lang.Class) $r4;

        if r2 != null goto label1;

        $r5 = new dalvik.system.DexClassLoader;

        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        specialinvoke $r5.<dalvik.system.DexClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader)>(r1, "/data/local/tmp", null, $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".R$id");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r5.<dalvik.system.DexClassLoader: java.lang.Class loadClass(java.lang.String)>($r10);

        $r11 = <com.android.commands.monkey.MonkeySourceNetworkViews: java.util.Map sClassMap>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label1:
        return r2;
    }

    private static android.view.accessibility.AccessibilityNodeInfo getNodeByAccessibilityIds(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1, i2;
        android.app.UiAutomation $r2;
        android.view.accessibility.AccessibilityInteractionClient $r3;
        long $l3;
        android.view.accessibility.AccessibilityNodeInfo $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        $r2 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.app.UiAutomation sUiTestAutomationBridge>;

        i2 = virtualinvoke $r2.<android.app.UiAutomation: int getConnectionId()>();

        $r3 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $l3 = (long) i1;

        $r4 = virtualinvoke $r3.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int,int,long,boolean,int)>(i2, i0, $l3, 0, 0);

        return $r4;
    }

    private static android.view.accessibility.AccessibilityNodeInfo getNodeByViewId(java.lang.String) throws com.android.commands.monkey.MonkeyViewException
    {
        java.lang.String r0;
        int i0;
        java.util.List r1;
        android.app.UiAutomation $r2;
        android.view.accessibility.AccessibilityInteractionClient $r3;
        long $l1;
        boolean $z0;
        java.lang.Object $r4;
        android.view.accessibility.AccessibilityNodeInfo $r5;

        r0 := @parameter0: java.lang.String;

        $r2 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.app.UiAutomation sUiTestAutomationBridge>;

        i0 = virtualinvoke $r2.<android.app.UiAutomation: int getConnectionId()>();

        $r3 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $l1 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        r1 = virtualinvoke $r3.<android.view.accessibility.AccessibilityInteractionClient: java.util.List findAccessibilityNodeInfosByViewId(int,int,long,java.lang.String)>(i0, -1, $l1, r0);

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (android.view.accessibility.AccessibilityNodeInfo) $r4;

        return $r5;

     label1:
        return null;
    }

    public static void setup()
    {
        android.os.HandlerThread $r0, $r1, $r3;
        android.app.UiAutomation $r2, $r6;
        android.os.Looper $r4;
        android.app.UiAutomationConnection $r5;

        $r0 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.os.HandlerThread sHandlerThread>;

        virtualinvoke $r0.<android.os.HandlerThread: void setDaemon(boolean)>(1);

        $r1 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.os.HandlerThread sHandlerThread>;

        virtualinvoke $r1.<android.os.HandlerThread: void start()>();

        $r2 = new android.app.UiAutomation;

        $r3 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.os.HandlerThread sHandlerThread>;

        $r4 = virtualinvoke $r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r5 = new android.app.UiAutomationConnection;

        specialinvoke $r5.<android.app.UiAutomationConnection: void <init>()>();

        specialinvoke $r2.<android.app.UiAutomation: void <init>(android.os.Looper,android.app.IUiAutomationConnection)>($r4, $r5);

        <com.android.commands.monkey.MonkeySourceNetworkViews: android.app.UiAutomation sUiTestAutomationBridge> = $r2;

        $r6 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.app.UiAutomation sUiTestAutomationBridge>;

        virtualinvoke $r6.<android.app.UiAutomation: void connect()>();

        return;
    }

    public static void teardown()
    {
        android.os.HandlerThread $r0;

        $r0 = <com.android.commands.monkey.MonkeySourceNetworkViews: android.os.HandlerThread sHandlerThread>;

        virtualinvoke $r0.<android.os.HandlerThread: boolean quit()>();

        return;
    }
}
