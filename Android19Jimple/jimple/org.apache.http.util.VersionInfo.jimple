public class org.apache.http.util.VersionInfo extends java.lang.Object
{
    public static final java.lang.String PROPERTY_MODULE;
    public static final java.lang.String PROPERTY_RELEASE;
    public static final java.lang.String PROPERTY_TIMESTAMP;
    public static final java.lang.String UNAVAILABLE;
    public static final java.lang.String VERSION_PROPERTY_FILE;
    private final java.lang.String infoClassloader;
    private final java.lang.String infoModule;
    private final java.lang.String infoPackage;
    private final java.lang.String infoRelease;
    private final java.lang.String infoTimestamp;

    protected void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.http.util.VersionInfo r0;
        java.lang.String r1, r2, r3, r4, r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.http.util.VersionInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier must not be null.");

        throw $r6;

     label1:
        r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage> = r1;

        if r2 == null goto label6;

     label2:
        r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule> = r2;

        if r3 == null goto label7;

     label3:
        r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease> = r3;

        if r4 == null goto label8;

     label4:
        r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp> = r4;

        if r5 == null goto label9;

     label5:
        r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader> = r5;

        return;

     label6:
        r2 = "UNAVAILABLE";

        goto label2;

     label7:
        r3 = "UNAVAILABLE";

        goto label3;

     label8:
        r4 = "UNAVAILABLE";

        goto label4;

     label9:
        r5 = "UNAVAILABLE";

        goto label5;
    }

    protected static final org.apache.http.util.VersionInfo fromMap(java.lang.String, java.util.Map, java.lang.ClassLoader)
    {
        java.lang.String r0, r3, r4, r5, r6;
        java.util.Map r1;
        java.lang.ClassLoader r2;
        org.apache.http.util.VersionInfo $r7;
        java.lang.Object $r8, $r9, $r10;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: java.lang.ClassLoader;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier must not be null.");

        throw $r11;

     label1:
        r3 = null;

        r4 = null;

        r5 = null;

        if r1 == null goto label6;

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("info.module");

        r3 = (java.lang.String) $r8;

        if r3 == null goto label2;

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 >= 1 goto label2;

        r3 = null;

     label2:
        $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("info.release");

        r4 = (java.lang.String) $r9;

        if r4 == null goto label4;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 < 1 goto label3;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("${pom.version}");

        if $z1 == 0 goto label4;

     label3:
        r4 = null;

     label4:
        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("info.timestamp");

        r5 = (java.lang.String) $r10;

        if r5 == null goto label6;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 < 1 goto label5;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("${mvn.timestamp}");

        if $z0 == 0 goto label6;

     label5:
        r5 = null;

     label6:
        r6 = null;

        if r2 == null goto label7;

        r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

     label7:
        $r7 = new org.apache.http.util.VersionInfo;

        specialinvoke $r7.<org.apache.http.util.VersionInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r3, r4, r5, r6);

        return $r7;
    }

    public static final org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, $r9, $r13;
        java.lang.ClassLoader r1;
        java.util.Properties r2, r6, $r15;
        org.apache.http.util.VersionInfo r4;
        java.io.InputStream r5;
        java.lang.Throwable r7, $r17;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        java.lang.Thread $r14;
        java.lang.IllegalArgumentException $r16;
        java.io.IOException $r18;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        if r0 != null goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier must not be null.");

        throw $r16;

     label01:
        if r1 != null goto label02;

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label02:
        r2 = null;

     label03:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version.properties");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = virtualinvoke r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r13);

     label04:
        r2 = null;

        if r5 == null goto label08;

     label05:
        $r15 = new java.util.Properties;

        specialinvoke $r15.<java.util.Properties: void <init>()>();

        r6 = $r15;

        virtualinvoke r6.<java.util.Properties: void load(java.io.InputStream)>(r5);

     label06:
        r2 = r6;

     label07:
        virtualinvoke r5.<java.io.InputStream: void close()>();

     label08:
        r4 = null;

        if r2 == null goto label09;

        r4 = staticinvoke <org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)>(r0, r2, r1);

     label09:
        return r4;

     label10:
        $r17 := @caughtexception;

        r7 = $r17;

     label11:
        virtualinvoke r5.<java.io.InputStream: void close()>();

        throw r7;

     label12:
        $r18 := @caughtexception;

        goto label08;

        catch java.io.IOException from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    public static final org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[], java.lang.ClassLoader)
    {
        java.lang.String[] r0;
        java.lang.ClassLoader r1;
        java.util.ArrayList r2, $r4;
        int i0, $i1, $i2, $i3;
        org.apache.http.util.VersionInfo r3;
        org.apache.http.util.VersionInfo[] $r5, $r7, $r8;
        java.lang.Object[] $r6;
        java.lang.String $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.ClassLoader;

        if r0 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier list must not be null.");

        throw $r10;

     label1:
        $r4 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        r2 = $r4;

        i0 = 0;

     label2:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label4;

        $r9 = r0[i0];

        r3 = staticinvoke <org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)>($r9, r1);

        if r3 == null goto label3;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r5 = newarray (org.apache.http.util.VersionInfo)[$i3];

        $r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.http.util.VersionInfo[]) $r6;

        $r8 = (org.apache.http.util.VersionInfo[]) $r7;

        return $r8;
    }

    public final java.lang.String getClassloader()
    {
        org.apache.http.util.VersionInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.util.VersionInfo;

        $r1 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        return $r1;
    }

    public final java.lang.String getModule()
    {
        org.apache.http.util.VersionInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.util.VersionInfo;

        $r1 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule>;

        return $r1;
    }

    public final java.lang.String getPackage()
    {
        org.apache.http.util.VersionInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.util.VersionInfo;

        $r1 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage>;

        return $r1;
    }

    public final java.lang.String getRelease()
    {
        org.apache.http.util.VersionInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.util.VersionInfo;

        $r1 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        return $r1;
    }

    public final java.lang.String getTimestamp()
    {
        org.apache.http.util.VersionInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.util.VersionInfo;

        $r1 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.http.util.VersionInfo r0;
        java.lang.StringBuffer r1, $r2, $r8, $r9, $r12, $r23, $r24, $r26;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r25, $r27, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.http.util.VersionInfo;

        $r2 = new java.lang.StringBuffer;

        $r3 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = 20 + $i0;

        $r4 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule>;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        $r5 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $r6 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        $i6 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i8 = $i5 + $i6;

        $r7 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        $i7 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i9 = $i8 + $i7;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i9);

        r1 = $r2;

        $r8 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("VersionInfo(");

        $r10 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r11 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r15 = "UNAVAILABLE";

        $r13 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label1;

        $r26 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r27 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

     label1:
        $r16 = "UNAVAILABLE";

        $r17 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z1 != 0 goto label2;

        $r23 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r28 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

     label2:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r21 = "UNAVAILABLE";

        $r20 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z2 != 0 goto label3;

        $r24 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        $r25 = r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

     label3:
        $r19 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r19;
    }

    public static void <clinit>()
    {
        <org.apache.http.util.VersionInfo: java.lang.String VERSION_PROPERTY_FILE> = "version.properties";

        <org.apache.http.util.VersionInfo: java.lang.String UNAVAILABLE> = "UNAVAILABLE";

        <org.apache.http.util.VersionInfo: java.lang.String PROPERTY_TIMESTAMP> = "info.timestamp";

        <org.apache.http.util.VersionInfo: java.lang.String PROPERTY_RELEASE> = "info.release";

        <org.apache.http.util.VersionInfo: java.lang.String PROPERTY_MODULE> = "info.module";

        return;
    }
}
