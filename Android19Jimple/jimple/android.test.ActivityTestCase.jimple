public abstract class android.test.ActivityTestCase extends android.test.InstrumentationTestCase
{
    private android.app.Activity mActivity;

    public void <init>()
    {
        android.test.ActivityTestCase r0;

        r0 := @this: android.test.ActivityTestCase;

        specialinvoke r0.<android.test.InstrumentationTestCase: void <init>()>();

        return;
    }

    protected android.app.Activity getActivity()
    {
        android.test.ActivityTestCase r0;
        android.app.Activity $r1;

        r0 := @this: android.test.ActivityTestCase;

        $r1 = r0.<android.test.ActivityTestCase: android.app.Activity mActivity>;

        return $r1;
    }

    protected void scrubClass(java.lang.Class) throws java.lang.IllegalAccessException
    {
        android.test.ActivityTestCase r0;
        java.lang.Class r1, $r5, $r6, $r7;
        java.lang.reflect.Field[] r2;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Field r3;
        boolean $z0, $z1;
        java.lang.Object $r8;
        java.lang.Exception $r9;

        r0 := @this: android.test.ActivityTestCase;

        r1 := @parameter0: java.lang.Class;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r3 = r2[i1];

        $r6 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke $r7.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label4;

        $i2 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $i3 = 16 & $i2;

        if $i3 != 0 goto label4;

     label2:
        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, null);

     label3:
        $r8 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r8 == null goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestCase", "Error: Could not nullify field!");

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestCase", "Error: Could not nullify field!");

        goto label3;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }

    protected void setActivity(android.app.Activity)
    {
        android.test.ActivityTestCase r0;
        android.app.Activity r1;

        r0 := @this: android.test.ActivityTestCase;

        r1 := @parameter0: android.app.Activity;

        r0.<android.test.ActivityTestCase: android.app.Activity mActivity> = r1;

        return;
    }
}
