final class com.android.i18n.phonenumbers.PhoneNumberMatcher extends java.lang.Object implements java.util.Iterator
{
    private static final java.util.regex.Pattern GROUP_SEPARATOR;
    private static final java.util.regex.Pattern LEAD_CLASS;
    private static final java.util.regex.Pattern MATCHING_BRACKETS;
    private static final java.util.regex.Pattern PATTERN;
    private static final java.util.regex.Pattern PUB_PAGES;
    private static final java.util.regex.Pattern SLASH_SEPARATED_DATES;
    private static final java.util.regex.Pattern TIME_STAMPS;
    private static final java.util.regex.Pattern TIME_STAMPS_SUFFIX;
    private com.android.i18n.phonenumbers.PhoneNumberMatch lastMatch;
    private final com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency leniency;
    private long maxTries;
    private final com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil;
    private final java.lang.String preferredRegion;
    private int searchIndex;
    private com.android.i18n.phonenumbers.PhoneNumberMatcher$State state;
    private final java.lang.CharSequence text;

    static void <clinit>()
    {
        java.lang.String r0, r1, r2, r3, r4, r5, r6, r7, r8, $r38, $r47, $r58, $r71, $r80;
        java.util.regex.Pattern $r9, $r10, $r11, $r12, $r39, $r59, $r60, $r79;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r72, $r73, $r74, $r75, $r76, $r77, $r78;

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}");

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern PUB_PAGES> = $r9;

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:(?:[0-3]?\\d/[01]?\\d)|(?:[01]?\\d/[0-3]?\\d))/(?:[12]\\d)?\\d{2}");

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern SLASH_SEPARATED_DATES> = $r10;

        $r11 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d [0-2]\\d$");

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern TIME_STAMPS> = $r11;

        $r12 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(":[0-5]\\d");

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern TIME_STAMPS_SUFFIX> = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[^");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\\[\uff08\uff3b");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\\]\uff09\uff3d");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r0 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String limit(int,int)>(0, 3);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\\[\uff08\uff3b");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("])?");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\\]\uff09\uff3d");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("])?");

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\\[\uff08\uff3b");

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+[");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\\]\uff09\uff3d");

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("])");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*");

        $r38 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r38);

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern MATCHING_BRACKETS> = $r39;

        r2 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String limit(int,int)>(0, 2);

        r3 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String limit(int,int)>(0, 4);

        r4 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String limit(int,int)>(0, 19);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e]");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r5 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}");

        $r47 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String limit(int,int)>(1, 19);

        $r46 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        r6 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\\[\uff08\uff3b");

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+\uff0b");

        r7 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r8 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $r60 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r8);

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern LEAD_CLASS> = $r60;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Z}[^");

        $r56 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}]*");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $r59 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r58);

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern GROUP_SEPARATOR> = $r59;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r63 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r76 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r78 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r72 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r71 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_MATCHING>;

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r80 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        $r79 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r80, 66);

        <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern PATTERN> = $r79;

        return;
    }

    void <init>(com.android.i18n.phonenumbers.PhoneNumberUtil, java.lang.CharSequence, java.lang.String, com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency, long)
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        com.android.i18n.phonenumbers.PhoneNumberUtil r1;
        java.lang.CharSequence r2;
        java.lang.String r3;
        com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency r4;
        long l0;
        com.android.i18n.phonenumbers.PhoneNumberMatcher$State $r5;
        java.lang.NullPointerException $r6;
        byte $b1;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        r1 := @parameter0: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency;

        l0 := @parameter4: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberMatcher$State: com.android.i18n.phonenumbers.PhoneNumberMatcher$State NOT_READY>;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatcher$State state> = $r5;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch lastMatch> = null;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: int searchIndex> = 0;

        if r1 == null goto label1;

        if r4 != null goto label2;

     label1:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label2:
        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label3:
        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil> = r1;

        if r2 == null goto label5;

     label4:
        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence text> = r2;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String preferredRegion> = r3;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency leniency> = r4;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries> = l0;

        return;

     label5:
        r2 = "";

        goto label4;
    }

    static boolean allNumberGroupsAreExactlyPresent(com.android.i18n.phonenumbers.PhoneNumberUtil, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.StringBuilder, java.lang.String[])
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.StringBuilder r2;
        java.lang.String[] r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.regex.Pattern $r5;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter1: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter2: java.lang.StringBuilder;

        r3 := @parameter3: java.lang.String[];

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern NON_DIGITS_PATTERN>;

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke $r5.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r6);

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z0 == 0 goto label3;

        $i5 = lengthof r4;

        i0 = -2 + $i5;

     label1:
        $i3 = lengthof r4;

        if $i3 == 1 goto label2;

        $r7 = r4[i0];

        $r8 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z1 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>($r8);

        if $z1 == 0 goto label4;

     label2:
        return 1;

     label3:
        $i2 = lengthof r4;

        i0 = -1 + $i2;

        goto label1;

     label4:
        $i4 = lengthof r3;

        i1 = -1 + $i4;

     label5:
        if i1 <= 0 goto label7;

        if i0 < 0 goto label7;

        $r11 = r4[i0];

        $r12 = r3[i1];

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 != 0 goto label6;

        return 0;

     label6:
        i1 = i1 + -1;

        i0 = i0 + -1;

        goto label5;

     label7:
        if i0 < 0 goto label8;

        $r10 = r4[i0];

        $r9 = r3[0];

        $z2 = virtualinvoke $r10.<java.lang.String: boolean endsWith(java.lang.String)>($r9);

        if $z2 != 0 goto label2;

     label8:
        return 0;
    }

    static boolean allNumberGroupsRemainGrouped(com.android.i18n.phonenumbers.PhoneNumberUtil, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.StringBuilder, java.lang.String[])
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.StringBuilder r2;
        java.lang.String[] r3;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8;
        java.lang.String r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2;
        char $c5;

        r0 := @parameter0: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter1: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter2: java.lang.StringBuilder;

        r3 := @parameter3: java.lang.String[];

        i0 = 0;

        i1 = 0;

     label1:
        $i3 = lengthof r3;

        if i1 >= $i3 goto label4;

        $r7 = r3[i1];

        i2 = virtualinvoke r2.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>($r7, i0);

        if i2 >= 0 goto label2;

        return 0;

     label2:
        $r8 = r3[i1];

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        i0 = i2 + $i4;

        if i1 != 0 goto label3;

        $i6 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        if i0 >= $i6 goto label3;

        $c5 = virtualinvoke r2.<java.lang.StringBuilder: char charAt(int)>(i0);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c5);

        if $z1 == 0 goto label3;

        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r9 = r3[i1];

        $i7 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i8 = i0 - $i7;

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String substring(int)>($i8);

        $z2 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>(r4);

        return $z2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String substring(int)>(i0);

        $r6 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>($r6);

        return $z0;
    }

    static boolean checkNumberGroupingIsValid(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String, com.android.i18n.phonenumbers.PhoneNumberUtil, com.android.i18n.phonenumbers.PhoneNumberMatcher$NumberGroupingChecker)
    {
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r0;
        java.lang.String r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil r2;
        com.android.i18n.phonenumbers.PhoneNumberMatcher$NumberGroupingChecker r3;
        java.lang.StringBuilder r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r5;
        java.util.Iterator r6;
        java.lang.String[] $r7, $r10;
        boolean $z0, $z1, $z2;
        int $i0;
        java.util.List $r8;
        java.lang.Object $r9;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat $r11;

        r0 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r3 := @parameter3: com.android.i18n.phonenumbers.PhoneNumberMatcher$NumberGroupingChecker;

        r4 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.StringBuilder normalizeDigits(java.lang.String,boolean)>(r1, 1);

        $r7 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String[] getNationalNumberGroups(com.android.i18n.phonenumbers.PhoneNumberUtil,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>(r2, r0, null);

        $z0 = interfaceinvoke r3.<com.android.i18n.phonenumbers.PhoneNumberMatcher$NumberGroupingChecker: boolean checkGroups(com.android.i18n.phonenumbers.PhoneNumberUtil,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.StringBuilder,java.lang.String[])>(r2, r0, r4, $r7);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r0.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r5 = staticinvoke <com.android.i18n.phonenumbers.MetadataManager: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getAlternateFormatsForCountry(int)>($i0);

        if r5 == null goto label3;

        $r8 = virtualinvoke r5.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        r6 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.i18n.phonenumbers.Phonemetadata$NumberFormat) $r9;

        $r10 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String[] getNationalNumberGroups(com.android.i18n.phonenumbers.PhoneNumberUtil,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>(r2, r0, $r11);

        $z2 = interfaceinvoke r3.<com.android.i18n.phonenumbers.PhoneNumberMatcher$NumberGroupingChecker: boolean checkGroups(com.android.i18n.phonenumbers.PhoneNumberUtil,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.StringBuilder,java.lang.String[])>(r2, r0, r4, $r10);

        if $z2 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    static boolean containsMoreThanOneSlash(java.lang.String)
    {
        java.lang.String r0, $r1;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(47);

        if i0 <= 0 goto label1;

        $i1 = i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("/");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    static boolean containsOnlyValidXChars(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String, com.android.i18n.phonenumbers.PhoneNumberUtil)
    {
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r0;
        java.lang.String r1, $r3, $r6, $r7, $r8;
        com.android.i18n.phonenumbers.PhoneNumberUtil r2;
        int i0, $i3, $i4, $i5;
        char c1, c2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType $r4, $r5;
        boolean $z0;

        r0 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 = 0;

     label1:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = -1 + $i3;

        if i0 >= $i4 goto label7;

        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if c1 == 120 goto label2;

        if c1 != 88 goto label6;

     label2:
        $i5 = i0 + 1;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i5);

        if c2 == 120 goto label3;

        if c2 != 88 goto label5;

     label3:
        i0 = i0 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        $r4 = virtualinvoke r2.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r0, $r3);

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NSN_MATCH>;

        if $r4 == $r5 goto label6;

     label4:
        return 0;

     label5:
        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        $r8 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

     label6:
        i0 = i0 + 1;

        goto label1;

     label7:
        return 1;
    }

    private com.android.i18n.phonenumbers.PhoneNumberMatch extractInnerMatch(java.lang.String, int)
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        java.lang.String r1, r3, r6, r7, $r11, $r14, $r16;
        int i0, i1, i2, $i3, $i6;
        java.util.regex.Matcher r2;
        java.lang.CharSequence r4, r8, $r12;
        com.android.i18n.phonenumbers.PhoneNumberMatch r5;
        java.util.regex.Pattern $r9, $r10, $r13, $r15;
        boolean $z0, $z1, $z2;
        long $l4, $l5, $l7, $l9, $l10, $l11, $l12;
        byte $b8;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r9 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern GROUP_SEPARATOR>;

        r2 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label6;

        $i3 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r10 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN>;

        r4 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence trimAfterFirstMatch(java.util.regex.Pattern,java.lang.CharSequence)>($r10, r3);

        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        r5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch parseAndVerify(java.lang.String,int)>($r11, i0);

        if r5 == null goto label2;

     label1:
        return r5;

     label2:
        $l5 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries>;

        $l4 = $l5 - 1L;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries> = $l4;

        i1 = virtualinvoke r2.<java.util.regex.Matcher: int end()>();

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        $r13 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN>;

        $r12 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence trimAfterFirstMatch(java.util.regex.Pattern,java.lang.CharSequence)>($r13, r6);

        $r14 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $i6 = i0 + i1;

        r5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch parseAndVerify(java.lang.String,int)>($r14, $i6);

        if r5 != null goto label1;

        $l7 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries>;

        $l9 = $l7 - 1L;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries> = $l9;

        $l10 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries>;

        $b8 = $l10 cmp 0L;

        if $b8 <= 0 goto label6;

        i2 = i1;

     label3:
        $z1 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label4;

        i2 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        goto label3;

     label4:
        r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN>;

        r8 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence trimAfterFirstMatch(java.util.regex.Pattern,java.lang.CharSequence)>($r15, r7);

        $z2 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label5;

        return null;

     label5:
        $r16 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        r5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch parseAndVerify(java.lang.String,int)>($r16, i0);

        if r5 != null goto label1;

        $l11 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries>;

        $l12 = $l11 - 1L;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries> = $l12;

     label6:
        return null;
    }

    private com.android.i18n.phonenumbers.PhoneNumberMatch extractMatch(java.lang.CharSequence, int)
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        java.lang.CharSequence r1, $r11;
        int i0, $i1, $i2;
        boolean z0, z1, z2, $z3;
        com.android.i18n.phonenumbers.PhoneNumberMatch r2, $r12;
        java.lang.String r3, r4, $r13;
        java.util.regex.Pattern $r5, $r7, $r9, $r15;
        java.util.regex.Matcher $r6, $r8, $r10, $r14;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern PUB_PAGES>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        z0 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find()>();

        r2 = null;

        if z0 != 0 goto label1;

        $r7 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern SLASH_SEPARATED_DATES>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        z1 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        r2 = null;

        if z1 == 0 goto label2;

     label1:
        return r2;

     label2:
        $r9 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern TIME_STAMPS>;

        $r10 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z3 = virtualinvoke $r10.<java.util.regex.Matcher: boolean find()>();

        if $z3 == 0 goto label3;

        $r11 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence text>;

        $r13 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = i0 + $i1;

        r4 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int)>($i2);

        $r15 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern TIME_STAMPS_SUFFIX>;

        $r14 = virtualinvoke $r15.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        z2 = virtualinvoke $r14.<java.util.regex.Matcher: boolean lookingAt()>();

        r2 = null;

        if z2 != 0 goto label1;

     label3:
        r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r2 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch parseAndVerify(java.lang.String,int)>(r3, i0);

        if r2 != null goto label1;

        $r12 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch extractInnerMatch(java.lang.String,int)>(r3, i0);

        return $r12;
    }

    private com.android.i18n.phonenumbers.PhoneNumberMatch find(int)
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        int i0, i1, $i4, $i6;
        java.util.regex.Matcher r1;
        java.lang.CharSequence r2, r3, $r5, $r7;
        com.android.i18n.phonenumbers.PhoneNumberMatch r4;
        java.util.regex.Pattern $r6, $r8;
        long $l2, $l5, $l7;
        byte $b3;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        i0 := @parameter0: int;

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern PATTERN>;

        $r5 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence text>;

        r1 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

     label1:
        $l2 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label3;

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean find(int)>(i0);

        if $z0 == 0 goto label3;

        i1 = virtualinvoke r1.<java.util.regex.Matcher: int start()>();

        $r7 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence text>;

        $i4 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        r2 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, $i4);

        $r8 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SECOND_NUMBER_START_PATTERN>;

        r3 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence trimAfterFirstMatch(java.util.regex.Pattern,java.lang.CharSequence)>($r8, r2);

        r4 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch extractMatch(java.lang.CharSequence,int)>(r3, i1);

        if r4 == null goto label2;

        return r4;

     label2:
        $i6 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();

        i0 = i1 + $i6;

        $l5 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries>;

        $l7 = $l5 - 1L;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: long maxTries> = $l7;

        goto label1;

     label3:
        return null;
    }

    private static java.lang.String[] getNationalNumberGroups(com.android.i18n.phonenumbers.PhoneNumberUtil, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r2;
        java.lang.String r3, $r4, $r6, $r9;
        int i0, $i1, $i2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r5, $r8;
        java.lang.String[] $r7, $r10;

        r0 := @parameter0: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter1: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter2: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat;

        if r2 != null goto label2;

        $r8 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat RFC3966>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r8);

        i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(59);

        if i0 >= 0 goto label1;

        i0 = virtualinvoke r3.<java.lang.String: int length()>();

     label1:
        $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(45);

        $i2 = 1 + $i1;

        $r9 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>($i2, i0);

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        return $r10;

     label2:
        $r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat RFC3966>;

        $r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$NumberFormat,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>($r4, r2, $r5);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        return $r7;
    }

    private static boolean isInvalidPunctuationSymbol(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;

        if c0 == 37 goto label1;

        $i1 = staticinvoke <java.lang.Character: int getType(char)>(c0);

        if $i1 != 26 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    static boolean isLatinLetter(char)
    {
        char c0;
        java.lang.Character$UnicodeBlock r0, $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z0 != 0 goto label2;

        $i1 = staticinvoke <java.lang.Character: int getType(char)>(c0);

        if $i1 == 6 goto label2;

     label1:
        return 0;

     label2:
        r0 = staticinvoke <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>(c0);

        $r1 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock BASIC_LATIN>;

        $z1 = virtualinvoke r0.<java.lang.Character$UnicodeBlock: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label3;

        $r2 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock LATIN_1_SUPPLEMENT>;

        $z2 = virtualinvoke r0.<java.lang.Character$UnicodeBlock: boolean equals(java.lang.Object)>($r2);

        if $z2 != 0 goto label3;

        $r3 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock LATIN_EXTENDED_A>;

        $z3 = virtualinvoke r0.<java.lang.Character$UnicodeBlock: boolean equals(java.lang.Object)>($r3);

        if $z3 != 0 goto label3;

        $r4 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock LATIN_EXTENDED_ADDITIONAL>;

        $z4 = virtualinvoke r0.<java.lang.Character$UnicodeBlock: boolean equals(java.lang.Object)>($r4);

        if $z4 != 0 goto label3;

        $r5 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock LATIN_EXTENDED_B>;

        $z5 = virtualinvoke r0.<java.lang.Character$UnicodeBlock: boolean equals(java.lang.Object)>($r5);

        if $z5 != 0 goto label3;

        $r6 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock COMBINING_DIACRITICAL_MARKS>;

        $z6 = virtualinvoke r0.<java.lang.Character$UnicodeBlock: boolean equals(java.lang.Object)>($r6);

        if $z6 == 0 goto label1;

     label3:
        return 1;
    }

    static boolean isNationalPrefixPresentIfRequired(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.PhoneNumberUtil)
    {
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r0;
        com.android.i18n.phonenumbers.PhoneNumberUtil r1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        java.lang.String r3, r5, $r8, $r10, $r11, $r12, $r14, $r15;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r4;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource $r6, $r7;
        int $i0, $i1, $i2, $i3;
        java.util.List $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r13;

        r0 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r1 := @parameter1: com.android.i18n.phonenumbers.PhoneNumberUtil;

        $r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource()>();

        $r7 = <com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_DEFAULT_COUNTRY>;

        if $r6 == $r7 goto label2;

     label1:
        return 1;

     label2:
        $i0 = virtualinvoke r0.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $r8 = virtualinvoke r1.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>($i0);

        r2 = virtualinvoke r1.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>($r8);

        if r2 == null goto label1;

        r3 = virtualinvoke r1.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r0);

        $r9 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        r4 = virtualinvoke r1.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>($r9, r3);

        if r4 == null goto label1;

        $r10 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        $z0 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: boolean isNationalPrefixOptionalWhenFormatting()>();

        if $z0 != 0 goto label1;

        r5 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        $i2 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>("$1");

        $r12 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r11 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.String)>($r12);

        $i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i3 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        $r15 = virtualinvoke r0.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        $r14 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.String)>($r15);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $z1 = virtualinvoke r1.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder)>($r13, r2, null);

        return $z1;
    }

    private static java.lang.String limit(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 <= 0 goto label1;

        if i1 >= i0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private com.android.i18n.phonenumbers.PhoneNumberMatch parseAndVerify(java.lang.String, int)
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        java.lang.String r1, $r10;
        int i0, i1, $i4, $i5, $i6, $i7;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r3;
        com.android.i18n.phonenumbers.PhoneNumberMatch r4, $r15;
        char c2, c3;
        java.util.regex.Pattern $r5, $r19;
        java.util.regex.Matcher $r6, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency $r7, $r8, $r12;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r9, $r11;
        java.lang.CharSequence $r17, $r18, $r20;
        com.android.i18n.phonenumbers.NumberParseException $r22;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label01:
        $r5 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern MATCHING_BRACKETS>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label03;

     label02:
        return null;

     label03:
        $r8 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency leniency>;

        $r7 = <com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency: com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency VALID>;

        $i4 = virtualinvoke $r8.<com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency: int compareTo(java.lang.Enum)>($r7);

        if $i4 < 0 goto label07;

     label04:
        if i0 <= 0 goto label06;

     label05:
        $r19 = <com.android.i18n.phonenumbers.PhoneNumberMatcher: java.util.regex.Pattern LEAD_CLASS>;

        $r21 = virtualinvoke $r19.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z4 = virtualinvoke $r21.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z4 != 0 goto label06;

        $r20 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence text>;

        $i7 = i0 - 1;

        c3 = interfaceinvoke $r20.<java.lang.CharSequence: char charAt(int)>($i7);

        $z6 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: boolean isInvalidPunctuationSymbol(char)>(c3);

        if $z6 != 0 goto label10;

        $z5 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: boolean isLatinLetter(char)>(c3);

        if $z5 != 0 goto label10;

     label06:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = i0 + $i5;

        $r17 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence text>;

        $i6 = interfaceinvoke $r17.<java.lang.CharSequence: int length()>();

        if i1 >= $i6 goto label07;

        $r18 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.CharSequence text>;

        c2 = interfaceinvoke $r18.<java.lang.CharSequence: char charAt(int)>(i1);

        $z3 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: boolean isInvalidPunctuationSymbol(char)>(c2);

        if $z3 != 0 goto label10;

        $z2 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberMatcher: boolean isLatinLetter(char)>(c2);

        if $z2 != 0 goto label10;

     label07:
        $r9 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $r10 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: java.lang.String preferredRegion>;

        r3 = virtualinvoke $r9.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parseAndKeepRawInput(java.lang.String,java.lang.String)>(r1, $r10);

        $r12 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency leniency>;

        $r11 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $z1 = virtualinvoke $r12.<com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency: boolean verify(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String,com.android.i18n.phonenumbers.PhoneNumberUtil)>(r3, r1, $r11);

        if $z1 == 0 goto label10;

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearCountryCodeSource()>();

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearRawInput()>();

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearPreferredDomesticCarrierCode()>();

        $r15 = new com.android.i18n.phonenumbers.PhoneNumberMatch;

        specialinvoke $r15.<com.android.i18n.phonenumbers.PhoneNumberMatch: void <init>(int,java.lang.String,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(i0, r1, r3);

        r4 = $r15;

     label08:
        return r4;

     label09:
        $r22 := @caughtexception;

     label10:
        return null;

        catch com.android.i18n.phonenumbers.NumberParseException from label01 to label02 with label09;
        catch com.android.i18n.phonenumbers.NumberParseException from label03 to label04 with label09;
        catch com.android.i18n.phonenumbers.NumberParseException from label05 to label06 with label09;
        catch com.android.i18n.phonenumbers.NumberParseException from label06 to label07 with label09;
        catch com.android.i18n.phonenumbers.NumberParseException from label07 to label08 with label09;
    }

    private static java.lang.CharSequence trimAfterFirstMatch(java.util.regex.Pattern, java.lang.CharSequence)
    {
        java.util.regex.Pattern r0;
        java.lang.CharSequence r1;
        java.util.regex.Matcher r2;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.util.regex.Pattern;

        r1 := @parameter1: java.lang.CharSequence;

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        r1 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

     label1:
        return r1;
    }

    public boolean hasNext()
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        com.android.i18n.phonenumbers.PhoneNumberMatcher$State $r1, $r2, $r3, $r4, $r8, $r9;
        int $i0, $i1;
        com.android.i18n.phonenumbers.PhoneNumberMatch $r5, $r6, $r7;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        $r2 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatcher$State state>;

        $r1 = <com.android.i18n.phonenumbers.PhoneNumberMatcher$State: com.android.i18n.phonenumbers.PhoneNumberMatcher$State NOT_READY>;

        if $r2 != $r1 goto label1;

        $i0 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: int searchIndex>;

        $r5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch find(int)>($i0);

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch lastMatch> = $r5;

        $r6 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch lastMatch>;

        if $r6 != null goto label2;

        $r9 = <com.android.i18n.phonenumbers.PhoneNumberMatcher$State: com.android.i18n.phonenumbers.PhoneNumberMatcher$State DONE>;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatcher$State state> = $r9;

     label1:
        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatcher$State state>;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberMatcher$State: com.android.i18n.phonenumbers.PhoneNumberMatcher$State READY>;

        if $r4 != $r3 goto label3;

        return 1;

     label2:
        $r7 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch lastMatch>;

        $i1 = virtualinvoke $r7.<com.android.i18n.phonenumbers.PhoneNumberMatch: int end()>();

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: int searchIndex> = $i1;

        $r8 = <com.android.i18n.phonenumbers.PhoneNumberMatcher$State: com.android.i18n.phonenumbers.PhoneNumberMatcher$State READY>;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatcher$State state> = $r8;

        goto label1;

     label3:
        return 0;
    }

    public com.android.i18n.phonenumbers.PhoneNumberMatch next()
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        com.android.i18n.phonenumbers.PhoneNumberMatch r1;
        boolean $z0;
        com.android.i18n.phonenumbers.PhoneNumberMatcher$State $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        $z0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        r1 = r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch lastMatch>;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch lastMatch> = null;

        $r2 = <com.android.i18n.phonenumbers.PhoneNumberMatcher$State: com.android.i18n.phonenumbers.PhoneNumberMatcher$State NOT_READY>;

        r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatcher$State state> = $r2;

        return r1;
    }

    public volatile java.lang.Object next()
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        com.android.i18n.phonenumbers.PhoneNumberMatch $r1;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        $r1 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberMatcher: com.android.i18n.phonenumbers.PhoneNumberMatch next()>();

        return $r1;
    }

    public void remove()
    {
        com.android.i18n.phonenumbers.PhoneNumberMatcher r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberMatcher;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
}
