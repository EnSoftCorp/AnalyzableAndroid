class java.util.concurrent.CopyOnWriteArrayList$Slice extends java.lang.Object
{
    private final java.lang.Object[] expectedElements;
    private final int 'from';
    private final int 'to';

    void <init>(java.lang.Object[], int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList$Slice r0;
        java.lang.Object[] r1;
        int i0, i1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$Slice;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: java.lang.Object[] expectedElements> = r1;

        r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'from'> = i0;

        r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'to'> = i1;

        return;
    }

    static int access$100(java.util.concurrent.CopyOnWriteArrayList$Slice)
    {
        java.util.concurrent.CopyOnWriteArrayList$Slice r0;
        int $i0;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList$Slice;

        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'to'>;

        return $i0;
    }

    static int access$200(java.util.concurrent.CopyOnWriteArrayList$Slice)
    {
        java.util.concurrent.CopyOnWriteArrayList$Slice r0;
        int $i0;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList$Slice;

        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'from'>;

        return $i0;
    }

    static java.lang.Object[] access$400(java.util.concurrent.CopyOnWriteArrayList$Slice)
    {
        java.util.concurrent.CopyOnWriteArrayList$Slice r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList$Slice;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: java.lang.Object[] expectedElements>;

        return $r1;
    }

    void checkConcurrentModification(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList$Slice r0;
        java.lang.Object[] r1, $r2;
        java.util.ConcurrentModificationException $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$Slice;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: java.lang.Object[] expectedElements>;

        if $r2 == r1 goto label1;

        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;

     label1:
        return;
    }

    void checkElementIndex(int)
    {
        java.util.concurrent.CopyOnWriteArrayList$Slice r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$Slice;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i5 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'to'>;

        $i4 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'from'>;

        $i6 = $i5 - $i4;

        if i0 < $i6 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        $i2 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'to'>;

        $i1 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'from'>;

        $i3 = $i2 - $i1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        return;
    }

    void checkPositionIndex(int)
    {
        java.util.concurrent.CopyOnWriteArrayList$Slice r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$Slice;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i5 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'to'>;

        $i4 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'from'>;

        $i6 = $i5 - $i4;

        if i0 <= $i6 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        $i2 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'to'>;

        $i1 = r0.<java.util.concurrent.CopyOnWriteArrayList$Slice: int 'from'>;

        $i3 = $i2 - $i1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        return;
    }
}
