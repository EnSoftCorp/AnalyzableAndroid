public class android.app.backup.WallpaperBackupHelper extends android.app.backup.FileBackupHelperBase implements android.app.backup.BackupHelper
{
    private static final boolean DEBUG;
    private static final java.lang.String STAGE_FILE;
    private static final java.lang.String TAG;
    public static final java.lang.String WALLPAPER_IMAGE;
    public static final java.lang.String WALLPAPER_IMAGE_KEY;
    public static final java.lang.String WALLPAPER_INFO;
    public static final java.lang.String WALLPAPER_INFO_KEY;
    android.content.Context mContext;
    double mDesiredMinHeight;
    double mDesiredMinWidth;
    java.lang.String[] mFiles;
    java.lang.String[] mKeys;

    static void <clinit>()
    {
        java.io.File $r0, $r1, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        <android.app.backup.WallpaperBackupHelper: java.lang.String WALLPAPER_INFO_KEY> = "/data/system/wallpaper_info.xml";

        <android.app.backup.WallpaperBackupHelper: java.lang.String WALLPAPER_IMAGE_KEY> = "/data/data/com.android.settings/files/wallpaper";

        <android.app.backup.WallpaperBackupHelper: java.lang.String TAG> = "WallpaperBackupHelper";

        <android.app.backup.WallpaperBackupHelper: boolean DEBUG> = 0;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(0);

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "wallpaper");

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        <android.app.backup.WallpaperBackupHelper: java.lang.String WALLPAPER_IMAGE> = $r2;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(0);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "wallpaper_info.xml");

        $r5 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        <android.app.backup.WallpaperBackupHelper: java.lang.String WALLPAPER_INFO> = $r5;

        $r6 = new java.io.File;

        $r7 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(0);

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "wallpaper-tmp");

        $r8 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        <android.app.backup.WallpaperBackupHelper: java.lang.String STAGE_FILE> = $r8;

        return;
    }

    public void <init>(android.content.Context, java.lang.String[], java.lang.String[])
    {
        android.app.backup.WallpaperBackupHelper r0;
        android.content.Context r1;
        java.lang.String[] r2, r3;
        android.app.WallpaperManager r4;
        android.view.Display r5;
        android.graphics.Point r6, $r10;
        java.lang.Object $r7, $r8;
        int $i0, $i1, $i3, $i4;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b2, $b5;
        android.view.WindowManager $r9;

        r0 := @this: android.app.backup.WallpaperBackupHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<android.app.backup.FileBackupHelperBase: void <init>(android.content.Context)>(r1);

        r0.<android.app.backup.WallpaperBackupHelper: android.content.Context mContext> = r1;

        r0.<android.app.backup.WallpaperBackupHelper: java.lang.String[] mFiles> = r2;

        r0.<android.app.backup.WallpaperBackupHelper: java.lang.String[] mKeys> = r3;

        $r7 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wallpaper");

        r4 = (android.app.WallpaperManager) $r7;

        $i0 = virtualinvoke r4.<android.app.WallpaperManager: int getDesiredMinimumWidth()>();

        $d0 = (double) $i0;

        r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinWidth> = $d0;

        $i1 = virtualinvoke r4.<android.app.WallpaperManager: int getDesiredMinimumHeight()>();

        $d1 = (double) $i1;

        r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinHeight> = $d1;

        $d2 = r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinWidth>;

        $b2 = $d2 cmpg 0.0;

        if $b2 <= 0 goto label1;

        $d5 = r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinHeight>;

        $b5 = $d5 cmpg 0.0;

        if $b5 > 0 goto label2;

     label1:
        $r8 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r9 = (android.view.WindowManager) $r8;

        r5 = interfaceinvoke $r9.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $r10 = new android.graphics.Point;

        specialinvoke $r10.<android.graphics.Point: void <init>()>();

        r6 = $r10;

        virtualinvoke r5.<android.view.Display: void getSize(android.graphics.Point)>(r6);

        $i3 = r6.<android.graphics.Point: int x>;

        $d3 = (double) $i3;

        r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinWidth> = $d3;

        $i4 = r6.<android.graphics.Point: int y>;

        $d4 = (double) $i4;

        r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinHeight> = $d4;

     label2:
        return;
    }

    public void performBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)
    {
        android.app.backup.WallpaperBackupHelper r0;
        android.os.ParcelFileDescriptor r1, r3;
        android.app.backup.BackupDataOutput r2;
        java.lang.String[] $r4, $r5;

        r0 := @this: android.app.backup.WallpaperBackupHelper;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: android.app.backup.BackupDataOutput;

        r3 := @parameter2: android.os.ParcelFileDescriptor;

        $r5 = r0.<android.app.backup.WallpaperBackupHelper: java.lang.String[] mFiles>;

        $r4 = r0.<android.app.backup.WallpaperBackupHelper: java.lang.String[] mKeys>;

        staticinvoke <android.app.backup.WallpaperBackupHelper: void performBackup_checked(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor,java.lang.String[],java.lang.String[])>(r1, r2, r3, $r5, $r4);

        return;
    }

    public void restoreEntity(android.app.backup.BackupDataInputStream)
    {
        android.app.backup.WallpaperBackupHelper r0;
        android.app.backup.BackupDataInputStream r1;
        java.lang.String r2, $r7, $r8, $r12, $r14;
        java.io.File r3, $r6, $r9, $r13;
        android.graphics.BitmapFactory$Options r4, $r10;
        double d0, d1, $d2, $d3, $d4, $d5;
        java.lang.String[] $r5;
        boolean $z0, $z1, $z2, $z4;
        int $i0, $i1;
        byte $b2, $b3, $b4, $b5;

        r0 := @this: android.app.backup.WallpaperBackupHelper;

        r1 := @parameter0: android.app.backup.BackupDataInputStream;

        r2 = virtualinvoke r1.<android.app.backup.BackupDataInputStream: java.lang.String getKey()>();

        $r5 = r0.<android.app.backup.WallpaperBackupHelper: java.lang.String[] mKeys>;

        $z0 = virtualinvoke r0.<android.app.backup.WallpaperBackupHelper: boolean isKeyInList(java.lang.String,java.lang.String[])>(r2, $r5);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("/data/data/com.android.settings/files/wallpaper");

        if $z1 == 0 goto label3;

        $r9 = new java.io.File;

        $r8 = <android.app.backup.WallpaperBackupHelper: java.lang.String STAGE_FILE>;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r8);

        r3 = $r9;

        $z4 = virtualinvoke r0.<android.app.backup.WallpaperBackupHelper: boolean writeFile(java.io.File,android.app.backup.BackupDataInputStream)>(r3, r1);

        if $z4 == 0 goto label1;

        $r10 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r10.<android.graphics.BitmapFactory$Options: void <init>()>();

        r4 = $r10;

        r4.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        $r12 = <android.app.backup.WallpaperBackupHelper: java.lang.String STAGE_FILE>;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r12, r4);

        $d3 = r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinWidth>;

        $i0 = r4.<android.graphics.BitmapFactory$Options: int outWidth>;

        $d2 = (double) $i0;

        d0 = $d3 / $d2;

        $d4 = r0.<android.app.backup.WallpaperBackupHelper: double mDesiredMinHeight>;

        $i1 = r4.<android.graphics.BitmapFactory$Options: int outHeight>;

        $d5 = (double) $i1;

        d1 = $d4 / $d5;

        $b2 = d0 cmpl 0.0;

        if $b2 <= 0 goto label2;

        $b4 = d0 cmpg 1.33;

        if $b4 >= 0 goto label2;

        $b5 = d1 cmpl 0.0;

        if $b5 <= 0 goto label2;

        $b3 = d1 cmpg 1.33;

        if $b3 >= 0 goto label2;

        $r13 = new java.io.File;

        $r14 = <android.app.backup.WallpaperBackupHelper: java.lang.String WALLPAPER_IMAGE>;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r14);

        virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>($r13);

     label1:
        return;

     label2:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        return;

     label3:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("/data/system/wallpaper_info.xml");

        if $z2 == 0 goto label1;

        $r6 = new java.io.File;

        $r7 = <android.app.backup.WallpaperBackupHelper: java.lang.String WALLPAPER_INFO>;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        virtualinvoke r0.<android.app.backup.WallpaperBackupHelper: boolean writeFile(java.io.File,android.app.backup.BackupDataInputStream)>($r6, r1);

        return;
    }

    public volatile void writeNewStateDescription(android.os.ParcelFileDescriptor)
    {
        android.app.backup.WallpaperBackupHelper r0;
        android.os.ParcelFileDescriptor r1;

        r0 := @this: android.app.backup.WallpaperBackupHelper;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<android.app.backup.FileBackupHelperBase: void writeNewStateDescription(android.os.ParcelFileDescriptor)>(r1);

        return;
    }
}
