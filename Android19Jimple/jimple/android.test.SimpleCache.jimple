abstract class android.test.SimpleCache extends java.lang.Object
{
    private java.util.Map map;

    void <init>()
    {
        android.test.SimpleCache r0;
        java.util.HashMap $r1;

        r0 := @this: android.test.SimpleCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.test.SimpleCache: java.util.Map map> = $r1;

        return;
    }

    final java.lang.Object get(java.lang.Object)
    {
        android.test.SimpleCache r0;
        java.lang.Object r1, r2, $r7;
        java.util.Map $r3, $r4, $r6;
        boolean $z0;

        r0 := @this: android.test.SimpleCache;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<android.test.SimpleCache: java.util.Map map>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<android.test.SimpleCache: java.util.Map map>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r7;

     label1:
        r2 = virtualinvoke r0.<android.test.SimpleCache: java.lang.Object load(java.lang.Object)>(r1);

        $r4 = r0.<android.test.SimpleCache: java.util.Map map>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r2;
    }

    protected abstract java.lang.Object load(java.lang.Object);
}
