public abstract class android.filterfw.core.FilterPort extends java.lang.Object
{
    private static final java.lang.String TAG;
    protected boolean mChecksType;
    protected android.filterfw.core.Filter mFilter;
    protected boolean mIsBlocking;
    protected boolean mIsOpen;
    private boolean mLogVerbose;
    protected java.lang.String mName;
    protected android.filterfw.core.FrameFormat mPortFormat;

    public void <init>(android.filterfw.core.Filter, java.lang.String)
    {
        android.filterfw.core.FilterPort r0;
        android.filterfw.core.Filter r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: android.filterfw.core.FilterPort;

        r1 := @parameter0: android.filterfw.core.Filter;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.filterfw.core.FilterPort: boolean mIsBlocking> = 1;

        r0.<android.filterfw.core.FilterPort: boolean mIsOpen> = 0;

        r0.<android.filterfw.core.FilterPort: boolean mChecksType> = 0;

        r0.<android.filterfw.core.FilterPort: java.lang.String mName> = r2;

        r0.<android.filterfw.core.FilterPort: android.filterfw.core.Filter mFilter> = r1;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("FilterPort", 2);

        r0.<android.filterfw.core.FilterPort: boolean mLogVerbose> = $z0;

        return;
    }

    protected void assertPortIsOpen()
    {
        android.filterfw.core.FilterPort r0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.filterfw.core.FilterPort;

        $z0 = virtualinvoke r0.<android.filterfw.core.FilterPort: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal operation on closed ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    protected void checkFrameManager(android.filterfw.core.Frame, android.filterfw.core.FilterContext)
    {
        android.filterfw.core.FilterPort r0;
        android.filterfw.core.Frame r1;
        android.filterfw.core.FilterContext r2;
        android.filterfw.core.FrameManager $r3, $r4, $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: android.filterfw.core.FilterPort;

        r1 := @parameter0: android.filterfw.core.Frame;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $r3 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameManager getFrameManager()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameManager getFrameManager()>();

        $r5 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Frame ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is managed by foreign FrameManager! ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        return;
    }

    protected void checkFrameType(android.filterfw.core.Frame, boolean)
    {
        android.filterfw.core.FilterPort r0;
        android.filterfw.core.Frame r1;
        boolean z0, $z1, $z2;
        android.filterfw.core.FrameFormat $r2, $r3, $r4, $r11, $r13;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r16;
        java.lang.String $r15;

        r0 := @this: android.filterfw.core.FilterPort;

        r1 := @parameter0: android.filterfw.core.Frame;

        z0 := @parameter1: boolean;

        $z1 = r0.<android.filterfw.core.FilterPort: boolean mChecksType>;

        if $z1 != 0 goto label1;

        if z0 == 0 goto label2;

     label1:
        $r2 = r0.<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat mPortFormat>;

        if $r2 == null goto label2;

        $r3 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r4 = r0.<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat mPortFormat>;

        $z2 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: boolean isCompatibleWith(android.filterfw.core.FrameFormat)>($r4);

        if $z2 != 0 goto label2;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Frame passed to ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is of incorrect type! ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r11 = r0.<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat mPortFormat>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $r13 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r5;

     label2:
        return;
    }

    public abstract void clear();

    public void close()
    {
        android.filterfw.core.FilterPort r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.filterfw.core.FilterPort;

        $z0 = r0.<android.filterfw.core.FilterPort: boolean mIsOpen>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.filterfw.core.FilterPort: boolean mLogVerbose>;

        if $z1 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("FilterPort", $r4);

     label1:
        r0.<android.filterfw.core.FilterPort: boolean mIsOpen> = 0;

        return;
    }

    public abstract boolean filterMustClose();

    public android.filterfw.core.Filter getFilter()
    {
        android.filterfw.core.FilterPort r0;
        android.filterfw.core.Filter $r1;

        r0 := @this: android.filterfw.core.FilterPort;

        $r1 = r0.<android.filterfw.core.FilterPort: android.filterfw.core.Filter mFilter>;

        return $r1;
    }

    public java.lang.String getName()
    {
        android.filterfw.core.FilterPort r0;
        java.lang.String $r1;

        r0 := @this: android.filterfw.core.FilterPort;

        $r1 = r0.<android.filterfw.core.FilterPort: java.lang.String mName>;

        return $r1;
    }

    public android.filterfw.core.FrameFormat getPortFormat()
    {
        android.filterfw.core.FilterPort r0;
        android.filterfw.core.FrameFormat $r1;

        r0 := @this: android.filterfw.core.FilterPort;

        $r1 = r0.<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat mPortFormat>;

        return $r1;
    }

    public abstract boolean hasFrame();

    public boolean isAttached()
    {
        android.filterfw.core.FilterPort r0;
        android.filterfw.core.Filter $r1;

        r0 := @this: android.filterfw.core.FilterPort;

        $r1 = r0.<android.filterfw.core.FilterPort: android.filterfw.core.Filter mFilter>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isBlocking()
    {
        android.filterfw.core.FilterPort r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.FilterPort;

        $z0 = r0.<android.filterfw.core.FilterPort: boolean mIsBlocking>;

        return $z0;
    }

    public boolean isOpen()
    {
        android.filterfw.core.FilterPort r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.FilterPort;

        $z0 = r0.<android.filterfw.core.FilterPort: boolean mIsOpen>;

        return $z0;
    }

    public abstract boolean isReady();

    public void open()
    {
        android.filterfw.core.FilterPort r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.filterfw.core.FilterPort;

        $z0 = r0.<android.filterfw.core.FilterPort: boolean mIsOpen>;

        if $z0 != 0 goto label1;

        $z1 = r0.<android.filterfw.core.FilterPort: boolean mLogVerbose>;

        if $z1 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("FilterPort", $r4);

     label1:
        r0.<android.filterfw.core.FilterPort: boolean mIsOpen> = 1;

        return;
    }

    public abstract android.filterfw.core.Frame pullFrame();

    public abstract void pushFrame(android.filterfw.core.Frame);

    public void setBlocking(boolean)
    {
        android.filterfw.core.FilterPort r0;
        boolean z0;

        r0 := @this: android.filterfw.core.FilterPort;

        z0 := @parameter0: boolean;

        r0.<android.filterfw.core.FilterPort: boolean mIsBlocking> = z0;

        return;
    }

    public void setChecksType(boolean)
    {
        android.filterfw.core.FilterPort r0;
        boolean z0;

        r0 := @this: android.filterfw.core.FilterPort;

        z0 := @parameter0: boolean;

        r0.<android.filterfw.core.FilterPort: boolean mChecksType> = z0;

        return;
    }

    public abstract void setFrame(android.filterfw.core.Frame);

    public void setPortFormat(android.filterfw.core.FrameFormat)
    {
        android.filterfw.core.FilterPort r0;
        android.filterfw.core.FrameFormat r1;

        r0 := @this: android.filterfw.core.FilterPort;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r0.<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat mPortFormat> = r1;

        return;
    }

    public java.lang.String toString()
    {
        android.filterfw.core.FilterPort r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7;
        java.lang.String $r3, $r8;
        android.filterfw.core.Filter $r6;

        r0 := @this: android.filterfw.core.FilterPort;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port \'");

        $r3 = r0.<android.filterfw.core.FilterPort: java.lang.String mName>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of ");

        $r6 = r0.<android.filterfw.core.FilterPort: android.filterfw.core.Filter mFilter>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <android.filterfw.core.FilterPort: java.lang.String TAG> = "FilterPort";

        return;
    }
}
