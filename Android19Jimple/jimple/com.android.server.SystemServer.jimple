public class com.android.server.SystemServer extends java.lang.Object
{
    private static final long EARLIEST_SUPPORTED_TIME;
    public static final int FACTORY_TEST_HIGH_LEVEL;
    public static final int FACTORY_TEST_LOW_LEVEL;
    public static final int FACTORY_TEST_OFF;
    static final long SNAPSHOT_INTERVAL;
    private static final java.lang.String TAG;
    static java.util.Timer timer;

    public void <init>()
    {
        com.android.server.SystemServer r0;

        r0 := @this: com.android.server.SystemServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        dalvik.system.VMRuntime $r1, $r3, $r4;
        java.lang.String $r2;
        long $l0;
        byte $b1;
        boolean $z0;
        com.android.server.ServerThread $r5;
        java.util.Timer $r6, $r8;
        com.android.server.SystemServer$1 $r7;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r2 = virtualinvoke $r1.<dalvik.system.VMRuntime: java.lang.String vmLibrary()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.dalvik.vm.lib", $r2);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b1 = $l0 cmp 86400000L;

        if $b1 >= 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "System clock is before 1970; setting to 1970.");

        staticinvoke <android.os.SystemClock: boolean setCurrentTimeMillis(long)>(86400000L);

     label1:
        $z0 = staticinvoke <com.android.internal.os.SamplingProfilerIntegration: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        staticinvoke <com.android.internal.os.SamplingProfilerIntegration: void start()>();

        $r6 = new java.util.Timer;

        specialinvoke $r6.<java.util.Timer: void <init>()>();

        <com.android.server.SystemServer: java.util.Timer timer> = $r6;

        $r8 = <com.android.server.SystemServer: java.util.Timer timer>;

        $r7 = new com.android.server.SystemServer$1;

        specialinvoke $r7.<com.android.server.SystemServer$1: void <init>()>();

        virtualinvoke $r8.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r7, 3600000L, 3600000L);

     label2:
        $r3 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r3.<dalvik.system.VMRuntime: void clearGrowthLimit()>();

        $r4 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r4.<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)>(0.8F);

        staticinvoke <android.os.Environment: void setUserRequired(boolean)>(1);

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("android_servers");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Entered the Android system server!");

        staticinvoke <com.android.server.SystemServer: void nativeInit()>();

        $r5 = new com.android.server.ServerThread;

        specialinvoke $r5.<com.android.server.ServerThread: void <init>()>();

        virtualinvoke $r5.<com.android.server.ServerThread: void initAndLoop()>();

        return;
    }

    private static native void nativeInit();

    public static void <clinit>()
    {
        <com.android.server.SystemServer: java.lang.String TAG> = "SystemServer";

        <com.android.server.SystemServer: long SNAPSHOT_INTERVAL> = 3600000L;

        <com.android.server.SystemServer: int FACTORY_TEST_OFF> = 0;

        <com.android.server.SystemServer: int FACTORY_TEST_LOW_LEVEL> = 1;

        <com.android.server.SystemServer: int FACTORY_TEST_HIGH_LEVEL> = 2;

        <com.android.server.SystemServer: long EARLIEST_SUPPORTED_TIME> = 86400000L;

        return;
    }
}
