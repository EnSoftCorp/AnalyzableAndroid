class com.android.server.WallpaperManagerService extends android.app.IWallpaperManager$Stub
{
    static final boolean DEBUG;
    static final android.content.ComponentName IMAGE_WALLPAPER;
    static final long MIN_WALLPAPER_CRASH_TIME;
    static final java.lang.String TAG;
    static final java.lang.String WALLPAPER;
    static final java.lang.String WALLPAPER_INFO;
    final android.content.Context mContext;
    int mCurrentUserId;
    final android.content.pm.IPackageManager mIPackageManager;
    final android.view.IWindowManager mIWindowManager;
    com.android.server.WallpaperManagerService$WallpaperData mLastWallpaper;
    final java.lang.Object mLock;
    final com.android.server.WallpaperManagerService$MyPackageMonitor mMonitor;
    android.util.SparseArray mWallpaperMap;

    static void <clinit>()
    {
        android.content.ComponentName $r0;

        <com.android.server.WallpaperManagerService: java.lang.String WALLPAPER_INFO> = "wallpaper_info.xml";

        <com.android.server.WallpaperManagerService: java.lang.String WALLPAPER> = "wallpaper";

        <com.android.server.WallpaperManagerService: java.lang.String TAG> = "WallpaperService";

        <com.android.server.WallpaperManagerService: long MIN_WALLPAPER_CRASH_TIME> = 10000L;

        <com.android.server.WallpaperManagerService: boolean DEBUG> = 0;

        $r0 = new android.content.ComponentName;

        specialinvoke $r0.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.ImageWallpaper");

        <com.android.server.WallpaperManagerService: android.content.ComponentName IMAGE_WALLPAPER> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.WallpaperManagerService r0;
        android.content.Context r1;
        java.lang.Object[] $r2;
        android.util.SparseArray $r3;
        android.os.IBinder $r4;
        android.view.IWindowManager $r5;
        android.content.pm.IPackageManager $r6;
        com.android.server.WallpaperManagerService$MyPackageMonitor $r7, $r9;
        android.os.UserHandle $r8;
        java.io.File $r10;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.IWallpaperManager$Stub: void <init>()>();

        $r2 = newarray (java.lang.Object)[0];

        r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap> = $r3;

        r0.<com.android.server.WallpaperManagerService: android.content.Context mContext> = r1;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r5 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r4);

        r0.<com.android.server.WallpaperManagerService: android.view.IWindowManager mIWindowManager> = $r5;

        $r6 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager> = $r6;

        $r7 = new com.android.server.WallpaperManagerService$MyPackageMonitor;

        specialinvoke $r7.<com.android.server.WallpaperManagerService$MyPackageMonitor: void <init>(com.android.server.WallpaperManagerService)>(r0);

        r0.<com.android.server.WallpaperManagerService: com.android.server.WallpaperManagerService$MyPackageMonitor mMonitor> = $r7;

        $r9 = r0.<com.android.server.WallpaperManagerService: com.android.server.WallpaperManagerService$MyPackageMonitor mMonitor>;

        $r8 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r9.<com.android.server.WallpaperManagerService$MyPackageMonitor: void register(android.content.Context,android.os.Looper,android.os.UserHandle,boolean)>(r1, null, $r8, 1);

        $r10 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        virtualinvoke $r10.<java.io.File: boolean mkdirs()>();

        specialinvoke r0.<com.android.server.WallpaperManagerService: void loadSettingsLocked(int)>(0);

        return;
    }

    static java.io.File access$000(int)
    {
        int i0;
        java.io.File $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        return $r0;
    }

    static void access$100(com.android.server.WallpaperManagerService, com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;

        r0 := @parameter0: com.android.server.WallpaperManagerService;

        r1 := @parameter1: com.android.server.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    static void access$200(com.android.server.WallpaperManagerService, com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;

        r0 := @parameter0: com.android.server.WallpaperManagerService;

        r1 := @parameter1: com.android.server.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void saveSettingsLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    private void checkPermission(java.lang.String)
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.String r1, $r9;
        android.content.Context $r2;
        int $i0, $i1;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 == 0 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access denied to process: ");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must have permission ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        return;
    }

    private android.graphics.Point getDefaultDisplaySize()
    {
        com.android.server.WallpaperManagerService r0;
        android.graphics.Point r1, $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.view.WindowManager $r5;
        android.view.Display $r6;

        r0 := @this: com.android.server.WallpaperManagerService;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        r1 = $r2;

        $r3 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r5 = (android.view.WindowManager) $r4;

        $r6 = interfaceinvoke $r5.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r6.<android.view.Display: void getRealSize(android.graphics.Point)>(r1);

        return r1;
    }

    private int getMaximumSizeDimension()
    {
        com.android.server.WallpaperManagerService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.view.WindowManager $r3;
        android.view.Display $r4;
        int $i0;

        r0 := @this: com.android.server.WallpaperManagerService;

        $r1 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r3 = (android.view.WindowManager) $r2;

        $r4 = interfaceinvoke $r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i0 = virtualinvoke $r4.<android.view.Display: int getMaximumSizeDimension()>();

        return $i0;
    }

    private static java.io.File getWallpaperDir(int)
    {
        int i0;
        java.io.File $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        return $r0;
    }

    private void loadSettingsLocked(int)
    {
        com.android.server.WallpaperManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        com.android.internal.util.JournaledFile r1;
        java.io.FileInputStream r2, r5, $r19;
        java.io.File r3;
        com.android.server.WallpaperManagerService$WallpaperData r4, $r31;
        boolean z0, $z1, $z2, $z3;
        java.lang.NullPointerException r8, $r43, $r69;
        java.lang.NumberFormatException r9, $r52, $r72;
        org.xmlpull.v1.XmlPullParserException r10, $r58, $r71;
        java.io.IOException r11, $r42, $r50, $r74;
        java.lang.IndexOutOfBoundsException r12, $r34, $r70;
        org.xmlpull.v1.XmlPullParser r13;
        android.content.ComponentName r14, $r24, $r28, $r29;
        java.lang.String r15, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r35, $r49, $r56, $r61, $r63;
        java.lang.Object $r17;
        android.util.SparseArray $r18, $r30;
        java.lang.StringBuilder $r32, $r33, $r36, $r37, $r38, $r39, $r40, $r41, $r44, $r45, $r46, $r47, $r48, $r51, $r53, $r54, $r55, $r59, $r60, $r62, $r64, $r65, $r66, $r67, $r68;
        java.io.FileNotFoundException $r57, $r73;

        r0 := @this: com.android.server.WallpaperManagerService;

        i0 := @parameter0: int;

        r1 = staticinvoke <com.android.server.WallpaperManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r2 = null;

        r3 = virtualinvoke r1.<com.android.internal.util.JournaledFile: java.io.File chooseForRead()>();

        $z1 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label01;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void migrateFromOld()>();

     label01:
        $r18 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r17 = virtualinvoke $r18.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.WallpaperManagerService$WallpaperData) $r17;

        if r4 != null goto label02;

        $r31 = new com.android.server.WallpaperManagerService$WallpaperData;

        specialinvoke $r31.<com.android.server.WallpaperManagerService$WallpaperData: void <init>(int)>(i0);

        r4 = $r31;

        $r30 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r30.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4);

     label02:
        $r19 = new java.io.FileInputStream;

        specialinvoke $r19.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        r5 = $r19;

     label03:
        r13 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r5, null);

     label04:
        i2 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int next()>();

     label05:
        if i2 != 2 goto label11;

     label06:
        $r20 = "wp";

        $r21 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label11;

        $r23 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "width");

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23);

        r4.<com.android.server.WallpaperManagerService$WallpaperData: int width> = $i5;

        $r22 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "height");

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r22);

        r4.<com.android.server.WallpaperManagerService$WallpaperData: int height> = $i6;

        $r25 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r4.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name> = $r25;

        r15 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "component");

     label07:
        if r15 == null goto label18;

     label08:
        r14 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r15);

     label09:
        r4.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent> = r14;

        $r24 = r4.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        if $r24 == null goto label10;

        $r27 = "android";

        $r28 = r4.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $r26 = virtualinvoke $r28.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z3 == 0 goto label11;

     label10:
        $r29 = <com.android.server.WallpaperManagerService: android.content.ComponentName IMAGE_WALLPAPER>;

        r4.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent> = $r29;

     label11:
        if i2 != 1 goto label04;

        z0 = 1;

        r2 = r5;

     label12:
        if r2 == null goto label14;

     label13:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label14:
        if z0 != 0 goto label15;

        r4.<com.android.server.WallpaperManagerService$WallpaperData: int width> = -1;

        r4.<com.android.server.WallpaperManagerService$WallpaperData: int height> = -1;

        r4.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name> = "";

     label15:
        i1 = specialinvoke r0.<com.android.server.WallpaperManagerService: int getMaximumSizeDimension()>();

        $i3 = r4.<com.android.server.WallpaperManagerService$WallpaperData: int width>;

        if $i3 >= i1 goto label16;

        r4.<com.android.server.WallpaperManagerService$WallpaperData: int width> = i1;

     label16:
        $i4 = r4.<com.android.server.WallpaperManagerService$WallpaperData: int height>;

        if $i4 >= i1 goto label17;

        r4.<com.android.server.WallpaperManagerService$WallpaperData: int height> = i1;

     label17:
        return;

     label18:
        r14 = null;

        goto label09;

     label19:
        $r57 := @caughtexception;

     label20:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", "no current wallpaper -- first boot?");

        z0 = 0;

        goto label12;

     label21:
        $r43 := @caughtexception;

        r8 = $r43;

     label22:
        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r48 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", $r49);

        z0 = 0;

        goto label12;

     label23:
        $r52 := @caughtexception;

        r9 = $r52;

     label24:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r60 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", $r61);

        z0 = 0;

        goto label12;

     label25:
        $r58 := @caughtexception;

        r10 = $r58;

     label26:
        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r64 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r63 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", $r63);

        z0 = 0;

        goto label12;

     label27:
        $r74 := @caughtexception;

        r11 = $r74;

     label28:
        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r55 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", $r56);

        z0 = 0;

        goto label12;

     label29:
        $r34 := @caughtexception;

        r12 = $r34;

     label30:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", $r35);

        z0 = 0;

        goto label12;

     label31:
        $r42 := @caughtexception;

        goto label14;

     label32:
        $r70 := @caughtexception;

        r12 = $r70;

        r2 = r5;

        goto label30;

     label33:
        $r50 := @caughtexception;

        r11 = $r50;

        r2 = r5;

        goto label28;

     label34:
        $r71 := @caughtexception;

        r10 = $r71;

        r2 = r5;

        goto label26;

     label35:
        $r72 := @caughtexception;

        r9 = $r72;

        r2 = r5;

        goto label24;

     label36:
        $r69 := @caughtexception;

        r8 = $r69;

        r2 = r5;

        goto label22;

     label37:
        $r73 := @caughtexception;

        r2 = r5;

        goto label20;

        catch java.io.FileNotFoundException from label02 to label03 with label19;
        catch java.lang.NullPointerException from label02 to label03 with label21;
        catch java.lang.NumberFormatException from label02 to label03 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label25;
        catch java.io.IOException from label02 to label03 with label27;
        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label29;
        catch java.io.FileNotFoundException from label03 to label04 with label37;
        catch java.lang.NullPointerException from label03 to label04 with label36;
        catch java.lang.NumberFormatException from label03 to label04 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label34;
        catch java.io.IOException from label03 to label04 with label33;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label32;
        catch java.io.FileNotFoundException from label04 to label05 with label37;
        catch java.lang.NullPointerException from label04 to label05 with label36;
        catch java.lang.NumberFormatException from label04 to label05 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label34;
        catch java.io.IOException from label04 to label05 with label33;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label32;
        catch java.io.FileNotFoundException from label06 to label07 with label37;
        catch java.lang.NullPointerException from label06 to label07 with label36;
        catch java.lang.NumberFormatException from label06 to label07 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label34;
        catch java.io.IOException from label06 to label07 with label33;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label32;
        catch java.io.FileNotFoundException from label08 to label09 with label37;
        catch java.lang.NullPointerException from label08 to label09 with label36;
        catch java.lang.NumberFormatException from label08 to label09 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label34;
        catch java.io.IOException from label08 to label09 with label33;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label32;
        catch java.io.FileNotFoundException from label09 to label10 with label37;
        catch java.lang.NullPointerException from label09 to label10 with label36;
        catch java.lang.NumberFormatException from label09 to label10 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label34;
        catch java.io.IOException from label09 to label10 with label33;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label32;
        catch java.io.FileNotFoundException from label10 to label11 with label37;
        catch java.lang.NullPointerException from label10 to label11 with label36;
        catch java.lang.NumberFormatException from label10 to label11 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label34;
        catch java.io.IOException from label10 to label11 with label33;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label32;
        catch java.io.IOException from label13 to label14 with label31;
    }

    private static com.android.internal.util.JournaledFile makeJournaledFile(int)
    {
        int i0;
        java.lang.String r0, $r9;
        java.io.File $r1, $r2, $r4, $r5;
        com.android.internal.util.JournaledFile $r3;
        java.lang.StringBuilder $r6, $r7, $r8;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "wallpaper_info.xml");

        r0 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = new com.android.internal.util.JournaledFile;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r0);

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r9);

        specialinvoke $r3.<com.android.internal.util.JournaledFile: void <init>(java.io.File,java.io.File)>($r4, $r5);

        return $r3;
    }

    private void migrateFromOld()
    {
        com.android.server.WallpaperManagerService r0;
        java.io.File r1, r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: com.android.server.WallpaperManagerService;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/data/data/com.android.settings/files/wallpaper");

        r1 = $r3;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("/data/system/wallpaper_info.xml");

        r2 = $r4;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r7 = new java.io.File;

        $r8 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "wallpaper");

        virtualinvoke r1.<java.io.File: boolean renameTo(java.io.File)>($r7);

     label1:
        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r5 = new java.io.File;

        $r6 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "wallpaper_info.xml");

        virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>($r5);

     label2:
        return;
    }

    private void notifyCallbacksLocked(com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;
        int i0, i1, $i2;
        android.content.Intent r2, $r6;
        android.os.RemoteCallbackList $r4, $r5, $r9;
        android.os.UserHandle $r7;
        android.content.Context $r8;
        android.os.IInterface $r10;
        android.app.IWallpaperManagerCallback $r11;
        android.os.RemoteException $r12;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: com.android.server.WallpaperManagerService$WallpaperData;

        $r4 = staticinvoke <com.android.server.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.WallpaperManagerService$WallpaperData)>(r1);

        i0 = virtualinvoke $r4.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

     label2:
        $r9 = staticinvoke <com.android.server.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.WallpaperManagerService$WallpaperData)>(r1);

        $r10 = virtualinvoke $r9.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r11 = (android.app.IWallpaperManagerCallback) $r10;

        interfaceinvoke $r11.<android.app.IWallpaperManagerCallback: void onWallpaperChanged()>();

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = staticinvoke <com.android.server.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.WallpaperManagerService$WallpaperData)>(r1);

        virtualinvoke $r5.<android.os.RemoteCallbackList: void finishBroadcast()>();

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.WALLPAPER_CHANGED");

        r2 = $r6;

        $r8 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r7 = new android.os.UserHandle;

        $i2 = r0.<com.android.server.WallpaperManagerService: int mCurrentUserId>;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>($i2);

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r7);

        return;

     label5:
        $r12 := @caughtexception;

        goto label3;

        catch android.os.RemoteException from label2 to label3 with label5;
    }

    private void saveSettingsLocked(com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;
        com.android.internal.util.JournaledFile r2;
        java.io.FileOutputStream r3, r4, $r9;
        com.android.internal.util.FastXmlSerializer r5, $r10;
        int $i0, $i1, $i2;
        java.io.File $r11;
        java.lang.Boolean $r12;
        java.lang.String $r15, $r16, $r20, $r24;
        android.content.ComponentName $r18, $r21, $r23, $r25;
        boolean $z0;
        java.io.IOException $r26, $r27, $r29;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: com.android.server.WallpaperManagerService$WallpaperData;

        $i0 = r1.<com.android.server.WallpaperManagerService$WallpaperData: int userId>;

        r2 = staticinvoke <com.android.server.WallpaperManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>($i0);

        r3 = null;

     label01:
        $r9 = new java.io.FileOutputStream;

        $r11 = virtualinvoke r2.<com.android.internal.util.JournaledFile: java.io.File chooseForWrite()>();

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r11, 0);

        r4 = $r9;

     label02:
        $r10 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r10.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r5 = $r10;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r4, "utf-8");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r12);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "wp");

        $i1 = r1.<com.android.server.WallpaperManagerService$WallpaperData: int width>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "width", $r15);

        $i2 = r1.<com.android.server.WallpaperManagerService$WallpaperData: int height>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "height", $r16);

        $r20 = r1.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r20);

        $r18 = r1.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r18 == null goto label03;

        $r21 = r1.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $r23 = <com.android.server.WallpaperManagerService: android.content.ComponentName IMAGE_WALLPAPER>;

        $z0 = virtualinvoke $r21.<android.content.ComponentName: boolean equals(java.lang.Object)>($r23);

        if $z0 != 0 goto label03;

        $r25 = r1.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $r24 = virtualinvoke $r25.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "component", $r24);

     label03:
        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "wp");

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

        virtualinvoke r2.<com.android.internal.util.JournaledFile: void commit()>();

     label04:
        return;

     label05:
        $r27 := @caughtexception;

     label06:
        if r3 == null goto label08;

     label07:
        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label08:
        virtualinvoke r2.<com.android.internal.util.JournaledFile: void rollback()>();

        return;

     label09:
        $r29 := @caughtexception;

        goto label08;

     label10:
        $r26 := @caughtexception;

        r3 = r4;

        goto label06;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label07 to label08 with label09;
    }

    void attachServiceLocked(com.android.server.WallpaperManagerService$WallpaperConnection, com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperConnection r1;
        com.android.server.WallpaperManagerService$WallpaperData r2;
        android.os.RemoteException r3, $r6;
        int $i0, $i1;
        android.os.Binder $r4;
        android.service.wallpaper.IWallpaperService $r5;
        boolean $z0;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: com.android.server.WallpaperManagerService$WallpaperConnection;

        r2 := @parameter1: com.android.server.WallpaperManagerService$WallpaperData;

     label1:
        $r5 = r1.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        $r4 = r1.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        $i1 = r2.<com.android.server.WallpaperManagerService$WallpaperData: int width>;

        $i0 = r2.<com.android.server.WallpaperManagerService$WallpaperData: int height>;

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperService: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int)>(r1, $r4, 2013, 0, $i1, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperService", "Failed attaching wallpaper; clearing", r3);

        $z0 = r2.<com.android.server.WallpaperManagerService$WallpaperData: boolean wallpaperUpdating>;

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(null, 0, 0, r2, null);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    boolean bindWallpaperComponentLocked(android.content.ComponentName, boolean, boolean, com.android.server.WallpaperManagerService$WallpaperData, android.os.IRemoteCallback)
    {
        com.android.server.WallpaperManagerService r0;
        android.content.ComponentName r1, r9, $r70, $r81;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7;
        com.android.server.WallpaperManagerService$WallpaperData r2, $r41, $r43;
        android.os.IRemoteCallback r3;
        android.os.RemoteException r4, $r79, $r80;
        java.lang.String r5, r18, r19, r20, r22, $r23, $r24, $r51, $r55, $r56, $r63, $r64, $r73;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        android.content.pm.ServiceInfo r6, r11;
        android.content.Intent r7, $r27, $r30, $r32;
        android.app.WallpaperInfo r8, $r62;
        java.util.List r10;
        java.io.IOException r12, $r86;
        org.xmlpull.v1.XmlPullParserException r13, $r85;
        android.content.Context r14, $r29, $r34, $r37, $r50, $r72;
        com.android.server.WallpaperManagerService$WallpaperConnection r15, $r28, $r71;
        android.content.pm.ResolveInfo r16, $r53;
        android.content.pm.IPackageManager $r21, $r49;
        android.os.UserHandle $r31, $r38;
        java.lang.CharSequence $r33;
        android.app.PendingIntent $r36;
        android.os.Binder $r39;
        android.view.IWindowManager $r40;
        long $l6;
        java.lang.IllegalArgumentException $r42, $r82, $r84, $r87;
        java.lang.StringBuilder $r44, $r45, $r46, $r47, $r48, $r57, $r59, $r60, $r65, $r66, $r67, $r69, $r74, $r75, $r76, $r77, $r78, $r83;
        android.content.ContentResolver $r52;
        java.lang.Object $r54, $r61;
        java.lang.SecurityException $r58, $r68;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: com.android.server.WallpaperManagerService$WallpaperData;

        r3 := @parameter4: android.os.IRemoteCallback;

        if z0 != 0 goto label02;

        $r71 = r2.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        if $r71 == null goto label02;

        $r70 = r2.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r70 != null goto label01;

        if r1 != null goto label02;

        return 1;

     label01:
        $r81 = r2.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $z7 = virtualinvoke $r81.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label02;

        return 1;

     label02:
        if r1 != null goto label08;

     label03:
        $r72 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        r20 = virtualinvoke $r72.<android.content.Context: java.lang.String getString(int)>(17039389);

     label04:
        if r20 == null goto label06;

     label05:
        r1 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r20);

     label06:
        if r1 != null goto label08;

     label07:
        r1 = <com.android.server.WallpaperManagerService: android.content.ComponentName IMAGE_WALLPAPER>;

     label08:
        i0 = r2.<com.android.server.WallpaperManagerService$WallpaperData: int userId>;

        $r21 = r0.<com.android.server.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r6 = interfaceinvoke $r21.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r1, 4224, i0);

     label09:
        if r6 != null goto label12;

     label10:
        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted wallpaper ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r74 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unavailable");

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", $r73);

     label11:
        return 0;

     label12:
        $r23 = "android.permission.BIND_WALLPAPER";

        $r24 = r6.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z4 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z4 != 0 goto label18;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected service does not require android.permission.BIND_WALLPAPER: ");

        $r69 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r22 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        if z1 == 0 goto label16;

     label14:
        $r68 = new java.lang.SecurityException;

        specialinvoke $r68.<java.lang.SecurityException: void <init>(java.lang.String)>(r22);

        throw $r68;

     label15:
        $r79 := @caughtexception;

        r4 = $r79;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception for ");

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r83 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        r5 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        if z1 == 0 goto label52;

        $r84 = new java.lang.IllegalArgumentException;

        specialinvoke $r84.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r5);

        throw $r84;

     label16:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", r22);

     label17:
        return 0;

     label18:
        $r27 = new android.content.Intent;

        specialinvoke $r27.<android.content.Intent: void <init>(java.lang.String)>("android.service.wallpaper.WallpaperService");

        r7 = $r27;

     label19:
        r8 = null;

        if r1 == null goto label43;

     label20:
        r9 = <com.android.server.WallpaperManagerService: android.content.ComponentName IMAGE_WALLPAPER>;

        z2 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>(r9);

     label21:
        r8 = null;

        if z2 != 0 goto label43;

     label22:
        $r49 = r0.<com.android.server.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r50 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r52 = virtualinvoke $r50.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r51 = virtualinvoke r7.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r52);

        r10 = interfaceinvoke $r49.<android.content.pm.IPackageManager: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>(r7, $r51, 128, i0);

     label23:
        i1 = 0;

     label24:
        i2 = interfaceinvoke r10.<java.util.List: int size()>();

     label25:
        r8 = null;

        if i1 >= i2 goto label29;

     label26:
        $r54 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i1);

        $r53 = (android.content.pm.ResolveInfo) $r54;

        r11 = $r53.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r55 = r11.<android.content.pm.ServiceInfo: java.lang.String name>;

        $r56 = r6.<android.content.pm.ServiceInfo: java.lang.String name>;

        $z6 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z6 == 0 goto label54;

        $r63 = r11.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r64 = r6.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        z3 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>($r64);

     label27:
        if z3 == 0 goto label54;

     label28:
        r14 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r61 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i1);

        r16 = (android.content.pm.ResolveInfo) $r61;

        $r62 = new android.app.WallpaperInfo;

        specialinvoke $r62.<android.app.WallpaperInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>(r14, r16);

        r8 = $r62;

     label29:
        if r8 != null goto label43;

     label30:
        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected service is not a wallpaper: ");

        $r57 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r18 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

     label31:
        if z1 == 0 goto label41;

     label32:
        $r58 = new java.lang.SecurityException;

        specialinvoke $r58.<java.lang.SecurityException: void <init>(java.lang.String)>(r18);

        throw $r58;

     label33:
        $r85 := @caughtexception;

        r13 = $r85;

        if z1 == 0 goto label35;

     label34:
        $r87 = new java.lang.IllegalArgumentException;

        specialinvoke $r87.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r13);

        throw $r87;

     label35:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("WallpaperService", r13);

     label36:
        return 0;

     label37:
        $r86 := @caughtexception;

        r12 = $r86;

        if z1 == 0 goto label39;

     label38:
        $r82 = new java.lang.IllegalArgumentException;

        specialinvoke $r82.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r12);

        throw $r82;

     label39:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("WallpaperService", r12);

     label40:
        return 0;

     label41:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", r18);

     label42:
        return 0;

     label43:
        $r28 = new com.android.server.WallpaperManagerService$WallpaperConnection;

        specialinvoke $r28.<com.android.server.WallpaperManagerService$WallpaperConnection: void <init>(com.android.server.WallpaperManagerService,android.app.WallpaperInfo,com.android.server.WallpaperManagerService$WallpaperData)>(r0, r8, r2);

        r15 = $r28;

        virtualinvoke r7.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.client_label", 17040562);

        $r29 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r30 = new android.content.Intent;

        specialinvoke $r30.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SET_WALLPAPER");

        $r34 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r33 = virtualinvoke $r34.<android.content.Context: java.lang.CharSequence getText(int)>(17040563);

        $r32 = staticinvoke <android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>($r30, $r33);

        $r31 = new android.os.UserHandle;

        specialinvoke $r31.<android.os.UserHandle: void <init>(int)>(i0);

        $r36 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r29, 0, $r32, 0, null, $r31);

        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.client_intent", $r36);

        $r37 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r38 = new android.os.UserHandle;

        specialinvoke $r38.<android.os.UserHandle: void <init>(int)>(i0);

        $z5 = virtualinvoke $r37.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r7, r15, 536870913, $r38);

        if $z5 != 0 goto label48;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to bind service: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r19 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

     label44:
        if z1 == 0 goto label46;

     label45:
        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r19);

        throw $r42;

     label46:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", r19);

     label47:
        return 0;

     label48:
        $i5 = r2.<com.android.server.WallpaperManagerService$WallpaperData: int userId>;

        $i4 = r0.<com.android.server.WallpaperManagerService: int mCurrentUserId>;

        if $i5 != $i4 goto label49;

        $r41 = r0.<com.android.server.WallpaperManagerService: com.android.server.WallpaperManagerService$WallpaperData mLastWallpaper>;

        if $r41 == null goto label49;

        $r43 = r0.<com.android.server.WallpaperManagerService: com.android.server.WallpaperManagerService$WallpaperData mLastWallpaper>;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: void detachWallpaperLocked(com.android.server.WallpaperManagerService$WallpaperData)>($r43);

     label49:
        r2.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent> = r1;

        r2.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection> = r15;

        $l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r2.<com.android.server.WallpaperManagerService$WallpaperData: long lastDiedTime> = $l6;

        r15.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply> = r3;

     label50:
        $i3 = r2.<com.android.server.WallpaperManagerService$WallpaperData: int userId>;

        $i7 = r0.<com.android.server.WallpaperManagerService: int mCurrentUserId>;

        if $i3 != $i7 goto label51;

        $r40 = r0.<com.android.server.WallpaperManagerService: android.view.IWindowManager mIWindowManager>;

        $r39 = r15.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        interfaceinvoke $r40.<android.view.IWindowManager: void addWindowToken(android.os.IBinder,int)>($r39, 2013);

        r0.<com.android.server.WallpaperManagerService: com.android.server.WallpaperManagerService$WallpaperData mLastWallpaper> = r2;

     label51:
        return 1;

     label52:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperService", r5);

        return 0;

     label53:
        $r80 := @caughtexception;

        goto label51;

     label54:
        i1 = i1 + 1;

        goto label24;

        catch android.os.RemoteException from label03 to label04 with label15;
        catch android.os.RemoteException from label05 to label06 with label15;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch android.os.RemoteException from label08 to label09 with label15;
        catch android.os.RemoteException from label10 to label11 with label15;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch android.os.RemoteException from label14 to label15 with label15;
        catch android.os.RemoteException from label16 to label17 with label15;
        catch android.os.RemoteException from label18 to label19 with label15;
        catch android.os.RemoteException from label20 to label21 with label15;
        catch android.os.RemoteException from label22 to label23 with label15;
        catch android.os.RemoteException from label24 to label25 with label15;
        catch android.os.RemoteException from label26 to label27 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label28 to label29 with label33;
        catch java.io.IOException from label28 to label29 with label37;
        catch android.os.RemoteException from label28 to label29 with label15;
        catch android.os.RemoteException from label30 to label31 with label15;
        catch android.os.RemoteException from label32 to label33 with label15;
        catch android.os.RemoteException from label34 to label35 with label15;
        catch android.os.RemoteException from label35 to label36 with label15;
        catch android.os.RemoteException from label38 to label39 with label15;
        catch android.os.RemoteException from label39 to label40 with label15;
        catch android.os.RemoteException from label41 to label42 with label15;
        catch android.os.RemoteException from label43 to label44 with label15;
        catch android.os.RemoteException from label45 to label46 with label15;
        catch android.os.RemoteException from label46 to label47 with label15;
        catch android.os.RemoteException from label48 to label49 with label15;
        catch android.os.RemoteException from label49 to label50 with label15;
        catch android.os.RemoteException from label50 to label51 with label53;
    }

    public void clearWallpaper()
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r0.<com.android.server.WallpaperManagerService: void clearWallpaperLocked(boolean,int,android.os.IRemoteCallback)>(0, $i0, null);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void clearWallpaperComponentLocked(com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: com.android.server.WallpaperManagerService$WallpaperData;

        r1.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent> = null;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: void detachWallpaperLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    void clearWallpaperLocked(boolean, int, android.os.IRemoteCallback)
    {
        com.android.server.WallpaperManagerService r0;
        boolean z0, z1, $z2;
        int i0, i2;
        android.os.IRemoteCallback r1;
        com.android.server.WallpaperManagerService$WallpaperData r2;
        java.io.File r3, $r11, $r12;
        long l1;
        java.lang.Throwable r4, $r14;
        java.lang.IllegalArgumentException r5, r6, $r15;
        android.content.ComponentName r8;
        java.lang.Object $r9;
        android.util.SparseArray $r10;
        android.os.RemoteException $r13;

        r0 := @this: com.android.server.WallpaperManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.IRemoteCallback;

        $r10 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r9 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.WallpaperManagerService$WallpaperData) $r9;

        $r12 = new java.io.File;

        $r11 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "wallpaper");

        r3 = $r12;

        $z2 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label01;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r2.<com.android.server.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 0;

        i2 = r0.<com.android.server.WallpaperManagerService: int mCurrentUserId>;

     label03:
        if i0 == i2 goto label06;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label05:
        return;

     label06:
        r8 = null;

        if z0 == 0 goto label08;

     label07:
        r8 = <com.android.server.WallpaperManagerService: android.content.ComponentName IMAGE_WALLPAPER>;

     label08:
        z1 = virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r8, 1, 0, r2, r1);

     label09:
        r6 = null;

        if z1 != 0 goto label04;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperService", "Default wallpaper component not found!", r6);

        virtualinvoke r0.<com.android.server.WallpaperManagerService: void clearWallpaperComponentLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r2);

        if r1 == null goto label05;

     label11:
        interfaceinvoke r1.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label12:
        return;

     label13:
        $r13 := @caughtexception;

        return;

     label14:
        $r15 := @caughtexception;

        r5 = $r15;

        r6 = r5;

        goto label10;

     label15:
        $r14 := @caughtexception;

        r4 = $r14;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

        catch java.lang.IllegalArgumentException from label02 to label03 with label14;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.IllegalArgumentException from label07 to label08 with label14;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.IllegalArgumentException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    void detachWallpaperLocked(com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;
        com.android.server.WallpaperManagerService$WallpaperConnection $r5, $r6, $r8, $r10, $r12, $r15, $r16, $r17, $r18, $r20;
        android.os.IRemoteCallback $r7, $r21;
        android.service.wallpaper.IWallpaperEngine $r9, $r19;
        android.content.Context $r11;
        android.os.Binder $r13;
        android.view.IWindowManager $r14;
        android.os.RemoteException $r22, $r23, $r24;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: com.android.server.WallpaperManagerService$WallpaperData;

        $r5 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        if $r5 == null goto label08;

        $r6 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r7 = $r6.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply>;

        if $r7 == null goto label03;

     label01:
        $r18 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r21 = $r18.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply>;

        interfaceinvoke $r21.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label02:
        $r20 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r20.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply> = null;

     label03:
        $r8 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r9 = $r8.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        if $r9 == null goto label05;

     label04:
        $r16 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r19 = $r16.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        interfaceinvoke $r19.<android.service.wallpaper.IWallpaperEngine: void destroy()>();

     label05:
        $r11 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r10 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        virtualinvoke $r11.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r10);

     label06:
        $r14 = r0.<com.android.server.WallpaperManagerService: android.view.IWindowManager mIWindowManager>;

        $r12 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r13 = $r12.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        interfaceinvoke $r14.<android.view.IWindowManager: void removeWindowToken(android.os.IBinder)>($r13);

     label07:
        $r15 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r15.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService> = null;

        $r17 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r17.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine> = null;

        r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection> = null;

     label08:
        return;

     label09:
        $r24 := @caughtexception;

        goto label07;

     label10:
        $r22 := @caughtexception;

        goto label05;

     label11:
        $r23 := @caughtexception;

        goto label02;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label04 to label05 with label10;
        catch android.os.RemoteException from label06 to label07 with label09;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.WallpaperManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r12;
        java.lang.Throwable r5, $r32;
        int i0, $i1, $i2, $i3, $i4, $i5, $i9, $i10;
        com.android.server.WallpaperManagerService$WallpaperData r6;
        com.android.server.WallpaperManagerService$WallpaperConnection r7, $r18;
        android.content.Context $r8;
        android.util.SparseArray $r9, $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r25, $r27, $r28, $r29, $r30;
        java.lang.String $r16, $r17, $r31;
        android.content.ComponentName $r19, $r26;
        android.os.Binder $r20;
        android.app.WallpaperInfo $r21, $r24;
        android.service.wallpaper.IWallpaperEngine $r22;
        android.service.wallpaper.IWallpaperService $r23;
        long $l6, $l7, $l8;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i1 == 0 goto label01;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump wallpaper service from from pid=");

        $i9 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i10 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        return;

     label01:
        r4 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Current Wallpaper Service state:");

     label03:
        i0 = 0;

     label04:
        $r9 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i2 = virtualinvoke $r9.<android.util.SparseArray: int size()>();

        if i0 >= $i2 goto label07;

        $r10 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r12 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r6 = (com.android.server.WallpaperManagerService$WallpaperData) $r12;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" User ");

        $i3 = r6.<com.android.server.WallpaperManagerService$WallpaperData: int userId>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mWidth=");

        $i4 = r6.<com.android.server.WallpaperManagerService$WallpaperData: int width>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHeight=");

        $i5 = r6.<com.android.server.WallpaperManagerService$WallpaperData: int height>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mName=");

        $r17 = r6.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mWallpaperComponent=");

        $r19 = r6.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r19);

        $r18 = r6.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        if $r18 == null goto label12;

        r7 = r6.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  Wallpaper connection ");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.Object)>(r7);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r21 = r7.<com.android.server.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        if $r21 == null goto label05;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mInfo.component=");

        $r24 = r7.<com.android.server.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        $r26 = virtualinvoke $r24.<android.app.WallpaperInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r26);

     label05:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mToken=");

        $r20 = r7.<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r20);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mService=");

        $r23 = r7.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r23);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mEngine=");

        $r22 = r7.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r22);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mLastDiedTime=");

        $l7 = r6.<com.android.server.WallpaperManagerService$WallpaperData: long lastDiedTime>;

        $l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l6 = $l7 - $l8;

        virtualinvoke r2.<java.io.PrintWriter: void println(long)>($l6);

     label06:
        goto label12;

     label07:
        exitmonitor r4;

     label08:
        return;

     label09:
        $r32 := @caughtexception;

        r5 = $r32;

     label10:
        exitmonitor r4;

     label11:
        throw r5;

     label12:
        i0 = i0 + 1;

        goto label04;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.server.WallpaperManagerService r0;
        int i0, $i1;
        android.util.SparseArray $r1, $r2;
        java.lang.Object $r3;
        com.android.server.WallpaperManagerService$WallpaperData $r4;
        com.android.server.WallpaperManagerService$WallpaperObserver $r5;

        r0 := @this: com.android.server.WallpaperManagerService;

        specialinvoke r0.<android.app.IWallpaperManager$Stub: void finalize()>();

        i0 = 0;

     label1:
        $r1 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label2;

        $r2 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        $r4 = (com.android.server.WallpaperManagerService$WallpaperData) $r3;

        $r5 = $r4.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r5.<com.android.server.WallpaperManagerService$WallpaperObserver: void stopWatching()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public int getHeightHint() throws android.os.RemoteException
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r6;
        int i0, $i1;
        android.util.SparseArray $r3;
        com.android.server.WallpaperManagerService$WallpaperData $r5;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r5 = (com.android.server.WallpaperManagerService$WallpaperData) $r4;

        i0 = $r5.<com.android.server.WallpaperManagerService$WallpaperData: int height>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getName()
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r7;
        java.lang.String r3;
        android.util.SparseArray $r4;
        com.android.server.WallpaperManagerService$WallpaperData $r6;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(0);

        $r6 = (com.android.server.WallpaperManagerService$WallpaperData) $r5;

        r3 = $r6.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback, android.os.Bundle)
    {
        com.android.server.WallpaperManagerService r0;
        android.app.IWallpaperManagerCallback r1;
        android.os.Bundle r2;
        java.lang.Object r3, $r9;
        java.lang.Throwable r4, $r14;
        int i0, i1, i2, $i3, $i4;
        com.android.server.WallpaperManagerService$WallpaperData r5;
        java.io.FileNotFoundException r6, $r15;
        java.io.File r7, $r12, $r13;
        boolean z0;
        android.os.ParcelFileDescriptor r8;
        android.util.SparseArray $r10;
        android.os.RemoteCallbackList $r11;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: android.app.IWallpaperManagerCallback;

        r2 := @parameter1: android.os.Bundle;

        r3 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label02:
        if i0 != 1000 goto label11;

     label03:
        i1 = r0.<com.android.server.WallpaperManagerService: int mCurrentUserId>;

     label04:
        $r10 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r9 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r5 = (com.android.server.WallpaperManagerService$WallpaperData) $r9;

     label05:
        if r2 == null goto label07;

     label06:
        $i4 = r5.<com.android.server.WallpaperManagerService$WallpaperData: int width>;

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("width", $i4);

        $i3 = r5.<com.android.server.WallpaperManagerService$WallpaperData: int height>;

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("height", $i3);

     label07:
        $r11 = staticinvoke <com.android.server.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.WallpaperManagerService$WallpaperData)>(r5);

        virtualinvoke $r11.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        $r13 = new java.io.File;

        $r12 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i1);

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "wallpaper");

        r7 = $r13;

        z0 = virtualinvoke r7.<java.io.File: boolean exists()>();

     label08:
        if z0 != 0 goto label13;

     label09:
        exitmonitor r3;

     label10:
        return null;

     label11:
        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

     label12:
        i1 = i2;

        goto label04;

     label13:
        r8 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r7, 268435456);

     label14:
        exitmonitor r3;

     label15:
        return r8;

     label16:
        $r14 := @caughtexception;

        r4 = $r14;

     label17:
        exitmonitor r3;

     label18:
        throw r4;

     label19:
        $r15 := @caughtexception;

        r6 = $r15;

     label20:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperService", "Error getting wallpaper", r6);

        exitmonitor r3;

     label21:
        return null;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.io.FileNotFoundException from label06 to label07 with label19;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.io.FileNotFoundException from label07 to label08 with label19;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.io.FileNotFoundException from label13 to label14 with label19;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label20 to label21 with label16;
    }

    public android.app.WallpaperInfo getWallpaperInfo()
    {
        com.android.server.WallpaperManagerService r0;
        int i0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, $r9;
        com.android.server.WallpaperManagerService$WallpaperData r3;
        android.app.WallpaperInfo r4;
        android.util.SparseArray $r5;
        com.android.server.WallpaperManagerService$WallpaperConnection $r7, $r8;

        r0 := @this: com.android.server.WallpaperManagerService;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.WallpaperManagerService$WallpaperData) $r6;

        $r7 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        if $r7 == null goto label3;

        $r8 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        r4 = $r8.<com.android.server.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        exitmonitor r1;

     label2:
        return r4;

     label3:
        exitmonitor r1;

     label4:
        return null;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int getWidthHint() throws android.os.RemoteException
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r6;
        int i0, $i1;
        android.util.SparseArray $r3;
        com.android.server.WallpaperManagerService$WallpaperData $r5;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r5 = (com.android.server.WallpaperManagerService$WallpaperData) $r4;

        i0 = $r5.<com.android.server.WallpaperManagerService$WallpaperData: int width>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean hasNamedWallpaper(java.lang.String)
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.String r1, $r15;
        java.lang.Object r2, $r10, $r12, $r13, $r18;
        java.lang.Throwable r3, r4, $r17, $r19;
        long l0;
        java.util.List r5;
        java.util.Iterator r6;
        android.content.pm.UserInfo r7;
        com.android.server.WallpaperManagerService$WallpaperData r8;
        android.content.Context $r9;
        android.os.UserManager $r11;
        boolean $z0, $z1;
        int $i1, $i2, $i3;
        android.util.SparseArray $r14, $r16;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r9 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r11 = (android.os.UserManager) $r10;

        r5 = virtualinvoke $r11.<android.os.UserManager: java.util.List getUsers()>();

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.content.pm.UserInfo) $r12;

        $r14 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = r7.<android.content.pm.UserInfo: int id>;

        $r13 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r8 = (com.android.server.WallpaperManagerService$WallpaperData) $r13;

     label05:
        if r8 != null goto label07;

     label06:
        $i2 = r7.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void loadSettingsLocked(int)>($i2);

        $r16 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i3 = r7.<android.content.pm.UserInfo: int id>;

        $r18 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object get(int)>($i3);

        r8 = (com.android.server.WallpaperManagerService$WallpaperData) $r18;

     label07:
        if r8 == null goto label04;

     label08:
        $r15 = r8.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label04;

        exitmonitor r2;

     label09:
        return 1;

     label10:
        $r19 := @caughtexception;

        r4 = $r19;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label12:
        $r17 := @caughtexception;

        r3 = $r17;

     label13:
        exitmonitor r2;

     label14:
        throw r3;

     label15:
        exitmonitor r2;

     label16:
        return 0;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label15 to label16 with label12;
    }

    void onRemoveUser(int)
    {
        com.android.server.WallpaperManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r7;
        java.io.File $r3, $r4, $r5, $r6;

        r0 := @this: com.android.server.WallpaperManagerService;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        return;

     label1:
        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        virtualinvoke r0.<com.android.server.WallpaperManagerService: void onStoppingUser(int)>(i0);

        $r3 = new java.io.File;

        $r4 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "wallpaper");

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        $r5 = new java.io.File;

        $r6 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "wallpaper_info.xml");

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void onStoppingUser(int)
    {
        com.android.server.WallpaperManagerService r0;
        int i0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r9;
        com.android.server.WallpaperManagerService$WallpaperData r3;
        android.util.SparseArray $r4, $r7;
        com.android.server.WallpaperManagerService$WallpaperObserver $r6, $r8;

        r0 := @this: com.android.server.WallpaperManagerService;

        i0 := @parameter0: int;

        if i0 >= 1 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.WallpaperManagerService$WallpaperData) $r5;

     label03:
        if r3 == null goto label06;

     label04:
        $r6 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        if $r6 == null goto label05;

        $r8 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r8.<com.android.server.WallpaperManagerService$WallpaperObserver: void stopWatching()>();

        r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver> = null;

     label05:
        $r7 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r7.<android.util.SparseArray: void remove(int)>(i0);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

        r2 = $r9;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    boolean restoreNamedResourceLocked(com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;
        java.lang.String r2, r3, r4, r5, $r13, $r14, $r15, $r16, $r17, $r23, $r34, $r40, $r55;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.io.InputStream r6;
        java.io.FileOutputStream r7, r11, $r22;
        java.lang.Throwable r8, $r57, $r60;
        java.io.IOException r9, $r36, $r37, $r38, $r44, $r50, $r52, $r54, $r58, $r59, $r61;
        android.content.res.Resources r10;
        boolean z0, $z1, $z2;
        byte[] r12;
        android.content.Context $r18, $r19;
        java.io.File $r20, $r21, $r24;
        java.lang.StringBuilder $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r35, $r39, $r41, $r42, $r43, $r46, $r48, $r56;
        android.content.pm.PackageManager$NameNotFoundException $r45, $r49;
        android.content.res.Resources$NotFoundException $r47, $r51;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: com.android.server.WallpaperManagerService$WallpaperData;

        $r15 = r1.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $i5 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i5 <= 4 goto label23;

        $r14 = "res:";

        $r13 = r1.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $r17 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z1 == 0 goto label23;

        $r16 = r1.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        r2 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int)>(4);

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        r3 = null;

        if i0 <= 0 goto label01;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label01:
        i1 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(47);

        r4 = null;

        if i1 <= 0 goto label02;

        $i7 = i1 + 1;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i7);

     label02:
        r5 = null;

        if i0 <= 0 goto label03;

        r5 = null;

        if i1 <= 0 goto label03;

        i4 = i1 - i0;

        r5 = null;

        if i4 <= 1 goto label03;

        $i6 = i0 + 1;

        r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>($i6, i1);

     label03:
        if r3 == null goto label23;

        if r4 == null goto label23;

        if r5 == null goto label23;

        i2 = -1;

        r6 = null;

        r7 = null;

     label04:
        $r19 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r19.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r3, 4);

        r10 = virtualinvoke $r18.<android.content.Context: android.content.res.Resources getResources()>();

        i2 = virtualinvoke r10.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r2, null, null);

     label05:
        if i2 != 0 goto label10;

     label06:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t resolve identifier pkg=");

        $r28 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ident=");

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperService", $r34);

     label07:
        goto label08;

     label08:
        z0 = 0;

        goto label09;

     label09:
        return z0;

     label10:
        r6 = virtualinvoke r10.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i2);

        $r20 = r1.<com.android.server.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $z2 = virtualinvoke $r20.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label11;

        $r24 = r1.<com.android.server.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        virtualinvoke $r24.<java.io.File: boolean delete()>();

     label11:
        $r22 = new java.io.FileOutputStream;

        $r21 = r1.<com.android.server.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>($r21);

        r11 = $r22;

     label12:
        r12 = newarray (byte)[32768];

     label13:
        i3 = virtualinvoke r6.<java.io.InputStream: int read(byte[])>(r12);

     label14:
        if i3 <= 0 goto label24;

     label15:
        virtualinvoke r11.<java.io.FileOutputStream: void write(byte[],int,int)>(r12, 0, i3);

     label16:
        goto label13;

     label17:
        $r45 := @caughtexception;

        r7 = r11;

     label18:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package name ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r39 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperService", $r40);

     label19:
        if r6 == null goto label21;

     label20:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label21:
        if r7 == null goto label23;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label22:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label23:
        return 0;

     label24:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restored wallpaper: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WallpaperService", $r23);

     label25:
        z0 = 1;

        if r6 == null goto label27;

     label26:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label27:
        if r11 == null goto label09;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r11);

     label28:
        virtualinvoke r11.<java.io.FileOutputStream: void close()>();

     label29:
        return 1;

     label30:
        $r54 := @caughtexception;

        return z0;

     label31:
        $r51 := @caughtexception;

     label32:
        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource not found: ");

        $r56 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperService", $r55);

     label33:
        if r6 == null goto label35;

     label34:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label35:
        if r7 == null goto label23;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label36:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label37:
        goto label23;

     label38:
        $r38 := @caughtexception;

        goto label23;

     label39:
        $r36 := @caughtexception;

        r9 = $r36;

     label40:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperService", "IOException while restoring wallpaper ", r9);

     label41:
        if r6 == null goto label43;

     label42:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label43:
        if r7 == null goto label23;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label44:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label45:
        goto label23;

     label46:
        $r60 := @caughtexception;

        r8 = $r60;

     label47:
        if r6 == null goto label49;

     label48:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label49:
        if r7 == null goto label51;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label50:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label51:
        throw r8;

     label52:
        $r59 := @caughtexception;

        goto label49;

     label53:
        $r44 := @caughtexception;

        goto label51;

     label54:
        $r61 := @caughtexception;

        goto label21;

     label55:
        $r52 := @caughtexception;

        goto label35;

     label56:
        $r58 := @caughtexception;

        goto label43;

     label57:
        $r37 := @caughtexception;

        goto label27;

     label58:
        $r57 := @caughtexception;

        r8 = $r57;

        r7 = r11;

        goto label47;

     label59:
        $r50 := @caughtexception;

        r9 = $r50;

        r7 = r11;

        goto label40;

     label60:
        $r47 := @caughtexception;

        r7 = r11;

        goto label32;

     label61:
        $r49 := @caughtexception;

        r7 = null;

        goto label18;

        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label61;
        catch android.content.res.Resources$NotFoundException from label04 to label05 with label31;
        catch java.io.IOException from label04 to label05 with label39;
        catch java.lang.Throwable from label04 to label05 with label46;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label61;
        catch android.content.res.Resources$NotFoundException from label06 to label07 with label31;
        catch java.io.IOException from label06 to label07 with label39;
        catch java.lang.Throwable from label06 to label07 with label46;
        catch java.io.IOException from label09 to label09 with label30;
        catch android.content.pm.PackageManager$NameNotFoundException from label10 to label11 with label61;
        catch android.content.res.Resources$NotFoundException from label10 to label11 with label31;
        catch java.io.IOException from label10 to label11 with label39;
        catch java.lang.Throwable from label10 to label11 with label46;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label61;
        catch android.content.res.Resources$NotFoundException from label11 to label12 with label31;
        catch java.io.IOException from label11 to label12 with label39;
        catch java.lang.Throwable from label11 to label12 with label46;
        catch android.content.pm.PackageManager$NameNotFoundException from label12 to label13 with label17;
        catch android.content.res.Resources$NotFoundException from label12 to label13 with label60;
        catch java.io.IOException from label12 to label13 with label59;
        catch java.lang.Throwable from label12 to label13 with label58;
        catch android.content.pm.PackageManager$NameNotFoundException from label13 to label14 with label17;
        catch android.content.res.Resources$NotFoundException from label13 to label14 with label60;
        catch java.io.IOException from label13 to label14 with label59;
        catch java.lang.Throwable from label13 to label14 with label58;
        catch android.content.pm.PackageManager$NameNotFoundException from label15 to label16 with label17;
        catch android.content.res.Resources$NotFoundException from label15 to label16 with label60;
        catch java.io.IOException from label15 to label16 with label59;
        catch java.lang.Throwable from label15 to label16 with label58;
        catch java.lang.Throwable from label18 to label19 with label46;
        catch java.io.IOException from label20 to label21 with label54;
        catch java.io.IOException from label22 to label23 with label38;
        catch android.content.pm.PackageManager$NameNotFoundException from label24 to label25 with label17;
        catch android.content.res.Resources$NotFoundException from label24 to label25 with label60;
        catch java.io.IOException from label24 to label25 with label59;
        catch java.lang.Throwable from label24 to label25 with label58;
        catch java.io.IOException from label26 to label27 with label57;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.lang.Throwable from label32 to label33 with label46;
        catch java.io.IOException from label34 to label35 with label55;
        catch java.io.IOException from label36 to label37 with label38;
        catch java.lang.Throwable from label40 to label41 with label46;
        catch java.io.IOException from label42 to label43 with label56;
        catch java.io.IOException from label44 to label45 with label38;
        catch java.io.IOException from label48 to label49 with label52;
        catch java.io.IOException from label50 to label51 with label53;
    }

    public void setDimensionHints(int, int) throws android.os.RemoteException
    {
        com.android.server.WallpaperManagerService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object r1, $r8;
        java.lang.Throwable r2, $r20;
        com.android.server.WallpaperManagerService$WallpaperData r3;
        android.graphics.Point r4;
        android.service.wallpaper.IWallpaperEngine r5, $r15;
        android.util.SparseArray $r7;
        java.lang.IllegalArgumentException $r9;
        com.android.server.WallpaperManagerService$WallpaperConnection $r10, $r11, $r12, $r13, $r16;
        android.service.wallpaper.IWallpaperService $r14;
        java.lang.IllegalStateException $r17;
        java.lang.StringBuilder $r18, $r21, $r22;
        java.lang.String $r19;
        android.os.RemoteException $r23;

        r0 := @this: com.android.server.WallpaperManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_HINTS");

        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.WallpaperManagerService$WallpaperData) $r8;

     label02:
        if r3 != null goto label07;

     label03:
        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r17;

     label04:
        $r20 := @caughtexception;

        r2 = $r20;

     label05:
        exitmonitor r1;

     label06:
        throw r2;

     label07:
        if i0 <= 0 goto label08;

        if i1 > 0 goto label09;

     label08:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r9;

     label09:
        r4 = specialinvoke r0.<com.android.server.WallpaperManagerService: android.graphics.Point getDefaultDisplaySize()>();

        $i5 = r4.<android.graphics.Point: int x>;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i5);

        $i6 = r4.<android.graphics.Point: int y>;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i6);

        $i8 = r3.<com.android.server.WallpaperManagerService$WallpaperData: int width>;

        if i3 != $i8 goto label10;

        $i9 = r3.<com.android.server.WallpaperManagerService$WallpaperData: int height>;

        if i4 == $i9 goto label16;

     label10:
        r3.<com.android.server.WallpaperManagerService$WallpaperData: int width> = i3;

        r3.<com.android.server.WallpaperManagerService$WallpaperData: int height> = i4;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void saveSettingsLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r3);

        $i7 = r0.<com.android.server.WallpaperManagerService: int mCurrentUserId>;

        if $i7 == i2 goto label12;

        exitmonitor r1;

     label11:
        return;

     label12:
        $r10 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        if $r10 == null goto label16;

        $r12 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        r5 = $r12.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

     label13:
        if r5 == null goto label18;

     label14:
        $r16 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r15 = $r16.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        interfaceinvoke $r15.<android.service.wallpaper.IWallpaperEngine: void setDesiredSize(int,int)>(i3, i4);

     label15:
        specialinvoke r0.<com.android.server.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r3);

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r11 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r14 = $r11.<com.android.server.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        if $r14 == null goto label16;

        $r13 = r3.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperConnection connection>;

        $r13.<com.android.server.WallpaperManagerService$WallpaperConnection: boolean mDimensionsChanged> = 1;

     label19:
        goto label16;

     label20:
        $r23 := @caughtexception;

        goto label15;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch android.os.RemoteException from label14 to label15 with label20;
        catch java.lang.Throwable from label14 to label15 with label04;
        catch java.lang.Throwable from label15 to label16 with label04;
        catch java.lang.Throwable from label16 to label17 with label04;
        catch java.lang.Throwable from label18 to label19 with label04;
    }

    public android.os.ParcelFileDescriptor setWallpaper(java.lang.String)
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.String r1, $r12;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, r5, $r14, $r15;
        int i0;
        com.android.server.WallpaperManagerService$WallpaperData r4;
        long l1;
        android.os.ParcelFileDescriptor r6;
        android.util.SparseArray $r7;
        java.lang.IllegalStateException $r9;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER");

        r2 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.WallpaperManagerService$WallpaperData) $r8;

     label02:
        if r4 != null goto label07;

     label03:
        $r9 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label04:
        $r14 := @caughtexception;

        r3 = $r14;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        r6 = virtualinvoke r0.<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String,com.android.server.WallpaperManagerService$WallpaperData)>(r1, r4);

     label09:
        if r6 == null goto label11;

     label10:
        r4.<com.android.server.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 1;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label12:
        return r6;

     label13:
        $r15 := @caughtexception;

        r5 = $r15;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label15:
        throw r5;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
    }

    public void setWallpaperComponent(android.content.ComponentName)
    {
        com.android.server.WallpaperManagerService r0;
        android.content.ComponentName r1;
        java.lang.Object r2, $r7;
        java.lang.Throwable r3, r5, $r12, $r14;
        int i0;
        com.android.server.WallpaperManagerService$WallpaperData r4;
        long l1;
        android.util.SparseArray $r6;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.IllegalStateException $r9;
        java.lang.String $r13;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_COMPONENT");

        r2 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r6 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.WallpaperManagerService$WallpaperData) $r7;

     label02:
        if r4 != null goto label07;

     label03:
        $r9 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label04:
        $r14 := @caughtexception;

        r3 = $r14;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        r4.<com.android.server.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 0;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r1, 0, 1, r4, null);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label10:
        return;

     label11:
        $r12 := @caughtexception;

        r5 = $r12;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        throw r5;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
    }

    void settingsRestored()
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.Object r1, r4, $r7;
        java.lang.Throwable r2, r5, $r22, $r23;
        com.android.server.WallpaperManagerService$WallpaperData r3;
        boolean z0, z1, $z2, $z5, $z7;
        android.util.SparseArray $r6;
        android.content.ComponentName $r8, $r18, $r19, $r20, $r21;
        java.lang.String $r9, $r10, $r12, $r16;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;
        java.io.File $r17;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.WallpaperManagerService: void loadSettingsLocked(int)>(0);

        $r6 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r3 = (com.android.server.WallpaperManagerService$WallpaperData) $r7;

        $r8 = r3.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        if $r8 == null goto label08;

        $r19 = r3.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $r18 = <com.android.server.WallpaperManagerService: android.content.ComponentName IMAGE_WALLPAPER>;

        $z7 = virtualinvoke $r19.<android.content.ComponentName: boolean equals(java.lang.Object)>($r18);

        if $z7 != 0 goto label08;

        $r21 = r3.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $z5 = virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r21, 0, 0, r3, null);

        if $z5 != 0 goto label21;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(null, 0, 0, r3, null);

     label02:
        goto label21;

     label03:
        exitmonitor r1;

     label04:
        if z0 != 0 goto label05;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore wallpaper: \'");

        $r12 = r3.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperService", $r16);

        r3.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name> = "";

        $r17 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        virtualinvoke $r17.<java.io.File: boolean delete()>();

     label05:
        r4 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label06:
        specialinvoke r0.<com.android.server.WallpaperManagerService: void saveSettingsLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r3);

        exitmonitor r4;

     label07:
        return;

     label08:
        $r10 = "";

        $r9 = r3.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label16;

     label09:
        z0 = 1;

     label10:
        if z0 == 0 goto label03;

     label11:
        $r20 = r3.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r20, 0, 0, r3, null);

     label12:
        goto label03;

     label13:
        $r22 := @caughtexception;

        r2 = $r22;

     label14:
        exitmonitor r1;

     label15:
        throw r2;

     label16:
        z1 = virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean restoreNamedResourceLocked(com.android.server.WallpaperManagerService$WallpaperData)>(r3);

     label17:
        z0 = z1;

        goto label10;

     label18:
        $r23 := @caughtexception;

        r5 = $r23;

     label19:
        exitmonitor r4;

     label20:
        throw r5;

     label21:
        z0 = 1;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    void switchUser(int, android.os.IRemoteCallback)
    {
        com.android.server.WallpaperManagerService r0;
        int i0;
        android.os.IRemoteCallback r1;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r12;
        com.android.server.WallpaperManagerService$WallpaperData r4, $r10;
        android.util.SparseArray $r5, $r11;
        com.android.server.WallpaperManagerService$WallpaperObserver $r7, $r8, $r9;

        r0 := @this: com.android.server.WallpaperManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IRemoteCallback;

        r2 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r0.<com.android.server.WallpaperManagerService: int mCurrentUserId> = i0;

        $r5 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.WallpaperManagerService$WallpaperData) $r6;

     label2:
        if r4 != null goto label4;

     label3:
        $r10 = new com.android.server.WallpaperManagerService$WallpaperData;

        specialinvoke $r10.<com.android.server.WallpaperManagerService$WallpaperData: void <init>(int)>(i0);

        r4 = $r10;

        $r11 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4);

        specialinvoke r0.<com.android.server.WallpaperManagerService: void loadSettingsLocked(int)>(i0);

     label4:
        $r7 = r4.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        if $r7 != null goto label5;

        $r8 = new com.android.server.WallpaperManagerService$WallpaperObserver;

        specialinvoke $r8.<com.android.server.WallpaperManagerService$WallpaperObserver: void <init>(com.android.server.WallpaperManagerService,com.android.server.WallpaperManagerService$WallpaperData)>(r0, r4);

        r4.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver> = $r8;

        $r9 = r4.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r9.<com.android.server.WallpaperManagerService$WallpaperObserver: void startWatching()>();

     label5:
        virtualinvoke r0.<com.android.server.WallpaperManagerService: void switchWallpaper(com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r4, r1);

        exitmonitor r2;

     label6:
        return;

     label7:
        $r12 := @caughtexception;

        r3 = $r12;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void switchWallpaper(com.android.server.WallpaperManagerService$WallpaperData, android.os.IRemoteCallback)
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;
        android.os.IRemoteCallback r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r10;
        java.lang.RuntimeException r5, r6, $r9;
        android.content.ComponentName r7, $r8;
        boolean z0;
        int $i1;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: com.android.server.WallpaperManagerService$WallpaperData;

        r2 := @parameter1: android.os.IRemoteCallback;

        r3 = r0.<com.android.server.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        $r8 = r1.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r8 == null goto label06;

        r7 = r1.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

     label02:
        z0 = virtualinvoke r0.<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r7, 1, 0, r1, r2);

     label03:
        r6 = null;

        if z0 == 0 goto label09;

     label04:
        exitmonitor r3;

     label05:
        return;

     label06:
        r7 = r1.<com.android.server.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

     label07:
        goto label02;

     label08:
        $r9 := @caughtexception;

        r5 = $r9;

        r6 = r5;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperService", "Failure starting previous wallpaper", r6);

        $i1 = r1.<com.android.server.WallpaperManagerService$WallpaperData: int userId>;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: void clearWallpaperLocked(boolean,int,android.os.IRemoteCallback)>(0, $i1, r2);

        exitmonitor r3;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

        r4 = $r10;

     label12:
        exitmonitor r3;

     label13:
        throw r4;

        catch java.lang.RuntimeException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.RuntimeException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.RuntimeException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void systemRunning()
    {
        com.android.server.WallpaperManagerService r0;
        com.android.server.WallpaperManagerService$WallpaperData r1;
        android.content.IntentFilter r2, $r8;
        android.os.RemoteException r3, $r14;
        android.util.SparseArray $r4;
        java.lang.Object $r5;
        com.android.server.WallpaperManagerService$WallpaperObserver $r6, $r7;
        com.android.server.WallpaperManagerService$1 $r9;
        android.content.Context $r10;
        android.app.IActivityManager $r12;
        com.android.server.WallpaperManagerService$2 $r13;

        r0 := @this: com.android.server.WallpaperManagerService;

        $r4 = r0.<com.android.server.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r1 = (com.android.server.WallpaperManagerService$WallpaperData) $r5;

        virtualinvoke r0.<com.android.server.WallpaperManagerService: void switchWallpaper(com.android.server.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r1, null);

        $r6 = new com.android.server.WallpaperManagerService$WallpaperObserver;

        specialinvoke $r6.<com.android.server.WallpaperManagerService$WallpaperObserver: void <init>(com.android.server.WallpaperManagerService,com.android.server.WallpaperManagerService$WallpaperData)>(r0, r1);

        r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver> = $r6;

        $r7 = r1.<com.android.server.WallpaperManagerService$WallpaperData: com.android.server.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r7.<com.android.server.WallpaperManagerService$WallpaperObserver: void startWatching()>();

        $r8 = new android.content.IntentFilter;

        specialinvoke $r8.<android.content.IntentFilter: void <init>()>();

        r2 = $r8;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STOPPING");

        $r10 = r0.<com.android.server.WallpaperManagerService: android.content.Context mContext>;

        $r9 = new com.android.server.WallpaperManagerService$1;

        specialinvoke $r9.<com.android.server.WallpaperManagerService$1: void <init>(com.android.server.WallpaperManagerService)>(r0);

        virtualinvoke $r10.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r9, r2);

     label1:
        $r12 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r13 = new com.android.server.WallpaperManagerService$2;

        specialinvoke $r13.<com.android.server.WallpaperManagerService$2: void <init>(com.android.server.WallpaperManagerService)>(r0);

        interfaceinvoke $r12.<android.app.IActivityManager: void registerUserSwitchObserver(android.app.IUserSwitchObserver)>($r13);

     label2:
        return;

     label3:
        $r14 := @caughtexception;

        r3 = $r14;

        virtualinvoke r3.<android.os.RemoteException: void printStackTrace()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String, com.android.server.WallpaperManagerService$WallpaperData)
    {
        com.android.server.WallpaperManagerService r0;
        java.lang.String r1, $r8;
        com.android.server.WallpaperManagerService$WallpaperData r2;
        java.io.FileNotFoundException r3, $r9;
        java.io.File r4, r5, $r7;
        android.os.ParcelFileDescriptor r6;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.WallpaperManagerService$WallpaperData;

        if r1 != null goto label1;

        r1 = "";

     label1:
        $i0 = r2.<com.android.server.WallpaperManagerService$WallpaperData: int userId>;

        r4 = staticinvoke <com.android.server.WallpaperManagerService: java.io.File getWallpaperDir(int)>($i0);

        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        virtualinvoke r4.<java.io.File: boolean mkdir()>();

        $r8 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r8, 505, -1, -1);

     label2:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, "wallpaper");

        r5 = $r7;

        r6 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r5, 939524096);

        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(r5);

        if $z1 != 0 goto label4;

     label3:
        return null;

     label4:
        r2.<com.android.server.WallpaperManagerService$WallpaperData: java.lang.String name> = r1;

     label5:
        return r6;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperService", "Error setting wallpaper", r3);

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label6;
        catch java.io.FileNotFoundException from label2 to label3 with label6;
        catch java.io.FileNotFoundException from label4 to label5 with label6;
    }
}
