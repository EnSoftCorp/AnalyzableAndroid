final class java.util.DualPivotQuicksort extends java.lang.Object
{
    private static final int COUNTING_SORT_THRESHOLD_FOR_BYTE;
    private static final int COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR;
    private static final int INSERTION_SORT_THRESHOLD;
    private static final int NUM_BYTE_VALUES;
    private static final int NUM_CHAR_VALUES;
    private static final int NUM_SHORT_VALUES;

    private void <init>()
    {
        java.util.DualPivotQuicksort r0;

        r0 := @this: java.util.DualPivotQuicksort;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void doSort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, i6, i7, i8, i9, i10, i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i23, $i24;
        int[] r1;
        byte b5, b11, $b18, $b22, $b25;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i13 = i1 - i0;

        $i15 = 1 + $i13;

        if $i15 >= 32 goto label04;

        i10 = i0 + 1;

     label01:
        if i10 > i1 goto label11;

        b11 = r0[i10];

        i12 = i10 - 1;

     label02:
        if i12 < i0 goto label03;

        $b22 = r0[i12];

        if b11 >= $b22 goto label03;

        $i24 = i12 + 1;

        $b25 = r0[i12];

        r0[$i24] = $b25;

        i12 = i12 + -1;

        goto label02;

     label03:
        $i23 = i12 + 1;

        r0[$i23] = b11;

        i10 = i10 + 1;

        goto label01;

     label04:
        $i14 = i1 - i0;

        $i17 = 1 + $i14;

        if $i17 <= 128 goto label10;

        r1 = newarray (int)[256];

        i2 = i0;

     label05:
        if i2 > i1 goto label06;

        $b18 = r0[i2];

        i9 = 128 + $b18;

        $i21 = r1[i9];

        $i20 = 1 + $i21;

        r1[i9] = $i20;

        i2 = i2 + 1;

        goto label05;

     label06:
        i3 = 0;

        i4 = i0;

     label07:
        $i16 = lengthof r1;

        if i3 >= $i16 goto label11;

        if i4 > i1 goto label11;

        $i19 = i3 - 128;

        b5 = (byte) $i19;

        i6 = r1[i3];

        i7 = i4;

     label08:
        if i6 <= 0 goto label09;

        i8 = i7 + 1;

        r0[i7] = b5;

        i6 = i6 + -1;

        i7 = i8;

        goto label08;

     label09:
        i3 = i3 + 1;

        i4 = i7;

        goto label07;

     label10:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(byte[],int,int)>(r0, i0, i1);

     label11:
        return;
    }

    private static void doSort(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i9, i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i21, $i22;
        int[] r1;
        char c8, c10, $c16, $c20, $c23;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i12 = i1 - i0;

        $i13 = 1 + $i12;

        if $i13 >= 32 goto label04;

        i9 = i0 + 1;

     label01:
        if i9 > i1 goto label11;

        c10 = r0[i9];

        i11 = i9 - 1;

     label02:
        if i11 < i0 goto label03;

        $c20 = r0[i11];

        if c10 >= $c20 goto label03;

        $i22 = i11 + 1;

        $c23 = r0[i11];

        r0[$i22] = $c23;

        i11 = i11 + -1;

        goto label02;

     label03:
        $i21 = i11 + 1;

        r0[$i21] = c10;

        i9 = i9 + 1;

        goto label01;

     label04:
        $i15 = i1 - i0;

        $i14 = 1 + $i15;

        if $i14 <= 32768 goto label10;

        r1 = newarray (int)[65536];

        i2 = i0;

     label05:
        if i2 > i1 goto label06;

        c8 = r0[i2];

        $i19 = r1[c8];

        $i18 = 1 + $i19;

        r1[c8] = $i18;

        i2 = i2 + 1;

        goto label05;

     label06:
        i3 = 0;

        i4 = i0;

     label07:
        $i17 = lengthof r1;

        if i3 >= $i17 goto label11;

        if i4 > i1 goto label11;

        i5 = r1[i3];

        i6 = i4;

     label08:
        if i5 <= 0 goto label09;

        i7 = i6 + 1;

        $c16 = (char) i3;

        r0[i6] = $c16;

        i5 = i5 + -1;

        i6 = i7;

        goto label08;

     label09:
        i3 = i3 + 1;

        i4 = i6;

        goto label07;

     label10:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(char[],int,int)>(r0, i0, i1);

     label11:
        return;
    }

    private static void doSort(double[], int, int)
    {
        double[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8;
        double d0, $d1, $d2;
        byte $b7;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = i1 - i0;

        $i5 = 1 + $i4;

        if $i5 >= 32 goto label4;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label5;

        d0 = r0[i2];

        i3 = i2 - 1;

     label2:
        if i3 < i0 goto label3;

        $d1 = r0[i3];

        $b7 = d0 cmpg $d1;

        if $b7 >= 0 goto label3;

        $i8 = i3 + 1;

        $d2 = r0[i3];

        r0[$i8] = $d2;

        i3 = i3 + -1;

        goto label2;

     label3:
        $i6 = i3 + 1;

        r0[$i6] = d0;

        i2 = i2 + 1;

        goto label1;

     label4:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(double[],int,int)>(r0, i0, i1);

     label5:
        return;
    }

    private static void doSort(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8;
        float f0, $f1, $f2;
        byte $b7;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = i1 - i0;

        $i5 = 1 + $i4;

        if $i5 >= 32 goto label4;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label5;

        f0 = r0[i2];

        i3 = i2 - 1;

     label2:
        if i3 < i0 goto label3;

        $f1 = r0[i3];

        $b7 = f0 cmpg $f1;

        if $b7 >= 0 goto label3;

        $i8 = i3 + 1;

        $f2 = r0[i3];

        r0[$i8] = $f2;

        i3 = i3 + -1;

        goto label2;

     label3:
        $i6 = i3 + 1;

        r0[$i6] = f0;

        i2 = i2 + 1;

        goto label1;

     label4:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(float[],int,int)>(r0, i0, i1);

     label5:
        return;
    }

    private static void doSort(int[], int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = i1 - i0;

        $i6 = 1 + $i5;

        if $i6 >= 32 goto label4;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label5;

        i3 = r0[i2];

        i4 = i2 - 1;

     label2:
        if i4 < i0 goto label3;

        $i8 = r0[i4];

        if i3 >= $i8 goto label3;

        $i10 = i4 + 1;

        $i9 = r0[i4];

        r0[$i10] = $i9;

        i4 = i4 + -1;

        goto label2;

     label3:
        $i7 = i4 + 1;

        r0[$i7] = i3;

        i2 = i2 + 1;

        goto label1;

     label4:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(int[],int,int)>(r0, i0, i1);

     label5:
        return;
    }

    private static void doSort(long[], int, int)
    {
        long[] r0;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i11;
        long l3, $l8, $l10;
        byte $b9;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = i1 - i0;

        $i6 = 1 + $i5;

        if $i6 >= 32 goto label4;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label5;

        l3 = r0[i2];

        i4 = i2 - 1;

     label2:
        if i4 < i0 goto label3;

        $l8 = r0[i4];

        $b9 = l3 cmp $l8;

        if $b9 >= 0 goto label3;

        $i11 = i4 + 1;

        $l10 = r0[i4];

        r0[$i11] = $l10;

        i4 = i4 + -1;

        goto label2;

     label3:
        $i7 = i4 + 1;

        r0[$i7] = l3;

        i2 = i2 + 1;

        goto label1;

     label4:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(long[],int,int)>(r0, i0, i1);

     label5:
        return;
    }

    private static void doSort(short[], int, int)
    {
        short[] r0;
        int i0, i1, i2, i3, i4, i6, i7, i8, i9, i10, i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i23, $i24;
        int[] r1;
        short s5, s11, $s18, $s22, $s25;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i13 = i1 - i0;

        $i15 = 1 + $i13;

        if $i15 >= 32 goto label04;

        i10 = i0 + 1;

     label01:
        if i10 > i1 goto label11;

        s11 = r0[i10];

        i12 = i10 - 1;

     label02:
        if i12 < i0 goto label03;

        $s22 = r0[i12];

        if s11 >= $s22 goto label03;

        $i24 = i12 + 1;

        $s25 = r0[i12];

        r0[$i24] = $s25;

        i12 = i12 + -1;

        goto label02;

     label03:
        $i23 = i12 + 1;

        r0[$i23] = s11;

        i10 = i10 + 1;

        goto label01;

     label04:
        $i14 = i1 - i0;

        $i17 = 1 + $i14;

        if $i17 <= 32768 goto label10;

        r1 = newarray (int)[65536];

        i2 = i0;

     label05:
        if i2 > i1 goto label06;

        $s18 = r0[i2];

        i9 = $s18 + 32768;

        $i21 = r1[i9];

        $i20 = 1 + $i21;

        r1[i9] = $i20;

        i2 = i2 + 1;

        goto label05;

     label06:
        i3 = 0;

        i4 = i0;

     label07:
        $i16 = lengthof r1;

        if i3 >= $i16 goto label11;

        if i4 > i1 goto label11;

        $i19 = i3 - 32768;

        s5 = (short) $i19;

        i6 = r1[i3];

        i7 = i4;

     label08:
        if i6 <= 0 goto label09;

        i8 = i7 + 1;

        r0[i7] = s5;

        i6 = i6 + -1;

        i7 = i8;

        goto label08;

     label09:
        i3 = i3 + 1;

        i4 = i7;

        goto label07;

     label10:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(short[],int,int)>(r0, i0, i1);

     label11:
        return;
    }

    private static void dualPivotQuicksort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i17, i18, i19, i20, i21, i22, i24, i25, i26, i28, i29, i31, i32, i33, i34, i36, i37, $i47, $i48, $i49, $i50, $i52, $i54, $i55, $i57, $i61;
        byte b8, b9, b10, b11, b12, b13, b14, b23, b27, b30, b35, b38, b39, b40, b41, b42, b43, b44, b45, $b46, $b51, $b53, $b56, $b58, $b59, $b60, $b62, $b63, $b64, $b65, $b66, $b67, $b68, $b69, $b70, $b71, $b72, $b73, $b74, $b75, $b76;
        boolean z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i49 = i1 - i0;

        $i48 = 1 + $i49;

        i2 = $i48 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i47 = i0 + i1;

        i5 = $i47 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        b8 = r0[i3];

        b9 = r0[i7];

        b10 = r0[i5];

        b11 = r0[i6];

        b12 = r0[i4];

        if b8 <= b9 goto label01;

        b43 = b8;

        b8 = b9;

        b9 = b43;

     label01:
        if b11 <= b12 goto label02;

        b42 = b11;

        b11 = b12;

        b12 = b42;

     label02:
        if b8 <= b10 goto label03;

        b45 = b8;

        b8 = b10;

        b10 = b45;

     label03:
        if b9 <= b10 goto label04;

        b44 = b9;

        b9 = b10;

        b10 = b44;

     label04:
        if b8 <= b11 goto label05;

        b39 = b8;

        b8 = b11;

        b11 = b39;

     label05:
        if b10 <= b11 goto label06;

        b38 = b10;

        b10 = b11;

        b11 = b38;

     label06:
        if b9 <= b12 goto label07;

        b41 = b9;

        b9 = b12;

        b12 = b41;

     label07:
        if b9 <= b10 goto label08;

        b40 = b9;

        b9 = b10;

        b10 = b40;

     label08:
        if b11 <= b12 goto label09;

        b35 = b11;

        b11 = b12;

        b12 = b35;

     label09:
        r0[i3] = b8;

        r0[i5] = b10;

        r0[i4] = b12;

        b13 = b9;

        $b46 = r0[i0];

        r0[i7] = $b46;

        b14 = b11;

        $b53 = r0[i1];

        r0[i6] = $b53;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if b13 == b14 goto label14;

        z0 = 1;

     label10:
        if z0 == 0 goto label21;

        i32 = i16;

        i33 = i16;

     label11:
        if i32 > i15 goto label20;

        b30 = r0[i32];

        if b30 >= b13 goto label15;

        if i32 == i33 goto label12;

        $b72 = r0[i33];

        r0[i32] = $b72;

        r0[i33] = b30;

     label12:
        i31 = i33 + 1;

     label13:
        i32 = i32 + 1;

        i33 = i31;

        goto label11;

     label14:
        z0 = 0;

        goto label10;

     label15:
        if b30 <= b14 goto label46;

     label16:
        $b74 = r0[i15];

        if $b74 <= b14 goto label18;

        i34 = i15 - 1;

        if i15 != i32 goto label45;

        i15 = i34;

        i18 = i33;

     label17:
        $i52 = i18 - 1;

        $b51 = r0[$i52];

        r0[i0] = $b51;

        $i50 = i18 - 1;

        r0[$i50] = b13;

        $i57 = i15 + 1;

        $b56 = r0[$i57];

        r0[i1] = $b56;

        $i55 = i15 + 1;

        r0[$i55] = b14;

        $i54 = i18 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, i0, $i54);

        $i61 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, $i61, i1);

        if z0 != 0 goto label29;

        return;

     label18:
        $b75 = r0[i15];

        if $b75 >= b13 goto label19;

        $b70 = r0[i33];

        r0[i32] = $b70;

        i31 = i33 + 1;

        $b71 = r0[i15];

        r0[i33] = $b71;

        i37 = i15 - 1;

        r0[i15] = b30;

        i15 = i37;

        goto label13;

     label19:
        $b76 = r0[i15];

        r0[i32] = $b76;

        i36 = i15 - 1;

        r0[i15] = b30;

        i15 = i36;

        i31 = i33;

        goto label13;

     label20:
        i18 = i33;

        goto label17;

     label21:
        i17 = i16;

        i19 = i16;

     label22:
        if i17 > i15 goto label44;

        b27 = r0[i17];

        if b27 != b13 goto label24;

        i29 = i19;

     label23:
        i17 = i17 + 1;

        i19 = i29;

        goto label22;

     label24:
        if b27 >= b13 goto label26;

        if i17 == i19 goto label25;

        $b73 = r0[i19];

        r0[i17] = $b73;

        r0[i19] = b27;

     label25:
        i29 = i19 + 1;

        goto label23;

     label26:
        $b62 = r0[i15];

        if $b62 <= b13 goto label27;

        i15 = i15 + -1;

        goto label26;

     label27:
        $b63 = r0[i15];

        if $b63 >= b13 goto label28;

        $b64 = r0[i19];

        r0[i17] = $b64;

        i29 = i19 + 1;

        $b65 = r0[i15];

        r0[i19] = $b65;

        i28 = i15 - 1;

        r0[i15] = b27;

        i15 = i28;

        goto label23;

     label28:
        r0[i17] = b13;

        i26 = i15 - 1;

        r0[i15] = b27;

        i15 = i26;

        i29 = i19;

        goto label23;

     label29:
        if i18 >= i3 goto label35;

        if i15 <= i4 goto label35;

     label30:
        $b60 = r0[i18];

        if $b60 != b13 goto label31;

        i18 = i18 + 1;

        goto label30;

     label31:
        $b59 = r0[i15];

        if $b59 != b14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i21 = i18;

        i20 = i18;

     label33:
        if i21 > i15 goto label43;

        b23 = r0[i21];

        if b23 != b14 goto label40;

     label34:
        $b66 = r0[i15];

        if $b66 != b14 goto label36;

        i24 = i15 - 1;

        if i15 != i21 goto label42;

        i15 = i24;

        i18 = i20;

     label35:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, i18, i15);

        return;

     label36:
        $b67 = r0[i15];

        if $b67 != b13 goto label39;

        $b69 = r0[i20];

        r0[i21] = $b69;

        i22 = i20 + 1;

        r0[i20] = b13;

     label37:
        i25 = i15 - 1;

        r0[i15] = b14;

        i15 = i25;

     label38:
        i21 = i21 + 1;

        i20 = i22;

        goto label33;

     label39:
        $b68 = r0[i15];

        r0[i21] = $b68;

        i22 = i20;

        goto label37;

     label40:
        if b23 != b13 goto label41;

        $b58 = r0[i20];

        r0[i21] = $b58;

        i22 = i20 + 1;

        r0[i20] = b13;

        goto label38;

     label41:
        i22 = i20;

        goto label38;

     label42:
        i15 = i24;

        goto label34;

     label43:
        i18 = i20;

        goto label35;

     label44:
        i18 = i19;

        goto label17;

     label45:
        i15 = i34;

        goto label16;

     label46:
        i31 = i33;

        goto label13;
    }

    private static void dualPivotQuicksort(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i17, i18, i19, i20, i21, i22, i24, i25, i26, i28, i29, i31, i32, i33, i34, i36, i37, $i47, $i48, $i49, $i50, $i52, $i54, $i55, $i57, $i61;
        char c8, c9, c10, c11, c12, c13, c14, c23, c27, c30, c35, c38, c39, c40, c41, c42, c43, c44, c45, $c46, $c51, $c53, $c56, $c58, $c59, $c60, $c62, $c63, $c64, $c65, $c66, $c67, $c68, $c69, $c70, $c71, $c72, $c73, $c74, $c75, $c76;
        boolean z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i49 = i1 - i0;

        $i48 = 1 + $i49;

        i2 = $i48 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i47 = i0 + i1;

        i5 = $i47 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        c8 = r0[i3];

        c9 = r0[i7];

        c10 = r0[i5];

        c11 = r0[i6];

        c12 = r0[i4];

        if c8 <= c9 goto label01;

        c43 = c8;

        c8 = c9;

        c9 = c43;

     label01:
        if c11 <= c12 goto label02;

        c42 = c11;

        c11 = c12;

        c12 = c42;

     label02:
        if c8 <= c10 goto label03;

        c45 = c8;

        c8 = c10;

        c10 = c45;

     label03:
        if c9 <= c10 goto label04;

        c44 = c9;

        c9 = c10;

        c10 = c44;

     label04:
        if c8 <= c11 goto label05;

        c39 = c8;

        c8 = c11;

        c11 = c39;

     label05:
        if c10 <= c11 goto label06;

        c38 = c10;

        c10 = c11;

        c11 = c38;

     label06:
        if c9 <= c12 goto label07;

        c41 = c9;

        c9 = c12;

        c12 = c41;

     label07:
        if c9 <= c10 goto label08;

        c40 = c9;

        c9 = c10;

        c10 = c40;

     label08:
        if c11 <= c12 goto label09;

        c35 = c11;

        c11 = c12;

        c12 = c35;

     label09:
        r0[i3] = c8;

        r0[i5] = c10;

        r0[i4] = c12;

        c13 = c9;

        $c46 = r0[i0];

        r0[i7] = $c46;

        c14 = c11;

        $c53 = r0[i1];

        r0[i6] = $c53;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if c13 == c14 goto label14;

        z0 = 1;

     label10:
        if z0 == 0 goto label21;

        i32 = i16;

        i33 = i16;

     label11:
        if i32 > i15 goto label20;

        c30 = r0[i32];

        if c30 >= c13 goto label15;

        if i32 == i33 goto label12;

        $c72 = r0[i33];

        r0[i32] = $c72;

        r0[i33] = c30;

     label12:
        i31 = i33 + 1;

     label13:
        i32 = i32 + 1;

        i33 = i31;

        goto label11;

     label14:
        z0 = 0;

        goto label10;

     label15:
        if c30 <= c14 goto label46;

     label16:
        $c74 = r0[i15];

        if $c74 <= c14 goto label18;

        i34 = i15 - 1;

        if i15 != i32 goto label45;

        i15 = i34;

        i18 = i33;

     label17:
        $i52 = i18 - 1;

        $c51 = r0[$i52];

        r0[i0] = $c51;

        $i50 = i18 - 1;

        r0[$i50] = c13;

        $i57 = i15 + 1;

        $c56 = r0[$i57];

        r0[i1] = $c56;

        $i55 = i15 + 1;

        r0[$i55] = c14;

        $i54 = i18 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, i0, $i54);

        $i61 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, $i61, i1);

        if z0 != 0 goto label29;

        return;

     label18:
        $c75 = r0[i15];

        if $c75 >= c13 goto label19;

        $c70 = r0[i33];

        r0[i32] = $c70;

        i31 = i33 + 1;

        $c71 = r0[i15];

        r0[i33] = $c71;

        i37 = i15 - 1;

        r0[i15] = c30;

        i15 = i37;

        goto label13;

     label19:
        $c76 = r0[i15];

        r0[i32] = $c76;

        i36 = i15 - 1;

        r0[i15] = c30;

        i15 = i36;

        i31 = i33;

        goto label13;

     label20:
        i18 = i33;

        goto label17;

     label21:
        i17 = i16;

        i19 = i16;

     label22:
        if i17 > i15 goto label44;

        c27 = r0[i17];

        if c27 != c13 goto label24;

        i29 = i19;

     label23:
        i17 = i17 + 1;

        i19 = i29;

        goto label22;

     label24:
        if c27 >= c13 goto label26;

        if i17 == i19 goto label25;

        $c73 = r0[i19];

        r0[i17] = $c73;

        r0[i19] = c27;

     label25:
        i29 = i19 + 1;

        goto label23;

     label26:
        $c62 = r0[i15];

        if $c62 <= c13 goto label27;

        i15 = i15 + -1;

        goto label26;

     label27:
        $c63 = r0[i15];

        if $c63 >= c13 goto label28;

        $c64 = r0[i19];

        r0[i17] = $c64;

        i29 = i19 + 1;

        $c65 = r0[i15];

        r0[i19] = $c65;

        i28 = i15 - 1;

        r0[i15] = c27;

        i15 = i28;

        goto label23;

     label28:
        r0[i17] = c13;

        i26 = i15 - 1;

        r0[i15] = c27;

        i15 = i26;

        i29 = i19;

        goto label23;

     label29:
        if i18 >= i3 goto label35;

        if i15 <= i4 goto label35;

     label30:
        $c60 = r0[i18];

        if $c60 != c13 goto label31;

        i18 = i18 + 1;

        goto label30;

     label31:
        $c59 = r0[i15];

        if $c59 != c14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i21 = i18;

        i20 = i18;

     label33:
        if i21 > i15 goto label43;

        c23 = r0[i21];

        if c23 != c14 goto label40;

     label34:
        $c66 = r0[i15];

        if $c66 != c14 goto label36;

        i24 = i15 - 1;

        if i15 != i21 goto label42;

        i15 = i24;

        i18 = i20;

     label35:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, i18, i15);

        return;

     label36:
        $c67 = r0[i15];

        if $c67 != c13 goto label39;

        $c69 = r0[i20];

        r0[i21] = $c69;

        i22 = i20 + 1;

        r0[i20] = c13;

     label37:
        i25 = i15 - 1;

        r0[i15] = c14;

        i15 = i25;

     label38:
        i21 = i21 + 1;

        i20 = i22;

        goto label33;

     label39:
        $c68 = r0[i15];

        r0[i21] = $c68;

        i22 = i20;

        goto label37;

     label40:
        if c23 != c13 goto label41;

        $c58 = r0[i20];

        r0[i21] = $c58;

        i22 = i20 + 1;

        r0[i20] = c13;

        goto label38;

     label41:
        i22 = i20;

        goto label38;

     label42:
        i15 = i24;

        goto label34;

     label43:
        i18 = i20;

        goto label35;

     label44:
        i18 = i19;

        goto label17;

     label45:
        i15 = i34;

        goto label16;

     label46:
        i31 = i33;

        goto label13;
    }

    private static void dualPivotQuicksort(double[], int, int)
    {
        double[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, $i27, $i28, $i31, $i39, $i40, $i41, $i43, $i47, $i48;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40;
        boolean z0;
        byte $b29, $b30, $b32, $b33, $b34, $b35, $b36, $b37, $b38, $b42, $b44, $b45, $b46, $b49, $b50, $b51, $b52, $b53, $b54, $b55, $b56, $b57, $b58, $b59;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i31 = i1 - i0;

        $i27 = 1 + $i31;

        i2 = $i27 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i28 = i0 + i1;

        i5 = $i28 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        d0 = r0[i3];

        d1 = r0[i7];

        d2 = r0[i5];

        d3 = r0[i6];

        d4 = r0[i4];

        $b29 = d0 cmpl d1;

        if $b29 <= 0 goto label01;

        d18 = d0;

        d0 = d1;

        d1 = d18;

     label01:
        $b30 = d3 cmpl d4;

        if $b30 <= 0 goto label02;

        d16 = d3;

        d3 = d4;

        d4 = d16;

     label02:
        $b35 = d0 cmpl d2;

        if $b35 <= 0 goto label03;

        d17 = d0;

        d0 = d2;

        d2 = d17;

     label03:
        $b36 = d1 cmpl d2;

        if $b36 <= 0 goto label04;

        d14 = d1;

        d1 = d2;

        d2 = d14;

     label04:
        $b37 = d0 cmpl d3;

        if $b37 <= 0 goto label05;

        d15 = d0;

        d0 = d3;

        d3 = d15;

     label05:
        $b38 = d2 cmpl d3;

        if $b38 <= 0 goto label06;

        d12 = d2;

        d2 = d3;

        d3 = d12;

     label06:
        $b32 = d1 cmpl d4;

        if $b32 <= 0 goto label07;

        d13 = d1;

        d1 = d4;

        d4 = d13;

     label07:
        $b33 = d1 cmpl d2;

        if $b33 <= 0 goto label08;

        d10 = d1;

        d1 = d2;

        d2 = d10;

     label08:
        $b34 = d3 cmpl d4;

        if $b34 <= 0 goto label09;

        d11 = d3;

        d3 = d4;

        d4 = d11;

     label09:
        r0[i3] = d0;

        r0[i5] = d2;

        r0[i4] = d4;

        d5 = d1;

        $d19 = r0[i0];

        r0[i7] = $d19;

        d6 = d3;

        $d21 = r0[i1];

        r0[i6] = $d21;

        i8 = i0 + 1;

        i9 = i1 - 1;

        $b42 = d5 cmpl d6;

        if $b42 == 0 goto label14;

        z0 = 1;

     label10:
        if z0 == 0 goto label21;

        i22 = i8;

        i20 = i8;

     label11:
        if i22 > i9 goto label20;

        d9 = r0[i22];

        $b59 = d9 cmpg d5;

        if $b59 >= 0 goto label15;

        if i22 == i20 goto label12;

        $d39 = r0[i20];

        r0[i22] = $d39;

        r0[i20] = d9;

     label12:
        i25 = i20 + 1;

     label13:
        i22 = i22 + 1;

        i20 = i25;

        goto label11;

     label14:
        z0 = 0;

        goto label10;

     label15:
        $b58 = d9 cmpl d6;

        if $b58 <= 0 goto label46;

     label16:
        $d38 = r0[i9];

        $b57 = $d38 cmpl d6;

        if $b57 <= 0 goto label18;

        i26 = i9 - 1;

        if i9 != i22 goto label45;

        i9 = i26;

        i13 = i20;

     label17:
        $i43 = i13 - 1;

        $d22 = r0[$i43];

        r0[i0] = $d22;

        $i40 = i13 - 1;

        r0[$i40] = d5;

        $i39 = i9 + 1;

        $d20 = r0[$i39];

        r0[i1] = $d20;

        $i41 = i9 + 1;

        r0[$i41] = d6;

        $i48 = i13 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, i0, $i48);

        $i47 = i9 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, $i47, i1);

        if z0 != 0 goto label29;

        return;

     label18:
        $d37 = r0[i9];

        $b56 = $d37 cmpg d5;

        if $b56 >= 0 goto label19;

        $d35 = r0[i20];

        r0[i22] = $d35;

        i25 = i20 + 1;

        $d40 = r0[i9];

        r0[i20] = $d40;

        i24 = i9 - 1;

        r0[i9] = d9;

        i9 = i24;

        goto label13;

     label19:
        $d36 = r0[i9];

        r0[i22] = $d36;

        i23 = i9 - 1;

        r0[i9] = d9;

        i9 = i23;

        i25 = i20;

        goto label13;

     label20:
        i13 = i20;

        goto label17;

     label21:
        i11 = i8;

        i10 = i8;

     label22:
        if i11 > i9 goto label44;

        d8 = r0[i11];

        $b50 = d8 cmpl d5;

        if $b50 != 0 goto label24;

        i19 = i10;

     label23:
        i11 = i11 + 1;

        i10 = i19;

        goto label22;

     label24:
        $b55 = d8 cmpg d5;

        if $b55 >= 0 goto label26;

        if i11 == i10 goto label25;

        $d31 = r0[i10];

        r0[i11] = $d31;

        r0[i10] = d8;

     label25:
        i19 = i10 + 1;

        goto label23;

     label26:
        $d34 = r0[i9];

        $b54 = $d34 cmpl d5;

        if $b54 <= 0 goto label27;

        i9 = i9 + -1;

        goto label26;

     label27:
        $d33 = r0[i9];

        $b53 = $d33 cmpg d5;

        if $b53 >= 0 goto label28;

        $d32 = r0[i10];

        r0[i11] = $d32;

        i19 = i10 + 1;

        $d30 = r0[i9];

        r0[i10] = $d30;

        i21 = i9 - 1;

        r0[i9] = d8;

        i9 = i21;

        goto label23;

     label28:
        r0[i11] = d5;

        i18 = i9 - 1;

        r0[i9] = d8;

        i9 = i18;

        i19 = i10;

        goto label23;

     label29:
        if i13 >= i3 goto label35;

        if i9 <= i4 goto label35;

     label30:
        $d24 = r0[i13];

        $b49 = $d24 cmpl d5;

        if $b49 != 0 goto label31;

        i13 = i13 + 1;

        goto label30;

     label31:
        $d23 = r0[i9];

        $b44 = $d23 cmpl d6;

        if $b44 != 0 goto label32;

        i9 = i9 + -1;

        goto label31;

     label32:
        i12 = i13;

        i14 = i13;

     label33:
        if i12 > i9 goto label43;

        d7 = r0[i12];

        $b46 = d7 cmpl d6;

        if $b46 != 0 goto label40;

     label34:
        $d29 = r0[i9];

        $b52 = $d29 cmpl d6;

        if $b52 != 0 goto label36;

        i16 = i9 - 1;

        if i9 != i12 goto label42;

        i9 = i16;

        i13 = i14;

     label35:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, i13, i9);

        return;

     label36:
        $d27 = r0[i9];

        $b51 = $d27 cmpl d5;

        if $b51 != 0 goto label39;

        $d25 = r0[i14];

        r0[i12] = $d25;

        i17 = i14 + 1;

        r0[i14] = d5;

     label37:
        i15 = i9 - 1;

        r0[i9] = d6;

        i9 = i15;

     label38:
        i12 = i12 + 1;

        i14 = i17;

        goto label33;

     label39:
        $d26 = r0[i9];

        r0[i12] = $d26;

        i17 = i14;

        goto label37;

     label40:
        $b45 = d7 cmpl d5;

        if $b45 != 0 goto label41;

        $d28 = r0[i14];

        r0[i12] = $d28;

        i17 = i14 + 1;

        r0[i14] = d5;

        goto label38;

     label41:
        i17 = i14;

        goto label38;

     label42:
        i9 = i16;

        goto label34;

     label43:
        i13 = i14;

        goto label35;

     label44:
        i13 = i10;

        goto label17;

     label45:
        i9 = i26;

        goto label16;

     label46:
        i25 = i20;

        goto label13;
    }

    private static void dualPivotQuicksort(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, $i28, $i29, $i30, $i39, $i41, $i42, $i43, $i44, $i45;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40;
        boolean z0;
        byte $b27, $b31, $b32, $b33, $b34, $b35, $b36, $b37, $b38, $b40, $b46, $b47, $b48, $b49, $b50, $b51, $b52, $b53, $b54, $b55, $b56, $b57, $b58, $b59;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i30 = i1 - i0;

        $i29 = 1 + $i30;

        i2 = $i29 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i28 = i0 + i1;

        i5 = $i28 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        f0 = r0[i3];

        f1 = r0[i7];

        f2 = r0[i5];

        f3 = r0[i6];

        f4 = r0[i4];

        $b27 = f0 cmpl f1;

        if $b27 <= 0 goto label01;

        f16 = f0;

        f0 = f1;

        f1 = f16;

     label01:
        $b34 = f3 cmpl f4;

        if $b34 <= 0 goto label02;

        f15 = f3;

        f3 = f4;

        f4 = f15;

     label02:
        $b33 = f0 cmpl f2;

        if $b33 <= 0 goto label03;

        f18 = f0;

        f0 = f2;

        f2 = f18;

     label03:
        $b32 = f1 cmpl f2;

        if $b32 <= 0 goto label04;

        f17 = f1;

        f1 = f2;

        f2 = f17;

     label04:
        $b31 = f0 cmpl f3;

        if $b31 <= 0 goto label05;

        f12 = f0;

        f0 = f3;

        f3 = f12;

     label05:
        $b38 = f2 cmpl f3;

        if $b38 <= 0 goto label06;

        f11 = f2;

        f2 = f3;

        f3 = f11;

     label06:
        $b37 = f1 cmpl f4;

        if $b37 <= 0 goto label07;

        f14 = f1;

        f1 = f4;

        f4 = f14;

     label07:
        $b36 = f1 cmpl f2;

        if $b36 <= 0 goto label08;

        f13 = f1;

        f1 = f2;

        f2 = f13;

     label08:
        $b35 = f3 cmpl f4;

        if $b35 <= 0 goto label09;

        f10 = f3;

        f3 = f4;

        f4 = f10;

     label09:
        r0[i3] = f0;

        r0[i5] = f2;

        r0[i4] = f4;

        f5 = f1;

        $f20 = r0[i0];

        r0[i7] = $f20;

        f6 = f3;

        $f19 = r0[i1];

        r0[i6] = $f19;

        i9 = i0 + 1;

        i8 = i1 - 1;

        $b40 = f5 cmpl f6;

        if $b40 == 0 goto label14;

        z0 = 1;

     label10:
        if z0 == 0 goto label21;

        i22 = i9;

        i23 = i9;

     label11:
        if i22 > i8 goto label20;

        f9 = r0[i22];

        $b55 = f9 cmpg f5;

        if $b55 >= 0 goto label15;

        if i22 == i23 goto label12;

        $f36 = r0[i23];

        r0[i22] = $f36;

        r0[i23] = f9;

     label12:
        i21 = i23 + 1;

     label13:
        i22 = i22 + 1;

        i23 = i21;

        goto label11;

     label14:
        z0 = 0;

        goto label10;

     label15:
        $b56 = f9 cmpl f6;

        if $b56 <= 0 goto label46;

     label16:
        $f32 = r0[i8];

        $b59 = $f32 cmpl f6;

        if $b59 <= 0 goto label18;

        i24 = i8 - 1;

        if i8 != i22 goto label45;

        i8 = i24;

        i11 = i23;

     label17:
        $i39 = i11 - 1;

        $f22 = r0[$i39];

        r0[i0] = $f22;

        $i44 = i11 - 1;

        r0[$i44] = f5;

        $i45 = i8 + 1;

        $f23 = r0[$i45];

        r0[i1] = $f23;

        $i41 = i8 + 1;

        r0[$i41] = f6;

        $i42 = i11 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, i0, $i42);

        $i43 = i8 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, $i43, i1);

        if z0 != 0 goto label29;

        return;

     label18:
        $f40 = r0[i8];

        $b58 = $f40 cmpg f5;

        if $b58 >= 0 goto label19;

        $f37 = r0[i23];

        r0[i22] = $f37;

        i21 = i23 + 1;

        $f38 = r0[i8];

        r0[i23] = $f38;

        i26 = i8 - 1;

        r0[i8] = f9;

        i8 = i26;

        goto label13;

     label19:
        $f39 = r0[i8];

        r0[i22] = $f39;

        i25 = i8 - 1;

        r0[i8] = f9;

        i8 = i25;

        i21 = i23;

        goto label13;

     label20:
        i11 = i23;

        goto label17;

     label21:
        i10 = i9;

        i12 = i9;

     label22:
        if i10 > i8 goto label44;

        f8 = r0[i10];

        $b52 = f8 cmpl f5;

        if $b52 != 0 goto label24;

        i20 = i12;

     label23:
        i10 = i10 + 1;

        i12 = i20;

        goto label22;

     label24:
        $b51 = f8 cmpg f5;

        if $b51 >= 0 goto label26;

        if i10 == i12 goto label25;

        $f31 = r0[i12];

        r0[i10] = $f31;

        r0[i12] = f8;

     label25:
        i20 = i12 + 1;

        goto label23;

     label26:
        $f27 = r0[i8];

        $b53 = $f27 cmpl f5;

        if $b53 <= 0 goto label27;

        i8 = i8 + -1;

        goto label26;

     label27:
        $f33 = r0[i8];

        $b57 = $f33 cmpg f5;

        if $b57 >= 0 goto label28;

        $f35 = r0[i12];

        r0[i10] = $f35;

        i20 = i12 + 1;

        $f34 = r0[i8];

        r0[i12] = $f34;

        i19 = i8 - 1;

        r0[i8] = f8;

        i8 = i19;

        goto label23;

     label28:
        r0[i10] = f5;

        i18 = i8 - 1;

        r0[i8] = f8;

        i8 = i18;

        i20 = i12;

        goto label23;

     label29:
        if i11 >= i3 goto label35;

        if i8 <= i4 goto label35;

     label30:
        $f21 = r0[i11];

        $b48 = $f21 cmpl f5;

        if $b48 != 0 goto label31;

        i11 = i11 + 1;

        goto label30;

     label31:
        $f26 = r0[i8];

        $b49 = $f26 cmpl f6;

        if $b49 != 0 goto label32;

        i8 = i8 + -1;

        goto label31;

     label32:
        i14 = i11;

        i13 = i11;

     label33:
        if i14 > i8 goto label43;

        f7 = r0[i14];

        $b50 = f7 cmpl f6;

        if $b50 != 0 goto label40;

     label34:
        $f25 = r0[i8];

        $b47 = $f25 cmpl f6;

        if $b47 != 0 goto label36;

        i16 = i8 - 1;

        if i8 != i14 goto label42;

        i8 = i16;

        i11 = i13;

     label35:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, i11, i8);

        return;

     label36:
        $f28 = r0[i8];

        $b54 = $f28 cmpl f5;

        if $b54 != 0 goto label39;

        $f29 = r0[i13];

        r0[i14] = $f29;

        i15 = i13 + 1;

        r0[i13] = f5;

     label37:
        i17 = i8 - 1;

        r0[i8] = f6;

        i8 = i17;

     label38:
        i14 = i14 + 1;

        i13 = i15;

        goto label33;

     label39:
        $f30 = r0[i8];

        r0[i14] = $f30;

        i15 = i13;

        goto label37;

     label40:
        $b46 = f7 cmpl f5;

        if $b46 != 0 goto label41;

        $f24 = r0[i13];

        r0[i14] = $f24;

        i15 = i13 + 1;

        r0[i13] = f5;

        goto label38;

     label41:
        i15 = i13;

        goto label38;

     label42:
        i8 = i16;

        goto label34;

     label43:
        i11 = i13;

        goto label35;

     label44:
        i11 = i12;

        goto label17;

     label45:
        i8 = i24;

        goto label16;

     label46:
        i21 = i23;

        goto label13;
    }

    private static void dualPivotQuicksort(int[], int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76;
        boolean z0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i49 = i1 - i0;

        $i48 = 1 + $i49;

        i2 = $i48 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i47 = i0 + i1;

        i5 = $i47 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        i8 = r0[i3];

        i9 = r0[i7];

        i10 = r0[i5];

        i11 = r0[i6];

        i12 = r0[i4];

        if i8 <= i9 goto label01;

        i43 = i8;

        i8 = i9;

        i9 = i43;

     label01:
        if i11 <= i12 goto label02;

        i42 = i11;

        i11 = i12;

        i12 = i42;

     label02:
        if i8 <= i10 goto label03;

        i45 = i8;

        i8 = i10;

        i10 = i45;

     label03:
        if i9 <= i10 goto label04;

        i44 = i9;

        i9 = i10;

        i10 = i44;

     label04:
        if i8 <= i11 goto label05;

        i39 = i8;

        i8 = i11;

        i11 = i39;

     label05:
        if i10 <= i11 goto label06;

        i38 = i10;

        i10 = i11;

        i11 = i38;

     label06:
        if i9 <= i12 goto label07;

        i41 = i9;

        i9 = i12;

        i12 = i41;

     label07:
        if i9 <= i10 goto label08;

        i40 = i9;

        i9 = i10;

        i10 = i40;

     label08:
        if i11 <= i12 goto label09;

        i35 = i11;

        i11 = i12;

        i12 = i35;

     label09:
        r0[i3] = i8;

        r0[i5] = i10;

        r0[i4] = i12;

        i13 = i9;

        $i46 = r0[i0];

        r0[i7] = $i46;

        i14 = i11;

        $i53 = r0[i1];

        r0[i6] = $i53;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if i13 == i14 goto label14;

        z0 = 1;

     label10:
        if z0 == 0 goto label21;

        i32 = i16;

        i33 = i16;

     label11:
        if i32 > i15 goto label20;

        i30 = r0[i32];

        if i30 >= i13 goto label15;

        if i32 == i33 goto label12;

        $i72 = r0[i33];

        r0[i32] = $i72;

        r0[i33] = i30;

     label12:
        i31 = i33 + 1;

     label13:
        i32 = i32 + 1;

        i33 = i31;

        goto label11;

     label14:
        z0 = 0;

        goto label10;

     label15:
        if i30 <= i14 goto label46;

     label16:
        $i74 = r0[i15];

        if $i74 <= i14 goto label18;

        i34 = i15 - 1;

        if i15 != i32 goto label45;

        i15 = i34;

        i18 = i33;

     label17:
        $i52 = i18 - 1;

        $i51 = r0[$i52];

        r0[i0] = $i51;

        $i50 = i18 - 1;

        r0[$i50] = i13;

        $i57 = i15 + 1;

        $i56 = r0[$i57];

        r0[i1] = $i56;

        $i55 = i15 + 1;

        r0[$i55] = i14;

        $i54 = i18 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, i0, $i54);

        $i61 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, $i61, i1);

        if z0 != 0 goto label29;

        return;

     label18:
        $i75 = r0[i15];

        if $i75 >= i13 goto label19;

        $i70 = r0[i33];

        r0[i32] = $i70;

        i31 = i33 + 1;

        $i71 = r0[i15];

        r0[i33] = $i71;

        i37 = i15 - 1;

        r0[i15] = i30;

        i15 = i37;

        goto label13;

     label19:
        $i76 = r0[i15];

        r0[i32] = $i76;

        i36 = i15 - 1;

        r0[i15] = i30;

        i15 = i36;

        i31 = i33;

        goto label13;

     label20:
        i18 = i33;

        goto label17;

     label21:
        i17 = i16;

        i19 = i16;

     label22:
        if i17 > i15 goto label44;

        i27 = r0[i17];

        if i27 != i13 goto label24;

        i29 = i19;

     label23:
        i17 = i17 + 1;

        i19 = i29;

        goto label22;

     label24:
        if i27 >= i13 goto label26;

        if i17 == i19 goto label25;

        $i73 = r0[i19];

        r0[i17] = $i73;

        r0[i19] = i27;

     label25:
        i29 = i19 + 1;

        goto label23;

     label26:
        $i62 = r0[i15];

        if $i62 <= i13 goto label27;

        i15 = i15 + -1;

        goto label26;

     label27:
        $i63 = r0[i15];

        if $i63 >= i13 goto label28;

        $i64 = r0[i19];

        r0[i17] = $i64;

        i29 = i19 + 1;

        $i65 = r0[i15];

        r0[i19] = $i65;

        i28 = i15 - 1;

        r0[i15] = i27;

        i15 = i28;

        goto label23;

     label28:
        r0[i17] = i13;

        i26 = i15 - 1;

        r0[i15] = i27;

        i15 = i26;

        i29 = i19;

        goto label23;

     label29:
        if i18 >= i3 goto label35;

        if i15 <= i4 goto label35;

     label30:
        $i60 = r0[i18];

        if $i60 != i13 goto label31;

        i18 = i18 + 1;

        goto label30;

     label31:
        $i59 = r0[i15];

        if $i59 != i14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i21 = i18;

        i20 = i18;

     label33:
        if i21 > i15 goto label43;

        i23 = r0[i21];

        if i23 != i14 goto label40;

     label34:
        $i66 = r0[i15];

        if $i66 != i14 goto label36;

        i24 = i15 - 1;

        if i15 != i21 goto label42;

        i15 = i24;

        i18 = i20;

     label35:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, i18, i15);

        return;

     label36:
        $i67 = r0[i15];

        if $i67 != i13 goto label39;

        $i69 = r0[i20];

        r0[i21] = $i69;

        i22 = i20 + 1;

        r0[i20] = i13;

     label37:
        i25 = i15 - 1;

        r0[i15] = i14;

        i15 = i25;

     label38:
        i21 = i21 + 1;

        i20 = i22;

        goto label33;

     label39:
        $i68 = r0[i15];

        r0[i21] = $i68;

        i22 = i20;

        goto label37;

     label40:
        if i23 != i13 goto label41;

        $i58 = r0[i20];

        r0[i21] = $i58;

        i22 = i20 + 1;

        r0[i20] = i13;

        goto label38;

     label41:
        i22 = i20;

        goto label38;

     label42:
        i15 = i24;

        goto label34;

     label43:
        i18 = i20;

        goto label35;

     label44:
        i18 = i19;

        goto label17;

     label45:
        i15 = i34;

        goto label16;

     label46:
        i31 = i33;

        goto label13;
    }

    private static void dualPivotQuicksort(long[], int, int)
    {
        long[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i17, i18, i19, i20, i22, i23, i24, i25, i26, i27, i29, i31, i32, i33, i34, i35, i38, $i45, $i46, $i50, $i59, $i60, $i61, $i66, $i71, $i72;
        long l8, l9, l10, l11, l12, l13, l14, l21, l28, l30, l36, l37, l39, l40, l41, l42, l43, l44, l49, $l54, $l62, $l64, $l65, $l68, $l74, $l75, $l78, $l80, $l81, $l82, $l83, $l84, $l86, $l88, $l90, $l91, $l92, $l94, $l96, $l99, $l100;
        boolean z0;
        byte $b47, $b48, $b51, $b52, $b53, $b55, $b56, $b57, $b58, $b63, $b67, $b69, $b70, $b73, $b76, $b77, $b79, $b85, $b87, $b89, $b93, $b95, $b97, $b98;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i50 = i1 - i0;

        $i45 = 1 + $i50;

        i2 = $i45 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i46 = i0 + i1;

        i5 = $i46 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        l8 = r0[i3];

        l9 = r0[i7];

        l10 = r0[i5];

        l11 = r0[i6];

        l12 = r0[i4];

        $b47 = l8 cmp l9;

        if $b47 <= 0 goto label01;

        l49 = l8;

        l8 = l9;

        l9 = l49;

     label01:
        $b48 = l11 cmp l12;

        if $b48 <= 0 goto label02;

        l43 = l11;

        l11 = l12;

        l12 = l43;

     label02:
        $b55 = l8 cmp l10;

        if $b55 <= 0 goto label03;

        l44 = l8;

        l8 = l10;

        l10 = l44;

     label03:
        $b56 = l9 cmp l10;

        if $b56 <= 0 goto label04;

        l41 = l9;

        l9 = l10;

        l10 = l41;

     label04:
        $b57 = l8 cmp l11;

        if $b57 <= 0 goto label05;

        l42 = l8;

        l8 = l11;

        l11 = l42;

     label05:
        $b58 = l10 cmp l11;

        if $b58 <= 0 goto label06;

        l39 = l10;

        l10 = l11;

        l11 = l39;

     label06:
        $b51 = l9 cmp l12;

        if $b51 <= 0 goto label07;

        l40 = l9;

        l9 = l12;

        l12 = l40;

     label07:
        $b52 = l9 cmp l10;

        if $b52 <= 0 goto label08;

        l36 = l9;

        l9 = l10;

        l10 = l36;

     label08:
        $b53 = l11 cmp l12;

        if $b53 <= 0 goto label09;

        l37 = l11;

        l11 = l12;

        l12 = l37;

     label09:
        r0[i3] = l8;

        r0[i5] = l10;

        r0[i4] = l12;

        l13 = l9;

        $l54 = r0[i0];

        r0[i7] = $l54;

        l14 = l11;

        $l64 = r0[i1];

        r0[i6] = $l64;

        i15 = i0 + 1;

        i16 = i1 - 1;

        $b63 = l13 cmp l14;

        if $b63 == 0 goto label14;

        z0 = 1;

     label10:
        if z0 == 0 goto label21;

        i32 = i15;

        i29 = i15;

     label11:
        if i32 > i16 goto label20;

        l30 = r0[i32];

        $b98 = l30 cmp l13;

        if $b98 >= 0 goto label15;

        if i32 == i29 goto label12;

        $l99 = r0[i29];

        r0[i32] = $l99;

        r0[i29] = l30;

     label12:
        i35 = i29 + 1;

     label13:
        i32 = i32 + 1;

        i29 = i35;

        goto label11;

     label14:
        z0 = 0;

        goto label10;

     label15:
        $b97 = l30 cmp l14;

        if $b97 <= 0 goto label46;

     label16:
        $l96 = r0[i16];

        $b95 = $l96 cmp l14;

        if $b95 <= 0 goto label18;

        i38 = i16 - 1;

        if i16 != i32 goto label45;

        i16 = i38;

        i20 = i29;

     label17:
        $i66 = i20 - 1;

        $l65 = r0[$i66];

        r0[i0] = $l65;

        $i60 = i20 - 1;

        r0[$i60] = l13;

        $i59 = i16 + 1;

        $l62 = r0[$i59];

        r0[i1] = $l62;

        $i61 = i16 + 1;

        r0[$i61] = l14;

        $i72 = i20 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, i0, $i72);

        $i71 = i16 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, $i71, i1);

        if z0 != 0 goto label29;

        return;

     label18:
        $l94 = r0[i16];

        $b93 = $l94 cmp l13;

        if $b93 >= 0 goto label19;

        $l91 = r0[i29];

        r0[i32] = $l91;

        i35 = i29 + 1;

        $l100 = r0[i16];

        r0[i29] = $l100;

        i34 = i16 - 1;

        r0[i16] = l30;

        i16 = i34;

        goto label13;

     label19:
        $l92 = r0[i16];

        r0[i32] = $l92;

        i33 = i16 - 1;

        r0[i16] = l30;

        i16 = i33;

        i35 = i29;

        goto label13;

     label20:
        i20 = i29;

        goto label17;

     label21:
        i18 = i15;

        i17 = i15;

     label22:
        if i18 > i16 goto label44;

        l28 = r0[i18];

        $b76 = l28 cmp l13;

        if $b76 != 0 goto label24;

        i27 = i17;

     label23:
        i18 = i18 + 1;

        i17 = i27;

        goto label22;

     label24:
        $b89 = l28 cmp l13;

        if $b89 >= 0 goto label26;

        if i18 == i17 goto label25;

        $l84 = r0[i17];

        r0[i18] = $l84;

        r0[i17] = l28;

     label25:
        i27 = i17 + 1;

        goto label23;

     label26:
        $l90 = r0[i16];

        $b87 = $l90 cmp l13;

        if $b87 <= 0 goto label27;

        i16 = i16 + -1;

        goto label26;

     label27:
        $l88 = r0[i16];

        $b85 = $l88 cmp l13;

        if $b85 >= 0 goto label28;

        $l86 = r0[i17];

        r0[i18] = $l86;

        i27 = i17 + 1;

        $l83 = r0[i16];

        r0[i17] = $l83;

        i31 = i16 - 1;

        r0[i16] = l28;

        i16 = i31;

        goto label23;

     label28:
        r0[i18] = l13;

        i26 = i16 - 1;

        r0[i16] = l28;

        i16 = i26;

        i27 = i17;

        goto label23;

     label29:
        if i20 >= i3 goto label35;

        if i16 <= i4 goto label35;

     label30:
        $l74 = r0[i20];

        $b73 = $l74 cmp l13;

        if $b73 != 0 goto label31;

        i20 = i20 + 1;

        goto label30;

     label31:
        $l68 = r0[i16];

        $b67 = $l68 cmp l14;

        if $b67 != 0 goto label32;

        i16 = i16 + -1;

        goto label31;

     label32:
        i19 = i20;

        i22 = i20;

     label33:
        if i19 > i16 goto label43;

        l21 = r0[i19];

        $b70 = l21 cmp l14;

        if $b70 != 0 goto label40;

     label34:
        $l82 = r0[i16];

        $b79 = $l82 cmp l14;

        if $b79 != 0 goto label36;

        i24 = i16 - 1;

        if i16 != i19 goto label42;

        i16 = i24;

        i20 = i22;

     label35:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, i20, i16);

        return;

     label36:
        $l80 = r0[i16];

        $b77 = $l80 cmp l13;

        if $b77 != 0 goto label39;

        $l75 = r0[i22];

        r0[i19] = $l75;

        i25 = i22 + 1;

        r0[i22] = l13;

     label37:
        i23 = i16 - 1;

        r0[i16] = l14;

        i16 = i23;

     label38:
        i19 = i19 + 1;

        i22 = i25;

        goto label33;

     label39:
        $l78 = r0[i16];

        r0[i19] = $l78;

        i25 = i22;

        goto label37;

     label40:
        $b69 = l21 cmp l13;

        if $b69 != 0 goto label41;

        $l81 = r0[i22];

        r0[i19] = $l81;

        i25 = i22 + 1;

        r0[i22] = l13;

        goto label38;

     label41:
        i25 = i22;

        goto label38;

     label42:
        i16 = i24;

        goto label34;

     label43:
        i20 = i22;

        goto label35;

     label44:
        i20 = i17;

        goto label17;

     label45:
        i16 = i38;

        goto label16;

     label46:
        i35 = i29;

        goto label13;
    }

    private static void dualPivotQuicksort(short[], int, int)
    {
        short[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i17, i18, i19, i20, i21, i22, i24, i25, i26, i28, i29, i31, i32, i33, i34, i36, i37, $i47, $i48, $i49, $i50, $i52, $i54, $i55, $i57, $i61;
        short s8, s9, s10, s11, s12, s13, s14, s23, s27, s30, s35, s38, s39, s40, s41, s42, s43, s44, s45, $s46, $s51, $s53, $s56, $s58, $s59, $s60, $s62, $s63, $s64, $s65, $s66, $s67, $s68, $s69, $s70, $s71, $s72, $s73, $s74, $s75, $s76;
        boolean z0;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i49 = i1 - i0;

        $i48 = 1 + $i49;

        i2 = $i48 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i47 = i0 + i1;

        i5 = $i47 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        s8 = r0[i3];

        s9 = r0[i7];

        s10 = r0[i5];

        s11 = r0[i6];

        s12 = r0[i4];

        if s8 <= s9 goto label01;

        s43 = s8;

        s8 = s9;

        s9 = s43;

     label01:
        if s11 <= s12 goto label02;

        s42 = s11;

        s11 = s12;

        s12 = s42;

     label02:
        if s8 <= s10 goto label03;

        s45 = s8;

        s8 = s10;

        s10 = s45;

     label03:
        if s9 <= s10 goto label04;

        s44 = s9;

        s9 = s10;

        s10 = s44;

     label04:
        if s8 <= s11 goto label05;

        s39 = s8;

        s8 = s11;

        s11 = s39;

     label05:
        if s10 <= s11 goto label06;

        s38 = s10;

        s10 = s11;

        s11 = s38;

     label06:
        if s9 <= s12 goto label07;

        s41 = s9;

        s9 = s12;

        s12 = s41;

     label07:
        if s9 <= s10 goto label08;

        s40 = s9;

        s9 = s10;

        s10 = s40;

     label08:
        if s11 <= s12 goto label09;

        s35 = s11;

        s11 = s12;

        s12 = s35;

     label09:
        r0[i3] = s8;

        r0[i5] = s10;

        r0[i4] = s12;

        s13 = s9;

        $s46 = r0[i0];

        r0[i7] = $s46;

        s14 = s11;

        $s53 = r0[i1];

        r0[i6] = $s53;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if s13 == s14 goto label14;

        z0 = 1;

     label10:
        if z0 == 0 goto label21;

        i32 = i16;

        i33 = i16;

     label11:
        if i32 > i15 goto label20;

        s30 = r0[i32];

        if s30 >= s13 goto label15;

        if i32 == i33 goto label12;

        $s72 = r0[i33];

        r0[i32] = $s72;

        r0[i33] = s30;

     label12:
        i31 = i33 + 1;

     label13:
        i32 = i32 + 1;

        i33 = i31;

        goto label11;

     label14:
        z0 = 0;

        goto label10;

     label15:
        if s30 <= s14 goto label46;

     label16:
        $s74 = r0[i15];

        if $s74 <= s14 goto label18;

        i34 = i15 - 1;

        if i15 != i32 goto label45;

        i15 = i34;

        i18 = i33;

     label17:
        $i52 = i18 - 1;

        $s51 = r0[$i52];

        r0[i0] = $s51;

        $i50 = i18 - 1;

        r0[$i50] = s13;

        $i57 = i15 + 1;

        $s56 = r0[$i57];

        r0[i1] = $s56;

        $i55 = i15 + 1;

        r0[$i55] = s14;

        $i54 = i18 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, i0, $i54);

        $i61 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, $i61, i1);

        if z0 != 0 goto label29;

        return;

     label18:
        $s75 = r0[i15];

        if $s75 >= s13 goto label19;

        $s70 = r0[i33];

        r0[i32] = $s70;

        i31 = i33 + 1;

        $s71 = r0[i15];

        r0[i33] = $s71;

        i37 = i15 - 1;

        r0[i15] = s30;

        i15 = i37;

        goto label13;

     label19:
        $s76 = r0[i15];

        r0[i32] = $s76;

        i36 = i15 - 1;

        r0[i15] = s30;

        i15 = i36;

        i31 = i33;

        goto label13;

     label20:
        i18 = i33;

        goto label17;

     label21:
        i17 = i16;

        i19 = i16;

     label22:
        if i17 > i15 goto label44;

        s27 = r0[i17];

        if s27 != s13 goto label24;

        i29 = i19;

     label23:
        i17 = i17 + 1;

        i19 = i29;

        goto label22;

     label24:
        if s27 >= s13 goto label26;

        if i17 == i19 goto label25;

        $s73 = r0[i19];

        r0[i17] = $s73;

        r0[i19] = s27;

     label25:
        i29 = i19 + 1;

        goto label23;

     label26:
        $s62 = r0[i15];

        if $s62 <= s13 goto label27;

        i15 = i15 + -1;

        goto label26;

     label27:
        $s63 = r0[i15];

        if $s63 >= s13 goto label28;

        $s64 = r0[i19];

        r0[i17] = $s64;

        i29 = i19 + 1;

        $s65 = r0[i15];

        r0[i19] = $s65;

        i28 = i15 - 1;

        r0[i15] = s27;

        i15 = i28;

        goto label23;

     label28:
        r0[i17] = s13;

        i26 = i15 - 1;

        r0[i15] = s27;

        i15 = i26;

        i29 = i19;

        goto label23;

     label29:
        if i18 >= i3 goto label35;

        if i15 <= i4 goto label35;

     label30:
        $s60 = r0[i18];

        if $s60 != s13 goto label31;

        i18 = i18 + 1;

        goto label30;

     label31:
        $s59 = r0[i15];

        if $s59 != s14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i21 = i18;

        i20 = i18;

     label33:
        if i21 > i15 goto label43;

        s23 = r0[i21];

        if s23 != s14 goto label40;

     label34:
        $s66 = r0[i15];

        if $s66 != s14 goto label36;

        i24 = i15 - 1;

        if i15 != i21 goto label42;

        i15 = i24;

        i18 = i20;

     label35:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, i18, i15);

        return;

     label36:
        $s67 = r0[i15];

        if $s67 != s13 goto label39;

        $s69 = r0[i20];

        r0[i21] = $s69;

        i22 = i20 + 1;

        r0[i20] = s13;

     label37:
        i25 = i15 - 1;

        r0[i15] = s14;

        i15 = i25;

     label38:
        i21 = i21 + 1;

        i20 = i22;

        goto label33;

     label39:
        $s68 = r0[i15];

        r0[i21] = $s68;

        i22 = i20;

        goto label37;

     label40:
        if s23 != s13 goto label41;

        $s58 = r0[i20];

        r0[i21] = $s58;

        i22 = i20 + 1;

        r0[i20] = s13;

        goto label38;

     label41:
        i22 = i20;

        goto label38;

     label42:
        i15 = i24;

        goto label34;

     label43:
        i18 = i20;

        goto label35;

     label44:
        i18 = i19;

        goto label17;

     label45:
        i15 = i34;

        goto label16;

     label46:
        i31 = i33;

        goto label13;
    }

    private static int findAnyZero(double[], int, int)
    {
        double[] r0;
        int i0, i1, i2, $i3;
        double d0;
        byte $b4, $b5;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $i3 = i0 + i1;

        i2 = $i3 >>> 1;

        d0 = r0[i2];

        $b4 = d0 cmpg 0.0;

        if $b4 >= 0 goto label2;

        i0 = i2 + 1;

        goto label1;

     label2:
        $b5 = d0 cmpl 0.0;

        if $b5 <= 0 goto label3;

        i1 = i2 - 1;

        goto label1;

     label3:
        return i2;
    }

    private static int findAnyZero(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, $i3;
        float f0;
        byte $b4, $b5;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $i3 = i0 + i1;

        i2 = $i3 >>> 1;

        f0 = r0[i2];

        $b4 = f0 cmpg 0.0F;

        if $b4 >= 0 goto label2;

        i0 = i2 + 1;

        goto label1;

     label2:
        $b5 = f0 cmpl 0.0F;

        if $b5 <= 0 goto label3;

        i1 = i2 - 1;

        goto label1;

     label3:
        return i2;
    }

    public static void sort(byte[])
    {
        byte[] r0;
        int $i0, $i1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = -1 + $i0;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, i0, $i3);

        return;
    }

    public static void sort(char[])
    {
        char[] r0;
        int $i0, $i1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $i1 = -1 + $i0;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, i0, $i3);

        return;
    }

    public static void sort(double[])
    {
        double[] r0;
        int $i0, $i1;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        $i1 = -1 + $i0;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(double[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(double[], int, int)
    {
        double[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(double[],int,int)>(r0, i0, $i3);

        return;
    }

    public static void sort(float[])
    {
        float[] r0;
        int $i0, $i1;

        r0 := @parameter0: float[];

        $i0 = lengthof r0;

        $i1 = -1 + $i0;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(float[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(float[], int, int)
    {
        float[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(float[],int,int)>(r0, i0, $i3);

        return;
    }

    public static void sort(int[])
    {
        int[] r0;
        int $i0, $i1;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $i1 = -1 + $i0;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(int[], int, int)
    {
        int[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, i0, $i3);

        return;
    }

    public static void sort(long[])
    {
        long[] r0;
        int $i0, $i1;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        $i1 = -1 + $i0;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(long[], int, int)
    {
        long[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, i0, $i3);

        return;
    }

    public static void sort(short[])
    {
        short[] r0;
        int $i0, $i1;

        r0 := @parameter0: short[];

        $i0 = lengthof r0;

        $i1 = -1 + $i0;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(short[], int, int)
    {
        short[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void sortNegZeroAndNaN(double[], int, int)
    {
        double[] r0;
        int i0, i1, i3, i4, i5, i6, i7, i8, i9, i10, i11;
        long l2, $l15;
        double d0, $d1, $d2;
        byte $b12, $b13, $b14, $b16;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(0.0);

        i3 = 0;

        i4 = i0;

        i5 = i1;

     label01:
        if i4 > i5 goto label04;

        d0 = r0[i4];

        $b14 = d0 cmpl 0.0;

        if $b14 != 0 goto label03;

        $l15 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b16 = l2 cmp $l15;

        if $b16 != 0 goto label03;

        r0[i4] = 0.0;

        i3 = i3 + 1;

        i10 = i4;

        i11 = i5;

     label02:
        i4 = i10 + 1;

        i5 = i11;

        goto label01;

     label03:
        $b13 = d0 cmpl d0;

        if $b13 == 0 goto label10;

        i10 = i4 - 1;

        $d2 = r0[i5];

        r0[i4] = $d2;

        i11 = i5 - 1;

        r0[i5] = #NaN;

        goto label02;

     label04:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, i0, i5);

        if i3 != 0 goto label06;

     label05:
        return;

     label06:
        i6 = staticinvoke <java.util.DualPivotQuicksort: int findAnyZero(double[],int,int)>(r0, i0, i5);

        i7 = i6 - 1;

     label07:
        if i7 < i0 goto label08;

        $d1 = r0[i7];

        $b12 = $d1 cmpl 0.0;

        if $b12 != 0 goto label08;

        i6 = i7;

        i7 = i7 + -1;

        goto label07;

     label08:
        i8 = i6;

        i9 = i6 + i3;

     label09:
        if i8 >= i9 goto label05;

        r0[i8] = 0.0;

        i8 = i8 + 1;

        goto label09;

     label10:
        i10 = i4;

        i11 = i5;

        goto label02;
    }

    private static void sortNegZeroAndNaN(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i15;
        float f0, $f1, $f2;
        byte $b12, $b13, $b14;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(0.0F);

        i3 = 0;

        i4 = i0;

        i5 = i1;

     label01:
        if i4 > i5 goto label04;

        f0 = r0[i4];

        $b14 = f0 cmpl 0.0F;

        if $b14 != 0 goto label03;

        $i15 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        if i2 != $i15 goto label03;

        r0[i4] = 0.0F;

        i3 = i3 + 1;

        i10 = i4;

        i11 = i5;

     label02:
        i4 = i10 + 1;

        i5 = i11;

        goto label01;

     label03:
        $b13 = f0 cmpl f0;

        if $b13 == 0 goto label10;

        i10 = i4 - 1;

        $f2 = r0[i5];

        r0[i4] = $f2;

        i11 = i5 - 1;

        r0[i5] = #NaNF;

        goto label02;

     label04:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, i0, i5);

        if i3 != 0 goto label06;

     label05:
        return;

     label06:
        i6 = staticinvoke <java.util.DualPivotQuicksort: int findAnyZero(float[],int,int)>(r0, i0, i5);

        i7 = i6 - 1;

     label07:
        if i7 < i0 goto label08;

        $f1 = r0[i7];

        $b12 = $f1 cmpl 0.0F;

        if $b12 != 0 goto label08;

        i6 = i7;

        i7 = i7 + -1;

        goto label07;

     label08:
        i8 = i6;

        i9 = i6 + i3;

     label09:
        if i8 >= i9 goto label05;

        r0[i8] = 0.0F;

        i8 = i8 + 1;

        goto label09;

     label10:
        i10 = i4;

        i11 = i5;

        goto label02;
    }

    public static void <clinit>()
    {
        <java.util.DualPivotQuicksort: int NUM_SHORT_VALUES> = 65536;

        <java.util.DualPivotQuicksort: int NUM_CHAR_VALUES> = 65536;

        <java.util.DualPivotQuicksort: int NUM_BYTE_VALUES> = 256;

        <java.util.DualPivotQuicksort: int INSERTION_SORT_THRESHOLD> = 32;

        <java.util.DualPivotQuicksort: int COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR> = 32768;

        <java.util.DualPivotQuicksort: int COUNTING_SORT_THRESHOLD_FOR_BYTE> = 128;

        return;
    }
}
