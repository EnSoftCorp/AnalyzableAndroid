public class gov.nist.javax.sip.parser.MimeVersionParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.MimeVersionParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.MimeVersionParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.MimeVersionParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.MimeVersionParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.MimeVersionParser r0;
        gov.nist.javax.sip.header.MimeVersion r1, $r4;
        java.lang.Throwable r2, $r14;
        javax.sip.InvalidArgumentException r3, $r16;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r5, $r7, $r9, $r11, $r12;
        java.lang.String $r6, $r10, $r15;
        int $i0, $i1;
        java.text.ParseException $r17;

        r0 := @this: gov.nist.javax.sip.parser.MimeVersionParser;

        $z0 = <gov.nist.javax.sip.parser.MimeVersionParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MimeVersionParser: void dbg_enter(java.lang.String)>("MimeVersionParser.parse");

     label01:
        $r4 = new gov.nist.javax.sip.header.MimeVersion;

        specialinvoke $r4.<gov.nist.javax.sip.header.MimeVersion: void <init>()>();

        r1 = $r4;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.MimeVersionParser: void headerName(int)>(2060);

        virtualinvoke r1.<gov.nist.javax.sip.header.MimeVersion: void setHeaderName(java.lang.String)>("MIME-Version");

     label03:
        $r5 = r0.<gov.nist.javax.sip.parser.MimeVersionParser: gov.nist.core.LexerCore lexer>;

        $r6 = virtualinvoke $r5.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        virtualinvoke r1.<gov.nist.javax.sip.header.MimeVersion: void setMajorVersion(int)>($i0);

        $r7 = r0.<gov.nist.javax.sip.parser.MimeVersionParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(46);

        $r9 = r0.<gov.nist.javax.sip.parser.MimeVersionParser: gov.nist.core.LexerCore lexer>;

        $r10 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        virtualinvoke r1.<gov.nist.javax.sip.header.MimeVersion: void setMinorVersion(int)>($i1);

     label04:
        $r11 = r0.<gov.nist.javax.sip.parser.MimeVersionParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

        $r12 = r0.<gov.nist.javax.sip.parser.MimeVersionParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(10);

     label05:
        $z1 = <gov.nist.javax.sip.parser.MimeVersionParser: boolean debug>;

        if $z1 == 0 goto label06;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MimeVersionParser: void dbg_leave(java.lang.String)>("MimeVersionParser.parse");

     label06:
        return r1;

     label07:
        $r16 := @caughtexception;

        r3 = $r16;

     label08:
        $r15 = virtualinvoke r3.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.parser.MimeVersionParser: java.text.ParseException createParseException(java.lang.String)>($r15);

        throw $r17;

     label09:
        $r14 := @caughtexception;

        r2 = $r14;

        $z2 = <gov.nist.javax.sip.parser.MimeVersionParser: boolean debug>;

        if $z2 == 0 goto label10;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MimeVersionParser: void dbg_leave(java.lang.String)>("MimeVersionParser.parse");

     label10:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
    }
}
