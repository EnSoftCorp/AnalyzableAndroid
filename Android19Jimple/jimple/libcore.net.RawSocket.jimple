public class libcore.net.RawSocket extends java.lang.Object implements java.io.Closeable
{
    public static final short ETH_P_ARP;
    public static final short ETH_P_IP;
    private final java.io.FileDescriptor fd;
    private final dalvik.system.CloseGuard guard;
    private final java.lang.String mInterfaceName;
    private final short mProtocolType;

    public void <init>(java.lang.String, short) throws java.net.SocketException
    {
        libcore.net.RawSocket r0;
        java.lang.String r1, $r4;
        short s0, $s1;
        dalvik.system.CloseGuard $r2, $r6;
        java.io.FileDescriptor $r3, $r5;

        r0 := @this: libcore.net.RawSocket;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<libcore.net.RawSocket: dalvik.system.CloseGuard guard> = $r2;

        r0.<libcore.net.RawSocket: java.lang.String mInterfaceName> = r1;

        r0.<libcore.net.RawSocket: short mProtocolType> = s0;

        $r3 = new java.io.FileDescriptor;

        specialinvoke $r3.<java.io.FileDescriptor: void <init>()>();

        r0.<libcore.net.RawSocket: java.io.FileDescriptor fd> = $r3;

        $r5 = r0.<libcore.net.RawSocket: java.io.FileDescriptor fd>;

        $s1 = r0.<libcore.net.RawSocket: short mProtocolType>;

        $r4 = r0.<libcore.net.RawSocket: java.lang.String mInterfaceName>;

        staticinvoke <libcore.net.RawSocket: void create(java.io.FileDescriptor,short,java.lang.String)>($r5, $s1, $r4);

        $r6 = r0.<libcore.net.RawSocket: dalvik.system.CloseGuard guard>;

        virtualinvoke $r6.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    private static native void create(java.io.FileDescriptor, short, java.lang.String) throws java.net.SocketException;

    private static native int recvPacket(java.io.FileDescriptor, byte[], int, int, int, int);

    private static native int sendPacket(java.io.FileDescriptor, java.lang.String, short, byte[], byte[], int, int);

    public void close() throws java.io.IOException
    {
        libcore.net.RawSocket r0;
        dalvik.system.CloseGuard $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: libcore.net.RawSocket;

        $r1 = r0.<libcore.net.RawSocket: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $r2 = r0.<libcore.net.RawSocket: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void closeSocket(java.io.FileDescriptor)>($r2);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        libcore.net.RawSocket r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: libcore.net.RawSocket;

     label1:
        $r2 = r0.<libcore.net.RawSocket: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<libcore.net.RawSocket: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<libcore.net.RawSocket: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int read(byte[], int, int, int, int)
    {
        libcore.net.RawSocket r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.io.FileDescriptor $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: libcore.net.RawSocket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("packet == null");

        throw $r8;

     label1:
        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

        if i2 <= 65535 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port out of range: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r2 = r0.<libcore.net.RawSocket: java.io.FileDescriptor fd>;

        $i5 = staticinvoke <libcore.net.RawSocket: int recvPacket(java.io.FileDescriptor,byte[],int,int,int,int)>($r2, r1, i0, i1, i2, i3);

        return $i5;
    }

    public int write(byte[], byte[], int, int)
    {
        libcore.net.RawSocket r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i5, $i6;
        short $s4;
        java.lang.String $r3, $r10;
        java.io.FileDescriptor $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.NullPointerException $r9, $r11;

        r0 := @this: libcore.net.RawSocket;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("destMac == null");

        throw $r11;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("packet == null");

        throw $r9;

     label2:
        $i2 = lengthof r2;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $i3 = lengthof r1;

        if $i3 == 6 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAC length must be 6: ");

        $i6 = lengthof r1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        $r4 = r0.<libcore.net.RawSocket: java.io.FileDescriptor fd>;

        $r3 = r0.<libcore.net.RawSocket: java.lang.String mInterfaceName>;

        $s4 = r0.<libcore.net.RawSocket: short mProtocolType>;

        $i5 = staticinvoke <libcore.net.RawSocket: int sendPacket(java.io.FileDescriptor,java.lang.String,short,byte[],byte[],int,int)>($r4, $r3, $s4, r1, r2, i0, i1);

        return $i5;
    }

    public static void <clinit>()
    {
        <libcore.net.RawSocket: short ETH_P_IP> = 2048;

        <libcore.net.RawSocket: short ETH_P_ARP> = 2054;

        return;
    }
}
