public class android.net.http.CertificateChainValidator extends java.lang.Object
{
    private static final android.net.http.CertificateChainValidator sInstance;
    private static final javax.net.ssl.DefaultHostnameVerifier sVerifier;

    static void <clinit>()
    {
        android.net.http.CertificateChainValidator $r0;
        javax.net.ssl.DefaultHostnameVerifier $r1;

        $r0 = new android.net.http.CertificateChainValidator;

        specialinvoke $r0.<android.net.http.CertificateChainValidator: void <init>()>();

        <android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator sInstance> = $r0;

        $r1 = new javax.net.ssl.DefaultHostnameVerifier;

        specialinvoke $r1.<javax.net.ssl.DefaultHostnameVerifier: void <init>()>();

        <android.net.http.CertificateChainValidator: javax.net.ssl.DefaultHostnameVerifier sVerifier> = $r1;

        return;
    }

    private void <init>()
    {
        android.net.http.CertificateChainValidator r0;

        r0 := @this: android.net.http.CertificateChainValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void closeSocketThrowException(javax.net.ssl.SSLSocket, java.lang.String) throws java.io.IOException
    {
        android.net.http.CertificateChainValidator r0;
        javax.net.ssl.SSLSocket r1;
        java.lang.String r2;
        javax.net.ssl.SSLSession r3;
        javax.net.ssl.SSLHandshakeException $r4;

        r0 := @this: android.net.http.CertificateChainValidator;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label2;

        r3 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<javax.net.ssl.SSLSession: void invalidate()>();

     label1:
        virtualinvoke r1.<javax.net.ssl.SSLSocket: void close()>();

     label2:
        $r4 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r4.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>(r2);

        throw $r4;
    }

    private void closeSocketThrowException(javax.net.ssl.SSLSocket, java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.net.http.CertificateChainValidator r0;
        javax.net.ssl.SSLSocket r1;
        java.lang.String r2, r3;

        r0 := @this: android.net.http.CertificateChainValidator;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r2 == null goto label2;

     label1:
        specialinvoke r0.<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>(r1, r2);

        return;

     label2:
        r2 = r3;

        goto label1;
    }

    public static android.net.http.CertificateChainValidator getInstance()
    {
        android.net.http.CertificateChainValidator $r0;

        $r0 = <android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator sInstance>;

        return $r0;
    }

    public static void handleTrustStorageUpdate()
    {
        javax.net.ssl.X509TrustManager r1;
        boolean $z0;
        com.android.org.conscrypt.TrustManagerImpl $r2;
        java.security.KeyManagementException $r3;

     label1:
        r1 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()>();

        $z0 = r1 instanceof com.android.org.conscrypt.TrustManagerImpl;

        if $z0 == 0 goto label2;

        $r2 = (com.android.org.conscrypt.TrustManagerImpl) r1;

        virtualinvoke $r2.<com.android.org.conscrypt.TrustManagerImpl: void handleTrustStorageUpdate()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.security.KeyManagementException from label1 to label2 with label3;
    }

    public static android.net.http.SslError verifyServerCertificates(byte[][], java.lang.String, java.lang.String) throws java.io.IOException
    {
        byte[][] r0;
        java.lang.String r1, r2;
        java.security.cert.X509Certificate[] r3;
        java.security.cert.CertificateException r4, $r11;
        java.security.cert.CertificateFactory r5;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r6;
        android.net.http.SslError $r7;
        java.io.ByteArrayInputStream $r8;
        byte[] $r9;
        java.security.cert.Certificate $r10;
        java.security.cert.X509Certificate $r12;
        java.io.IOException $r13;

        r0 := @parameter0: byte[][];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad certificate chain");

        throw $r6;

     label2:
        $i2 = lengthof r0;

        r3 = newarray (java.security.cert.X509Certificate)[$i2];

     label3:
        r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label8;

        $r8 = new java.io.ByteArrayInputStream;

        $r9 = r0[i0];

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        $r10 = virtualinvoke r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r8);

        $r12 = (java.security.cert.X509Certificate) $r10;

        r3[i0] = $r12;

     label6:
        i0 = i0 + 1;

        goto label5;

     label7:
        $r11 := @caughtexception;

        r4 = $r11;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("can\'t read certificate", r4);

        throw $r13;

     label8:
        $r7 = staticinvoke <android.net.http.CertificateChainValidator: android.net.http.SslError verifyServerDomainAndCertificates(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r3, r1, r2);

        return $r7;

        catch java.security.cert.CertificateException from label3 to label4 with label7;
        catch java.security.cert.CertificateException from label5 to label6 with label7;
    }

    private static android.net.http.SslError verifyServerDomainAndCertificates(java.security.cert.X509Certificate[], java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.security.cert.X509Certificate[] r0;
        java.lang.String r1, r2;
        java.security.cert.X509Certificate r3;
        boolean z0, z1, z2, $z3;
        javax.net.ssl.X509TrustManager r5;
        com.android.org.conscrypt.TrustManagerImpl $r6;
        android.net.http.SslError $r8, $r12;
        javax.net.ssl.DefaultHostnameVerifier $r9;
        java.security.GeneralSecurityException $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.security.cert.X509Certificate[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = r0[0];

        if r3 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("certificate for this site is null");

        throw $r11;

     label1:
        z0 = 0;

        if r1 == null goto label2;

        z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        z0 = 0;

        if z1 != 0 goto label2;

        $r9 = <android.net.http.CertificateChainValidator: javax.net.ssl.DefaultHostnameVerifier sVerifier>;

        z2 = virtualinvoke $r9.<javax.net.ssl.DefaultHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>(r1, r3);

        z0 = 0;

        if z2 == 0 goto label2;

        z0 = 1;

     label2:
        if z0 != 0 goto label3;

        $r8 = new android.net.http.SslError;

        specialinvoke $r8.<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>(2, r3);

        return $r8;

     label3:
        r5 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()>();

        $z3 = r5 instanceof com.android.org.conscrypt.TrustManagerImpl;

        if $z3 == 0 goto label5;

        $r6 = (com.android.org.conscrypt.TrustManagerImpl) r5;

        virtualinvoke $r6.<com.android.org.conscrypt.TrustManagerImpl: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r0, r2, r1);

     label4:
        goto label8;

     label5:
        interfaceinvoke r5.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r0, r2);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        $r12 = new android.net.http.SslError;

        specialinvoke $r12.<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>(3, r3);

        return $r12;

     label8:
        return null;

        catch java.security.GeneralSecurityException from label3 to label4 with label7;
        catch java.security.GeneralSecurityException from label5 to label6 with label7;
    }

    public android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection, javax.net.ssl.SSLSocket, java.lang.String) throws java.io.IOException
    {
        android.net.http.CertificateChainValidator r0;
        android.net.http.HttpsConnection r1;
        javax.net.ssl.SSLSocket r2;
        java.lang.String r3;
        java.security.cert.Certificate[] r4;
        javax.net.ssl.SSLSession $r5, $r6;
        boolean $z0;
        java.security.cert.X509Certificate[] $r7, $r8;
        android.net.http.SslError $r9;
        int $i0;
        java.security.cert.Certificate $r10, $r12;
        android.net.http.SslCertificate $r11;
        java.security.cert.X509Certificate $r13;

        r0 := @this: android.net.http.CertificateChainValidator;

        r1 := @parameter0: android.net.http.HttpsConnection;

        r2 := @parameter1: javax.net.ssl.SSLSocket;

        r3 := @parameter2: java.lang.String;

        $r5 = virtualinvoke r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $z0 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: boolean isValid()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>(r2, "failed to perform SSL handshake");

     label1:
        $r6 = virtualinvoke r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        r4 = interfaceinvoke $r6.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        if r4 == null goto label2;

        $i0 = lengthof r4;

        if $i0 != 0 goto label4;

     label2:
        specialinvoke r0.<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>(r2, "failed to retrieve peer certificates");

     label3:
        $r7 = (java.security.cert.X509Certificate[]) r4;

        $r8 = (java.security.cert.X509Certificate[]) $r7;

        $r9 = staticinvoke <android.net.http.CertificateChainValidator: android.net.http.SslError verifyServerDomainAndCertificates(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>($r8, r3, "RSA");

        return $r9;

     label4:
        if r1 == null goto label3;

        $r10 = r4[0];

        if $r10 == null goto label3;

        $r11 = new android.net.http.SslCertificate;

        $r12 = r4[0];

        $r13 = (java.security.cert.X509Certificate) $r12;

        specialinvoke $r11.<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>($r13);

        virtualinvoke r1.<android.net.http.HttpsConnection: void setCertificate(android.net.http.SslCertificate)>($r11);

        goto label3;
    }
}
