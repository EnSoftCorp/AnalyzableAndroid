public abstract class org.apache.xml.serializer.ToStream extends org.apache.xml.serializer.SerializerBase
{
    private static final java.lang.String COMMENT_BEGIN;
    private static final java.lang.String COMMENT_END;
    private static final char[] s_systemLineSep;
    protected boolean m_cdataStartCalled;
    protected org.apache.xml.serializer.CharInfo m_charInfo;
    protected org.apache.xml.serializer.ToStream$BoolStack m_disableOutputEscapingStates;
    org.apache.xml.serializer.EncodingInfo m_encodingInfo;
    protected boolean m_escaping;
    private boolean m_expandDTDEntities;
    protected boolean m_inDoctype;
    boolean m_isUTF8;
    protected boolean m_ispreserve;
    protected boolean m_isprevtext;
    protected char[] m_lineSep;
    protected int m_lineSepLen;
    protected boolean m_lineSepUse;
    java.io.OutputStream m_outputStream;
    protected org.apache.xml.serializer.ToStream$BoolStack m_preserves;
    boolean m_shouldFlush;
    protected boolean m_spaceBeforeClose;
    boolean m_startNewLine;
    private boolean m_writer_set_by_user;

    static void <clinit>()
    {
        org.apache.xml.serializer.SecuritySupport $r0;
        java.lang.String $r1;
        char[] $r2;

        <org.apache.xml.serializer.ToStream: java.lang.String COMMENT_END> = "-->";

        <org.apache.xml.serializer.ToStream: java.lang.String COMMENT_BEGIN> = "<!--";

        $r0 = staticinvoke <org.apache.xml.serializer.SecuritySupport: org.apache.xml.serializer.SecuritySupport getInstance()>();

        $r1 = virtualinvoke $r0.<org.apache.xml.serializer.SecuritySupport: java.lang.String getSystemProperty(java.lang.String)>("line.separator");

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <org.apache.xml.serializer.ToStream: char[] s_systemLineSep> = $r2;

        return;
    }

    public void <init>()
    {
        org.apache.xml.serializer.ToStream r0;
        org.apache.xml.serializer.ToStream$BoolStack $r1, $r3;
        org.apache.xml.serializer.EncodingInfo $r2;
        char[] $r4, $r5;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void <init>()>();

        $r1 = new org.apache.xml.serializer.ToStream$BoolStack;

        specialinvoke $r1.<org.apache.xml.serializer.ToStream$BoolStack: void <init>()>();

        r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_disableOutputEscapingStates> = $r1;

        $r2 = new org.apache.xml.serializer.EncodingInfo;

        specialinvoke $r2.<org.apache.xml.serializer.EncodingInfo: void <init>(java.lang.String,java.lang.String,char)>(null, null, 0);

        r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.EncodingInfo m_encodingInfo> = $r2;

        $r3 = new org.apache.xml.serializer.ToStream$BoolStack;

        specialinvoke $r3.<org.apache.xml.serializer.ToStream$BoolStack: void <init>()>();

        r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_preserves> = $r3;

        r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_isprevtext> = 0;

        $r4 = <org.apache.xml.serializer.ToStream: char[] s_systemLineSep>;

        r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep> = $r4;

        r0.<org.apache.xml.serializer.ToStream: boolean m_lineSepUse> = 1;

        $r5 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = lengthof $r5;

        r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen> = $i0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_shouldFlush> = 1;

        r0.<org.apache.xml.serializer.ToStream: boolean m_spaceBeforeClose> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_inDoctype> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_isUTF8> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataStartCalled> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_expandDTDEntities> = 1;

        r0.<org.apache.xml.serializer.ToStream: boolean m_escaping> = 1;

        return;
    }

    private void DTDprolog() throws org.xml.sax.SAXException, java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1;
        boolean $z0, $z1;
        int $i0;
        char[] $r2;
        org.apache.xml.serializer.ElemContext $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_needToOutputDocTypeDecl>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r4 = $r3.<org.apache.xml.serializer.ElemContext: java.lang.String m_elementName>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void outputDocTypeDecl(java.lang.String,boolean)>($r4, 0);

        r0.<org.apache.xml.serializer.ToStream: boolean m_needToOutputDocTypeDecl> = 0;

     label1:
        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_inDoctype>;

        if $z1 == 0 goto label2;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(" [");

        $r2 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r1.<java.io.Writer: void write(char[],int,int)>($r2, 0, $i0);

        r0.<org.apache.xml.serializer.ToStream: boolean m_inDoctype> = 0;

     label2:
        return;
    }

    private int accumDefaultEscape(java.io.Writer, char, int, char[], int, boolean, boolean) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1;
        char c0, c4;
        int i1, i2, i3, i5, $i6, $i7, $i8, $i9;
        char[] r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.xml.serializer.utils.Messages r3, r5;
        java.lang.Object[] r4, r6;
        java.lang.String $r7, $r10, $r13, $r15, $r16, $r19, $r21, $r23, $r24;
        org.apache.xml.serializer.ElemContext $r8;
        org.apache.xml.serializer.CharInfo $r9, $r11;
        java.lang.StringBuilder $r12, $r14, $r17, $r20;
        java.io.IOException $r18, $r22;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r2 := @parameter3: char[];

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        i3 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: int accumDefaultEntity(java.io.Writer,char,int,char[],int,boolean,boolean)>(r1, c0, i1, r2, i2, z0, z1);

        if i1 != i3 goto label03;

        $z3 = staticinvoke <org.apache.xml.serializer.Encodings: boolean isHighUTF16Surrogate(char)>(c0);

        if $z3 == 0 goto label04;

        $i8 = i1 + 1;

        if $i8 < i2 goto label01;

        r5 = <org.apache.xml.serializer.utils.Utils: org.apache.xml.serializer.utils.Messages messages>;

        r6 = newarray (java.lang.Object)[1];

        $r24 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        r6[0] = $r24;

        $r22 = new java.io.IOException;

        $r23 = virtualinvoke r5.<org.apache.xml.serializer.utils.Messages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_INVALID_UTF16_SURROGATE", r6);

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label01:
        $i9 = i1 + 1;

        c4 = r2[$i9];

        $z8 = staticinvoke <org.apache.xml.serializer.Encodings: boolean isLowUTF16Surrogate(char)>(c4);

        if $z8 != 0 goto label02;

        r3 = <org.apache.xml.serializer.utils.Utils: org.apache.xml.serializer.utils.Messages messages>;

        r4 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c4);

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r4[0] = $r21;

        $r18 = new java.io.IOException;

        $r19 = virtualinvoke r3.<org.apache.xml.serializer.utils.Messages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_INVALID_UTF16_SURROGATE", r4);

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label02:
        i5 = staticinvoke <org.apache.xml.serializer.Encodings: int toCodePoint(char,char)>(c0, c4);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i5);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r13);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        i3 = i3 + 2;

     label03:
        return i3;

     label04:
        $z2 = staticinvoke <org.apache.xml.serializer.ToStream: boolean isCharacterInC0orC1Range(char)>(c0);

        if $z2 != 0 goto label05;

        $z5 = staticinvoke <org.apache.xml.serializer.ToStream: boolean isNELorLSEPCharacter(char)>(c0);

        if $z5 == 0 goto label07;

     label05:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

     label06:
        $i6 = i3 + 1;

        return $i6;

     label07:
        $z4 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean escapingNotNeeded(char)>(c0);

        if $z4 == 0 goto label09;

        if z0 == 0 goto label08;

        $r11 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $z7 = virtualinvoke $r11.<org.apache.xml.serializer.CharInfo: boolean shouldMapTextChar(int)>(c0);

        if $z7 != 0 goto label09;

     label08:
        if z0 != 0 goto label10;

        $r9 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $z6 = virtualinvoke $r9.<org.apache.xml.serializer.CharInfo: boolean shouldMapAttrChar(int)>(c0);

        if $z6 == 0 goto label10;

     label09:
        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $i7 = $r8.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        if $i7 <= 0 goto label10;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#");

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r10);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label06;

     label10:
        virtualinvoke r1.<java.io.Writer: void write(int)>(c0);

        goto label06;
    }

    private void addCdataSectionElement(java.lang.String, java.util.Vector)
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r4, r5;
        java.util.Vector r2;
        java.util.StringTokenizer r3, $r6;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Vector;

        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, "{}", 0);

        r3 = $r6;

        r4 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        r5 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label1:
        if r5 != null goto label3;

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>(null);

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>(r4);

        return;

     label2:
        r5 = null;

        goto label1;

     label3:
        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>(r4);

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>(r5);

        return;
    }

    private static boolean isCharacterInC0orC1Range(char)
    {
        char c0, c1;
        boolean z0;

        c0 := @parameter0: char;

        z0 = 1;

        if c0 == 9 goto label1;

        if c0 == 10 goto label1;

        if c0 != 13 goto label3;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        if c0 < 127 goto label4;

        if c0 <= 159 goto label2;

     label4:
        c1 = (char) 1;

        if c0 < c1 goto label5;

        if c0 <= 31 goto label2;

     label5:
        return 0;
    }

    private boolean isEscapingDisabled()
    {
        org.apache.xml.serializer.ToStream r0;
        org.apache.xml.serializer.ToStream$BoolStack $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r1 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_disableOutputEscapingStates>;

        $z0 = virtualinvoke $r1.<org.apache.xml.serializer.ToStream$BoolStack: boolean peekOrFalse()>();

        return $z0;
    }

    private static boolean isNELorLSEPCharacter(char)
    {
        char c0;

        c0 := @parameter0: char;

        if c0 == 133 goto label1;

        if c0 != 8232 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void printSpace(int) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        int i0, i1;
        java.io.Writer r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r1.<java.io.Writer: void write(int)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private int processDirty(char[], int, int, char, int, boolean) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1, $r3;
        int i0, i1, i3, i4, i5, $i6, $i7, $i8;
        char c2;
        boolean z0;
        java.io.Writer $r2, $r4, $r5;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 = i3 + 1;

        if i1 <= i4 goto label1;

        i5 = i1 - i4;

        $r5 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r5.<java.io.Writer: void write(char[],int,int)>(r1, i4, i5);

     label1:
        if 10 != c2 goto label2;

        if z0 == 0 goto label2;

        $r4 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r3 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i8 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke $r4.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i8);

        return i1;

     label2:
        $r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $i6 = specialinvoke r0.<org.apache.xml.serializer.ToStream: int accumDefaultEscape(java.io.Writer,char,int,char[],int,boolean,boolean)>($r2, c2, i1, r1, i0, z0, 0);

        $i7 = -1 + $i6;

        return $i7;
    }

    private int processLineFeed(char[], int, int, java.io.Writer) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1, $r3, $r4;
        int i0, i1, $i2, $i3;
        java.io.Writer r2;
        boolean $z0;
        char $c4;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.io.Writer;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_lineSepUse>;

        if $z0 == 0 goto label1;

        $i2 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        if $i2 != 1 goto label2;

        $r4 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $c4 = $r4[0];

        if $c4 != 10 goto label2;

     label1:
        return i1;

     label2:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i0, i1);

        $r3 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i3 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i3);

        return i0;
    }

    private void resetToStream()
    {
        org.apache.xml.serializer.ToStream r0;
        org.apache.xml.serializer.ToStream$BoolStack $r1, $r4;
        char[] $r2, $r3;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataStartCalled> = 0;

        $r1 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_disableOutputEscapingStates>;

        virtualinvoke $r1.<org.apache.xml.serializer.ToStream$BoolStack: void clear()>();

        r0.<org.apache.xml.serializer.ToStream: boolean m_escaping> = 1;

        r0.<org.apache.xml.serializer.ToStream: boolean m_expandDTDEntities> = 1;

        r0.<org.apache.xml.serializer.ToStream: boolean m_inDoctype> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_isprevtext> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_isUTF8> = 0;

        $r2 = <org.apache.xml.serializer.ToStream: char[] s_systemLineSep>;

        r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep> = $r2;

        $r3 = <org.apache.xml.serializer.ToStream: char[] s_systemLineSep>;

        $i0 = lengthof $r3;

        r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen> = $i0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_lineSepUse> = 1;

        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_preserves>;

        virtualinvoke $r4.<org.apache.xml.serializer.ToStream$BoolStack: void clear()>();

        r0.<org.apache.xml.serializer.ToStream: boolean m_shouldFlush> = 1;

        r0.<org.apache.xml.serializer.ToStream: boolean m_spaceBeforeClose> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_startNewLine> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_writer_set_by_user> = 0;

        return;
    }

    private void setCdataSectionElements(java.lang.String, java.util.Properties)
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r3, $r8, $r10;
        java.util.Properties r2;
        java.util.Vector r4, $r6;
        int i0, i1, $i3, $i4;
        boolean z0, $z1;
        java.lang.StringBuffer r5, $r7;
        char c2;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Properties;

        r3 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

        if r3 == null goto label8;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r4 = $r6;

        i0 = virtualinvoke r3.<java.lang.String: int length()>();

        z0 = 0;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        r5 = $r7;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        c2 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i1);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c2);

        if $z1 == 0 goto label3;

        if z0 != 0 goto label4;

        $i4 = virtualinvoke r5.<java.lang.StringBuffer: int length()>();

        if $i4 <= 0 goto label2;

        $r10 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void addCdataSectionElement(java.lang.String,java.util.Vector)>($r10, r4);

        virtualinvoke r5.<java.lang.StringBuffer: void setLength(int)>(0);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        if 123 != c2 goto label5;

        z0 = 1;

     label4:
        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        goto label2;

     label5:
        if 125 != c2 goto label4;

        z0 = 0;

        goto label4;

     label6:
        $i3 = virtualinvoke r5.<java.lang.StringBuffer: int length()>();

        if $i3 <= 0 goto label7;

        $r8 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void addCdataSectionElement(java.lang.String,java.util.Vector)>($r8, r4);

        virtualinvoke r5.<java.lang.StringBuffer: void setLength(int)>(0);

     label7:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setCdataSectionElements(java.util.Vector)>(r4);

     label8:
        return;
    }

    private void setOutputStreamInternal(java.io.OutputStream, boolean)
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.OutputStream r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String r2, $r8, $r9, $r11, $r12, $r21;
        java.io.Writer r4, r6, r7;
        java.io.UnsupportedEncodingException r5, $r22, $r24;
        org.apache.xml.serializer.WriterToASCI $r10;
        java.io.OutputStreamWriter $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r19, $r20;
        java.io.PrintStream $r16;
        org.apache.xml.serializer.WriterToUTF8Buffered $r23;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        r0.<org.apache.xml.serializer.ToStream: java.io.OutputStream m_outputStream> = r1;

        r2 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getOutputProperty(java.lang.String)>("encoding");

        $r8 = "UTF-8";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label01;

        $r23 = new org.apache.xml.serializer.WriterToUTF8Buffered;

        specialinvoke $r23.<org.apache.xml.serializer.WriterToUTF8Buffered: void <init>(java.io.OutputStream)>(r1);

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setWriterInternal(java.io.Writer,boolean)>($r23, 0);

        return;

     label01:
        $r9 = "WINDOWS-1250";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label02;

        $r11 = "US-ASCII";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 != 0 goto label02;

        $r12 = "ASCII";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label03;

     label02:
        $r10 = new org.apache.xml.serializer.WriterToASCI;

        specialinvoke $r10.<org.apache.xml.serializer.WriterToASCI: void <init>(java.io.OutputStream)>(r1);

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setWriterInternal(java.io.Writer,boolean)>($r10, 0);

        return;

     label03:
        if r2 == null goto label12;

     label04:
        r7 = staticinvoke <org.apache.xml.serializer.Encodings: java.io.Writer getWriter(java.io.OutputStream,java.lang.String)>(r1, r2);

     label05:
        r4 = r7;

     label06:
        if r4 != null goto label09;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: encoding \"");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not supported");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", using ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UTF-8");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r21);

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setEncoding(java.lang.String)>("UTF-8");

     label07:
        r6 = staticinvoke <org.apache.xml.serializer.Encodings: java.io.Writer getWriter(java.io.OutputStream,java.lang.String)>(r1, "UTF-8");

     label08:
        r4 = r6;

     label09:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setWriterInternal(java.io.Writer,boolean)>(r4, 0);

        return;

     label10:
        $r22 := @caughtexception;

        r4 = null;

        goto label06;

     label11:
        $r24 := @caughtexception;

        r5 = $r24;

        virtualinvoke r5.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label09;

     label12:
        $r13 = new java.io.OutputStreamWriter;

        specialinvoke $r13.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setWriterInternal(java.io.Writer,boolean)>($r13, 0);

        return;

        catch java.io.UnsupportedEncodingException from label04 to label05 with label10;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label11;
    }

    private void setWriterInternal(java.io.Writer, boolean)
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1, r2, $r6;
        boolean z0, z1, $z2, $z3;
        org.apache.xml.serializer.SerializerTrace $r3, $r5;
        org.apache.xml.serializer.SerializerTraceWriter $r4;
        org.apache.xml.serializer.WriterChain $r7;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.Writer;

        z0 := @parameter1: boolean;

        r0.<org.apache.xml.serializer.ToStream: boolean m_writer_set_by_user> = z0;

        r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer> = r1;

        $r3 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r3 == null goto label3;

        z1 = 1;

        r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

     label1:
        $z2 = r2 instanceof org.apache.xml.serializer.WriterChain;

        if $z2 == 0 goto label2;

        $z3 = r2 instanceof org.apache.xml.serializer.SerializerTraceWriter;

        if $z3 == 0 goto label4;

        z1 = 0;

     label2:
        if z1 == 0 goto label3;

        $r4 = new org.apache.xml.serializer.SerializerTraceWriter;

        $r6 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        specialinvoke $r4.<org.apache.xml.serializer.SerializerTraceWriter: void <init>(java.io.Writer,org.apache.xml.serializer.SerializerTrace)>($r6, $r5);

        r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer> = $r4;

     label3:
        return;

     label4:
        $r7 = (org.apache.xml.serializer.WriterChain) r2;

        r2 = interfaceinvoke $r7.<org.apache.xml.serializer.WriterChain: java.io.Writer getWriter()>();

        goto label1;
    }

    private void writeOutCleanChars(char[], int, int) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1;
        int i0, i1, i2, i3;
        java.io.Writer $r2;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 + 1;

        if i2 >= i0 goto label1;

        i3 = i0 - i2;

        $r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i2, i3);

     label1:
        return;
    }

    int accumDefaultEntity(java.io.Writer, char, int, char[], int, boolean, boolean) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1;
        char c0;
        int i1, i2, $i3;
        char[] r2, $r7;
        boolean z0, z1, $z2, $z3;
        java.lang.String r3;
        org.apache.xml.serializer.CharInfo $r4, $r5, $r6;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r2 := @parameter3: char[];

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        if z1 != 0 goto label3;

        if 10 != c0 goto label3;

        $r7 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i3 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r1.<java.io.Writer: void write(char[],int,int)>($r7, 0, $i3);

     label1:
        i1 = i1 + 1;

     label2:
        return i1;

     label3:
        if z0 == 0 goto label4;

        $r6 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $z3 = virtualinvoke $r6.<org.apache.xml.serializer.CharInfo: boolean shouldMapTextChar(int)>(c0);

        if $z3 != 0 goto label5;

     label4:
        if z0 != 0 goto label2;

        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $z2 = virtualinvoke $r4.<org.apache.xml.serializer.CharInfo: boolean shouldMapAttrChar(int)>(c0);

        if $z2 == 0 goto label2;

     label5:
        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        r3 = virtualinvoke $r5.<org.apache.xml.serializer.CharInfo: java.lang.String getOutputStringForChar(char)>(c0);

        if r3 == null goto label2;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r3);

        goto label1;
    }

    public boolean addAttributeAlways(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, r4, r5, r7, r9, r12, $r18;
        boolean z0, z1, $z2, $z3;
        int i0, i1, $i2, $i3, $i4;
        org.xml.sax.SAXException r6, $r27;
        org.apache.xml.serializer.NamespaceMappings$MappingRecord r8;
        org.apache.xml.serializer.SerializerTrace r10, $r14;
        org.apache.xml.serializer.AttributesImplSerializer $r11, $r13, $r25, $r26, $r28;
        org.apache.xml.serializer.NamespaceMappings $r16, $r19, $r23;
        org.apache.xml.serializer.ElemContext $r17;
        java.lang.StringBuilder $r20, $r21, $r22, $r24;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        if r1 == null goto label01;

        if r2 == null goto label01;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i4 != 0 goto label05;

     label01:
        $r11 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        i0 = virtualinvoke $r11.<org.apache.xml.serializer.AttributesImplSerializer: int getIndex(java.lang.String)>(r3);

     label02:
        if i0 < 0 goto label06;

        r10 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        r12 = null;

        if r10 == null goto label03;

        $r26 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        r12 = virtualinvoke $r26.<org.apache.xml.serializer.AttributesImplSerializer: java.lang.String getValue(int)>(i0);

        $z3 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z3 == 0 goto label03;

        r12 = null;

     label03:
        $r25 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        virtualinvoke $r25.<org.apache.xml.serializer.AttributesImplSerializer: void setValue(int,java.lang.String)>(i0, r5);

        z1 = 0;

        if r12 == null goto label04;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void firePseudoAttributes()>();

     label04:
        return z1;

     label05:
        $r28 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        i0 = virtualinvoke $r28.<org.apache.xml.serializer.AttributesImplSerializer: int getIndex(java.lang.String,java.lang.String)>(r1, r2);

        goto label02;

     label06:
        if z0 == 0 goto label09;

        i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(58);

        if i1 <= 0 goto label08;

        r7 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r16 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        r8 = virtualinvoke $r16.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$MappingRecord getMappingFromPrefix(java.lang.String)>(r7);

        if r8 == null goto label08;

        $i3 = r8.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: int m_declarationDepth>;

        $r17 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $i2 = $r17.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        if $i3 != $i2 goto label08;

        $r18 = r8.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: java.lang.String m_uri>;

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label08;

        $r19 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        r9 = virtualinvoke $r19.<org.apache.xml.serializer.NamespaceMappings: java.lang.String lookupPrefix(java.lang.String)>(r1);

        if r9 != null goto label07;

        $r23 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        r9 = virtualinvoke $r23.<org.apache.xml.serializer.NamespaceMappings: java.lang.String generateNextPrefix()>();

     label07:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String ensureAttributesNamespaceIsDeclared(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

     label09:
        $r13 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        virtualinvoke $r13.<org.apache.xml.serializer.AttributesImplSerializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5);

        z1 = 1;

        $r14 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r14 == null goto label04;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void firePseudoAttributes()>();

        return 1;

     label10:
        $r27 := @caughtexception;

        r6 = $r27;

        virtualinvoke r6.<org.xml.sax.SAXException: void printStackTrace()>();

        goto label09;

        catch org.xml.sax.SAXException from label08 to label09 with label10;
    }

    public void addCdataSectionElements(java.lang.String)
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, $r2, $r4, $r8;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void initCdataElems(java.lang.String)>(r1);

     label1:
        $r2 = r0.<org.apache.xml.serializer.ToStream: java.lang.String m_StringOfCDATASections>;

        if $r2 != null goto label2;

        r0.<org.apache.xml.serializer.ToStream: java.lang.String m_StringOfCDATASections> = r1;

        return;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.apache.xml.serializer.ToStream: java.lang.String m_StringOfCDATASections>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.xml.serializer.ToStream: java.lang.String m_StringOfCDATASections> = $r8;

        return;
    }

    public void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, r4, r5;
        java.io.IOException r6, $r9;
        java.io.Writer r7;
        boolean $z0;
        int $i0;
        char[] $r8;
        org.xml.sax.SAXException $r10;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_inExternalDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r7 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void DTDprolog()>();

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>("<!ATTLIST ");

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>(r1);

        virtualinvoke r7.<java.io.Writer: void write(int)>(32);

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>(r2);

        virtualinvoke r7.<java.io.Writer: void write(int)>(32);

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>(r3);

     label2:
        if r4 == null goto label4;

     label3:
        virtualinvoke r7.<java.io.Writer: void write(int)>(32);

        virtualinvoke r7.<java.io.Writer: void write(java.lang.String)>(r4);

     label4:
        virtualinvoke r7.<java.io.Writer: void write(int)>(62);

        $r8 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r7.<java.io.Writer: void write(char[],int,int)>($r8, 0, $i0);

     label5:
        return;

     label6:
        $r9 := @caughtexception;

        r6 = $r9;

        $r10 = new org.xml.sax.SAXException;

        specialinvoke $r10.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r6);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    protected void cdata(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1;
        int i0, i1, $i3, $i4;
        byte b2;
        java.io.IOException r2, $r8;
        org.apache.xml.serializer.ElemContext $r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xml.serializer.SerializerTrace $r4;
        char $c5, $c6;
        java.io.Writer $r5;
        org.xml.sax.SAXException $r7;
        java.lang.String $r9;
        org.apache.xml.serializer.utils.Messages $r10;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        b2 = 1;

     label01:
        $r3 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z0 = $r3.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z0 == 0 goto label02;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeStartTag()>();

        $r6 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r6.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen> = 0;

     label02:
        r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve> = 1;

        $z1 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean shouldIndent()>();

        if $z1 == 0 goto label03;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void indent()>();

     label03:
        if i1 < 1 goto label16;

     label04:
        $c6 = r1[i0];

        $z5 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean escapingNotNeeded(char)>($c6);

        if $z5 == 0 goto label16;

     label05:
        if b2 == 0 goto label07;

     label06:
        $z4 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z4 != 0 goto label07;

        $r5 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen> = 1;

     label07:
        $z2 = specialinvoke r0.<org.apache.xml.serializer.ToStream: boolean isEscapingDisabled()>();

        if $z2 == 0 goto label12;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void charactersRaw(char[],int,int)>(r1, i0, i1);

     label08:
        if b2 == 0 goto label10;

     label09:
        $i3 = i0 + i1;

        $i4 = -1 + $i3;

        $c5 = r1[$i4];

        if $c5 != 93 goto label10;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label10:
        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r4 == null goto label15;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void fireCDATAEvent(char[],int,int)>(r1, i0, i1);

     label11:
        return;

     label12:
        $z3 = r0.<org.apache.xml.serializer.ToStream: boolean m_lineSepUse>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void writeNormalizedChars(char[],int,int,boolean,boolean)>(r1, i0, i1, 1, $z3);

     label13:
        goto label08;

     label14:
        $r8 := @caughtexception;

        r2 = $r8;

        $r7 = new org.xml.sax.SAXException;

        $r10 = <org.apache.xml.serializer.utils.Utils: org.apache.xml.serializer.utils.Messages messages>;

        $r9 = virtualinvoke $r10.<org.apache.xml.serializer.utils.Messages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_OIERROR", null);

        specialinvoke $r7.<org.xml.sax.SAXException: void <init>(java.lang.String,java.lang.Exception)>($r9, r2);

        throw $r7;

     label15:
        return;

     label16:
        b2 = 0;

        goto label05;

        catch java.io.IOException from label01 to label02 with label14;
        catch java.io.IOException from label02 to label03 with label14;
        catch java.io.IOException from label04 to label05 with label14;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.io.IOException from label07 to label08 with label14;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.io.IOException from label12 to label13 with label14;
    }

    public void characters(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        char[] $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_inEntityRef>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_expandDTDEntities>;

        if $z1 != 0 goto label1;

        return;

     label1:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = r0.<org.apache.xml.serializer.ToStream: char[] m_charsBuff>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

        $i2 = i0 * 2;

        $i3 = 1 + $i2;

        $r5 = newarray (char)[$i3];

        r0.<org.apache.xml.serializer.ToStream: char[] m_charsBuff> = $r5;

     label2:
        $r3 = r0.<org.apache.xml.serializer.ToStream: char[] m_charsBuff>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r3, 0);

        $r4 = r0.<org.apache.xml.serializer.ToStream: char[] m_charsBuff>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void characters(char[],int,int)>($r4, 0, i0);

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1;
        int i0, i1, i2, i3, i4, i6, i7;
        java.io.IOException r2, $r24;
        java.io.Writer r3, $r9;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        char c5, c8;
        org.apache.xml.serializer.ElemContext $r4, $r5, $r8, $r20, $r22;
        org.apache.xml.serializer.ToStream$BoolStack $r6;
        org.apache.xml.serializer.SerializerTrace $r7, $r10;
        org.apache.xml.serializer.CharInfo $r11, $r15, $r18, $r19;
        java.lang.String $r12, $r13, $r16, $r17, $r21;
        org.apache.xml.serializer.EncodingInfo $r14;
        org.xml.sax.SAXException $r23;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 == 0 goto label01;

        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_inEntityRef>;

        if $z1 == 0 goto label02;

        $z13 = r0.<org.apache.xml.serializer.ToStream: boolean m_expandDTDEntities>;

        if $z13 != 0 goto label02;

     label01:
        return;

     label02:
        r0.<org.apache.xml.serializer.ToStream: boolean m_docIsEmpty> = 0;

        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z3 = $r4.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z3 == 0 goto label05;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeStartTag()>();

        $r20 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r20.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen> = 0;

     label03:
        $z4 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataStartCalled>;

        if $z4 != 0 goto label04;

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z6 = $r5.<org.apache.xml.serializer.ElemContext: boolean m_isCdataSection>;

        if $z6 == 0 goto label06;

     label04:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void cdata(char[],int,int)>(r1, i0, i1);

        return;

     label05:
        $z2 = r0.<org.apache.xml.serializer.ToStream: boolean m_needToCallStartDocument>;

        if $z2 == 0 goto label03;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startDocumentInternal()>();

        goto label03;

     label06:
        $z5 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z5 == 0 goto label07;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label07:
        $r6 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_disableOutputEscapingStates>;

        $z7 = virtualinvoke $r6.<org.apache.xml.serializer.ToStream$BoolStack: boolean peekOrFalse()>();

        if $z7 != 0 goto label08;

        $z8 = r0.<org.apache.xml.serializer.ToStream: boolean m_escaping>;

        if $z8 != 0 goto label09;

     label08:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void charactersRaw(char[],int,int)>(r1, i0, i1);

        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r7 == null goto label01;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void fireCharEvent(char[],int,int)>(r1, i0, i1);

        return;

     label09:
        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z9 = $r8.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z9 == 0 goto label10;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeStartTag()>();

        $r22 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r22.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen> = 0;

     label10:
        i2 = i0 + i1;

        i3 = i0 - 1;

     label11:
        r3 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

     label12:
        z0 = 1;

        i4 = i0;

     label13:
        if i4 >= i2 goto label47;

        if z0 == 0 goto label47;

     label14:
        c8 = r1[i4];

        $r19 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $z12 = virtualinvoke $r19.<org.apache.xml.serializer.CharInfo: boolean shouldMapTextChar(int)>(c8);

        if $z12 == 0 goto label43;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        $r18 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $r21 = virtualinvoke $r18.<org.apache.xml.serializer.CharInfo: java.lang.String getOutputStringForChar(char)>(c8);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r21);

     label15:
        i3 = i4;

        i4 = i4 + 1;

        z0 = 0;

        goto label13;

     label16:
        i3 = specialinvoke r0.<org.apache.xml.serializer.ToStream: int processLineFeed(char[],int,int,java.io.Writer)>(r1, i4, i3, r3);

     label17:
        i4 = i4 + 1;

        goto label13;

     label18:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("&#13;");

     label19:
        i3 = i4;

        i4 = i4 + 1;

        goto label13;

     label20:
        r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve> = 1;

     label21:
        if i4 >= i2 goto label38;

     label22:
        c5 = r1[i4];

        $r11 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $z10 = virtualinvoke $r11.<org.apache.xml.serializer.CharInfo: boolean shouldMapTextChar(int)>(c5);

        if $z10 == 0 goto label49;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        $r15 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $r16 = virtualinvoke $r15.<org.apache.xml.serializer.CharInfo: java.lang.String getOutputStringForChar(char)>(c5);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r16);

     label23:
        i3 = i4;

        goto label48;

     label24:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("&#");

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c5);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r17);

        virtualinvoke r3.<java.io.Writer: void write(int)>(59);

     label25:
        i3 = i4;

        goto label48;

     label26:
        i3 = specialinvoke r0.<org.apache.xml.serializer.ToStream: int processLineFeed(char[],int,int,java.io.Writer)>(r1, i4, i3, r3);

     label27:
        goto label48;

     label28:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("&#13;");

     label29:
        i3 = i4;

        goto label48;

     label30:
        if c5 < 127 goto label48;

        if c5 > 159 goto label33;

     label31:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("&#");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c5);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r13);

        virtualinvoke r3.<java.io.Writer: void write(int)>(59);

     label32:
        i3 = i4;

        goto label48;

     label33:
        if c5 != 8232 goto label36;

     label34:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("&#8232;");

     label35:
        i3 = i4;

        goto label48;

     label36:
        $r14 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.EncodingInfo m_encodingInfo>;

        $z11 = virtualinvoke $r14.<org.apache.xml.serializer.EncodingInfo: boolean isInEncoding(char)>(c5);

        if $z11 != 0 goto label48;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)>(r1, i4, i3);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("&#");

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c5);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r12);

        virtualinvoke r3.<java.io.Writer: void write(int)>(59);

     label37:
        i3 = i4;

        goto label48;

     label38:
        i6 = i3 + 1;

        if i4 <= i6 goto label40;

        i7 = i4 - i6;

     label39:
        $r9 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r9.<java.io.Writer: void write(char[],int,int)>(r1, i6, i7);

     label40:
        r0.<org.apache.xml.serializer.ToStream: boolean m_isprevtext> = 1;

     label41:
        $r10 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r10 == null goto label01;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void fireCharEvent(char[],int,int)>(r1, i0, i1);

        return;

     label42:
        $r24 := @caughtexception;

        r2 = $r24;

        $r23 = new org.xml.sax.SAXException;

        specialinvoke $r23.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r2);

        throw $r23;

     label43:
        lookupswitch(c8)
        {
            case 9: goto label46;
            case 10: goto label16;
            case 13: goto label18;
            case 32: goto label45;
            default: goto label44;
        };

     label44:
        z0 = 0;

        goto label13;

     label45:
        i4 = i4 + 1;

        goto label13;

     label46:
        i4 = i4 + 1;

        goto label13;

     label47:
        if i4 < i2 goto label20;

        if z0 != 0 goto label21;

        goto label20;

     label48:
        i4 = i4 + 1;

        goto label21;

     label49:
        if c5 > 31 goto label30;

        tableswitch(c5)
        {
            case 9: goto label48;
            case 10: goto label26;
            case 11: goto label24;
            case 12: goto label24;
            case 13: goto label28;
            default: goto label24;
        };

        catch java.io.IOException from label11 to label12 with label42;
        catch java.io.IOException from label14 to label15 with label42;
        catch java.io.IOException from label16 to label17 with label42;
        catch java.io.IOException from label18 to label19 with label42;
        catch java.io.IOException from label20 to label21 with label42;
        catch java.io.IOException from label22 to label23 with label42;
        catch java.io.IOException from label24 to label25 with label42;
        catch java.io.IOException from label26 to label27 with label42;
        catch java.io.IOException from label28 to label29 with label42;
        catch java.io.IOException from label31 to label32 with label42;
        catch java.io.IOException from label34 to label35 with label42;
        catch java.io.IOException from label36 to label37 with label42;
        catch java.io.IOException from label39 to label40 with label42;
        catch java.io.IOException from label40 to label41 with label42;
    }

    protected void charactersRaw(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1;
        int i0, i1;
        java.io.IOException r2, $r6;
        boolean $z0, $z1;
        org.apache.xml.serializer.ElemContext $r3, $r5;
        java.io.Writer $r4;
        org.xml.sax.SAXException $r7;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_inEntityRef>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z1 = $r3.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeStartTag()>();

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r5.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen> = 0;

     label2:
        r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve> = 1;

        $r4 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r4.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1);

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new org.xml.sax.SAXException;

        specialinvoke $r7.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r2);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    protected void closeCDATA() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.IOException r1, $r3;
        java.io.Writer $r2;
        org.xml.sax.SAXException $r4;

        r0 := @this: org.apache.xml.serializer.ToStream;

     label1:
        $r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("]]>");

        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen> = 0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r1);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void closeStartTag() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.IOException r1, $r14;
        int i0;
        org.apache.xml.serializer.ElemContext $r2, $r8, $r12;
        boolean $z0, $z1, $z2, $z4;
        org.apache.xml.serializer.SerializerTrace $r3;
        org.apache.xml.serializer.AttributesImplSerializer $r4, $r9;
        java.io.Writer $r5, $r10;
        java.util.Hashtable $r6;
        org.apache.xml.serializer.ToStream$BoolStack $r7;
        java.lang.String $r11;
        org.xml.sax.SAXException $r13;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r2 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z0 = $r2.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z0 == 0 goto label8;

     label1:
        $r3 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r3 == null goto label2;

        $r12 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r11 = $r12.<org.apache.xml.serializer.ElemContext: java.lang.String m_elementName>;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void fireStartElem(java.lang.String)>($r11);

     label2:
        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        i0 = virtualinvoke $r4.<org.apache.xml.serializer.AttributesImplSerializer: int getLength()>();

     label3:
        if i0 <= 0 goto label5;

     label4:
        $r10 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void processAttributes(java.io.Writer,int)>($r10, i0);

        $r9 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        virtualinvoke $r9.<org.apache.xml.serializer.AttributesImplSerializer: void clear()>();

     label5:
        $r5 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r5.<java.io.Writer: void write(int)>(62);

     label6:
        $r6 = r0.<org.apache.xml.serializer.ToStream: java.util.Hashtable m_CdataElems>;

        if $r6 == null goto label7;

        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z4 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean isCdataSection()>();

        $r8.<org.apache.xml.serializer.ElemContext: boolean m_isCdataSection> = $z4;

     label7:
        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_doIndent>;

        if $z1 == 0 goto label8;

        r0.<org.apache.xml.serializer.ToStream: boolean m_isprevtext> = 0;

        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_preserves>;

        $z2 = r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve>;

        virtualinvoke $r7.<org.apache.xml.serializer.ToStream$BoolStack: boolean push(boolean)>($z2);

     label8:
        return;

     label9:
        $r14 := @caughtexception;

        r1 = $r14;

        $r13 = new org.xml.sax.SAXException;

        specialinvoke $r13.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r1);

        throw $r13;

        catch java.io.IOException from label1 to label2 with label9;
        catch java.io.IOException from label2 to label3 with label9;
        catch java.io.IOException from label4 to label5 with label9;
        catch java.io.IOException from label5 to label6 with label9;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1;
        int i0, i1, i2, i3, i4, i5, $i7, $i10;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.io.IOException r2, $r8;
        java.io.Writer r3;
        char c6, $c8, $c9;
        org.apache.xml.serializer.ElemContext $r4, $r6;
        org.apache.xml.serializer.SerializerTrace $r5;
        org.xml.sax.SAXException $r7;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0;

        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_inEntityRef>;

        if $z1 == 0 goto label02;

     label01:
        return;

     label02:
        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z2 = $r4.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z2 == 0 goto label14;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeStartTag()>();

        $r6 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r6.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen> = 0;

     label03:
        i3 = i0 + i1;

        z0 = 0;

     label04:
        $z5 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z5 == 0 goto label05;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label05:
        $z4 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean shouldIndent()>();

        if $z4 == 0 goto label06;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void indent()>();

     label06:
        r3 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("<!--");

     label07:
        i4 = i0;

     label08:
        if i4 >= i3 goto label16;

        if z0 == 0 goto label11;

     label09:
        $c8 = r1[i4];

        if $c8 != 45 goto label11;

        $i10 = i4 - i0;

        virtualinvoke r3.<java.io.Writer: void write(char[],int,int)>(r1, i0, $i10);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(" -");

     label10:
        i0 = i4 + 1;

     label11:
        c6 = r1[i4];

     label12:
        if c6 != 45 goto label15;

        z0 = 1;

     label13:
        i4 = i4 + 1;

        goto label08;

     label14:
        $z3 = r0.<org.apache.xml.serializer.ToStream: boolean m_needToCallStartDocument>;

        if $z3 == 0 goto label03;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startDocumentInternal()>();

        r0.<org.apache.xml.serializer.ToStream: boolean m_needToCallStartDocument> = 0;

        goto label03;

     label15:
        z0 = 0;

        goto label13;

     label16:
        if i1 <= 0 goto label19;

        i5 = i3 - i0;

        if i5 <= 0 goto label18;

     label17:
        virtualinvoke r3.<java.io.Writer: void write(char[],int,int)>(r1, i0, i5);

     label18:
        $i7 = i3 - 1;

        $c9 = r1[$i7];

        if $c9 != 45 goto label19;

        virtualinvoke r3.<java.io.Writer: void write(int)>(32);

     label19:
        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("-->");

     label20:
        r0.<org.apache.xml.serializer.ToStream: boolean m_startNewLine> = 1;

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r5 == null goto label01;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void fireCommentEvent(char[],int,int)>(r1, i2, i1);

        return;

     label21:
        $r8 := @caughtexception;

        r2 = $r8;

        $r7 = new org.xml.sax.SAXException;

        specialinvoke $r7.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r2);

        throw $r7;

        catch java.io.IOException from label04 to label05 with label21;
        catch java.io.IOException from label05 to label06 with label21;
        catch java.io.IOException from label06 to label07 with label21;
        catch java.io.IOException from label09 to label10 with label21;
        catch java.io.IOException from label11 to label12 with label21;
        catch java.io.IOException from label17 to label18 with label21;
        catch java.io.IOException from label18 to label19 with label21;
        catch java.io.IOException from label19 to label20 with label21;
    }

    public void elementDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2;
        java.io.IOException r3, $r6;
        java.io.Writer r4;
        boolean $z0;
        int $i0;
        char[] $r5;
        org.xml.sax.SAXException $r7;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_inExternalDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r4 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void DTDprolog()>();

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>("<!ELEMENT ");

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>(r1);

        virtualinvoke r4.<java.io.Writer: void write(int)>(32);

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>(r2);

        virtualinvoke r4.<java.io.Writer: void write(int)>(62);

        $r5 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r4.<java.io.Writer: void write(char[],int,int)>($r5, 0, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new org.xml.sax.SAXException;

        specialinvoke $r7.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r3);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void endCDATA() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label1:
        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataStartCalled> = 0;

        return;
    }

    public void endDTD() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.IOException r1, $r6;
        java.io.Writer r2;
        boolean $z0, $z1;
        int $i0;
        char[] $r3;
        org.apache.xml.serializer.ElemContext $r4;
        java.lang.String $r5;
        org.xml.sax.SAXException $r7;

        r0 := @this: org.apache.xml.serializer.ToStream;

     label1:
        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_needToOutputDocTypeDecl>;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r5 = $r4.<org.apache.xml.serializer.ElemContext: java.lang.String m_elementName>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void outputDocTypeDecl(java.lang.String,boolean)>($r5, 0);

        r0.<org.apache.xml.serializer.ToStream: boolean m_needToOutputDocTypeDecl> = 0;

     label2:
        r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_inDoctype>;

        if $z1 != 0 goto label5;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("]>");

     label3:
        $r3 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0);

     label4:
        return;

     label5:
        virtualinvoke r2.<java.io.Writer: void write(int)>(62);

     label6:
        goto label3;

     label7:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new org.xml.sax.SAXException;

        specialinvoke $r7.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r1);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void endElement(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void endElement(java.lang.String,java.lang.String,java.lang.String)>(null, null, r1);

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, $r22;
        java.io.IOException r4, $r23;
        java.io.Writer r5, $r20;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int i0, $i1, $i2, $i3;
        org.apache.xml.serializer.ElemContext $r6, $r8, $r9, $r10, $r12, $r15, $r19;
        org.apache.xml.serializer.NamespaceMappings $r7;
        org.apache.xml.serializer.SerializerTrace $r11, $r16;
        org.apache.xml.serializer.ToStream$BoolStack $r13, $r14;
        org.apache.xml.serializer.AttributesImplSerializer $r17, $r18;
        org.xml.sax.SAXException $r21;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_inEntityRef>;

        if $z1 == 0 goto label01;

        return;

     label01:
        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        $r6 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $i1 = $r6.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        virtualinvoke $r7.<org.apache.xml.serializer.NamespaceMappings: void popNamespaces(int,org.xml.sax.ContentHandler)>($i1, null);

     label02:
        r5 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z2 = $r8.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z2 == 0 goto label14;

        $r16 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r16 == null goto label03;

        $r19 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r22 = $r19.<org.apache.xml.serializer.ElemContext: java.lang.String m_elementName>;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void fireStartElem(java.lang.String)>($r22);

     label03:
        $r17 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        i0 = virtualinvoke $r17.<org.apache.xml.serializer.AttributesImplSerializer: int getLength()>();

     label04:
        if i0 <= 0 goto label06;

     label05:
        $r20 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void processAttributes(java.io.Writer,int)>($r20, i0);

        $r18 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        virtualinvoke $r18.<org.apache.xml.serializer.AttributesImplSerializer: void clear()>();

     label06:
        $z8 = r0.<org.apache.xml.serializer.ToStream: boolean m_spaceBeforeClose>;

        if $z8 == 0 goto label11;

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>(" />");

     label07:
        $r9 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z5 = $r9.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z5 != 0 goto label09;

        $z6 = r0.<org.apache.xml.serializer.ToStream: boolean m_doIndent>;

        if $z6 == 0 goto label09;

        $r13 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_preserves>;

        $z7 = virtualinvoke $r13.<org.apache.xml.serializer.ToStream$BoolStack: boolean isEmpty()>();

        if $z7 == 0 goto label18;

        z0 = 0;

     label08:
        r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve> = z0;

     label09:
        r0.<org.apache.xml.serializer.ToStream: boolean m_isprevtext> = 0;

        $r11 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r11 == null goto label10;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void fireEndElem(java.lang.String)>(r3);

     label10:
        $r10 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r12 = $r10.<org.apache.xml.serializer.ElemContext: org.apache.xml.serializer.ElemContext m_prev>;

        r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext> = $r12;

        return;

     label11:
        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>("/>");

     label12:
        goto label07;

     label13:
        $r23 := @caughtexception;

        r4 = $r23;

        $r21 = new org.xml.sax.SAXException;

        specialinvoke $r21.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r4);

        throw $r21;

     label14:
        $z3 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z3 == 0 goto label15;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label15:
        $z4 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean shouldIndent()>();

        if $z4 == 0 goto label16;

        $r15 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $i2 = $r15.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        $i3 = -1 + $i2;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void indent(int)>($i3);

     label16:
        virtualinvoke r5.<java.io.Writer: void write(int)>(60);

        virtualinvoke r5.<java.io.Writer: void write(int)>(47);

        virtualinvoke r5.<java.io.Writer: void write(java.lang.String)>(r3);

        virtualinvoke r5.<java.io.Writer: void write(int)>(62);

     label17:
        goto label07;

     label18:
        $r14 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_preserves>;

        z0 = virtualinvoke $r14.<org.apache.xml.serializer.ToStream$BoolStack: boolean pop()>();

        goto label08;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label14 to label15 with label13;
        catch java.io.IOException from label15 to label16 with label13;
        catch java.io.IOException from label16 to label17 with label13;
    }

    public void endNonEscaping() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        org.apache.xml.serializer.ToStream$BoolStack $r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r1 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_disableOutputEscapingStates>;

        virtualinvoke $r1.<org.apache.xml.serializer.ToStream$BoolStack: boolean pop()>();

        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected java.lang.String ensureAttributesNamespaceIsDeclared(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, r4, r5, r6, $r11, $r16;
        int i0, $i1;
        org.apache.xml.serializer.NamespaceMappings $r7, $r8, $r13;
        java.lang.StringBuilder $r9, $r10, $r12, $r14, $r15, $r17;
        boolean $z2;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r1 == null goto label6;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 0 goto label6;

        i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        if i0 >= 0 goto label2;

        r4 = "";

     label1:
        if i0 <= 0 goto label4;

        $r13 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        r6 = virtualinvoke $r13.<org.apache.xml.serializer.NamespaceMappings: java.lang.String lookupNamespace(java.lang.String)>(r4);

        if r6 == null goto label3;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return null;

     label2:
        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        goto label1;

     label3:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean startPrefixMapping(java.lang.String,java.lang.String,boolean)>(r4, r1, 0);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>("http://www.w3.org/2000/xmlns/", r4, $r16, "CDATA", r1, 0);

        return r4;

     label4:
        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        r5 = virtualinvoke $r7.<org.apache.xml.serializer.NamespaceMappings: java.lang.String lookupPrefix(java.lang.String)>(r1);

        if r5 != null goto label5;

        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        r5 = virtualinvoke $r8.<org.apache.xml.serializer.NamespaceMappings: java.lang.String generateNextPrefix()>();

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean startPrefixMapping(java.lang.String,java.lang.String,boolean)>(r5, r1, 0);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>("http://www.w3.org/2000/xmlns/", r5, $r11, "CDATA", r1, 0);

     label5:
        return r5;

     label6:
        return null;
    }

    void ensurePrefixIsDeclared(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, r4, r5, r6;
        int i0, $i1;
        boolean z0, $z1;
        org.apache.xml.serializer.NamespaceMappings $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label06;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 0 goto label06;

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>(":");

        if i0 >= 0 goto label07;

        z0 = 1;

     label01:
        if z0 == 0 goto label08;

        r3 = "";

     label02:
        if r3 == null goto label06;

        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        r4 = virtualinvoke $r7.<org.apache.xml.serializer.NamespaceMappings: java.lang.String lookupNamespace(java.lang.String)>(r3);

        if r4 == null goto label03;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label06;

     label03:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startPrefixMapping(java.lang.String,java.lang.String)>(r3, r1);

        if z0 == 0 goto label09;

        r5 = "xmlns";

     label04:
        if z0 == 0 goto label10;

        r6 = "xmlns";

     label05:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean addAttributeAlways(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>("http://www.w3.org/2000/xmlns/", r5, r6, "CDATA", r1, 0);

     label06:
        return;

     label07:
        z0 = 0;

        goto label01;

     label08:
        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        goto label02;

     label09:
        r5 = r3;

        goto label04;

     label10:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label05;
    }

    protected boolean escapingNotNeeded(char)
    {
        org.apache.xml.serializer.ToStream r0;
        char c0;
        org.apache.xml.serializer.EncodingInfo $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        c0 := @parameter0: char;

        if c0 >= 127 goto label3;

        if c0 >= 32 goto label1;

        if 10 == c0 goto label1;

        if 13 == c0 goto label1;

        if 9 != c0 goto label2;

     label1:
        return 1;

     label2:
        return 0;

     label3:
        $r1 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.EncodingInfo m_encodingInfo>;

        $z0 = virtualinvoke $r1.<org.apache.xml.serializer.EncodingInfo: boolean isInEncoding(char)>(c0);

        return $z0;
    }

    public void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3;
        java.io.IOException r4, $r14;
        java.io.Writer $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13;
        int $i0;
        char[] $r10;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

     label1:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void DTDprolog()>();

        $r5 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>("<!ENTITY ");

        $r6 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>(r1);

     label2:
        if r2 == null goto label6;

     label3:
        $r12 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r12.<java.io.Writer: void write(java.lang.String)>(" PUBLIC \"");

        $r13 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r13.<java.io.Writer: void write(java.lang.String)>(r2);

     label4:
        $r9 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>("\" >");

        $r11 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r10 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke $r11.<java.io.Writer: void write(char[],int,int)>($r10, 0, $i0);

     label5:
        return;

     label6:
        $r7 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(" SYSTEM \"");

        $r8 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>(r3);

     label7:
        goto label4;

     label8:
        $r14 := @caughtexception;

        r4 = $r14;

        virtualinvoke r4.<java.io.IOException: void printStackTrace()>();

        return;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    protected void firePseudoAttributes()
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.StringBuffer r3, $r7;
        int i0, $i1;
        char[] r4;
        org.apache.xml.serializer.SerializerTrace $r5, $r12;
        java.io.Writer $r6;
        org.apache.xml.serializer.AttributesImplSerializer $r8;
        java.lang.String $r10;
        org.apache.xml.serializer.ToStream$WritertoStringBuffer $r11;
        org.xml.sax.SAXException $r13;
        java.io.IOException $r14;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r5 == null goto label5;

     label1:
        $r6 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r6.<java.io.Writer: void flush()>();

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        r3 = $r7;

        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        i0 = virtualinvoke $r8.<org.apache.xml.serializer.AttributesImplSerializer: int getLength()>();

     label2:
        if i0 <= 0 goto label4;

     label3:
        $r11 = new org.apache.xml.serializer.ToStream$WritertoStringBuffer;

        specialinvoke $r11.<org.apache.xml.serializer.ToStream$WritertoStringBuffer: void <init>(org.apache.xml.serializer.ToStream,java.lang.StringBuffer)>(r0, r3);

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void processAttributes(java.io.Writer,int)>($r11, i0);

     label4:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        $r10 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r4 = virtualinvoke $r10.<java.lang.String: char[] toCharArray()>();

        $r12 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        $i1 = lengthof r4;

        interfaceinvoke $r12.<org.apache.xml.serializer.SerializerTrace: void fireGenerateEvent(int,char[],int,int)>(11, r4, 0, $i1);

     label5:
        return;

     label6:
        $r13 := @caughtexception;

        return;

     label7:
        $r14 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label7;
        catch org.xml.sax.SAXException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label7;
        catch org.xml.sax.SAXException from label3 to label4 with label6;
        catch java.io.IOException from label4 to label5 with label7;
        catch org.xml.sax.SAXException from label4 to label5 with label6;
    }

    public void flushPending() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        boolean $z0, $z1, $z2;
        org.apache.xml.serializer.ElemContext $r2, $r5;
        java.io.Writer $r3, $r4;
        java.io.IOException $r6;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_needToCallStartDocument>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startDocumentInternal()>();

        r0.<org.apache.xml.serializer.ToStream: boolean m_needToCallStartDocument> = 0;

     label1:
        $r2 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z1 = $r2.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeStartTag()>();

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r5.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen> = 0;

     label2:
        $z2 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z2 == 0 goto label3;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen> = 0;

     label3:
        $r3 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        if $r3 == null goto label5;

     label4:
        $r4 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r4.<java.io.Writer: void flush()>();

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        return;

        catch java.io.IOException from label4 to label5 with label6;
    }

    protected final void flushWriter() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1;
        java.io.IOException r2, $r5;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xml.serializer.WriterToUTF8Buffered $r3, $r4;
        org.xml.sax.SAXException $r6;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        if r1 == null goto label8;

     label1:
        $z0 = r1 instanceof org.apache.xml.serializer.WriterToUTF8Buffered;

        if $z0 == 0 goto label2;

        $z3 = r0.<org.apache.xml.serializer.ToStream: boolean m_shouldFlush>;

        if $z3 == 0 goto label4;

        $r4 = (org.apache.xml.serializer.WriterToUTF8Buffered) r1;

        virtualinvoke $r4.<org.apache.xml.serializer.WriterToUTF8Buffered: void flush()>();

     label2:
        $z1 = r1 instanceof org.apache.xml.serializer.WriterToASCI;

        if $z1 == 0 goto label7;

        $z2 = r0.<org.apache.xml.serializer.ToStream: boolean m_shouldFlush>;

        if $z2 == 0 goto label8;

        virtualinvoke r1.<java.io.Writer: void flush()>();

     label3:
        return;

     label4:
        $r3 = (org.apache.xml.serializer.WriterToUTF8Buffered) r1;

        virtualinvoke $r3.<org.apache.xml.serializer.WriterToUTF8Buffered: void flushBuffer()>();

     label5:
        goto label2;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new org.xml.sax.SAXException;

        specialinvoke $r6.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r2);

        throw $r6;

     label7:
        virtualinvoke r1.<java.io.Writer: void flush()>();

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
        catch java.io.IOException from label7 to label8 with label6;
    }

    public int getIndentAmount()
    {
        org.apache.xml.serializer.ToStream r0;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_indentAmount>;

        return $i0;
    }

    public java.util.Properties getOutputFormat()
    {
        org.apache.xml.serializer.ToStream r0;
        java.util.Properties r1, r3, $r8, $r10;
        java.util.Iterator r2, r4;
        java.lang.String r5, r6, r7, $r14;
        java.util.Set $r9, $r11;
        boolean $z0, $z1;
        java.lang.Object $r12, $r15;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r8 = new java.util.Properties;

        specialinvoke $r8.<java.util.Properties: void <init>()>();

        r1 = $r8;

        $r9 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.util.Set getOutputPropDefaultKeys()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r15;

        $r14 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getOutputPropertyDefault(java.lang.String)>(r7);

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r14);

        goto label1;

     label2:
        $r10 = new java.util.Properties;

        specialinvoke $r10.<java.util.Properties: void <init>(java.util.Properties)>(r1);

        r3 = $r10;

        $r11 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.util.Set getOutputPropKeys()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r12;

        r6 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getOutputPropertyNonDefault(java.lang.String)>(r5);

        if r6 == null goto label3;

        virtualinvoke r3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label3;

     label4:
        return r3;
    }

    public java.io.OutputStream getOutputStream()
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r1 = r0.<org.apache.xml.serializer.ToStream: java.io.OutputStream m_outputStream>;

        return $r1;
    }

    public java.io.Writer getWriter()
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer $r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r1 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        return $r1;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1;
        int i0, i1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void characters(char[],int,int)>(r1, i0, i1);

        return;
    }

    protected void indent() throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        org.apache.xml.serializer.ElemContext $r1;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r1 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $i0 = $r1.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void indent(int)>($i0);

        return;
    }

    protected void indent(int) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_startNewLine>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void outputLineSep()>();

     label1:
        $i1 = r0.<org.apache.xml.serializer.ToStream: int m_indentAmount>;

        if $i1 <= 0 goto label2;

        $i2 = r0.<org.apache.xml.serializer.ToStream: int m_indentAmount>;

        $i3 = i0 * $i2;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void printSpace(int)>($i3);

     label2:
        return;
    }

    public void internalEntityDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2;
        java.io.IOException r3, $r4;
        boolean $z0;
        org.xml.sax.SAXException $r5;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_inExternalDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void DTDprolog()>();

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void outputEntityDecl(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = new org.xml.sax.SAXException;

        specialinvoke $r5.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r3);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void notationDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3;
        java.io.IOException r4, $r14;
        java.io.Writer $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13;
        int $i0;
        char[] $r10;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

     label1:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void DTDprolog()>();

        $r5 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>("<!NOTATION ");

        $r6 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>(r1);

     label2:
        if r2 == null goto label6;

     label3:
        $r12 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r12.<java.io.Writer: void write(java.lang.String)>(" PUBLIC \"");

        $r13 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r13.<java.io.Writer: void write(java.lang.String)>(r2);

     label4:
        $r9 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>("\" >");

        $r11 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r10 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke $r11.<java.io.Writer: void write(char[],int,int)>($r10, 0, $i0);

     label5:
        return;

     label6:
        $r7 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(" SYSTEM \"");

        $r8 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>(r3);

     label7:
        goto label4;

     label8:
        $r14 := @caughtexception;

        r4 = $r14;

        virtualinvoke r4.<java.io.IOException: void printStackTrace()>();

        return;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    void outputDocTypeDecl(java.lang.String, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r4, r5;
        boolean z0, $z1;
        java.io.IOException r2, $r7;
        java.io.Writer r3;
        int $i0;
        char[] $r6;
        org.xml.sax.SAXException $r8;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label01:
        r3 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("<!DOCTYPE ");

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r1);

        r4 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getDoctypePublic()>();

     label02:
        if r4 == null goto label04;

     label03:
        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(" PUBLIC \"");

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r4);

        virtualinvoke r3.<java.io.Writer: void write(int)>(34);

     label04:
        r5 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getDoctypeSystem()>();

     label05:
        if r5 == null goto label15;

        if r4 != null goto label11;

     label06:
        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(" SYSTEM \"");

     label07:
        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5);

     label08:
        if z0 == 0 goto label14;

     label09:
        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("\">");

        $r6 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r3.<java.io.Writer: void write(char[],int,int)>($r6, 0, $i0);

     label10:
        return;

     label11:
        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(" \"");

     label12:
        goto label07;

     label13:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = new org.xml.sax.SAXException;

        specialinvoke $r8.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r2);

        throw $r8;

     label14:
        virtualinvoke r3.<java.io.Writer: void write(int)>(34);

     label15:
        return;

        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label14 to label15 with label13;
    }

    void outputEntityDecl(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2;
        java.io.Writer r3;
        int $i0;
        char[] $r4;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("<!ENTITY ");

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(" \"");

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r2);

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>("\">");

        $r4 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r3.<java.io.Writer: void write(char[],int,int)>($r4, 0, $i0);

        return;
    }

    protected final void outputLineSep() throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        int $i0;
        char[] $r1;
        java.io.Writer $r2;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r1 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, 0, $i0);

        return;
    }

    public void processAttributes(java.io.Writer, int) throws java.io.IOException, org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1;
        int i0, i1;
        java.lang.String r2, r3, r4;
        org.apache.xml.serializer.AttributesImplSerializer $r5, $r6;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getEncoding()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        r3 = virtualinvoke $r5.<org.apache.xml.serializer.AttributesImplSerializer: java.lang.String getQName(int)>(i1);

        $r6 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.AttributesImplSerializer m_attributes>;

        r4 = virtualinvoke $r6.<org.apache.xml.serializer.AttributesImplSerializer: java.lang.String getValue(int)>(i1);

        virtualinvoke r1.<java.io.Writer: void write(int)>(32);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r3);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("=\"");

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void writeAttrString(java.io.Writer,java.lang.String,java.lang.String)>(r1, r4, r2);

        virtualinvoke r1.<java.io.Writer: void write(int)>(34);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean reset()
    {
        org.apache.xml.serializer.ToStream r0;
        boolean z0, z1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        z0 = specialinvoke r0.<org.apache.xml.serializer.SerializerBase: boolean reset()>();

        z1 = 0;

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void resetToStream()>();

        z1 = 1;

     label1:
        return z1;
    }

    public void serialize(org.w3c.dom.Node) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        org.w3c.dom.Node r1;
        org.xml.sax.SAXException r2, $r4;
        org.apache.xml.serializer.TreeWalker $r3;
        org.apache.xml.serializer.utils.WrappedRuntimeException $r5;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: org.w3c.dom.Node;

     label1:
        $r3 = new org.apache.xml.serializer.TreeWalker;

        specialinvoke $r3.<org.apache.xml.serializer.TreeWalker: void <init>(org.xml.sax.ContentHandler)>(r0);

        virtualinvoke $r3.<org.apache.xml.serializer.TreeWalker: void traverse(org.w3c.dom.Node)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new org.apache.xml.serializer.utils.WrappedRuntimeException;

        specialinvoke $r5.<org.apache.xml.serializer.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r2);

        throw $r5;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    public void setCdataSectionElements(java.util.Vector)
    {
        org.apache.xml.serializer.ToStream r0;
        java.util.Vector r1;
        int i0, i1, $i2, $i3;
        java.lang.StringBuffer r2, $r6;
        java.lang.String r3, r4, $r5, $r7;
        java.lang.Object $r8, $r9;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.util.Vector;

        if r1 == null goto label5;

        $i2 = virtualinvoke r1.<java.util.Vector: int size()>();

        i0 = -1 + $i2;

        if i0 <= 0 goto label5;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        r2 = $r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        if i1 == 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label2:
        $r8 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r3 = (java.lang.String) $r8;

        $i3 = i1 + 1;

        $r9 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>($i3);

        r4 = (java.lang.String) $r9;

        if r3 == null goto label3;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(123);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

     label3:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        i1 = i1 + 2;

        goto label1;

     label4:
        $r7 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.xml.serializer.ToStream: java.lang.String m_StringOfCDATASections> = $r7;

     label5:
        $r5 = r0.<org.apache.xml.serializer.ToStream: java.lang.String m_StringOfCDATASections>;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void initCdataElems(java.lang.String)>($r5);

        return;
    }

    public void setContentHandler(org.xml.sax.ContentHandler)
    {
        org.apache.xml.serializer.ToStream r0;
        org.xml.sax.ContentHandler r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        return;
    }

    public void setDTDEntityExpansion(boolean)
    {
        org.apache.xml.serializer.ToStream r0;
        boolean z0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        z0 := @parameter0: boolean;

        r0.<org.apache.xml.serializer.ToStream: boolean m_expandDTDEntities> = z0;

        return;
    }

    public void setEncoding(java.lang.String)
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", r1);

        return;
    }

    public boolean setEscaping(boolean)
    {
        org.apache.xml.serializer.ToStream r0;
        boolean z0, z1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        z0 := @parameter0: boolean;

        z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_escaping>;

        r0.<org.apache.xml.serializer.ToStream: boolean m_escaping> = z0;

        return z1;
    }

    public void setIndentAmount(int)
    {
        org.apache.xml.serializer.ToStream r0;
        int i0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        i0 := @parameter0: int;

        r0.<org.apache.xml.serializer.ToStream: int m_indentAmount> = i0;

        return;
    }

    public boolean setLineSepUse(boolean)
    {
        org.apache.xml.serializer.ToStream r0;
        boolean z0, z1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        z0 := @parameter0: boolean;

        z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_lineSepUse>;

        r0.<org.apache.xml.serializer.ToStream: boolean m_lineSepUse> = z0;

        return z1;
    }

    public void setNewLine(char[])
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep> = r1;

        $i0 = lengthof r1;

        r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen> = $i0;

        return;
    }

    public void setOutputFormat(java.util.Properties)
    {
        org.apache.xml.serializer.ToStream r0;
        java.util.Properties r1;
        boolean z0, $z1;
        java.lang.String r2, r4, r5, r6, $r9;
        java.util.Enumeration r3;
        java.lang.Object $r7, $r8, $r11, $r12;
        org.apache.xml.serializer.CharInfo $r10;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.util.Properties;

        z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_shouldFlush>;

        if r1 == null goto label3;

        r3 = virtualinvoke r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r11;

        r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r4);

        $r12 = virtualinvoke r1.<java.util.Properties: java.lang.Object get(java.lang.Object)>(r4);

        r6 = (java.lang.String) $r12;

        if r6 != null goto label2;

        if r5 == null goto label2;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setOutputPropertyDefault(java.lang.String,java.lang.String)>(r4, r5);

     label2:
        if r6 == null goto label1;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setOutputProperty(java.lang.String,java.lang.String)>(r4, r6);

        goto label1;

     label3:
        $r7 = virtualinvoke r1.<java.util.Properties: java.lang.Object get(java.lang.Object)>("{http://xml.apache.org/xalan}entities");

        r2 = (java.lang.String) $r7;

        if r2 == null goto label4;

        $r8 = virtualinvoke r1.<java.util.Properties: java.lang.Object get(java.lang.Object)>("method");

        $r9 = (java.lang.String) $r8;

        $r10 = staticinvoke <org.apache.xml.serializer.CharInfo: org.apache.xml.serializer.CharInfo getCharInfo(java.lang.String,java.lang.String)>(r2, $r9);

        r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo> = $r10;

     label4:
        r0.<org.apache.xml.serializer.ToStream: boolean m_shouldFlush> = z0;

        return;
    }

    public void setOutputStream(java.io.OutputStream)
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setOutputStreamInternal(java.io.OutputStream,boolean)>(r1, 1);

        return;
    }

    void setProp(java.lang.String, java.lang.String, boolean)
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r10, r11, r12, $r18, $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28, $r29, $r32, $r47, $r49, $r50;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        org.apache.xml.serializer.EncodingInfo r7;
        java.io.OutputStream r8;
        java.io.Writer r9;
        javax.xml.transform.Transformer r13;
        javax.xml.transform.TransformerException r15, r17, $r41, $r45;
        javax.xml.transform.ErrorListener r16;
        char $c0;
        char[] $r23, $r24;
        int $i1, $i2;
        org.apache.xml.serializer.utils.Messages $r30;
        java.lang.Object[] $r31;
        java.lang.StringBuilder $r33, $r34, $r35, $r36, $r39;
        java.io.PrintStream $r37, $r38, $r40, $r43;
        javax.xml.transform.SourceLocator $r42, $r44, $r46;
        java.lang.Exception $r48;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r2 == null goto label02;

        $c0 = staticinvoke <org.apache.xml.serializer.ToStream: char getFirstCharLocName(java.lang.String)>(r1);

        tableswitch($c0)
        {
            case 99: goto label03;
            case 100: goto label04;
            case 101: goto label06;
            case 102: goto label01;
            case 103: goto label01;
            case 104: goto label01;
            case 105: goto label24;
            case 106: goto label01;
            case 107: goto label01;
            case 108: goto label28;
            case 109: goto label29;
            case 110: goto label01;
            case 111: goto label30;
            case 112: goto label01;
            case 113: goto label01;
            case 114: goto label01;
            case 115: goto label33;
            case 116: goto label01;
            case 117: goto label01;
            case 118: goto label35;
            default: goto label01;
        };

     label01:
        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void setProp(java.lang.String,java.lang.String,boolean)>(r1, r2, z0);

     label02:
        return;

     label03:
        $r47 = "cdata-section-elements";

        $z19 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z19 == 0 goto label01;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void addCdataSectionElements(java.lang.String)>(r2);

        goto label01;

     label04:
        $r49 = "doctype-system";

        $z20 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z20 == 0 goto label05;

        r0.<org.apache.xml.serializer.ToStream: java.lang.String m_doctypeSystem> = r2;

        goto label01;

     label05:
        $r50 = "doctype-public";

        $z21 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z21 == 0 goto label01;

        r0.<org.apache.xml.serializer.ToStream: java.lang.String m_doctypePublic> = r2;

        $z18 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("-//W3C//DTD XHTML");

        if $z18 == 0 goto label01;

        r0.<org.apache.xml.serializer.ToStream: boolean m_spaceBeforeClose> = 1;

        goto label01;

     label06:
        r3 = r2;

        $r29 = "encoding";

        $z12 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z12 == 0 goto label01;

        r4 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String getMimeEncoding(java.lang.String)>(r2);

        if r4 == null goto label07;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void setProp(java.lang.String,java.lang.String,boolean)>("mime-name", r4, z0);

     label07:
        r5 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getOutputPropertyNonDefault(java.lang.String)>("encoding");

        r6 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getOutputPropertyDefault(java.lang.String)>("encoding");

        if z0 == 0 goto label08;

        if r6 == null goto label09;

        $z17 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z17 == 0 goto label09;

     label08:
        if z0 != 0 goto label01;

        if r5 == null goto label09;

        $z16 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z16 != 0 goto label01;

     label09:
        r7 = staticinvoke <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo getEncodingInfo(java.lang.String)>(r3);

        if r3 == null goto label16;

        $r32 = r7.<org.apache.xml.serializer.EncodingInfo: java.lang.String name>;

        if $r32 != null goto label16;

        $r30 = <org.apache.xml.serializer.utils.Utils: org.apache.xml.serializer.utils.Messages messages>;

        $r31 = newarray (java.lang.Object)[1];

        $r31[0] = r3;

        r11 = virtualinvoke $r30.<org.apache.xml.serializer.utils.Messages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_ENCODING_NOT_SUPPORTED", $r31);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: encoding \"");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not supported, using ");

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UTF-8");

        r12 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        r13 = specialinvoke r0.<org.apache.xml.serializer.SerializerBase: javax.xml.transform.Transformer getTransformer()>();

     label11:
        if r13 == null goto label22;

     label12:
        r16 = virtualinvoke r13.<javax.xml.transform.Transformer: javax.xml.transform.ErrorListener getErrorListener()>();

     label13:
        if r16 == null goto label20;

     label14:
        $r44 = r0.<org.apache.xml.serializer.ToStream: javax.xml.transform.SourceLocator m_sourceLocator>;

        if $r44 == null goto label20;

        $r45 = new javax.xml.transform.TransformerException;

        $r46 = r0.<org.apache.xml.serializer.ToStream: javax.xml.transform.SourceLocator m_sourceLocator>;

        specialinvoke $r45.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>(r11, $r46);

        r15 = $r45;

        interfaceinvoke r16.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>(r15);

        $r41 = new javax.xml.transform.TransformerException;

        $r42 = r0.<org.apache.xml.serializer.ToStream: javax.xml.transform.SourceLocator m_sourceLocator>;

        specialinvoke $r41.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>(r12, $r42);

        r17 = $r41;

        interfaceinvoke r16.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>(r17);

     label15:
        r3 = "UTF-8";

        r2 = "UTF-8";

        r7 = staticinvoke <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo getEncodingInfo(java.lang.String)>("UTF-8");

     label16:
        if z0 == 0 goto label17;

        if r5 != null goto label01;

     label17:
        r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.EncodingInfo m_encodingInfo> = r7;

        if r3 == null goto label18;

        $z13 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        r0.<org.apache.xml.serializer.ToStream: boolean m_isUTF8> = $z13;

     label18:
        r8 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.io.OutputStream getOutputStream()>();

        if r8 == null goto label01;

        r9 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.io.Writer getWriter()>();

        r10 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getOutputProperty(java.lang.String)>("encoding");

        if r9 == null goto label19;

        $z14 = r0.<org.apache.xml.serializer.ToStream: boolean m_writer_set_by_user>;

        if $z14 != 0 goto label01;

     label19:
        $z15 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r10);

        if $z15 != 0 goto label01;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void setProp(java.lang.String,java.lang.String,boolean)>(r1, r2, z0);

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setOutputStreamInternal(java.io.OutputStream,boolean)>(r8, 0);

        goto label01;

     label20:
        $r38 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>(r11);

        $r43 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r43.<java.io.PrintStream: void println(java.lang.String)>(r12);

     label21:
        goto label15;

     label22:
        $r40 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>(r11);

        $r37 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>(r12);

     label23:
        goto label15;

     label24:
        $r27 = "{http://xml.apache.org/xalan}indent-amount";

        $z9 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z9 == 0 goto label25;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setIndentAmount(int)>($i2);

        goto label01;

     label25:
        $r26 = "indent";

        $z11 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z11 == 0 goto label01;

        $r28 = "yes";

        $z10 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z10 == 0 goto label27;

        z2 = 1;

     label26:
        r0.<org.apache.xml.serializer.ToStream: boolean m_doIndent> = z2;

        goto label01;

     label27:
        z2 = 0;

        goto label26;

     label28:
        $r25 = "{http://xml.apache.org/xalan}line-separator";

        $z8 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label01;

        $r23 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep> = $r23;

        $r24 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i1 = lengthof $r24;

        r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen> = $i1;

        goto label01;

     label29:
        $r22 = "media-type";

        $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label01;

        r0.<org.apache.xml.serializer.ToStream: java.lang.String m_mediatype> = r2;

        goto label01;

     label30:
        $r20 = "omit-xml-declaration";

        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label01;

        $r21 = "yes";

        $z6 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z6 == 0 goto label32;

        z1 = 1;

     label31:
        r0.<org.apache.xml.serializer.ToStream: boolean m_shouldNotWriteXMLHeader> = z1;

        goto label01;

     label32:
        z1 = 0;

        goto label31;

     label33:
        $r19 = "standalone";

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label01;

        if z0 == 0 goto label34;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setStandaloneInternal(java.lang.String)>(r2);

        goto label01;

     label34:
        r0.<org.apache.xml.serializer.ToStream: boolean m_standaloneWasSpecified> = 1;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setStandaloneInternal(java.lang.String)>(r2);

        goto label01;

     label35:
        $r18 = "version";

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label01;

        r0.<org.apache.xml.serializer.ToStream: java.lang.String m_version> = r2;

        goto label01;

     label36:
        $r48 := @caughtexception;

        goto label15;

        catch java.lang.Exception from label10 to label11 with label36;
        catch java.lang.Exception from label12 to label13 with label36;
        catch java.lang.Exception from label14 to label15 with label36;
        catch java.lang.Exception from label20 to label21 with label36;
        catch java.lang.Exception from label22 to label23 with label36;
    }

    public void setTransformer(javax.xml.transform.Transformer)
    {
        org.apache.xml.serializer.ToStream r0;
        javax.xml.transform.Transformer r1;
        org.apache.xml.serializer.SerializerTrace $r2, $r5;
        java.io.Writer $r3, $r6;
        boolean $z0;
        org.apache.xml.serializer.SerializerTraceWriter $r4;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: javax.xml.transform.Transformer;

        specialinvoke r0.<org.apache.xml.serializer.SerializerBase: void setTransformer(javax.xml.transform.Transformer)>(r1);

        $r2 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $z0 = $r3 instanceof org.apache.xml.serializer.SerializerTraceWriter;

        if $z0 != 0 goto label1;

        $r4 = new org.apache.xml.serializer.SerializerTraceWriter;

        $r6 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r5 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        specialinvoke $r4.<org.apache.xml.serializer.SerializerTraceWriter: void <init>(java.io.Writer,org.apache.xml.serializer.SerializerTrace)>($r6, $r5);

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setWriterInternal(java.io.Writer,boolean)>($r4, 0);

     label1:
        return;
    }

    public void setWriter(java.io.Writer)
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: void setWriterInternal(java.io.Writer,boolean)>(r1, 1);

        return;
    }

    protected boolean shouldIndent()
    {
        org.apache.xml.serializer.ToStream r0;
        boolean $z0, $z1, $z2;
        org.apache.xml.serializer.ElemContext $r1;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_doIndent>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve>;

        if $z1 != 0 goto label1;

        $z2 = r0.<org.apache.xml.serializer.ToStream: boolean m_isprevtext>;

        if $z2 != 0 goto label1;

        $r1 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $i0 = $r1.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void startCDATA() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataStartCalled> = 1;

        return;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3;
        org.apache.xml.serializer.ElemContext $r4;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setDoctypeSystem(java.lang.String)>(r3);

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void setDoctypePublic(java.lang.String)>(r2);

        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r4.<org.apache.xml.serializer.ElemContext: java.lang.String m_elementName> = r1;

        r0.<org.apache.xml.serializer.ToStream: boolean m_inDoctype> = 1;

        return;
    }

    public void startElement(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(null, null, r1, null);

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(r1, r2, r3, null);

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, $r11;
        org.xml.sax.Attributes r4;
        java.io.IOException r5, $r14;
        java.io.Writer r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.xml.serializer.ElemContext $r7, $r8, $r9, $r12;
        org.apache.xml.serializer.SerializerTrace $r10;
        org.xml.sax.SAXException $r13;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.xml.sax.Attributes;

        $z0 = r0.<org.apache.xml.serializer.ToStream: boolean m_inEntityRef>;

        if $z0 == 0 goto label02;

     label01:
        return;

     label02:
        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_needToCallStartDocument>;

        if $z1 == 0 goto label12;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startDocumentInternal()>();

        r0.<org.apache.xml.serializer.ToStream: boolean m_needToCallStartDocument> = 0;

        r0.<org.apache.xml.serializer.ToStream: boolean m_docIsEmpty> = 0;

     label03:
        $z3 = r0.<org.apache.xml.serializer.ToStream: boolean m_needToOutputDocTypeDecl>;

        if $z3 == 0 goto label05;

        $r11 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getDoctypeSystem()>();

        if $r11 == null goto label04;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void outputDocTypeDecl(java.lang.String,boolean)>(r3, 1);

     label04:
        r0.<org.apache.xml.serializer.ToStream: boolean m_needToOutputDocTypeDecl> = 0;

     label05:
        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $z4 = $r7.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen>;

        if $z4 == 0 goto label06;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeStartTag()>();

        $r12 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r12.<org.apache.xml.serializer.ElemContext: boolean m_startTagOpen> = 0;

     label06:
        if r1 == null goto label08;

     label07:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void ensurePrefixIsDeclared(java.lang.String,java.lang.String)>(r1, r3);

     label08:
        r0.<org.apache.xml.serializer.ToStream: boolean m_ispreserve> = 0;

        $z5 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean shouldIndent()>();

        if $z5 == 0 goto label09;

        $z6 = r0.<org.apache.xml.serializer.ToStream: boolean m_startNewLine>;

        if $z6 == 0 goto label09;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void indent()>();

     label09:
        r0.<org.apache.xml.serializer.ToStream: boolean m_startNewLine> = 1;

        r6 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke r6.<java.io.Writer: void write(int)>(60);

        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>(r3);

     label10:
        if r4 == null goto label11;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void addAttributes(org.xml.sax.Attributes)>(r4);

     label11:
        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $r9 = virtualinvoke $r8.<org.apache.xml.serializer.ElemContext: org.apache.xml.serializer.ElemContext push(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext> = $r9;

        r0.<org.apache.xml.serializer.ToStream: boolean m_isprevtext> = 0;

        $r10 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.SerializerTrace m_tracer>;

        if $r10 == null goto label01;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void firePseudoAttributes()>();

        return;

     label12:
        $z2 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z2 == 0 goto label03;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

        goto label03;

     label13:
        $r14 := @caughtexception;

        r5 = $r14;

        $r13 = new org.xml.sax.SAXException;

        specialinvoke $r13.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>(r5);

        throw $r13;

        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.io.IOException from label08 to label09 with label13;
        catch java.io.IOException from label09 to label10 with label13;
    }

    public void startEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, $r6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("[dtd]");

        if $z0 == 0 goto label1;

        r0.<org.apache.xml.serializer.ToStream: boolean m_inExternalDTD> = 1;

     label1:
        $z1 = r0.<org.apache.xml.serializer.ToStream: boolean m_expandDTDEntities>;

        if $z1 != 0 goto label2;

        $z2 = r0.<org.apache.xml.serializer.ToStream: boolean m_inExternalDTD>;

        if $z2 != 0 goto label2;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void startNonEscaping()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void characters(java.lang.String)>($r6);

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void endNonEscaping()>();

     label2:
        r0.<org.apache.xml.serializer.ToStream: boolean m_inEntityRef> = 1;

        return;
    }

    public void startNonEscaping() throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        org.apache.xml.serializer.ToStream$BoolStack $r1;

        r0 := @this: org.apache.xml.serializer.ToStream;

        $r1 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ToStream$BoolStack m_disableOutputEscapingStates>;

        virtualinvoke $r1.<org.apache.xml.serializer.ToStream$BoolStack: boolean push(boolean)>(1);

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean startPrefixMapping(java.lang.String,java.lang.String,boolean)>(r1, r2, 1);

        return;
    }

    public boolean startPrefixMapping(java.lang.String, java.lang.String, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, $r5, $r6, $r9;
        boolean z0, z1, $z2, $z3;
        int i0, $i1;
        org.apache.xml.serializer.ElemContext $r3, $r11;
        org.apache.xml.serializer.NamespaceMappings $r4;
        java.lang.StringBuilder $r7, $r8, $r10;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void flushPending()>();

        $r11 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        $i1 = $r11.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        i0 = 1 + $i1;

     label1:
        $r4 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.NamespaceMappings m_prefixMap>;

        z1 = virtualinvoke $r4.<org.apache.xml.serializer.NamespaceMappings: boolean pushNamespace(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        if z1 == 0 goto label2;

        $r5 = "";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label4;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean addAttributeAlways(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>("http://www.w3.org/2000/xmlns/", "xmlns", "xmlns", "CDATA", r2, 0);

     label2:
        return z1;

     label3:
        $r3 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.ElemContext m_elemContext>;

        i0 = $r3.<org.apache.xml.serializer.ElemContext: int m_currentElemDepth>;

        goto label1;

     label4:
        $r6 = "";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 != 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean addAttributeAlways(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>("http://www.w3.org/2000/xmlns/", r1, $r9, "CDATA", r2, 0);

        return z1;
    }

    public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        java.lang.String r1, r2, r3, r4;
        java.io.IOException r5, $r17;
        java.io.Writer $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16;
        int $i0;
        char[] $r13;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

     label1:
        specialinvoke r0.<org.apache.xml.serializer.ToStream: void DTDprolog()>();

        $r6 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>("<!ENTITY ");

        $r7 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(r1);

     label2:
        if r2 == null goto label6;

     label3:
        $r16 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r16.<java.io.Writer: void write(java.lang.String)>(" PUBLIC \"");

        $r15 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r15.<java.io.Writer: void write(java.lang.String)>(r2);

     label4:
        $r10 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r10.<java.io.Writer: void write(java.lang.String)>("\" NDATA ");

        $r11 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r11.<java.io.Writer: void write(java.lang.String)>(r4);

        $r12 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r12.<java.io.Writer: void write(java.lang.String)>(" >");

        $r14 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r13 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i0 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke $r14.<java.io.Writer: void write(char[],int,int)>($r13, 0, $i0);

     label5:
        return;

     label6:
        $r8 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>(" SYSTEM \"");

        $r9 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>(r3);

     label7:
        goto label4;

     label8:
        $r17 := @caughtexception;

        r5 = $r17;

        virtualinvoke r5.<java.io.IOException: void printStackTrace()>();

        return;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public void writeAttrString(java.io.Writer, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        java.io.Writer r1;
        java.lang.String r2, r3, $r9, $r10, $r11;
        int i0, i1, $i3, $i5, $i6;
        char[] r4, $r5, $r6, $r12;
        char c2;
        org.apache.xml.serializer.CharInfo $r7;
        boolean $z0, $z1;
        org.apache.xml.serializer.EncodingInfo $r8;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $r5 = r0.<org.apache.xml.serializer.ToStream: char[] m_attrBuff>;

        $i3 = lengthof $r5;

        if i0 <= $i3 goto label01;

        $i6 = i0 * 2;

        $i5 = 1 + $i6;

        $r12 = newarray (char)[$i5];

        r0.<org.apache.xml.serializer.ToStream: char[] m_attrBuff> = $r12;

     label01:
        $r6 = r0.<org.apache.xml.serializer.ToStream: char[] m_attrBuff>;

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r6, 0);

        r4 = r0.<org.apache.xml.serializer.ToStream: char[] m_attrBuff>;

        i1 = 0;

     label02:
        if i1 >= i0 goto label14;

        c2 = r4[i1];

        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.CharInfo m_charInfo>;

        $z0 = virtualinvoke $r7.<org.apache.xml.serializer.CharInfo: boolean shouldMapAttrChar(int)>(c2);

        if $z0 == 0 goto label04;

        specialinvoke r0.<org.apache.xml.serializer.ToStream: int accumDefaultEscape(java.io.Writer,char,int,char[],int,boolean,boolean)>(r1, c2, i1, r4, i0, 0, 1);

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        if c2 < 0 goto label09;

        if c2 > 31 goto label09;

        tableswitch(c2)
        {
            case 9: goto label06;
            case 10: goto label07;
            case 11: goto label05;
            case 12: goto label05;
            case 13: goto label08;
            default: goto label05;
        };

     label05:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c2);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r11);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label03;

     label06:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#9;");

        goto label03;

     label07:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#10;");

        goto label03;

     label08:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#13;");

        goto label03;

     label09:
        if c2 >= 127 goto label10;

        virtualinvoke r1.<java.io.Writer: void write(int)>(c2);

        goto label03;

     label10:
        if c2 > 159 goto label11;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c2);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r9);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label03;

     label11:
        if c2 != 8232 goto label12;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#8232;");

        goto label03;

     label12:
        $r8 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.EncodingInfo m_encodingInfo>;

        $z1 = virtualinvoke $r8.<org.apache.xml.serializer.EncodingInfo: boolean isInEncoding(char)>(c2);

        if $z1 == 0 goto label13;

        virtualinvoke r1.<java.io.Writer: void write(int)>(c2);

        goto label03;

     label13:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&#");

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c2);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r10);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label03;

     label14:
        return;
    }

    void writeNormalizedChars(char[], int, int, boolean, boolean) throws java.io.IOException, org.xml.sax.SAXException
    {
        org.apache.xml.serializer.ToStream r0;
        char[] r1, $r5;
        int i0, i1, i2, i3, $i6, $i8, $i10, $i11;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.io.Writer r2;
        char c4, $c7, $c9;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.xml.serializer.ToStream;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        i2 = i0 + i1;

        i3 = i0;

     label01:
        if i3 >= i2 goto label13;

        c4 = r1[i3];

        if 10 != c4 goto label03;

        if z1 == 0 goto label03;

        $r5 = r0.<org.apache.xml.serializer.ToStream: char[] m_lineSep>;

        $i11 = r0.<org.apache.xml.serializer.ToStream: int m_lineSepLen>;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>($r5, 0, $i11);

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        if z0 == 0 goto label06;

        $z8 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean escapingNotNeeded(char)>(c4);

        if $z8 != 0 goto label06;

        $z7 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z7 == 0 goto label04;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label04:
        $z9 = staticinvoke <org.apache.xml.serializer.Encodings: boolean isHighUTF16Surrogate(char)>(c4);

        if $z9 == 0 goto label05;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: int writeUTF16Surrogate(char,char[],int,int)>(c4, r1, i3, i2);

        i3 = i3 + 1;

        goto label02;

     label05:
        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("&#");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c4);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.Writer: void write(int)>(59);

        goto label02;

     label06:
        if z0 == 0 goto label07;

        $i6 = i2 - 2;

        if i3 >= $i6 goto label07;

        if 93 != c4 goto label07;

        $i8 = i3 + 1;

        $c7 = r1[$i8];

        if 93 != $c7 goto label07;

        $i10 = i3 + 2;

        $c9 = r1[$i10];

        if 62 != $c9 goto label07;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("]]]]><![CDATA[>");

        i3 = i3 + 2;

        goto label02;

     label07:
        $z2 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: boolean escapingNotNeeded(char)>(c4);

        if $z2 == 0 goto label09;

        if z0 == 0 goto label08;

        $z6 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z6 != 0 goto label08;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

        r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen> = 1;

     label08:
        virtualinvoke r2.<java.io.Writer: void write(int)>(c4);

        goto label02;

     label09:
        $z3 = staticinvoke <org.apache.xml.serializer.Encodings: boolean isHighUTF16Surrogate(char)>(c4);

        if $z3 == 0 goto label11;

        $z5 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z5 == 0 goto label10;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label10:
        virtualinvoke r0.<org.apache.xml.serializer.ToStream: int writeUTF16Surrogate(char,char[],int,int)>(c4, r1, i3, i2);

        i3 = i3 + 1;

        goto label02;

     label11:
        $z4 = r0.<org.apache.xml.serializer.ToStream: boolean m_cdataTagOpen>;

        if $z4 == 0 goto label12;

        virtualinvoke r0.<org.apache.xml.serializer.ToStream: void closeCDATA()>();

     label12:
        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("&#");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(c4);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3);

        virtualinvoke r2.<java.io.Writer: void write(int)>(59);

        goto label02;

     label13:
        return;
    }

    protected int writeUTF16Surrogate(char, char[], int, int) throws java.io.IOException
    {
        org.apache.xml.serializer.ToStream r0;
        char c0, c3;
        char[] r1;
        int i1, i2, i4, $i5, $i6;
        java.io.Writer r2;
        org.apache.xml.serializer.utils.Messages r3, r5;
        java.lang.Object[] r4, r6;
        boolean $z0, $z1;
        org.apache.xml.serializer.EncodingInfo $r7;
        java.lang.String $r8, $r9, $r12, $r13, $r15, $r17, $r19, $r21;
        java.lang.StringBuilder $r10, $r11, $r14, $r16;
        java.io.IOException $r18, $r20;

        r0 := @this: org.apache.xml.serializer.ToStream;

        c0 := @parameter0: char;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i5 = i1 + 1;

        if $i5 < i2 goto label1;

        r5 = <org.apache.xml.serializer.utils.Utils: org.apache.xml.serializer.utils.Messages messages>;

        r6 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        r6[0] = $r19;

        $r20 = new java.io.IOException;

        $r21 = virtualinvoke r5.<org.apache.xml.serializer.utils.Messages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_INVALID_UTF16_SURROGATE", r6);

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label1:
        $i6 = i1 + 1;

        c3 = r1[$i6];

        $z0 = staticinvoke <org.apache.xml.serializer.Encodings: boolean isLowUTF16Surrogate(char)>(c3);

        if $z0 != 0 goto label2;

        r3 = <org.apache.xml.serializer.utils.Utils: org.apache.xml.serializer.utils.Messages messages>;

        r4 = newarray (java.lang.Object)[1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r4[0] = $r15;

        $r18 = new java.io.IOException;

        $r17 = virtualinvoke r3.<org.apache.xml.serializer.utils.Messages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_INVALID_UTF16_SURROGATE", r4);

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r18;

     label2:
        r2 = r0.<org.apache.xml.serializer.ToStream: java.io.Writer m_writer>;

        $r7 = r0.<org.apache.xml.serializer.ToStream: org.apache.xml.serializer.EncodingInfo m_encodingInfo>;

        $z1 = virtualinvoke $r7.<org.apache.xml.serializer.EncodingInfo: boolean isInEncoding(char,char)>(c0, c3);

        if $z1 == 0 goto label3;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r1, i1, 2);

        return 0;

     label3:
        $r8 = virtualinvoke r0.<org.apache.xml.serializer.ToStream: java.lang.String getEncoding()>();

        if $r8 == null goto label4;

        i4 = staticinvoke <org.apache.xml.serializer.Encodings: int toCodePoint(char,char)>(c0, c3);

        virtualinvoke r2.<java.io.Writer: void write(int)>(38);

        virtualinvoke r2.<java.io.Writer: void write(int)>(35);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i4);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r9);

        virtualinvoke r2.<java.io.Writer: void write(int)>(59);

        return i4;

     label4:
        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r1, i1, 2);

        return 0;
    }
}
