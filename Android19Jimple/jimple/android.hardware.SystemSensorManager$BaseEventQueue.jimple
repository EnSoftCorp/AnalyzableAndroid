abstract class android.hardware.SystemSensorManager$BaseEventQueue extends java.lang.Object
{
    private final android.util.SparseBooleanArray mActiveSensors;
    private final dalvik.system.CloseGuard mCloseGuard;
    protected final android.util.SparseBooleanArray mFirstEvent;
    protected final android.hardware.SystemSensorManager mManager;
    private final float[] mScratch;
    protected final android.util.SparseIntArray mSensorAccuracies;
    private int nSensorEventQueue;

    void <init>(android.os.Looper, android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.os.Looper r1;
        android.hardware.SystemSensorManager r2;
        android.util.SparseBooleanArray $r3, $r5;
        android.util.SparseIntArray $r4;
        dalvik.system.CloseGuard $r6, $r10;
        float[] $r7, $r9;
        android.os.MessageQueue $r8;
        int $i0;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.hardware.SystemSensorManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.SparseBooleanArray;

        specialinvoke $r3.<android.util.SparseBooleanArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseIntArray mSensorAccuracies> = $r4;

        $r5 = new android.util.SparseBooleanArray;

        specialinvoke $r5.<android.util.SparseBooleanArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mFirstEvent> = $r5;

        $r6 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard> = $r6;

        $r7 = newarray (float)[16];

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: float[] mScratch> = $r7;

        $r8 = virtualinvoke r1.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $r9 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: float[] mScratch>;

        $i0 = specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nativeInitBaseEventQueue(android.hardware.SystemSensorManager$BaseEventQueue,android.os.MessageQueue,float[])>(r0, $r8, $r9);

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue> = $i0;

        $r10 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r10.<dalvik.system.CloseGuard: void open(java.lang.String)>("dispose");

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.hardware.SystemSensorManager mManager> = r2;

        return;
    }

    private int disableSensor(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        int $i0, $i1, $i2, $i3;
        java.lang.NullPointerException $r2, $r3;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        $i0 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label2:
        $i1 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        $i2 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $i3 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: int nativeDisableSensor(int,int)>($i1, $i2);

        return $i3;
    }

    private void dispose(boolean)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        boolean z0;
        dalvik.system.CloseGuard $r1, $r2, $r3;
        int $i0, $i1;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard>;

        if $r1 == null goto label2;

        if z0 == 0 goto label1;

        $r3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

     label2:
        $i0 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        if $i0 == 0 goto label3;

        $i1 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: void nativeDestroySensorEventQueue(int)>($i1);

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue> = 0;

     label3:
        return;
    }

    private int enableSensor(android.hardware.Sensor, int, int, int)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.NullPointerException $r2, $r3;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        if $i3 != 0 goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label2:
        $i4 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        $i5 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $i6 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: int nativeEnableSensor(int,int,int,int,int)>($i4, $i5, i0, i1, i2);

        return $i6;
    }

    private static native void nativeDestroySensorEventQueue(int);

    private static native int nativeDisableSensor(int, int);

    private static native int nativeEnableSensor(int, int, int, int, int);

    private static native int nativeFlushSensor(int);

    private native int nativeInitBaseEventQueue(android.hardware.SystemSensorManager$BaseEventQueue, android.os.MessageQueue, float[]);

    public boolean addSensor(android.hardware.Sensor, int, int, int)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        int i0, i1, i2, i3, $i4, $i5;
        android.util.SparseBooleanArray $r2, $r3;
        boolean $z0;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $z0 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i3);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>(i3, 1);

        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void addSensorEvent(android.hardware.Sensor)>(r1);

        $i4 = specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int enableSensor(android.hardware.Sensor,int,int,int)>(r1, i0, i1, i2);

        if $i4 == 0 goto label3;

        if i1 == 0 goto label2;

        if i1 <= 0 goto label3;

        $i5 = specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int enableSensor(android.hardware.Sensor,int,int,int)>(r1, i0, 0, 0);

        if $i5 == 0 goto label3;

     label2:
        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: boolean removeSensor(android.hardware.Sensor,boolean)>(r1, 0);

        return 0;

     label3:
        return 1;
    }

    protected abstract void addSensorEvent(android.hardware.Sensor);

    protected abstract void dispatchFlushCompleteEvent(int);

    protected abstract void dispatchSensorEvent(int, float[], int, long);

    public void dispose()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void dispose(boolean)>(0);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

     label1:
        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int flush()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        int $i0, $i1, $i2;
        java.lang.NullPointerException $r1;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        $i0 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: int nSensorEventQueue>;

        $i2 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: int nativeFlushSensor(int)>($i1);

        return $i2;
    }

    public boolean hasSensors()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.util.SparseBooleanArray $r1;
        int $i0;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        $r1 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $i0 = virtualinvoke $r1.<android.util.SparseBooleanArray: int indexOfValue(boolean)>(1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean removeAllSensors()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        int i0, i1, $i2;
        android.hardware.Sensor r1;
        android.util.SparseBooleanArray $r2, $r3, $r4, $r7;
        boolean $z0;
        android.util.SparseArray $r5;
        java.lang.Object $r6;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        i0 = 0;

     label1:
        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $i2 = virtualinvoke $r2.<android.util.SparseBooleanArray: int size()>();

        if i0 >= $i2 goto label3;

        $r3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $z0 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean valueAt(int)>(i0);

        if $z0 != 1 goto label2;

        $r4 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        i1 = virtualinvoke $r4.<android.util.SparseBooleanArray: int keyAt(int)>(i0);

        $r5 = staticinvoke <android.hardware.SystemSensorManager: android.util.SparseArray access$000()>();

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (android.hardware.Sensor) $r6;

        if r1 == null goto label2;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int disableSensor(android.hardware.Sensor)>(r1);

        $r7 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        virtualinvoke $r7.<android.util.SparseBooleanArray: void put(int,boolean)>(i1, 0);

        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void removeSensorEvent(android.hardware.Sensor)>(r1);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean removeSensor(android.hardware.Sensor, boolean)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        boolean z0, z1, z2;
        int i0, $i1;
        android.util.SparseBooleanArray $r2, $r3;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        z1 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        z2 = 0;

        if z1 == 0 goto label2;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int disableSensor(android.hardware.Sensor)>(r1);

     label1:
        $r3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $i1 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>($i1, 0);

        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void removeSensorEvent(android.hardware.Sensor)>(r1);

        z2 = 1;

     label2:
        return z2;
    }

    protected abstract void removeSensorEvent(android.hardware.Sensor);
}
