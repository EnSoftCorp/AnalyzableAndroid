public class android.filterpacks.imageproc.CropFilter extends android.filterfw.core.Filter
{
    private boolean mFillBlack;
    private final java.lang.String mFragShader;
    private android.filterfw.core.FrameFormat mLastFormat;
    private int mOutputHeight;
    private int mOutputWidth;
    private android.filterfw.core.Program mProgram;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.CropFilter r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.imageproc.CropFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.FrameFormat mLastFormat> = null;

        r0.<android.filterpacks.imageproc.CropFilter: int mOutputWidth> = -1;

        r0.<android.filterpacks.imageproc.CropFilter: int mOutputHeight> = -1;

        r0.<android.filterpacks.imageproc.CropFilter: boolean mFillBlack> = 0;

        r0.<android.filterpacks.imageproc.CropFilter: java.lang.String mFragShader> = "precision mediump float;\nuniform sampler2D tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  const vec2 lo = vec2(0.0, 0.0);\n  const vec2 hi = vec2(1.0, 1.0);\n  const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n  bool out_of_bounds =\n    any(lessThan(v_texcoord, lo)) ||\n    any(greaterThan(v_texcoord, hi));\n  if (out_of_bounds) {\n    gl_FragColor = black;\n  } else {\n    gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n  }\n}\n";

        return;
    }

    protected void createProgram(android.filterfw.core.FilterContext, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.CropFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.FrameFormat r2, $r3, $r13;
        int $i0, $i1, $i2;
        android.filterfw.core.Program $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;
        android.filterfw.core.ShaderProgram $r11, $r12;

        r0 := @this: android.filterpacks.imageproc.CropFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        $r3 = r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.FrameFormat mLastFormat>;

        if $r3 == null goto label2;

        $r13 = r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.FrameFormat mLastFormat>;

        $i2 = virtualinvoke $r13.<android.filterfw.core.FrameFormat: int getTarget()>();

        $i1 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getTarget()>();

        if $i2 != $i1 goto label2;

     label1:
        return;

     label2:
        r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.FrameFormat mLastFormat> = r2;

        r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Program mProgram> = null;

        $i0 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getTarget()>();

        tableswitch($i0)
        {
            case 3: goto label4;
            default: goto label3;
        };

     label3:
        $r4 = r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Program mProgram>;

        if $r4 != null goto label1;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a program for crop filter ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label4:
        $z0 = r0.<android.filterpacks.imageproc.CropFilter: boolean mFillBlack>;

        if $z0 == 0 goto label5;

        $r12 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r12.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nuniform sampler2D tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  const vec2 lo = vec2(0.0, 0.0);\n  const vec2 hi = vec2(1.0, 1.0);\n  const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n  bool out_of_bounds =\n    any(lessThan(v_texcoord, lo)) ||\n    any(greaterThan(v_texcoord, hi));\n  if (out_of_bounds) {\n    gl_FragColor = black;\n  } else {\n    gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n  }\n}\n");

        r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Program mProgram> = $r12;

        goto label3;

     label5:
        $r11 = staticinvoke <android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram createIdentity(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Program mProgram> = $r11;

        goto label3;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.CropFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;
        android.filterfw.core.MutableFrameFormat r3;

        r0 := @this: android.filterpacks.imageproc.CropFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        r3 = virtualinvoke r2.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        virtualinvoke r3.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(0, 0);

        return r3;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.CropFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r3, r6;
        android.filterfw.geometry.Quad r4;
        android.filterfw.core.MutableFrameFormat r5;
        int i0, i1, $i2, $i3;
        android.filterfw.core.FrameFormat $r7, $r9;
        java.lang.Object $r8;
        android.filterfw.core.FrameManager $r10;
        android.filterfw.core.Program $r11, $r12, $r13;
        boolean $z0;
        android.filterfw.core.ShaderProgram $r15;

        r0 := @this: android.filterpacks.imageproc.CropFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        r3 = virtualinvoke r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("box");

        $r7 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        virtualinvoke r0.<android.filterpacks.imageproc.CropFilter: void createProgram(android.filterfw.core.FilterContext,android.filterfw.core.FrameFormat)>(r1, $r7);

        $r8 = virtualinvoke r3.<android.filterfw.core.Frame: java.lang.Object getObjectValue()>();

        r4 = (android.filterfw.geometry.Quad) $r8;

        $r9 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        r5 = virtualinvoke $r9.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        $i2 = r0.<android.filterpacks.imageproc.CropFilter: int mOutputWidth>;

        if $i2 != -1 goto label4;

        i0 = virtualinvoke r5.<android.filterfw.core.MutableFrameFormat: int getWidth()>();

     label1:
        $i3 = r0.<android.filterpacks.imageproc.CropFilter: int mOutputHeight>;

        if $i3 != -1 goto label5;

        i1 = virtualinvoke r5.<android.filterfw.core.MutableFrameFormat: int getHeight()>();

     label2:
        virtualinvoke r5.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(i0, i1);

        $r10 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r6 = virtualinvoke $r10.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r5);

        $r11 = r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Program mProgram>;

        $z0 = $r11 instanceof android.filterfw.core.ShaderProgram;

        if $z0 == 0 goto label3;

        $r13 = r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Program mProgram>;

        $r15 = (android.filterfw.core.ShaderProgram) $r13;

        virtualinvoke $r15.<android.filterfw.core.ShaderProgram: void setSourceRegion(android.filterfw.geometry.Quad)>(r4);

     label3:
        $r12 = r0.<android.filterpacks.imageproc.CropFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r12.<android.filterfw.core.Program: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, r6);

        virtualinvoke r0.<android.filterpacks.imageproc.CropFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r6);

        virtualinvoke r6.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;

     label4:
        i0 = r0.<android.filterpacks.imageproc.CropFilter: int mOutputWidth>;

        goto label1;

     label5:
        i1 = r0.<android.filterpacks.imageproc.CropFilter: int mOutputHeight>;

        goto label2;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.CropFilter r0;
        android.filterfw.core.MutableFrameFormat $r1, $r2;

        r0 := @this: android.filterpacks.imageproc.CropFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>(3);

        virtualinvoke r0.<android.filterpacks.imageproc.CropFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        $r2 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int)>(class "android/filterfw/geometry/Quad", 1);

        virtualinvoke r0.<android.filterpacks.imageproc.CropFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("box", $r2);

        virtualinvoke r0.<android.filterpacks.imageproc.CropFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }
}
