public class org.apache.xml.utils.IntVector extends java.lang.Object implements java.lang.Cloneable
{
    protected int m_blocksize;
    protected int m_firstFree;
    protected int[] m_map;
    protected int m_mapSize;

    public void <init>()
    {
        org.apache.xml.utils.IntVector r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = 32;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i0;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $r1 = newarray (int)[$i1];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r1;

        return;
    }

    public void <init>(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = i0;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = i0;

        $r1 = newarray (int)[i0];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r1;

        return;
    }

    public void <init>(int, int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = i1;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = i0;

        $r1 = newarray (int)[i0];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r1;

        return;
    }

    public void <init>(org.apache.xml.utils.IntVector)
    {
        org.apache.xml.utils.IntVector r0, r1;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r2, $r3, $r4;

        r0 := @this: org.apache.xml.utils.IntVector;

        r1 := @parameter0: org.apache.xml.utils.IntVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        $i0 = r1.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r2;

        $i1 = r1.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i1;

        $i2 = r1.<org.apache.xml.utils.IntVector: int m_firstFree>;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i2;

        $i3 = r1.<org.apache.xml.utils.IntVector: int m_blocksize>;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = $i3;

        $r4 = r1.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i4);

        return;
    }

    public final void addElement(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        int[] r1, $r2, $r3;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i3 = 1 + $i1;

        $i2 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i3 < $i2 goto label1;

        $i8 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i7 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i9 = $i8 + $i7;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i9;

        $i10 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r1 = newarray (int)[$i10];

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i12 = 1 + $i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i12);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r1;

     label1:
        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $r2[$i4] = i0;

        $i5 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i6 = 1 + $i5;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i6;

        return;
    }

    public final void addElements(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        int[] r1, $r2;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i3 = i0 + $i1;

        $i2 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i3 < $i2 goto label1;

        $i8 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i6 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i7 = i0 + $i6;

        $i9 = $i8 + $i7;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i9;

        $i10 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r1 = newarray (int)[$i10];

        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i12 = 1 + $i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i12);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r1;

     label1:
        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i5 = i0 + $i4;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i5;

        return;
    }

    public final void addElements(int, int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] r1, $r2, $r3;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i5 = i1 + $i3;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i5 < $i4 goto label1;

        $i11 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i9 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i10 = i1 + $i9;

        $i12 = $i11 + $i10;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i12;

        $i14 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r1 = newarray (int)[$i14];

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i13 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i15 = 1 + $i13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i15);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r1;

     label1:
        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i6 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $r2[$i6] = i0;

        $i7 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i8 = 1 + $i7;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i8;

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.utils.IntVector r0, $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        $r1 = new org.apache.xml.utils.IntVector;

        specialinvoke $r1.<org.apache.xml.utils.IntVector: void <init>(org.apache.xml.utils.IntVector)>(r0);

        return $r1;
    }

    public final boolean contains(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i1 >= $i2 goto label3;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i3 = $r1[i1];

        if $i3 != i0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public final int elementAt(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i1 = $r1[i0];

        return $i1;
    }

    public final int indexOf(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i1 >= $i2 goto label3;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i3 = $r1[i1];

        if $i3 != i0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -2147483648;
    }

    public final int indexOf(int, int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1, i2, $i3, $i4;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1;

     label1:
        $i3 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i2 >= $i3 goto label3;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = $r1[i2];

        if $i4 != i0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return -2147483648;
    }

    public final void insertElementAt(int, int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        int[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i4 = 1 + $i2;

        $i3 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i4 < $i3 goto label1;

        $i14 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i12 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i13 = $i14 + $i12;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i13;

        $i16 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r1 = newarray (int)[$i16];

        $r5 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i15 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i17 = 1 + $i15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i17);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r1;

     label1:
        $i5 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i6 = -1 + $i5;

        if i1 > $i6 goto label2;

        $r4 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = i1 + 1;

        $i9 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i10 = $i9 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i1, $r3, $i11, $i10);

     label2:
        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r2[i1] = i0;

        $i7 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i8 = 1 + $i7;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i8;

        return;
    }

    public final int lastIndexOf(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        i1 = -1 + $i2;

     label1:
        if i1 < 0 goto label3;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i3 = $r1[i1];

        if $i3 != i0 goto label2;

        return i1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return -2147483648;
    }

    public final void removeAllElements()
    {
        org.apache.xml.utils.IntVector r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r1[i0] = -2147483648;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        return;
    }

    public final boolean removeElement(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i1 >= $i2 goto label5;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i3 = $r1[i1];

        if $i3 != i0 goto label4;

        $i5 = i1 + 1;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if $i5 >= $i4 goto label3;

        $r4 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = i1 + 1;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i10 = i1 - 1;

        $i8 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i9 = $i8 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i11, $r3, $i10, $i9);

     label2:
        $i6 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i7 = -1 + $i6;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i7;

        return 1;

     label3:
        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r2[i1] = -2147483648;

        goto label2;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return 0;
    }

    public final void removeElementAt(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2, $r3;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i0 <= $i1 goto label2;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i5 = i0 + 1;

        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, $r2, i0, $i4);

     label1:
        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i3 = -1 + $i2;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i3;

        return;

     label2:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r1[i0] = -2147483648;

        goto label1;
    }

    public final void setElementAt(int, int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0, i1;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r1[i1] = i0;

        return;
    }

    public final void setSize(int)
    {
        org.apache.xml.utils.IntVector r0;
        int i0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = i0;

        return;
    }

    public final int size()
    {
        org.apache.xml.utils.IntVector r0;
        int $i0;

        r0 := @this: org.apache.xml.utils.IntVector;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        return $i0;
    }
}
