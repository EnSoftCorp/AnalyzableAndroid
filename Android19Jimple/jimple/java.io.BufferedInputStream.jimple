public class java.io.BufferedInputStream extends java.io.FilterInputStream
{
    protected volatile byte[] buf;
    protected int count;
    protected int marklimit;
    protected int markpos;
    protected int pos;

    public void <init>(java.io.InputStream)
    {
        java.io.BufferedInputStream r0;
        java.io.InputStream r1;

        r0 := @this: java.io.BufferedInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r1, 8192);

        return;
    }

    public void <init>(java.io.InputStream, int)
    {
        java.io.BufferedInputStream r0;
        java.io.InputStream r1;
        int i0;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.io.BufferedInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<java.io.BufferedInputStream: int markpos> = -1;

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");

        throw $r3;

     label1:
        $r2 = newarray (byte)[i0];

        r0.<java.io.BufferedInputStream: byte[] buf> = $r2;

        return;
    }

    private int fillbuf(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        java.io.InputStream r1;
        byte[] r2, r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;

        r0 := @this: java.io.BufferedInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: byte[];

        $i5 = r0.<java.io.BufferedInputStream: int markpos>;

        if $i5 == -1 goto label01;

        $i7 = r0.<java.io.BufferedInputStream: int pos>;

        $i6 = r0.<java.io.BufferedInputStream: int markpos>;

        $i9 = $i7 - $i6;

        $i8 = r0.<java.io.BufferedInputStream: int marklimit>;

        if $i9 < $i8 goto label05;

     label01:
        i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r2);

        if i0 <= 0 goto label03;

        r0.<java.io.BufferedInputStream: int markpos> = -1;

        r0.<java.io.BufferedInputStream: int pos> = 0;

        i1 = 0;

        if i0 != -1 goto label04;

     label02:
        r0.<java.io.BufferedInputStream: int count> = i1;

     label03:
        return i0;

     label04:
        i1 = i0;

        goto label02;

     label05:
        $i10 = r0.<java.io.BufferedInputStream: int markpos>;

        if $i10 != 0 goto label09;

        $i24 = r0.<java.io.BufferedInputStream: int marklimit>;

        $i25 = lengthof r2;

        if $i24 <= $i25 goto label09;

        $i27 = lengthof r2;

        i4 = 2 * $i27;

        $i28 = r0.<java.io.BufferedInputStream: int marklimit>;

        if i4 <= $i28 goto label06;

        i4 = r0.<java.io.BufferedInputStream: int marklimit>;

     label06:
        r3 = newarray (byte)[i4];

        $i26 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i26);

        r0.<java.io.BufferedInputStream: byte[] buf> = r3;

        r2 = r3;

     label07:
        $i14 = r0.<java.io.BufferedInputStream: int pos>;

        $i11 = r0.<java.io.BufferedInputStream: int markpos>;

        $i13 = $i14 - $i11;

        r0.<java.io.BufferedInputStream: int pos> = $i13;

        r0.<java.io.BufferedInputStream: int markpos> = 0;

        r0.<java.io.BufferedInputStream: int count> = 0;

        $i17 = r0.<java.io.BufferedInputStream: int pos>;

        $i15 = lengthof r2;

        $i16 = r0.<java.io.BufferedInputStream: int pos>;

        $i18 = $i15 - $i16;

        i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r2, $i17, $i18);

        if i2 > 0 goto label10;

        i3 = r0.<java.io.BufferedInputStream: int pos>;

     label08:
        r0.<java.io.BufferedInputStream: int count> = i3;

        return i2;

     label09:
        $i12 = r0.<java.io.BufferedInputStream: int markpos>;

        if $i12 <= 0 goto label07;

        $i22 = r0.<java.io.BufferedInputStream: int markpos>;

        $i20 = lengthof r2;

        $i21 = r0.<java.io.BufferedInputStream: int markpos>;

        $i23 = $i20 - $i21;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i22, r2, 0, $i23);

        goto label07;

     label10:
        $i19 = r0.<java.io.BufferedInputStream: int pos>;

        i3 = i2 + $i19;

        goto label08;
    }

    private java.io.IOException streamClosed() throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        java.io.IOException $r1;

        r0 := @this: java.io.BufferedInputStream;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("BufferedInputStream is closed");

        throw $r1;
    }

    public int available() throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        java.lang.Throwable r1, $r5;
        java.io.InputStream r2;
        int i0, i1, i2, $i3, $i4;
        byte[] $r3;
        java.io.IOException $r4;

        r0 := @this: java.io.BufferedInputStream;

        entermonitor r0;

     label1:
        r2 = r0.<java.io.BufferedInputStream: java.io.InputStream in>;

        $r3 = r0.<java.io.BufferedInputStream: byte[] buf>;

        if $r3 == null goto label3;

     label2:
        if r2 != null goto label5;

     label3:
        $r4 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r4;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

     label5:
        $i4 = r0.<java.io.BufferedInputStream: int count>;

        $i3 = r0.<java.io.BufferedInputStream: int pos>;

        i0 = $i4 - $i3;

        i1 = virtualinvoke r2.<java.io.InputStream: int available()>();

     label6:
        i2 = i0 + i1;

        exitmonitor r0;

        return i2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void close() throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        java.io.InputStream r1;

        r0 := @this: java.io.BufferedInputStream;

        r0.<java.io.BufferedInputStream: byte[] buf> = null;

        r1 = r0.<java.io.BufferedInputStream: java.io.InputStream in>;

        r0.<java.io.BufferedInputStream: java.io.InputStream in> = null;

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.InputStream: void close()>();

     label1:
        return;
    }

    public void mark(int)
    {
        java.io.BufferedInputStream r0;
        int i0, $i1;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.io.BufferedInputStream;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r0.<java.io.BufferedInputStream: int marklimit> = i0;

        $i1 = r0.<java.io.BufferedInputStream: int pos>;

        r0.<java.io.BufferedInputStream: int markpos> = $i1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean markSupported()
    {
        java.io.BufferedInputStream r0;

        r0 := @this: java.io.BufferedInputStream;

        return 1;
    }

    public int read() throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        short s0;
        java.lang.Throwable r1, $r7;
        byte[] r2, $r5;
        java.io.InputStream r3;
        int i1, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte b2;
        java.io.IOException $r4, $r6;

        r0 := @this: java.io.BufferedInputStream;

        s0 = -1;

        entermonitor r0;

     label01:
        r2 = r0.<java.io.BufferedInputStream: byte[] buf>;

        r3 = r0.<java.io.BufferedInputStream: java.io.InputStream in>;

     label02:
        if r2 == null goto label03;

        if r3 != null goto label05;

     label03:
        $r4 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r4;

     label04:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

     label05:
        $i5 = r0.<java.io.BufferedInputStream: int pos>;

        $i4 = r0.<java.io.BufferedInputStream: int count>;

        if $i5 < $i4 goto label08;

        i3 = specialinvoke r0.<java.io.BufferedInputStream: int fillbuf(java.io.InputStream,byte[])>(r3, r2);

     label06:
        if i3 != -1 goto label08;

     label07:
        exitmonitor r0;

        return s0;

     label08:
        $r5 = r0.<java.io.BufferedInputStream: byte[] buf>;

        if r2 == $r5 goto label11;

        r2 = r0.<java.io.BufferedInputStream: byte[] buf>;

     label09:
        if r2 != null goto label11;

     label10:
        $r6 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r6;

     label11:
        $i7 = r0.<java.io.BufferedInputStream: int count>;

        $i6 = r0.<java.io.BufferedInputStream: int pos>;

        $i8 = $i7 - $i6;

        if $i8 <= 0 goto label07;

        i1 = r0.<java.io.BufferedInputStream: int pos>;

        $i9 = i1 + 1;

        r0.<java.io.BufferedInputStream: int pos> = $i9;

        b2 = r2[i1];

     label12:
        s0 = b2 & 255;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        byte[] r1, r3, $r5;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        java.lang.Throwable r2, $r8;
        java.io.InputStream r4;
        java.io.IOException $r6, $r7, $r9;

        r0 := @this: java.io.BufferedInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = -1;

        entermonitor r0;

     label01:
        r3 = r0.<java.io.BufferedInputStream: byte[] buf>;

     label02:
        if r3 != null goto label05;

     label03:
        $r7 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r7;

     label04:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

     label05:
        $i7 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i7, i0, i1);

     label06:
        if i1 != 0 goto label08;

        i2 = 0;

     label07:
        exitmonitor r0;

        return i2;

     label08:
        r4 = r0.<java.io.BufferedInputStream: java.io.InputStream in>;

     label09:
        if r4 != null goto label11;

     label10:
        $r9 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r9;

     label11:
        $i9 = r0.<java.io.BufferedInputStream: int pos>;

        $i8 = r0.<java.io.BufferedInputStream: int count>;

        if $i9 >= $i8 goto label37;

        $i24 = r0.<java.io.BufferedInputStream: int count>;

        $i23 = r0.<java.io.BufferedInputStream: int pos>;

        $i21 = $i24 - $i23;

        if $i21 < i1 goto label17;

     label12:
        i6 = i1;

     label13:
        $i28 = r0.<java.io.BufferedInputStream: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i28, r1, i0, i6);

        $i25 = r0.<java.io.BufferedInputStream: int pos>;

        $i26 = i6 + $i25;

        r0.<java.io.BufferedInputStream: int pos> = $i26;

     label14:
        if i6 == i1 goto label35;

     label15:
        $i29 = virtualinvoke r4.<java.io.InputStream: int available()>();

        if $i29 != 0 goto label36;

     label16:
        goto label35;

     label17:
        $i27 = r0.<java.io.BufferedInputStream: int count>;

        $i22 = r0.<java.io.BufferedInputStream: int pos>;

        i6 = $i27 - $i22;

     label18:
        goto label13;

     label19:
        $i11 = r0.<java.io.BufferedInputStream: int markpos>;

        if $i11 != -1 goto label21;

        $i20 = lengthof r3;

        if i3 < $i20 goto label21;

        i4 = virtualinvoke r4.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i3);

     label20:
        if i4 != -1 goto label38;

        if i3 == i1 goto label07;

        i2 = i1 - i3;

        goto label07;

     label21:
        $i10 = specialinvoke r0.<java.io.BufferedInputStream: int fillbuf(java.io.InputStream,byte[])>(r4, r3);

        if $i10 != -1 goto label23;

     label22:
        if i3 == i1 goto label07;

        i2 = i1 - i3;

        goto label07;

     label23:
        $r5 = r0.<java.io.BufferedInputStream: byte[] buf>;

        if r3 == $r5 goto label26;

        r3 = r0.<java.io.BufferedInputStream: byte[] buf>;

     label24:
        if r3 != null goto label26;

     label25:
        $r6 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r6;

     label26:
        $i14 = r0.<java.io.BufferedInputStream: int count>;

        $i12 = r0.<java.io.BufferedInputStream: int pos>;

        $i13 = $i14 - $i12;

        if $i13 < i3 goto label30;

     label27:
        i4 = i3;

     label28:
        $i18 = r0.<java.io.BufferedInputStream: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i18, r1, i0, i4);

        $i17 = r0.<java.io.BufferedInputStream: int pos>;

        $i19 = i4 + $i17;

        r0.<java.io.BufferedInputStream: int pos> = $i19;

     label29:
        goto label38;

     label30:
        $i15 = r0.<java.io.BufferedInputStream: int count>;

        $i16 = r0.<java.io.BufferedInputStream: int pos>;

        i4 = $i15 - $i16;

     label31:
        goto label28;

     label32:
        i5 = virtualinvoke r4.<java.io.InputStream: int available()>();

     label33:
        if i5 != 0 goto label34;

        i2 = i1 - i3;

        goto label07;

     label34:
        i0 = i0 + i4;

        goto label19;

     label35:
        i2 = i6;

        goto label07;

     label36:
        i0 = i0 + i6;

        i3 = i1 - i6;

        goto label19;

     label37:
        i3 = i1;

        goto label19;

     label38:
        i3 = i3 - i4;

        if i3 != 0 goto label32;

        i2 = i1;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label13 to label14 with label04;
        catch java.lang.Throwable from label15 to label16 with label04;
        catch java.lang.Throwable from label17 to label18 with label04;
        catch java.lang.Throwable from label19 to label20 with label04;
        catch java.lang.Throwable from label21 to label22 with label04;
        catch java.lang.Throwable from label23 to label24 with label04;
        catch java.lang.Throwable from label25 to label26 with label04;
        catch java.lang.Throwable from label26 to label27 with label04;
        catch java.lang.Throwable from label28 to label29 with label04;
        catch java.lang.Throwable from label30 to label31 with label04;
        catch java.lang.Throwable from label32 to label33 with label04;
    }

    public void reset() throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        java.lang.Throwable r1, $r5;
        byte[] $r2;
        int $i0, $i1;
        java.io.IOException $r3, $r4;

        r0 := @this: java.io.BufferedInputStream;

        entermonitor r0;

     label1:
        $r2 = r0.<java.io.BufferedInputStream: byte[] buf>;

        if $r2 != null goto label3;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

     label3:
        $i0 = r0.<java.io.BufferedInputStream: int markpos>;

        if -1 != $i0 goto label4;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Mark has been invalidated.");

        throw $r3;

     label4:
        $i1 = r0.<java.io.BufferedInputStream: int markpos>;

        r0.<java.io.BufferedInputStream: int pos> = $i1;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        long l0, l1, l2, l3, $l7, $l15, $l18, $l21, $l22, $l30, $l31, $l35, $l36, $l38, $l39;
        java.lang.Throwable r1, $r5;
        byte[] r2;
        java.io.InputStream r3;
        byte $b4, $b10, $b17, $b27;
        int $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i19, $i20, $i23, $i24, $i25, $i26, $i28, $i29, $i32, $i33, $i34, $i37;
        java.io.IOException $r4, $r6;

        r0 := @this: java.io.BufferedInputStream;

        l0 := @parameter0: long;

        entermonitor r0;

     label01:
        r2 = r0.<java.io.BufferedInputStream: byte[] buf>;

        r3 = r0.<java.io.BufferedInputStream: java.io.InputStream in>;

     label02:
        if r2 != null goto label05;

     label03:
        $r6 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r6;

     label04:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

     label05:
        $b4 = l0 cmp 1L;

        if $b4 >= 0 goto label07;

        l0 = 0L;

     label06:
        exitmonitor r0;

        return l0;

     label07:
        if r3 != null goto label09;

     label08:
        $r4 = specialinvoke r0.<java.io.BufferedInputStream: java.io.IOException streamClosed()>();

        throw $r4;

     label09:
        $i6 = r0.<java.io.BufferedInputStream: int count>;

        $i5 = r0.<java.io.BufferedInputStream: int pos>;

        $i8 = $i6 - $i5;

        $l7 = (long) $i8;

        $b10 = $l7 cmp l0;

        if $b10 < 0 goto label11;

        $i34 = r0.<java.io.BufferedInputStream: int pos>;

        $l39 = (long) $i34;

        $l38 = l0 + $l39;

        $i37 = (int) $l38;

        r0.<java.io.BufferedInputStream: int pos> = $i37;

     label10:
        goto label06;

     label11:
        $i12 = r0.<java.io.BufferedInputStream: int count>;

        $i9 = r0.<java.io.BufferedInputStream: int pos>;

        $i11 = $i12 - $i9;

        l1 = (long) $i11;

        $i14 = r0.<java.io.BufferedInputStream: int count>;

        r0.<java.io.BufferedInputStream: int pos> = $i14;

        $i13 = r0.<java.io.BufferedInputStream: int markpos>;

        if $i13 == -1 goto label17;

        $i16 = r0.<java.io.BufferedInputStream: int marklimit>;

        $l18 = (long) $i16;

        $b17 = l0 cmp $l18;

        if $b17 > 0 goto label17;

        $i20 = specialinvoke r0.<java.io.BufferedInputStream: int fillbuf(java.io.InputStream,byte[])>(r3, r2);

        if $i20 != -1 goto label13;

     label12:
        l0 = l1;

        goto label06;

     label13:
        $i23 = r0.<java.io.BufferedInputStream: int count>;

        $i19 = r0.<java.io.BufferedInputStream: int pos>;

        $i24 = $i23 - $i19;

        $l22 = (long) $i24;

        $l21 = l0 - l1;

        $b27 = $l22 cmp $l21;

        if $b27 < 0 goto label15;

        $i29 = r0.<java.io.BufferedInputStream: int pos>;

        $l35 = (long) $i29;

        $l30 = l0 - l1;

        $l36 = $l35 + $l30;

        $i33 = (int) $l36;

        r0.<java.io.BufferedInputStream: int pos> = $i33;

     label14:
        goto label06;

     label15:
        $i25 = r0.<java.io.BufferedInputStream: int count>;

        $i28 = r0.<java.io.BufferedInputStream: int pos>;

        $i26 = $i25 - $i28;

        $l31 = (long) $i26;

        l3 = l1 + $l31;

        $i32 = r0.<java.io.BufferedInputStream: int count>;

        r0.<java.io.BufferedInputStream: int pos> = $i32;

     label16:
        l0 = l3;

        goto label06;

     label17:
        $l15 = l0 - l1;

        l2 = virtualinvoke r3.<java.io.InputStream: long skip(long)>($l15);

     label18:
        l0 = l1 + l2;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label13 to label14 with label04;
        catch java.lang.Throwable from label15 to label16 with label04;
        catch java.lang.Throwable from label17 to label18 with label04;
    }
}
