class com.android.server.AppOpsService$1 extends java.lang.Object implements java.lang.Runnable
{
    final com.android.server.AppOpsService this$0;

    void <init>(com.android.server.AppOpsService)
    {
        com.android.server.AppOpsService$1 r0;
        com.android.server.AppOpsService r1;

        r0 := @this: com.android.server.AppOpsService$1;

        r1 := @parameter0: com.android.server.AppOpsService;

        r0.<com.android.server.AppOpsService$1: com.android.server.AppOpsService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        com.android.server.AppOpsService$1 r0;
        com.android.server.AppOpsService r1, $r3;
        java.lang.Throwable r2, $r8;
        com.android.server.AppOpsService$1$1 $r4;
        java.lang.Void[] $r5;
        java.util.concurrent.Executor $r6;

        r0 := @this: com.android.server.AppOpsService$1;

        r1 = r0.<com.android.server.AppOpsService$1: com.android.server.AppOpsService this$0>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.AppOpsService$1: com.android.server.AppOpsService this$0>;

        $r3.<com.android.server.AppOpsService: boolean mWriteScheduled> = 0;

        $r4 = new com.android.server.AppOpsService$1$1;

        specialinvoke $r4.<com.android.server.AppOpsService$1$1: void <init>(com.android.server.AppOpsService$1)>(r0);

        $r6 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r5 = (java.lang.Void[]) null;

        virtualinvoke $r4.<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r6, $r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
