public final class com.android.server.power.ShutdownThread extends java.lang.Thread
{
    private static final int MAX_BROADCAST_TIME;
    private static final int MAX_RADIO_WAIT_TIME;
    private static final int MAX_SHUTDOWN_WAIT_TIME;
    private static final int PHONE_STATE_POLL_SLEEP_MSEC;
    public static final java.lang.String REBOOT_SAFEMODE_PROPERTY;
    public static final java.lang.String SHUTDOWN_ACTION_PROPERTY;
    private static final int SHUTDOWN_VIBRATE_MS;
    private static final java.lang.String TAG;
    private static boolean mReboot;
    private static java.lang.String mRebootReason;
    private static boolean mRebootSafeMode;
    private static android.app.AlertDialog sConfirmDialog;
    private static final com.android.server.power.ShutdownThread sInstance;
    private static boolean sIsStarted;
    private static java.lang.Object sIsStartedGuard;
    private boolean mActionDone;
    private final java.lang.Object mActionDoneSync;
    private android.content.Context mContext;
    private android.os.PowerManager$WakeLock mCpuWakeLock;
    private android.os.Handler mHandler;
    private android.os.PowerManager mPowerManager;
    private android.os.PowerManager$WakeLock mScreenWakeLock;

    static void <clinit>()
    {
        java.lang.Object $r0;
        com.android.server.power.ShutdownThread $r1;

        <com.android.server.power.ShutdownThread: java.lang.String TAG> = "ShutdownThread";

        <com.android.server.power.ShutdownThread: int SHUTDOWN_VIBRATE_MS> = 500;

        <com.android.server.power.ShutdownThread: java.lang.String SHUTDOWN_ACTION_PROPERTY> = "sys.shutdown.requested";

        <com.android.server.power.ShutdownThread: java.lang.String REBOOT_SAFEMODE_PROPERTY> = "persist.sys.safemode";

        <com.android.server.power.ShutdownThread: int PHONE_STATE_POLL_SLEEP_MSEC> = 500;

        <com.android.server.power.ShutdownThread: int MAX_SHUTDOWN_WAIT_TIME> = 20000;

        <com.android.server.power.ShutdownThread: int MAX_RADIO_WAIT_TIME> = 12000;

        <com.android.server.power.ShutdownThread: int MAX_BROADCAST_TIME> = 10000;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.android.server.power.ShutdownThread: java.lang.Object sIsStartedGuard> = $r0;

        <com.android.server.power.ShutdownThread: boolean sIsStarted> = 0;

        $r1 = new com.android.server.power.ShutdownThread;

        specialinvoke $r1.<com.android.server.power.ShutdownThread: void <init>()>();

        <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance> = $r1;

        return;
    }

    private void <init>()
    {
        com.android.server.power.ShutdownThread r0;
        java.lang.Object $r1;

        r0 := @this: com.android.server.power.ShutdownThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.power.ShutdownThread: java.lang.Object mActionDoneSync> = $r1;

        return;
    }

    static void access$000(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        staticinvoke <com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)>(r0);

        return;
    }

    private static void beginShutdownSequence(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1, $r13;
        java.lang.Throwable r2, $r40;
        android.app.ProgressDialog r3, $r6;
        java.lang.SecurityException r4, r5, $r38, $r39;
        boolean $z0, $z1;
        java.lang.CharSequence $r7, $r8;
        android.view.Window $r9;
        com.android.server.power.ShutdownThread $r10, $r11, $r14, $r15, $r16, $r18, $r20, $r22, $r25, $r27, $r29, $r30, $r31, $r33, $r35, $r37, $r41;
        android.os.PowerManager $r12, $r17, $r24, $r28;
        android.os.PowerManager$WakeLock $r19, $r21, $r23, $r32, $r34, $r36;
        com.android.server.power.ShutdownThread$2 $r26;

        r0 := @parameter0: android.content.Context;

        r1 = <com.android.server.power.ShutdownThread: java.lang.Object sIsStartedGuard>;

        entermonitor r1;

     label01:
        $z0 = <com.android.server.power.ShutdownThread: boolean sIsStarted>;

        if $z0 == 0 goto label03;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ShutdownThread", "Shutdown sequence already running, returning.");

        exitmonitor r1;

     label02:
        return;

     label03:
        <com.android.server.power.ShutdownThread: boolean sIsStarted> = 1;

        exitmonitor r1;

     label04:
        $r6 = new android.app.ProgressDialog;

        specialinvoke $r6.<android.app.ProgressDialog: void <init>(android.content.Context)>(r0);

        r3 = $r6;

        $r7 = virtualinvoke r0.<android.content.Context: java.lang.CharSequence getText(int)>(17039545);

        virtualinvoke r3.<android.app.ProgressDialog: void setTitle(java.lang.CharSequence)>($r7);

        $r8 = virtualinvoke r0.<android.content.Context: java.lang.CharSequence getText(int)>(17039549);

        virtualinvoke r3.<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)>($r8);

        virtualinvoke r3.<android.app.ProgressDialog: void setIndeterminate(boolean)>(1);

        virtualinvoke r3.<android.app.ProgressDialog: void setCancelable(boolean)>(0);

        $r9 = virtualinvoke r3.<android.app.ProgressDialog: android.view.Window getWindow()>();

        virtualinvoke $r9.<android.view.Window: void setType(int)>(2009);

        virtualinvoke r3.<android.app.ProgressDialog: void show()>();

        $r10 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r10.<com.android.server.power.ShutdownThread: android.content.Context mContext> = r0;

        $r11 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r13 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r12 = (android.os.PowerManager) $r13;

        $r11.<com.android.server.power.ShutdownThread: android.os.PowerManager mPowerManager> = $r12;

        $r15 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r15.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mCpuWakeLock> = null;

     label05:
        $r16 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r14 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r17 = $r14.<com.android.server.power.ShutdownThread: android.os.PowerManager mPowerManager>;

        $r19 = virtualinvoke $r17.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ShutdownThread-cpu");

        $r16.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mCpuWakeLock> = $r19;

        $r18 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r21 = $r18.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mCpuWakeLock>;

        virtualinvoke $r21.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r20 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r23 = $r20.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mCpuWakeLock>;

        virtualinvoke $r23.<android.os.PowerManager$WakeLock: void acquire()>();

     label06:
        $r22 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r22.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mScreenWakeLock> = null;

        $r25 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r24 = $r25.<com.android.server.power.ShutdownThread: android.os.PowerManager mPowerManager>;

        $z1 = virtualinvoke $r24.<android.os.PowerManager: boolean isScreenOn()>();

        if $z1 == 0 goto label08;

     label07:
        $r33 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r27 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r28 = $r27.<com.android.server.power.ShutdownThread: android.os.PowerManager mPowerManager>;

        $r34 = virtualinvoke $r28.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(26, "ShutdownThread-screen");

        $r33.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mScreenWakeLock> = $r34;

        $r31 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r32 = $r31.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mScreenWakeLock>;

        virtualinvoke $r32.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r35 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r36 = $r35.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mScreenWakeLock>;

        virtualinvoke $r36.<android.os.PowerManager$WakeLock: void acquire()>();

     label08:
        $r29 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r26 = new com.android.server.power.ShutdownThread$2;

        specialinvoke $r26.<com.android.server.power.ShutdownThread$2: void <init>()>();

        $r29.<com.android.server.power.ShutdownThread: android.os.Handler mHandler> = $r26;

        $r30 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        virtualinvoke $r30.<com.android.server.power.ShutdownThread: void start()>();

        return;

     label09:
        $r40 := @caughtexception;

        r2 = $r40;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        $r38 := @caughtexception;

        r4 = $r38;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ShutdownThread", "No permission to acquire wake lock", r4);

        $r41 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r41.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mCpuWakeLock> = null;

        goto label06;

     label13:
        $r39 := @caughtexception;

        r5 = $r39;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ShutdownThread", "No permission to acquire wake lock", r5);

        $r37 = <com.android.server.power.ShutdownThread: com.android.server.power.ShutdownThread sInstance>;

        $r37.<com.android.server.power.ShutdownThread: android.os.PowerManager$WakeLock mScreenWakeLock> = null;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.SecurityException from label05 to label06 with label12;
        catch java.lang.SecurityException from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static void reboot(android.content.Context, java.lang.String, boolean)
    {
        android.content.Context r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        <com.android.server.power.ShutdownThread: boolean mReboot> = 1;

        <com.android.server.power.ShutdownThread: boolean mRebootSafeMode> = 0;

        <com.android.server.power.ShutdownThread: java.lang.String mRebootReason> = r1;

        staticinvoke <com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)>(r0, z0);

        return;
    }

    public static void rebootOrShutdown(boolean, java.lang.String)
    {
        boolean z0;
        java.lang.String r0, $r8;
        android.os.SystemVibrator r1, $r4;
        java.lang.Exception r2, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.InterruptedException $r10;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        if z0 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rebooting, reason: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ShutdownThread", $r8);

        staticinvoke <com.android.server.power.PowerManagerService: void lowLevelReboot(java.lang.String)>(r0);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ShutdownThread", "Reboot failed, will attempt shutdown instead");

     label1:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ShutdownThread", "Performing low-level shutdown...");

        staticinvoke <com.android.server.power.PowerManagerService: void lowLevelShutdown()>();

        return;

     label2:
        $r4 = new android.os.SystemVibrator;

        specialinvoke $r4.<android.os.SystemVibrator: void <init>()>();

        r1 = $r4;

     label3:
        virtualinvoke r1.<android.os.Vibrator: void vibrate(long)>(500L);

     label4:
        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

     label5:
        goto label1;

     label6:
        $r10 := @caughtexception;

        goto label1;

     label7:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ShutdownThread", "Failed to vibrate during shutdown.", r2);

        goto label4;

        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.InterruptedException from label4 to label5 with label6;
    }

    public static void rebootSafeMode(android.content.Context, boolean)
    {
        android.content.Context r0;
        boolean z0;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        <com.android.server.power.ShutdownThread: boolean mReboot> = 1;

        <com.android.server.power.ShutdownThread: boolean mRebootSafeMode> = 1;

        <com.android.server.power.ShutdownThread: java.lang.String mRebootReason> = null;

        staticinvoke <com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)>(r0, z0);

        return;
    }

    public static void shutdown(android.content.Context, boolean)
    {
        android.content.Context r0;
        boolean z0;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        <com.android.server.power.ShutdownThread: boolean mReboot> = 0;

        <com.android.server.power.ShutdownThread: boolean mRebootSafeMode> = 0;

        staticinvoke <com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)>(r0, z0);

        return;
    }

    static void shutdownInner(android.content.Context, boolean)
    {
        android.content.Context r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1;
        java.lang.Throwable r2, $r25;
        int i0, i1, i2;
        com.android.server.power.ShutdownThread$CloseDialogReceiver r3, $r11;
        android.app.AlertDialog$Builder r4, $r12, $r13, $r14, $r16, $r17;
        android.content.res.Resources $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        android.app.AlertDialog $r10, $r18, $r19, $r20, $r21, $r22, $r24;
        com.android.server.power.ShutdownThread$1 $r15;
        android.view.Window $r23;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        r1 = <com.android.server.power.ShutdownThread: java.lang.Object sIsStartedGuard>;

        entermonitor r1;

     label01:
        $z1 = <com.android.server.power.ShutdownThread: boolean sIsStarted>;

        if $z1 == 0 goto label03;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ShutdownThread", "Request to shutdown already running, returning.");

        exitmonitor r1;

     label02:
        return;

     label03:
        exitmonitor r1;

     label04:
        $r5 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r5.<android.content.res.Resources: int getInteger(int)>(17694748);

        $z2 = <com.android.server.power.ShutdownThread: boolean mRebootSafeMode>;

        if $z2 == 0 goto label11;

        i1 = 17039553;

     label05:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notifying thread to start shutdown longPressBehavior=");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ShutdownThread", $r9);

        if z0 == 0 goto label14;

        $r11 = new com.android.server.power.ShutdownThread$CloseDialogReceiver;

        specialinvoke $r11.<com.android.server.power.ShutdownThread$CloseDialogReceiver: void <init>(android.content.Context)>(r0);

        r3 = $r11;

        $r10 = <com.android.server.power.ShutdownThread: android.app.AlertDialog sConfirmDialog>;

        if $r10 == null goto label06;

        $r22 = <com.android.server.power.ShutdownThread: android.app.AlertDialog sConfirmDialog>;

        virtualinvoke $r22.<android.app.AlertDialog: void dismiss()>();

     label06:
        $r12 = new android.app.AlertDialog$Builder;

        specialinvoke $r12.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>(r0);

        r4 = $r12;

        $z3 = <com.android.server.power.ShutdownThread: boolean mRebootSafeMode>;

        if $z3 == 0 goto label13;

        i2 = 17039552;

     label07:
        $r14 = virtualinvoke r4.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>(i2);

        $r13 = virtualinvoke $r14.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>(i1);

        $r15 = new com.android.server.power.ShutdownThread$1;

        specialinvoke $r15.<com.android.server.power.ShutdownThread$1: void <init>(android.content.Context)>(r0);

        $r17 = virtualinvoke $r13.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>(17039379, $r15);

        $r16 = virtualinvoke $r17.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(17039369, null);

        $r20 = virtualinvoke $r16.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();

        <com.android.server.power.ShutdownThread: android.app.AlertDialog sConfirmDialog> = $r20;

        $r21 = <com.android.server.power.ShutdownThread: android.app.AlertDialog sConfirmDialog>;

        r3.<com.android.server.power.ShutdownThread$CloseDialogReceiver: android.app.Dialog dialog> = $r21;

        $r18 = <com.android.server.power.ShutdownThread: android.app.AlertDialog sConfirmDialog>;

        virtualinvoke $r18.<android.app.AlertDialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>(r3);

        $r19 = <com.android.server.power.ShutdownThread: android.app.AlertDialog sConfirmDialog>;

        $r23 = virtualinvoke $r19.<android.app.AlertDialog: android.view.Window getWindow()>();

        virtualinvoke $r23.<android.view.Window: void setType(int)>(2009);

        $r24 = <com.android.server.power.ShutdownThread: android.app.AlertDialog sConfirmDialog>;

        virtualinvoke $r24.<android.app.AlertDialog: void show()>();

        return;

     label08:
        $r25 := @caughtexception;

        r2 = $r25;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

     label11:
        if i0 != 2 goto label12;

        i1 = 17039551;

        goto label05;

     label12:
        i1 = 17039550;

        goto label05;

     label13:
        i2 = 17039545;

        goto label07;

     label14:
        staticinvoke <com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)>(r0);

        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void shutdownRadios(int)
    {
        com.android.server.power.ShutdownThread r0;
        int i0;
        long l1, l2, $l3, $l4;
        boolean[] r1;
        com.android.server.power.ShutdownThread$5 r2, $r4;
        boolean $z0;
        java.lang.InterruptedException $r5;

        r0 := @this: com.android.server.power.ShutdownThread;

        i0 := @parameter0: int;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l4 = (long) i0;

        l1 = $l3 + $l4;

        r1 = newarray (boolean)[1];

        $r4 = new com.android.server.power.ShutdownThread$5;

        specialinvoke $r4.<com.android.server.power.ShutdownThread$5: void <init>(com.android.server.power.ShutdownThread,long,boolean[])>(r0, l1, r1);

        r2 = $r4;

        virtualinvoke r2.<java.lang.Thread: void start()>();

        l2 = (long) i0;

     label1:
        virtualinvoke r2.<java.lang.Thread: void join(long)>(l2);

     label2:
        $z0 = r1[0];

        if $z0 != 0 goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ShutdownThread", "Timed out waiting for NFC, Radio and Bluetooth shutdown.");

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        goto label2;

        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    void actionDone()
    {
        com.android.server.power.ShutdownThread r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.power.ShutdownThread;

        r1 = r0.<com.android.server.power.ShutdownThread: java.lang.Object mActionDoneSync>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.ShutdownThread: boolean mActionDone> = 1;

        $r3 = r0.<com.android.server.power.ShutdownThread: java.lang.Object mActionDoneSync>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void run()
    {
        com.android.server.power.ShutdownThread r0;
        com.android.server.power.ShutdownThread$3 r1, $r18;
        java.lang.StringBuilder r2, r4, $r20, $r22;
        java.lang.String r3, r5, $r19, $r21, $r31;
        android.content.Intent r6, $r25;
        long l0, l1, l2, l3, $l5, $l8, $l9, $l15;
        java.lang.Object r7, r11, $r32, $r34;
        java.lang.Throwable r8, r13, $r33, $r39;
        android.app.IActivityManager r9;
        com.android.server.power.ShutdownThread$4 r10, $r28;
        java.lang.Exception r12, $r35;
        android.os.storage.IMountService r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.os.Handler $r24;
        android.content.Context $r26;
        android.os.UserHandle $r27;
        android.os.IBinder $r29, $r30;
        byte $b10, $b12;
        java.lang.InterruptedException $r36, $r38;
        android.os.RemoteException $r37;

        r0 := @this: com.android.server.power.ShutdownThread;

        $r18 = new com.android.server.power.ShutdownThread$3;

        specialinvoke $r18.<com.android.server.power.ShutdownThread$3: void <init>(com.android.server.power.ShutdownThread)>(r0);

        r1 = $r18;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        r2 = $r20;

        $z0 = <com.android.server.power.ShutdownThread: boolean mReboot>;

        if $z0 == 0 goto label19;

        r3 = "1";

     label01:
        r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = <com.android.server.power.ShutdownThread: java.lang.String mRebootReason>;

        if $r19 == null goto label20;

        r5 = <com.android.server.power.ShutdownThread: java.lang.String mRebootReason>;

     label02:
        $r22 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.shutdown.requested", $r21);

        $z1 = <com.android.server.power.ShutdownThread: boolean mRebootSafeMode>;

        if $z1 == 0 goto label03;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.safemode", "1");

     label03:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ShutdownThread", "Sending shutdown broadcast...");

        r0.<com.android.server.power.ShutdownThread: boolean mActionDone> = 0;

        $r25 = new android.content.Intent;

        specialinvoke $r25.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.ACTION_SHUTDOWN");

        r6 = $r25;

        virtualinvoke r6.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r26 = r0.<com.android.server.power.ShutdownThread: android.content.Context mContext>;

        $r27 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r24 = r0.<com.android.server.power.ShutdownThread: android.os.Handler mHandler>;

        virtualinvoke $r26.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r6, $r27, null, r1, $r24, 0, null, null);

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = 10000L + $l5;

        r7 = r0.<com.android.server.power.ShutdownThread: java.lang.Object mActionDoneSync>;

        entermonitor r7;

     label04:
        $z2 = r0.<com.android.server.power.ShutdownThread: boolean mActionDone>;

        if $z2 != 0 goto label07;

        $l15 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l3 = l0 - $l15;

     label05:
        $b12 = l3 cmp 0L;

        if $b12 > 0 goto label21;

     label06:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ShutdownThread", "Shutdown broadcast timed out");

     label07:
        exitmonitor r7;

     label08:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ShutdownThread", "Shutting down activity manager...");

        $r29 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("activity");

        r9 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager asInterface(android.os.IBinder)>($r29);

        if r9 == null goto label10;

     label09:
        interfaceinvoke r9.<android.app.IActivityManager: boolean shutdown(int)>(10000);

     label10:
        specialinvoke r0.<com.android.server.power.ShutdownThread: void shutdownRadios(int)>(12000);

        $r28 = new com.android.server.power.ShutdownThread$4;

        specialinvoke $r28.<com.android.server.power.ShutdownThread$4: void <init>(com.android.server.power.ShutdownThread)>(r0);

        r10 = $r28;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ShutdownThread", "Shutting down MountService");

        r0.<com.android.server.power.ShutdownThread: boolean mActionDone> = 0;

        $l8 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l1 = 20000L + $l8;

        r11 = r0.<com.android.server.power.ShutdownThread: java.lang.Object mActionDoneSync>;

        entermonitor r11;

     label11:
        $r30 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("mount");

        r14 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r30);

     label12:
        if r14 == null goto label27;

     label13:
        interfaceinvoke r14.<android.os.storage.IMountService: void shutdown(android.os.storage.IMountShutdownObserver)>(r10);

     label14:
        $z4 = r0.<com.android.server.power.ShutdownThread: boolean mActionDone>;

        if $z4 != 0 goto label17;

        $l9 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = l1 - $l9;

     label15:
        $b10 = l2 cmp 0L;

        if $b10 > 0 goto label35;

     label16:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ShutdownThread", "Shutdown wait timed out");

     label17:
        exitmonitor r11;

     label18:
        $z3 = <com.android.server.power.ShutdownThread: boolean mReboot>;

        $r31 = <com.android.server.power.ShutdownThread: java.lang.String mRebootReason>;

        staticinvoke <com.android.server.power.ShutdownThread: void rebootOrShutdown(boolean,java.lang.String)>($z3, $r31);

        return;

     label19:
        r3 = "0";

        goto label01;

     label20:
        r5 = "";

        goto label02;

     label21:
        $r32 = r0.<com.android.server.power.ShutdownThread: java.lang.Object mActionDoneSync>;

        virtualinvoke $r32.<java.lang.Object: void wait(long)>(l3);

     label22:
        goto label04;

     label23:
        $r38 := @caughtexception;

        goto label04;

     label24:
        $r39 := @caughtexception;

        r8 = $r39;

     label25:
        exitmonitor r7;

     label26:
        throw r8;

     label27:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ShutdownThread", "MountService unavailable for shutdown");

     label28:
        goto label14;

     label29:
        $r35 := @caughtexception;

        r12 = $r35;

     label30:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ShutdownThread", "Exception during MountService shutdown", r12);

     label31:
        goto label14;

     label32:
        $r33 := @caughtexception;

        r13 = $r33;

     label33:
        exitmonitor r11;

     label34:
        throw r13;

     label35:
        $r34 = r0.<com.android.server.power.ShutdownThread: java.lang.Object mActionDoneSync>;

        virtualinvoke $r34.<java.lang.Object: void wait(long)>(l2);

     label36:
        goto label14;

     label37:
        $r36 := @caughtexception;

        goto label14;

     label38:
        $r37 := @caughtexception;

        goto label10;

        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch android.os.RemoteException from label09 to label10 with label38;
        catch java.lang.Exception from label11 to label12 with label29;
        catch java.lang.Throwable from label11 to label12 with label32;
        catch java.lang.Exception from label13 to label14 with label29;
        catch java.lang.Throwable from label13 to label14 with label32;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.lang.InterruptedException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
        catch java.lang.Exception from label27 to label28 with label29;
        catch java.lang.Throwable from label27 to label28 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
        catch java.lang.InterruptedException from label35 to label36 with label37;
        catch java.lang.Throwable from label35 to label36 with label32;
    }
}
