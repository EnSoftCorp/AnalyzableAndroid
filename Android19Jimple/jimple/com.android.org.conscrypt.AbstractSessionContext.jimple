abstract class com.android.org.conscrypt.AbstractSessionContext extends java.lang.Object implements javax.net.ssl.SSLSessionContext
{
    static final int OPEN_SSL;
    volatile int maximumSize;
    private final java.util.Map sessions;
    final long sslCtxNativePointer;
    volatile int timeout;

    void <init>(int, int)
    {
        com.android.org.conscrypt.AbstractSessionContext$1 $r0;
        com.android.org.conscrypt.AbstractSessionContext r1;
        int i0, i1;
        long $l2;

        r1 := @this: com.android.org.conscrypt.AbstractSessionContext;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r1.<java.lang.Object: void <init>()>();

        $l2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_CTX_new()>();

        r1.<com.android.org.conscrypt.AbstractSessionContext: long sslCtxNativePointer> = $l2;

        $r0 = new com.android.org.conscrypt.AbstractSessionContext$1;

        specialinvoke $r0.<com.android.org.conscrypt.AbstractSessionContext$1: void <init>(com.android.org.conscrypt.AbstractSessionContext)>(r1);

        r1.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions> = $r0;

        r1.<com.android.org.conscrypt.AbstractSessionContext: int maximumSize> = i0;

        r1.<com.android.org.conscrypt.AbstractSessionContext: int timeout> = i1;

        return;
    }

    static void log(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <java.lang.System: void logW(java.lang.String,java.lang.Throwable)>("Error converting session.", r0);

        return;
    }

    private java.util.Iterator sessionIterator()
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        java.util.Map r1, $r4, $r6;
        java.lang.Throwable r2, $r11;
        java.util.Iterator r3;
        java.util.Collection $r5;
        int $i0;
        javax.net.ssl.SSLSession[] $r7, $r9;
        java.lang.Object[] $r8;
        java.util.List $r10;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        r1 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = newarray (javax.net.ssl.SSLSession)[$i0];

        $r8 = interfaceinvoke $r5.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (javax.net.ssl.SSLSession[]) $r8;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r11 := @caughtexception;

        r2 = $r11;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

     label1:
        $l0 = r0.<com.android.org.conscrypt.AbstractSessionContext: long sslCtxNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_CTX_free(long)>($l0);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.util.Enumeration getIds()
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        com.android.org.conscrypt.AbstractSessionContext$2 $r1;
        java.util.Iterator $r2;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        $r1 = new com.android.org.conscrypt.AbstractSessionContext$2;

        $r2 = specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Iterator sessionIterator()>();

        specialinvoke $r1.<com.android.org.conscrypt.AbstractSessionContext$2: void <init>(com.android.org.conscrypt.AbstractSessionContext,java.util.Iterator)>(r0, $r2);

        return $r1;
    }

    public javax.net.ssl.SSLSession getSession(byte[])
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        byte[] r1;
        com.android.org.conscrypt.ByteArray r2, $r6;
        java.util.Map r3, $r7;
        java.lang.Throwable r4, $r10;
        javax.net.ssl.SSLSession r5;
        java.lang.Object $r8;
        boolean $z0;
        java.lang.NullPointerException $r9;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("sessionId == null");

        throw $r9;

     label1:
        $r6 = new com.android.org.conscrypt.ByteArray;

        specialinvoke $r6.<com.android.org.conscrypt.ByteArray: void <init>(byte[])>(r1);

        r2 = $r6;

        r3 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        entermonitor r3;

     label2:
        $r7 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (javax.net.ssl.SSLSession) $r8;

        exitmonitor r3;

     label3:
        if r5 == null goto label7;

        $z0 = interfaceinvoke r5.<javax.net.ssl.SSLSession: boolean isValid()>();

        if $z0 == 0 goto label7;

        return r5;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

     label5:
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        return null;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public final int getSessionCacheSize()
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        $i0 = r0.<com.android.org.conscrypt.AbstractSessionContext: int maximumSize>;

        return $i0;
    }

    public final int getSessionTimeout()
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        $i0 = r0.<com.android.org.conscrypt.AbstractSessionContext: int timeout>;

        return $i0;
    }

    void putSession(javax.net.ssl.SSLSession)
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        javax.net.ssl.SSLSession r1;
        byte[] r2;
        com.android.org.conscrypt.ByteArray r3, $r6;
        java.util.Map r4, $r7;
        java.lang.Throwable r5, $r9;
        int $i0;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        r1 := @parameter0: javax.net.ssl.SSLSession;

        r2 = interfaceinvoke r1.<javax.net.ssl.SSLSession: byte[] getId()>();

        $i0 = lengthof r2;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r6 = new com.android.org.conscrypt.ByteArray;

        specialinvoke $r6.<com.android.org.conscrypt.ByteArray: void <init>(byte[])>(r2);

        r3 = $r6;

        r4 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        entermonitor r4;

     label2:
        $r7 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        exitmonitor r4;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        r5 = $r9;

     label5:
        exitmonitor r4;

     label6:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected abstract void sessionRemoved(javax.net.ssl.SSLSession);

    public final void setSessionCacheSize(int) throws java.lang.IllegalArgumentException
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 0");

        throw $r1;

     label1:
        i1 = r0.<com.android.org.conscrypt.AbstractSessionContext: int maximumSize>;

        r0.<com.android.org.conscrypt.AbstractSessionContext: int maximumSize> = i0;

        if i0 >= i1 goto label2;

        virtualinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void trimToSize()>();

     label2:
        return;
    }

    public void setSessionTimeout(int) throws java.lang.IllegalArgumentException
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        int i0;
        java.util.Map r1, $r5;
        java.lang.Throwable r2, $r9;
        java.util.Iterator r3;
        javax.net.ssl.SSLSession r4;
        java.util.Collection $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("seconds < 0");

        throw $r8;

     label1:
        r0.<com.android.org.conscrypt.AbstractSessionContext: int timeout> = i0;

        r1 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        entermonitor r1;

     label2:
        $r5 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javax.net.ssl.SSLSession) $r7;

        $z1 = interfaceinvoke r4.<javax.net.ssl.SSLSession: boolean isValid()>();

        if $z1 != 0 goto label3;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        virtualinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void sessionRemoved(javax.net.ssl.SSLSession)>(r4);

     label4:
        goto label3;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        exitmonitor r1;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    byte[] toBytes(javax.net.ssl.SSLSession)
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        javax.net.ssl.SSLSession r1;
        com.android.org.conscrypt.OpenSSLSessionImpl r2;
        java.io.ByteArrayOutputStream r3, $r11;
        java.io.DataOutputStream r4, $r12;
        java.security.cert.CertificateEncodingException r5, $r14;
        java.io.IOException r6, $r15;
        byte[] r7, r9, r10;
        java.security.cert.Certificate[] r8;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.security.cert.Certificate $r13;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        r1 := @parameter0: javax.net.ssl.SSLSession;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLSessionImpl;

        if $z0 != 0 goto label01;

        return null;

     label01:
        r2 = (com.android.org.conscrypt.OpenSSLSessionImpl) r1;

     label02:
        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = $r11;

        $r12 = new java.io.DataOutputStream;

        specialinvoke $r12.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r3);

        r4 = $r12;

        virtualinvoke r4.<java.io.DataOutputStream: void writeInt(int)>(1);

        r7 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSessionImpl: byte[] getEncoded()>();

        $i2 = lengthof r7;

        virtualinvoke r4.<java.io.DataOutputStream: void writeInt(int)>($i2);

        virtualinvoke r4.<java.io.DataOutputStream: void write(byte[])>(r7);

        r8 = interfaceinvoke r1.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $i3 = lengthof r8;

        virtualinvoke r4.<java.io.DataOutputStream: void writeInt(int)>($i3);

        i0 = lengthof r8;

     label03:
        i1 = 0;

     label04:
        if i1 >= i0 goto label07;

     label05:
        $r13 = r8[i1];

        r9 = virtualinvoke $r13.<java.security.cert.Certificate: byte[] getEncoded()>();

        $i4 = lengthof r9;

        virtualinvoke r4.<java.io.DataOutputStream: void writeInt(int)>($i4);

        virtualinvoke r4.<java.io.DataOutputStream: void write(byte[])>(r9);

     label06:
        i1 = i1 + 1;

        goto label04;

     label07:
        r10 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label08:
        return r10;

     label09:
        $r15 := @caughtexception;

        r6 = $r15;

        staticinvoke <com.android.org.conscrypt.AbstractSessionContext: void log(java.lang.Throwable)>(r6);

        return null;

     label10:
        $r14 := @caughtexception;

        r5 = $r14;

        staticinvoke <com.android.org.conscrypt.AbstractSessionContext: void log(java.lang.Throwable)>(r5);

        return null;

        catch java.io.IOException from label02 to label03 with label09;
        catch java.security.cert.CertificateEncodingException from label02 to label03 with label10;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.security.cert.CertificateEncodingException from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.security.cert.CertificateEncodingException from label07 to label08 with label10;
    }

    javax.net.ssl.SSLSession toSession(byte[], java.lang.String, int)
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        byte[] r1, r5, r7;
        java.lang.String r2, $r16;
        int i0, i1, i2, i3, $i4, $i5;
        java.io.DataInputStream r3, $r9;
        java.io.IOException r4, $r18;
        java.security.cert.X509Certificate[] r6;
        com.android.org.conscrypt.OpenSSLSessionImpl r8, $r11;
        java.io.ByteArrayInputStream $r10;
        java.lang.AssertionError $r12;
        com.android.org.conscrypt.OpenSSLX509Certificate $r13;
        java.lang.StringBuilder $r14, $r15, $r17;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r9 = new java.io.DataInputStream;

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r9.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r10);

        r3 = $r9;

     label01:
        i1 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();

     label02:
        if i1 == 1 goto label05;

     label03:
        $r12 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected type ID: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        staticinvoke <com.android.org.conscrypt.AbstractSessionContext: void log(java.lang.Throwable)>($r12);

     label04:
        return null;

     label05:
        $i4 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();

        r5 = newarray (byte)[$i4];

        virtualinvoke r3.<java.io.DataInputStream: void readFully(byte[])>(r5);

        i2 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();

        r6 = newarray (java.security.cert.X509Certificate)[i2];

     label06:
        i3 = 0;

     label07:
        if i3 >= i2 goto label10;

     label08:
        $i5 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();

        r7 = newarray (byte)[$i5];

        virtualinvoke r3.<java.io.DataInputStream: void readFully(byte[])>(r7);

        $r13 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: com.android.org.conscrypt.OpenSSLX509Certificate fromX509Der(byte[])>(r7);

        r6[i3] = $r13;

     label09:
        i3 = i3 + 1;

        goto label07;

     label10:
        $r11 = new com.android.org.conscrypt.OpenSSLSessionImpl;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLSessionImpl: void <init>(byte[],java.lang.String,int,java.security.cert.X509Certificate[],com.android.org.conscrypt.AbstractSessionContext)>(r5, r2, i0, r6, r0);

        r8 = $r11;

     label11:
        return r8;

     label12:
        $r18 := @caughtexception;

        r4 = $r18;

        staticinvoke <com.android.org.conscrypt.AbstractSessionContext: void log(java.lang.Throwable)>(r4);

        return null;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label12;
    }

    protected void trimToSize()
    {
        com.android.org.conscrypt.AbstractSessionContext r0;
        java.util.Map r1, $r5, $r6;
        java.lang.Throwable r2, $r8;
        int i0, i1, $i2, $i3;
        java.util.Iterator r3;
        javax.net.ssl.SSLSession r4;
        java.util.Collection $r7;
        java.lang.Object $r9;

        r0 := @this: com.android.org.conscrypt.AbstractSessionContext;

        r1 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $i2 = r0.<com.android.org.conscrypt.AbstractSessionContext: int maximumSize>;

        if i0 <= $i2 goto label4;

        $i3 = r0.<com.android.org.conscrypt.AbstractSessionContext: int maximumSize>;

        i1 = i0 - $i3;

        $r6 = r0.<com.android.org.conscrypt.AbstractSessionContext: java.util.Map sessions>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javax.net.ssl.SSLSession) $r9;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        virtualinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void sessionRemoved(javax.net.ssl.SSLSession)>(r4);

     label3:
        i1 = i1 + -1;

        if i1 > 0 goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.AbstractSessionContext: int OPEN_SSL> = 1;

        return;
    }
}
