public class android.renderscript.Mesh$AllocationBuilder extends java.lang.Object
{
    java.util.Vector mIndexTypes;
    android.renderscript.RenderScript mRS;
    int mVertexTypeCount;
    android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes;

    public void <init>(android.renderscript.RenderScript)
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.RenderScript r1;
        android.renderscript.Mesh$AllocationBuilder$Entry[] $r2;
        java.util.Vector $r3;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.RenderScript;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS> = r1;

        r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount> = 0;

        $r2 = newarray (android.renderscript.Mesh$AllocationBuilder$Entry)[16];

        r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes> = $r3;

        return;
    }

    public android.renderscript.Mesh$AllocationBuilder addIndexSetAllocation(android.renderscript.Allocation, android.renderscript.Mesh$Primitive)
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.Allocation r1;
        android.renderscript.Mesh$Primitive r2;
        android.renderscript.Mesh$AllocationBuilder$Entry r3, $r4;
        java.util.Vector $r5;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Mesh$Primitive;

        $r4 = new android.renderscript.Mesh$AllocationBuilder$Entry;

        specialinvoke $r4.<android.renderscript.Mesh$AllocationBuilder$Entry: void <init>(android.renderscript.Mesh$AllocationBuilder)>(r0);

        r3 = $r4;

        r3.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a> = r1;

        r3.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim> = r2;

        $r5 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>(r3);

        return r0;
    }

    public android.renderscript.Mesh$AllocationBuilder addIndexSetType(android.renderscript.Mesh$Primitive)
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.Mesh$Primitive r1;
        android.renderscript.Mesh$AllocationBuilder$Entry r2, $r3;
        java.util.Vector $r4;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.Mesh$Primitive;

        $r3 = new android.renderscript.Mesh$AllocationBuilder$Entry;

        specialinvoke $r3.<android.renderscript.Mesh$AllocationBuilder$Entry: void <init>(android.renderscript.Mesh$AllocationBuilder)>(r0);

        r2 = $r3;

        r2.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a> = null;

        r2.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim> = r1;

        $r4 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        return r0;
    }

    public android.renderscript.Mesh$AllocationBuilder addVertexAllocation(android.renderscript.Allocation) throws java.lang.IllegalStateException
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.Allocation r1;
        android.renderscript.Mesh$AllocationBuilder$Entry[] $r2, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.renderscript.Mesh$AllocationBuilder$Entry $r3, $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.Allocation;

        $i1 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $r2 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes>;

        $i0 = lengthof $r2;

        if $i1 < $i0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Max vertex types exceeded.");

        throw $r7;

     label1:
        $r4 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes>;

        $i2 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $r3 = new android.renderscript.Mesh$AllocationBuilder$Entry;

        specialinvoke $r3.<android.renderscript.Mesh$AllocationBuilder$Entry: void <init>(android.renderscript.Mesh$AllocationBuilder)>(r0);

        $r4[$i2] = $r3;

        $r5 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes>;

        $i3 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $r6 = $r5[$i3];

        $r6.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a> = r1;

        $i4 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $i5 = 1 + $i4;

        r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount> = $i5;

        return r0;
    }

    public android.renderscript.Mesh create()
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        int[] r1, r2, r3;
        android.renderscript.Allocation[] r4, r6;
        android.renderscript.Mesh$Primitive[] r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.renderscript.Mesh r7, $r16;
        android.renderscript.Mesh$AllocationBuilder$Entry r8, r9;
        android.renderscript.RenderScript $r10, $r17, $r19, $r20, $r28;
        java.util.Vector $r11, $r12, $r13, $r14, $r15, $r18;
        android.renderscript.Allocation $r21, $r23, $r26, $r27, $r30;
        java.lang.Object $r22;
        android.renderscript.Mesh$Primitive $r24, $r25;
        android.renderscript.Mesh$AllocationBuilder$Entry[] $r29;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        $r10 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        virtualinvoke $r10.<android.renderscript.RenderScript: void validate()>();

        $i3 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        r1 = newarray (int)[$i3];

        $r11 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i4 = virtualinvoke $r11.<java.util.Vector: int size()>();

        r2 = newarray (int)[$i4];

        $r12 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i5 = virtualinvoke $r12.<java.util.Vector: int size()>();

        r3 = newarray (int)[$i5];

        $r13 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i6 = virtualinvoke $r13.<java.util.Vector: int size()>();

        r4 = newarray (android.renderscript.Allocation)[$i6];

        $r14 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i8 = virtualinvoke $r14.<java.util.Vector: int size()>();

        r5 = newarray (android.renderscript.Mesh$Primitive)[$i8];

        $i7 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        r6 = newarray (android.renderscript.Allocation)[$i7];

        i0 = 0;

     label1:
        $i9 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        if i0 >= $i9 goto label2;

        $r29 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes>;

        r9 = $r29[i0];

        $r27 = r9.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        r6[i0] = $r27;

        $r30 = r9.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        $r28 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        $i13 = virtualinvoke $r30.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r28);

        r1[i0] = $i13;

        i0 = i0 + 1;

        goto label1;

     label2:
        i1 = 0;

     label3:
        $r15 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i10 = virtualinvoke $r15.<java.util.Vector: int size()>();

        if i1 >= $i10 goto label6;

        $r18 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $r22 = virtualinvoke $r18.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r8 = (android.renderscript.Mesh$AllocationBuilder$Entry) $r22;

        $r23 = r8.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        if $r23 != null goto label5;

        i2 = 0;

     label4:
        $r26 = r8.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        r4[i1] = $r26;

        $r24 = r8.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim>;

        r5[i1] = $r24;

        r2[i1] = i2;

        $r25 = r8.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim>;

        $i12 = $r25.<android.renderscript.Mesh$Primitive: int mID>;

        r3[i1] = $i12;

        i1 = i1 + 1;

        goto label3;

     label5:
        $r21 = r8.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        $r20 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        i2 = virtualinvoke $r21.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r20);

        goto label4;

     label6:
        $r16 = new android.renderscript.Mesh;

        $r17 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        $i11 = virtualinvoke $r17.<android.renderscript.RenderScript: int nMeshCreate(int[],int[],int[])>(r1, r2, r3);

        $r19 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        specialinvoke $r16.<android.renderscript.Mesh: void <init>(int,android.renderscript.RenderScript)>($i11, $r19);

        r7 = $r16;

        r7.<android.renderscript.Mesh: android.renderscript.Allocation[] mVertexBuffers> = r6;

        r7.<android.renderscript.Mesh: android.renderscript.Allocation[] mIndexBuffers> = r4;

        r7.<android.renderscript.Mesh: android.renderscript.Mesh$Primitive[] mPrimitives> = r5;

        return r7;
    }

    public int getCurrentIndexSetIndex()
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        java.util.Vector $r1;
        int $i0, $i1;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        $r1 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $i1 = -1 + $i0;

        return $i1;
    }

    public int getCurrentVertexTypeIndex()
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        int $i0, $i1;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        $i0 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $i1 = -1 + $i0;

        return $i1;
    }
}
