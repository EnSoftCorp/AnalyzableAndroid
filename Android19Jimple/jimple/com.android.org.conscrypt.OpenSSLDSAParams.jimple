public class com.android.org.conscrypt.OpenSSLDSAParams extends java.lang.Object implements java.security.interfaces.DSAParams, java.security.spec.AlgorithmParameterSpec
{
    private boolean fetchedParams;
    private java.math.BigInteger g;
    private com.android.org.conscrypt.OpenSSLKey key;
    private java.math.BigInteger p;
    private java.math.BigInteger q;
    private java.math.BigInteger x;
    private java.math.BigInteger y;

    void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        com.android.org.conscrypt.OpenSSLKey r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    private final void ensureReadParams()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.lang.Throwable r1, $r19;
        boolean z0;
        byte[][] r2;
        com.android.org.conscrypt.OpenSSLKey $r3;
        long $l0;
        byte[] $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r15, $r17;
        java.math.BigInteger $r9, $r12, $r14, $r16, $r18;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        entermonitor r0;

     label01:
        z0 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: boolean fetchedParams>;

     label02:
        if z0 == 0 goto label04;

     label03:
        exitmonitor r0;

        return;

     label04:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] get_DSA_params(long)>($l0);

        $r4 = r2[0];

        if $r4 == null goto label05;

        $r18 = new java.math.BigInteger;

        $r17 = r2[0];

        specialinvoke $r18.<java.math.BigInteger: void <init>(byte[])>($r17);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g> = $r18;

     label05:
        $r5 = r2[1];

        if $r5 == null goto label06;

        $r16 = new java.math.BigInteger;

        $r15 = r2[1];

        specialinvoke $r16.<java.math.BigInteger: void <init>(byte[])>($r15);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p> = $r16;

     label06:
        $r6 = r2[2];

        if $r6 == null goto label07;

        $r14 = new java.math.BigInteger;

        $r13 = r2[2];

        specialinvoke $r14.<java.math.BigInteger: void <init>(byte[])>($r13);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q> = $r14;

     label07:
        $r7 = r2[3];

        if $r7 == null goto label08;

        $r12 = new java.math.BigInteger;

        $r11 = r2[3];

        specialinvoke $r12.<java.math.BigInteger: void <init>(byte[])>($r11);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger y> = $r12;

     label08:
        $r8 = r2[4];

        if $r8 == null goto label09;

        $r9 = new java.math.BigInteger;

        $r10 = r2[4];

        specialinvoke $r9.<java.math.BigInteger: void <init>(byte[])>($r10);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger x> = $r9;

     label09:
        r0.<com.android.org.conscrypt.OpenSSLDSAParams: boolean fetchedParams> = 1;

     label10:
        goto label03;

     label11:
        $r19 := @caughtexception;

        r1 = $r19;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0, r3;
        java.lang.Object r1;
        java.security.interfaces.DSAParams r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.math.BigInteger $r4, $r5, $r6, $r7, $r8, $r9;
        com.android.org.conscrypt.OpenSSLKey $r10, $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLDSAParams;

        if $z0 == 0 goto label3;

        r3 = (com.android.org.conscrypt.OpenSSLDSAParams) r1;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key>;

        $r11 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        if $r10 == $r11 goto label1;

     label3:
        $z1 = r1 instanceof java.security.interfaces.DSAParams;

        if $z1 != 0 goto label4;

        return 0;

     label4:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        r2 = (java.security.interfaces.DSAParams) r1;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        $r5 = interfaceinvoke r2.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $z2 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label5;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        $r7 = interfaceinvoke r2.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $z3 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label5;

        $r8 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        $r9 = interfaceinvoke r2.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $z4 = virtualinvoke $r8.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z4 != 0 goto label1;

     label5:
        return 0;
    }

    public java.math.BigInteger getG()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        return $r1;
    }

    com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    public java.math.BigInteger getP()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        return $r1;
    }

    public java.math.BigInteger getQ()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        return $r1;
    }

    java.math.BigInteger getX()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger x>;

        return $r1;
    }

    java.math.BigInteger getY()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger y>;

        return $r1;
    }

    boolean hasParams()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1, $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $r2 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();

        $i2 = $i0 ^ $i1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        $i3 = virtualinvoke $r3.<java.math.BigInteger: int hashCode()>();

        $i4 = $i2 ^ $i3;

        return $i4;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.lang.StringBuilder r1, $r2;
        java.math.BigInteger $r4, $r8, $r12;
        java.lang.String $r5, $r9, $r13, $r16;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("OpenSSLDSAParams{");

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("G=");

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",P=");

        $r8 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",Q=");

        $r12 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }
}
