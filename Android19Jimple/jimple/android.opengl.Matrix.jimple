public class android.opengl.Matrix extends java.lang.Object
{
    private static final float[] sTemp;

    static void <clinit>()
    {
        float[] $r0;

        $r0 = newarray (float)[32];

        <android.opengl.Matrix: float[] sTemp> = $r0;

        return;
    }

    public void <init>()
    {
        android.opengl.Matrix r0;

        r0 := @this: android.opengl.Matrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void frustumM(float[], int, float, float, float, float, float, float)
    {
        float[] r0;
        int i0, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24;
        byte $b1, $b2, $b3, $b4, $b5;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        f5 := @parameter7: float;

        $b1 = f0 cmpl f1;

        if $b1 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("left == right");

        throw $r5;

     label1:
        $b3 = f3 cmpl f2;

        if $b3 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("top == bottom");

        throw $r1;

     label2:
        $b2 = f4 cmpl f5;

        if $b2 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near == far");

        throw $r2;

     label3:
        $b5 = f4 cmpg 0.0F;

        if $b5 > 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near <= 0.0f");

        throw $r3;

     label4:
        $b4 = f5 cmpg 0.0F;

        if $b4 > 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("far <= 0.0f");

        throw $r4;

     label5:
        $f16 = f1 - f0;

        f6 = 1.0F / $f16;

        $f15 = f3 - f2;

        f7 = 1.0F / $f15;

        $f18 = f4 - f5;

        f8 = 1.0F / $f18;

        $f17 = f4 * f6;

        f9 = 2.0F * $f17;

        $f20 = f4 * f7;

        f10 = 2.0F * $f20;

        $f19 = f1 + f0;

        f11 = f6 * $f19;

        $f22 = f3 + f2;

        f12 = f7 * $f22;

        $f21 = f5 + f4;

        f13 = f8 * $f21;

        $f24 = f5 * f4;

        $f23 = f8 * $f24;

        f14 = 2.0F * $f23;

        $i8 = i0 + 0;

        r0[$i8] = f9;

        $i9 = i0 + 5;

        r0[$i9] = f10;

        $i6 = i0 + 8;

        r0[$i6] = f11;

        $i7 = i0 + 9;

        r0[$i7] = f12;

        $i12 = i0 + 10;

        r0[$i12] = f13;

        $i13 = i0 + 14;

        r0[$i13] = f14;

        $i10 = i0 + 11;

        r0[$i10] = -1.0F;

        $i11 = i0 + 1;

        r0[$i11] = 0.0F;

        $i16 = i0 + 2;

        r0[$i16] = 0.0F;

        $i17 = i0 + 3;

        r0[$i17] = 0.0F;

        $i14 = i0 + 4;

        r0[$i14] = 0.0F;

        $i15 = i0 + 6;

        r0[$i15] = 0.0F;

        $i20 = i0 + 7;

        r0[$i20] = 0.0F;

        $i21 = i0 + 12;

        r0[$i21] = 0.0F;

        $i18 = i0 + 13;

        r0[$i18] = 0.0F;

        $i19 = i0 + 15;

        r0[$i19] = 0.0F;

        return;
    }

    public static boolean invertM(float[], int, float[], int)
    {
        float[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77, $f78, $f79, $f80, $f81, $f82, $f83, $f84, $f85, $f86, $f87, $f88, $f89, $f90, $f91, $f92, $f93, $f94, $f95, $f96, $f97, $f98, $f99, $f100, $f101, $f102, $f103, $f104, $f105, $f106, $f107, $f108, $f109, $f110, $f111, $f112, $f113, $f114, $f115, $f116, $f117, $f118, $f119, $f120, $f121, $f122, $f123, $f124, $f125, $f126, $f127, $f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135, $f136, $f137, $f138, $f139, $f140, $f141, $f142, $f143, $f144, $f145, $f146, $f147, $f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155, $f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163, $f164, $f165, $f166, $f167, $f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175, $f176, $f177, $f178, $f179, $f180, $f181, $f182, $f183, $f184, $f185, $f186, $f187, $f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195, $f196, $f197, $f198, $f199, $f200, $f201, $f202, $f203, $f204, $f205, $f206, $f207, $f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215, $f216, $f217, $f218, $f219, $f220, $f221, $f222, $f223, $f224, $f225, $f226, $f227, $f228, $f229, $f230, $f231, $f232, $f233, $f234, $f235, $f236, $f237, $f238, $f239;
        byte $b23;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        $i3 = i1 + 0;

        f0 = r1[$i3];

        $i2 = i1 + 1;

        f1 = r1[$i2];

        $i8 = i1 + 2;

        f2 = r1[$i8];

        $i9 = i1 + 3;

        f3 = r1[$i9];

        $i10 = i1 + 4;

        f4 = r1[$i10];

        $i11 = i1 + 5;

        f5 = r1[$i11];

        $i4 = i1 + 6;

        f6 = r1[$i4];

        $i5 = i1 + 7;

        f7 = r1[$i5];

        $i6 = i1 + 8;

        f8 = r1[$i6];

        $i7 = i1 + 9;

        f9 = r1[$i7];

        $i14 = i1 + 10;

        f10 = r1[$i14];

        $i15 = i1 + 11;

        f11 = r1[$i15];

        $i16 = i1 + 12;

        f13 = r1[$i16];

        $i17 = i1 + 13;

        f12 = r1[$i17];

        $i12 = i1 + 14;

        f15 = r1[$i12];

        $i13 = i1 + 15;

        f14 = r1[$i13];

        f17 = f10 * f14;

        f16 = f15 * f11;

        f19 = f6 * f14;

        f18 = f15 * f7;

        f21 = f6 * f11;

        f20 = f10 * f7;

        f23 = f2 * f14;

        f22 = f15 * f3;

        f25 = f2 * f11;

        f24 = f10 * f3;

        f27 = f2 * f7;

        f26 = f6 * f3;

        $f59 = f17 * f5;

        $f58 = f18 * f9;

        $f64 = $f59 + $f58;

        $f65 = f21 * f12;

        $f62 = $f64 + $f65;

        $f66 = f16 * f5;

        $f67 = f19 * f9;

        $f60 = $f66 + $f67;

        $f61 = f20 * f12;

        $f63 = $f60 + $f61;

        f30 = $f62 - $f63;

        $f72 = f16 * f1;

        $f73 = f23 * f9;

        $f74 = $f72 + $f73;

        $f75 = f24 * f12;

        $f83 = $f74 + $f75;

        $f68 = f17 * f1;

        $f69 = f22 * f9;

        $f70 = $f68 + $f69;

        $f71 = f25 * f12;

        $f82 = $f70 + $f71;

        f31 = $f83 - $f82;

        $f81 = f19 * f1;

        $f80 = f22 * f5;

        $f79 = $f81 + $f80;

        $f78 = f27 * f12;

        $f89 = $f79 + $f78;

        $f77 = f18 * f1;

        $f76 = f23 * f5;

        $f91 = $f77 + $f76;

        $f90 = f26 * f12;

        $f88 = $f91 + $f90;

        f28 = $f89 - $f88;

        $f87 = f20 * f1;

        $f86 = f25 * f5;

        $f85 = $f87 + $f86;

        $f84 = f26 * f9;

        $f94 = $f85 + $f84;

        $f98 = f21 * f1;

        $f99 = f24 * f5;

        $f96 = $f98 + $f99;

        $f97 = f27 * f9;

        $f95 = $f96 + $f97;

        f29 = $f94 - $f95;

        $f92 = f16 * f4;

        $f93 = f19 * f8;

        $f106 = $f92 + $f93;

        $f107 = f20 * f13;

        $f100 = $f106 + $f107;

        $f104 = f17 * f4;

        $f105 = f18 * f8;

        $f102 = $f104 + $f105;

        $f103 = f21 * f13;

        $f101 = $f102 + $f103;

        f34 = $f100 - $f101;

        $f116 = f17 * f0;

        $f117 = f22 * f8;

        $f118 = $f116 + $f117;

        $f119 = f25 * f13;

        $f108 = $f118 + $f119;

        $f120 = f16 * f0;

        $f121 = f23 * f8;

        $f122 = $f120 + $f121;

        $f123 = f24 * f13;

        $f109 = $f122 + $f123;

        f35 = $f108 - $f109;

        $f110 = f18 * f0;

        $f111 = f23 * f4;

        $f112 = $f110 + $f111;

        $f113 = f26 * f13;

        $f135 = $f112 + $f113;

        $f114 = f19 * f0;

        $f115 = f22 * f4;

        $f133 = $f114 + $f115;

        $f132 = f27 * f13;

        $f134 = $f133 + $f132;

        f32 = $f135 - $f134;

        $f137 = f21 * f0;

        $f136 = f24 * f4;

        $f139 = $f137 + $f136;

        $f138 = f27 * f8;

        $f129 = $f139 + $f138;

        $f125 = f20 * f0;

        $f124 = f25 * f4;

        $f127 = $f125 + $f124;

        $f126 = f26 * f8;

        $f128 = $f127 + $f126;

        f33 = $f129 - $f128;

        f38 = f8 * f12;

        f39 = f13 * f9;

        f36 = f4 * f12;

        f37 = f13 * f5;

        f42 = f4 * f9;

        f43 = f8 * f5;

        f40 = f0 * f12;

        f41 = f13 * f1;

        f47 = f0 * f9;

        f46 = f8 * f1;

        f45 = f0 * f5;

        f44 = f4 * f1;

        $f131 = f38 * f7;

        $f130 = f37 * f11;

        $f150 = $f131 + $f130;

        $f151 = f42 * f14;

        $f152 = $f150 + $f151;

        $f148 = f39 * f7;

        $f149 = f36 * f11;

        $f154 = $f148 + $f149;

        $f155 = f43 * f14;

        $f153 = $f154 + $f155;

        f51 = $f152 - $f153;

        $f142 = f39 * f3;

        $f143 = f40 * f11;

        $f140 = $f142 + $f143;

        $f141 = f46 * f14;

        $f167 = $f140 + $f141;

        $f146 = f38 * f3;

        $f147 = f41 * f11;

        $f144 = $f146 + $f147;

        $f145 = f47 * f14;

        $f166 = $f144 + $f145;

        f50 = $f167 - $f166;

        $f165 = f36 * f3;

        $f164 = f41 * f7;

        $f171 = $f165 + $f164;

        $f170 = f45 * f14;

        $f157 = $f171 + $f170;

        $f169 = f37 * f3;

        $f168 = f40 * f7;

        $f159 = $f169 + $f168;

        $f158 = f44 * f14;

        $f156 = $f159 + $f158;

        f49 = $f157 - $f156;

        $f163 = f43 * f3;

        $f162 = f47 * f7;

        $f161 = $f163 + $f162;

        $f160 = f44 * f11;

        $f180 = $f161 + $f160;

        $f184 = f42 * f3;

        $f185 = f46 * f7;

        $f186 = $f184 + $f185;

        $f187 = f45 * f11;

        $f181 = $f186 + $f187;

        f48 = $f180 - $f181;

        $f182 = f36 * f10;

        $f183 = f43 * f15;

        $f176 = $f182 + $f183;

        $f177 = f39 * f6;

        $f174 = $f176 + $f177;

        $f178 = f42 * f15;

        $f179 = f38 * f6;

        $f172 = $f178 + $f179;

        $f173 = f37 * f10;

        $f175 = $f172 + $f173;

        f55 = $f174 - $f175;

        $f201 = f47 * f15;

        $f200 = f38 * f2;

        $f203 = $f201 + $f200;

        $f202 = f41 * f10;

        $f193 = $f203 + $f202;

        $f197 = f40 * f10;

        $f196 = f46 * f15;

        $f199 = $f197 + $f196;

        $f198 = f39 * f2;

        $f192 = $f199 + $f198;

        f54 = $f193 - $f192;

        $f195 = f40 * f6;

        $f194 = f44 * f15;

        $f189 = $f195 + $f194;

        $f188 = f37 * f2;

        $f216 = $f189 + $f188;

        $f191 = f45 * f15;

        $f190 = f36 * f2;

        $f218 = $f191 + $f190;

        $f219 = f41 * f6;

        $f217 = $f218 + $f219;

        f53 = $f216 - $f217;

        $f214 = f45 * f10;

        $f215 = f42 * f2;

        $f212 = $f214 + $f215;

        $f213 = f46 * f6;

        $f206 = $f212 + $f213;

        $f210 = f47 * f6;

        $f211 = f44 * f10;

        $f208 = $f210 + $f211;

        $f209 = f43 * f2;

        $f207 = $f208 + $f209;

        f52 = $f206 - $f207;

        $f204 = f0 * f30;

        $f205 = f4 * f31;

        $f229 = $f204 + $f205;

        $f228 = f8 * f28;

        $f227 = $f229 + $f228;

        $f226 = f13 * f29;

        f57 = $f227 + $f226;

        $b23 = f57 cmpl 0.0F;

        if $b23 != 0 goto label1;

        return 0;

     label1:
        f56 = 1.0F / f57;

        $f225 = f30 * f56;

        r0[i0] = $f225;

        $i22 = i0 + 1;

        $f224 = f31 * f56;

        r0[$i22] = $f224;

        $i21 = i0 + 2;

        $f223 = f28 * f56;

        r0[$i21] = $f223;

        $i20 = i0 + 3;

        $f222 = f29 * f56;

        r0[$i20] = $f222;

        $i19 = i0 + 4;

        $f221 = f34 * f56;

        r0[$i19] = $f221;

        $i18 = i0 + 5;

        $f220 = f35 * f56;

        r0[$i18] = $f220;

        $i27 = i0 + 6;

        $f233 = f32 * f56;

        r0[$i27] = $f233;

        $i26 = i0 + 7;

        $f232 = f33 * f56;

        r0[$i26] = $f232;

        $i29 = i0 + 8;

        $f235 = f51 * f56;

        r0[$i29] = $f235;

        $i28 = i0 + 9;

        $f234 = f50 * f56;

        r0[$i28] = $f234;

        $i31 = i0 + 10;

        $f237 = f49 * f56;

        r0[$i31] = $f237;

        $i30 = i0 + 11;

        $f236 = f48 * f56;

        r0[$i30] = $f236;

        $i33 = i0 + 12;

        $f239 = f55 * f56;

        r0[$i33] = $f239;

        $i32 = i0 + 13;

        $f238 = f54 * f56;

        r0[$i32] = $f238;

        $i25 = i0 + 14;

        $f231 = f53 * f56;

        r0[$i25] = $f231;

        $i24 = i0 + 15;

        $f230 = f52 * f56;

        r0[$i24] = $f230;

        return 1;
    }

    public static float length(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;
        double $d0, $d1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f4 = f0 * f0;

        $f3 = f1 * f1;

        $f6 = $f4 + $f3;

        $f5 = f2 * f2;

        $f7 = $f6 + $f5;

        $d0 = (double) $f7;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f8 = (float) $d1;

        return $f8;
    }

    public static native void multiplyMM(float[], int, float[], int, float[], int);

    public static native void multiplyMV(float[], int, float[], int, float[], int);

    public static void orthoM(float[], int, float, float, float, float, float, float)
    {
        float[] r0;
        int i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        byte $b1, $b2, $b3;
        java.lang.IllegalArgumentException $r1, $r2, $r3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        f5 := @parameter7: float;

        $b1 = f0 cmpl f1;

        if $b1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("left == right");

        throw $r2;

     label1:
        $b3 = f2 cmpl f3;

        if $b3 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bottom == top");

        throw $r1;

     label2:
        $b2 = f4 cmpl f5;

        if $b2 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near == far");

        throw $r3;

     label3:
        $f16 = f1 - f0;

        f6 = 1.0F / $f16;

        $f15 = f3 - f2;

        f7 = 1.0F / $f15;

        $f18 = f5 - f4;

        f8 = 1.0F / $f18;

        f9 = 2.0F * f6;

        f10 = 2.0F * f7;

        f11 = -2.0F * f8;

        $f17 = f1 + f0;

        $f20 = neg $f17;

        f12 = f6 * $f20;

        $f19 = f3 + f2;

        $f22 = neg $f19;

        f13 = f7 * $f22;

        $f21 = f5 + f4;

        $f23 = neg $f21;

        f14 = f8 * $f23;

        $i4 = i0 + 0;

        r0[$i4] = f9;

        $i6 = i0 + 5;

        r0[$i6] = f10;

        $i5 = i0 + 10;

        r0[$i5] = f11;

        $i9 = i0 + 12;

        r0[$i9] = f12;

        $i10 = i0 + 13;

        r0[$i10] = f13;

        $i7 = i0 + 14;

        r0[$i7] = f14;

        $i8 = i0 + 15;

        r0[$i8] = 1.0F;

        $i13 = i0 + 1;

        r0[$i13] = 0.0F;

        $i14 = i0 + 2;

        r0[$i14] = 0.0F;

        $i11 = i0 + 3;

        r0[$i11] = 0.0F;

        $i12 = i0 + 4;

        r0[$i12] = 0.0F;

        $i17 = i0 + 6;

        r0[$i17] = 0.0F;

        $i18 = i0 + 7;

        r0[$i18] = 0.0F;

        $i15 = i0 + 8;

        r0[$i15] = 0.0F;

        $i16 = i0 + 9;

        r0[$i16] = 0.0F;

        $i19 = i0 + 11;

        r0[$i19] = 0.0F;

        return;
    }

    public static void perspectiveM(float[], int, float, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        double $d0, $d1, $d2;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        $d0 = (double) f0;

        $d1 = 0.008726646259971648 * $d0;

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $f6 = (float) $d2;

        f4 = 1.0F / $f6;

        $f7 = f2 - f3;

        f5 = 1.0F / $f7;

        $i1 = i0 + 0;

        $f8 = f4 / f1;

        r0[$i1] = $f8;

        $i3 = i0 + 1;

        r0[$i3] = 0.0F;

        $i2 = i0 + 2;

        r0[$i2] = 0.0F;

        $i5 = i0 + 3;

        r0[$i5] = 0.0F;

        $i4 = i0 + 4;

        r0[$i4] = 0.0F;

        $i7 = i0 + 5;

        r0[$i7] = f4;

        $i6 = i0 + 6;

        r0[$i6] = 0.0F;

        $i9 = i0 + 7;

        r0[$i9] = 0.0F;

        $i8 = i0 + 8;

        r0[$i8] = 0.0F;

        $i10 = i0 + 9;

        r0[$i10] = 0.0F;

        $i11 = i0 + 10;

        $f9 = f3 + f2;

        $f10 = f5 * $f9;

        r0[$i11] = $f10;

        $i13 = i0 + 11;

        r0[$i13] = -1.0F;

        $i12 = i0 + 12;

        r0[$i12] = 0.0F;

        $i14 = i0 + 13;

        r0[$i14] = 0.0F;

        $i15 = i0 + 14;

        $f11 = 2.0F * f3;

        $f12 = f2 * $f11;

        $f13 = f5 * $f12;

        r0[$i15] = $f13;

        $i16 = i0 + 15;

        r0[$i16] = 0.0F;

        return;
    }

    public static void rotateM(float[], int, float, float, float, float)
    {
        float[] r0, r1, $r3, $r4, $r5, $r6;
        int i0;
        float f0, f1, f2, f3;
        java.lang.Throwable r2, $r7;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        r1 = <android.opengl.Matrix: float[] sTemp>;

        entermonitor r1;

     label1:
        $r3 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>($r3, 0, f0, f1, f2, f3);

        $r5 = <android.opengl.Matrix: float[] sTemp>;

        $r4 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r5, 16, r0, i0, $r4, 0);

        $r6 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 16, r0, i0, 16);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void rotateM(float[], int, float[], int, float, float, float, float)
    {
        float[] r0, r1, r2, $r4, $r5;
        int i0, i1;
        float f0, f1, f2, f3;
        java.lang.Throwable r3, $r6;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        f3 := @parameter7: float;

        r2 = <android.opengl.Matrix: float[] sTemp>;

        entermonitor r2;

     label1:
        $r4 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>($r4, 0, f0, f1, f2, f3);

        $r5 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r0, i0, r1, i1, $r5, 0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void scaleM(float[], int, float, float, float)
    {
        float[] r0;
        int i0, i1, i2, i3, i4;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        i1 = 0;

     label1:
        if i1 >= 4 goto label2;

        i2 = i0 + i1;

        $f3 = r0[i2];

        $f4 = f0 * $f3;

        r0[i2] = $f4;

        i3 = i2 + 4;

        $f5 = r0[i3];

        $f6 = f1 * $f5;

        r0[i3] = $f6;

        i4 = i2 + 8;

        $f7 = r0[i4];

        $f8 = f2 * $f7;

        r0[i4] = $f8;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void scaleM(float[], int, float[], int, float, float, float)
    {
        float[] r0, r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        i2 = 0;

     label1:
        if i2 >= 4 goto label2;

        i3 = i0 + i2;

        i4 = i1 + i2;

        $f3 = r1[i4];

        $f4 = f0 * $f3;

        r0[i3] = $f4;

        $i6 = i3 + 4;

        $i5 = i4 + 4;

        $f5 = r1[$i5];

        $f6 = f1 * $f5;

        r0[$i6] = $f6;

        $i8 = i3 + 8;

        $i7 = i4 + 8;

        $f7 = r1[$i7];

        $f8 = f2 * $f7;

        r0[$i8] = $f8;

        $i10 = i3 + 12;

        $i9 = i4 + 12;

        $f9 = r1[$i9];

        r0[$i10] = $f9;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setIdentityM(float[], int)
    {
        float[] r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 = 0;

     label1:
        if i1 >= 16 goto label2;

        $i4 = i0 + i1;

        r0[$i4] = 0.0F;

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = 0;

     label3:
        if i2 >= 16 goto label4;

        $i3 = i0 + i2;

        r0[$i3] = 1.0F;

        i2 = i2 + 5;

        goto label3;

     label4:
        return;
    }

    public static void setLookAtM(float[], int, float, float, float, float, float, float, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        f5 := @parameter7: float;

        f6 := @parameter8: float;

        f7 := @parameter9: float;

        f8 := @parameter10: float;

        f9 = f3 - f0;

        f10 = f4 - f1;

        f11 = f5 - f2;

        $f26 = staticinvoke <android.opengl.Matrix: float length(float,float,float)>(f9, f10, f11);

        f12 = 1.0F / $f26;

        f13 = f9 * f12;

        f15 = f10 * f12;

        f14 = f11 * f12;

        $f27 = f15 * f8;

        $f28 = f14 * f7;

        f17 = $f27 - $f28;

        $f32 = f14 * f6;

        $f31 = f13 * f8;

        f16 = $f32 - $f31;

        $f30 = f13 * f7;

        $f29 = f15 * f6;

        f19 = $f30 - $f29;

        $f35 = staticinvoke <android.opengl.Matrix: float length(float,float,float)>(f17, f16, f19);

        f18 = 1.0F / $f35;

        f21 = f17 * f18;

        f20 = f16 * f18;

        f23 = f19 * f18;

        $f34 = f20 * f14;

        $f33 = f23 * f15;

        f22 = $f34 - $f33;

        $f39 = f23 * f13;

        $f38 = f21 * f14;

        f25 = $f39 - $f38;

        $f37 = f21 * f15;

        $f36 = f20 * f13;

        f24 = $f37 - $f36;

        $i2 = i0 + 0;

        r0[$i2] = f21;

        $i3 = i0 + 1;

        r0[$i3] = f22;

        $i1 = i0 + 2;

        $f40 = neg f13;

        r0[$i1] = $f40;

        $i6 = i0 + 3;

        r0[$i6] = 0.0F;

        $i5 = i0 + 4;

        r0[$i5] = f20;

        $i4 = i0 + 5;

        r0[$i4] = f25;

        $i10 = i0 + 6;

        $f41 = neg f15;

        r0[$i10] = $f41;

        $i9 = i0 + 7;

        r0[$i9] = 0.0F;

        $i8 = i0 + 8;

        r0[$i8] = f23;

        $i7 = i0 + 9;

        r0[$i7] = f24;

        $i13 = i0 + 10;

        $f42 = neg f14;

        r0[$i13] = $f42;

        $i12 = i0 + 11;

        r0[$i12] = 0.0F;

        $i11 = i0 + 12;

        r0[$i11] = 0.0F;

        $i16 = i0 + 13;

        r0[$i16] = 0.0F;

        $i15 = i0 + 14;

        r0[$i15] = 0.0F;

        $i14 = i0 + 15;

        r0[$i14] = 1.0F;

        $f45 = neg f0;

        $f44 = neg f1;

        $f43 = neg f2;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>(r0, i0, $f45, $f44, $f43);

        return;
    }

    public static void setRotateEulerM(float[], int, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 = f0 * 0.017453292F;

        f4 = f1 * 0.017453292F;

        f5 = f2 * 0.017453292F;

        $d1 = (double) f3;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        f6 = (float) $d0;

        $d3 = (double) f3;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        f7 = (float) $d2;

        $d5 = (double) f4;

        $d4 = staticinvoke <java.lang.Math: double cos(double)>($d5);

        f8 = (float) $d4;

        $d7 = (double) f4;

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        f9 = (float) $d6;

        $d9 = (double) f5;

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d9);

        f10 = (float) $d8;

        $d11 = (double) f5;

        $d10 = staticinvoke <java.lang.Math: double sin(double)>($d11);

        f11 = (float) $d10;

        f12 = f6 * f9;

        f13 = f7 * f9;

        $i1 = i0 + 0;

        $f14 = f8 * f10;

        r0[$i1] = $f14;

        $i3 = i0 + 1;

        $f16 = neg f8;

        $f15 = f11 * $f16;

        r0[$i3] = $f15;

        $i4 = i0 + 2;

        r0[$i4] = f9;

        $i2 = i0 + 3;

        r0[$i2] = 0.0F;

        $i5 = i0 + 4;

        $f19 = f12 * f10;

        $f17 = f6 * f11;

        $f20 = $f19 + $f17;

        r0[$i5] = $f20;

        $i6 = i0 + 5;

        $f18 = neg f12;

        $f23 = f11 * $f18;

        $f22 = f6 * f10;

        $f21 = $f23 + $f22;

        r0[$i6] = $f21;

        $i7 = i0 + 6;

        $f24 = neg f7;

        $f25 = f8 * $f24;

        r0[$i7] = $f25;

        $i8 = i0 + 7;

        r0[$i8] = 0.0F;

        $i9 = i0 + 8;

        $f29 = neg f13;

        $f27 = f10 * $f29;

        $f28 = f7 * f11;

        $f26 = $f27 + $f28;

        r0[$i9] = $f26;

        $i12 = i0 + 9;

        $f31 = f13 * f11;

        $f32 = f7 * f10;

        $f30 = $f31 + $f32;

        r0[$i12] = $f30;

        $i11 = i0 + 10;

        $f33 = f6 * f8;

        r0[$i11] = $f33;

        $i10 = i0 + 11;

        r0[$i10] = 0.0F;

        $i16 = i0 + 12;

        r0[$i16] = 0.0F;

        $i15 = i0 + 13;

        r0[$i15] = 0.0F;

        $i14 = i0 + 14;

        r0[$i14] = 0.0F;

        $i13 = i0 + 15;

        r0[$i13] = 1.0F;

        return;
    }

    public static void setRotateM(float[], int, float, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i26, $i27, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i48, $i49, $i50, $i51, $i52, $i53;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39;
        double $d0, $d1, $d2, $d3;
        byte $b8, $b9, $b10, $b11, $b24, $b25, $b28, $b29, $b46, $b47;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        $i2 = i0 + 3;

        r0[$i2] = 0.0F;

        $i1 = i0 + 7;

        r0[$i1] = 0.0F;

        $i4 = i0 + 11;

        r0[$i4] = 0.0F;

        $i3 = i0 + 12;

        r0[$i3] = 0.0F;

        $i6 = i0 + 13;

        r0[$i6] = 0.0F;

        $i5 = i0 + 14;

        r0[$i5] = 0.0F;

        $i7 = i0 + 15;

        r0[$i7] = 1.0F;

        f4 = f0 * 0.017453292F;

        $d0 = (double) f4;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        f5 = (float) $d2;

        $d1 = (double) f4;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        f6 = (float) $d3;

        $b8 = 1.0F cmpl f1;

        if $b8 != 0 goto label1;

        $b47 = 0.0F cmpl f2;

        if $b47 != 0 goto label1;

        $b46 = 0.0F cmpl f3;

        if $b46 != 0 goto label1;

        $i49 = i0 + 5;

        r0[$i49] = f6;

        $i48 = i0 + 10;

        r0[$i48] = f6;

        $i43 = i0 + 6;

        r0[$i43] = f5;

        $i45 = i0 + 9;

        $f39 = neg f5;

        r0[$i45] = $f39;

        $i44 = i0 + 1;

        r0[$i44] = 0.0F;

        $i52 = i0 + 2;

        r0[$i52] = 0.0F;

        $i53 = i0 + 4;

        r0[$i53] = 0.0F;

        $i50 = i0 + 8;

        r0[$i50] = 0.0F;

        $i51 = i0 + 0;

        r0[$i51] = 1.0F;

        return;

     label1:
        $b10 = 0.0F cmpl f1;

        if $b10 != 0 goto label2;

        $b28 = 1.0F cmpl f2;

        if $b28 != 0 goto label2;

        $b29 = 0.0F cmpl f3;

        if $b29 != 0 goto label2;

        $i30 = i0 + 0;

        r0[$i30] = f6;

        $i31 = i0 + 10;

        r0[$i31] = f6;

        $i40 = i0 + 8;

        r0[$i40] = f5;

        $i42 = i0 + 2;

        $f38 = neg f5;

        r0[$i42] = $f38;

        $i41 = i0 + 1;

        r0[$i41] = 0.0F;

        $i37 = i0 + 4;

        r0[$i37] = 0.0F;

        $i36 = i0 + 6;

        r0[$i36] = 0.0F;

        $i39 = i0 + 9;

        r0[$i39] = 0.0F;

        $i38 = i0 + 5;

        r0[$i38] = 1.0F;

        return;

     label2:
        $b9 = 0.0F cmpl f1;

        if $b9 != 0 goto label3;

        $b24 = 0.0F cmpl f2;

        if $b24 != 0 goto label3;

        $b25 = 1.0F cmpl f3;

        if $b25 != 0 goto label3;

        $i26 = i0 + 0;

        r0[$i26] = f6;

        $i27 = i0 + 5;

        r0[$i27] = f6;

        $i21 = i0 + 1;

        r0[$i21] = f5;

        $i22 = i0 + 4;

        $f37 = neg f5;

        r0[$i22] = $f37;

        $i23 = i0 + 2;

        r0[$i23] = 0.0F;

        $i32 = i0 + 6;

        r0[$i32] = 0.0F;

        $i33 = i0 + 8;

        r0[$i33] = 0.0F;

        $i34 = i0 + 9;

        r0[$i34] = 0.0F;

        $i35 = i0 + 10;

        r0[$i35] = 1.0F;

        return;

     label3:
        f7 = staticinvoke <android.opengl.Matrix: float length(float,float,float)>(f1, f2, f3);

        $b11 = 1.0F cmpl f7;

        if $b11 == 0 goto label4;

        f14 = 1.0F / f7;

        f1 = f1 * f14;

        f2 = f2 * f14;

        f3 = f3 * f14;

     label4:
        f8 = 1.0F - f6;

        f9 = f1 * f2;

        f10 = f2 * f3;

        f11 = f3 * f1;

        f12 = f1 * f5;

        f13 = f2 * f5;

        f15 = f3 * f5;

        $i12 = i0 + 0;

        $f16 = f1 * f1;

        $f17 = f8 * $f16;

        $f20 = f6 + $f17;

        r0[$i12] = $f20;

        $i14 = i0 + 4;

        $f18 = f9 * f8;

        $f19 = $f18 - f15;

        r0[$i14] = $f19;

        $i13 = i0 + 8;

        $f22 = f11 * f8;

        $f21 = f13 + $f22;

        r0[$i13] = $f21;

        $i15 = i0 + 1;

        $f24 = f9 * f8;

        $f25 = f15 + $f24;

        r0[$i15] = $f25;

        $i16 = i0 + 5;

        $f23 = f2 * f2;

        $f28 = f8 * $f23;

        $f27 = f6 + $f28;

        r0[$i16] = $f27;

        $i17 = i0 + 9;

        $f26 = f10 * f8;

        $f31 = $f26 - f12;

        r0[$i17] = $f31;

        $i19 = i0 + 2;

        $f30 = f11 * f8;

        $f29 = $f30 - f13;

        r0[$i19] = $f29;

        $i18 = i0 + 6;

        $f33 = f10 * f8;

        $f32 = f12 + $f33;

        r0[$i18] = $f32;

        $i20 = i0 + 10;

        $f36 = f3 * f3;

        $f35 = f8 * $f36;

        $f34 = f6 + $f35;

        r0[$i20] = $f34;

        return;
    }

    public static void translateM(float[], int, float, float, float)
    {
        float[] r0;
        int i0, i1, i2, i3, $i4, $i5;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        i1 = 0;

     label1:
        if i1 >= 4 goto label2;

        i2 = i0 + i1;

        i3 = i2 + 12;

        $f12 = r0[i3];

        $f3 = r0[i2];

        $f6 = f0 * $f3;

        $i4 = i2 + 4;

        $f4 = r0[$i4];

        $f5 = f1 * $f4;

        $f10 = $f6 + $f5;

        $i5 = i2 + 8;

        $f7 = r0[$i5];

        $f8 = f2 * $f7;

        $f9 = $f10 + $f8;

        $f11 = $f12 + $f9;

        r0[i3] = $f11;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void translateM(float[], int, float[], int, float, float, float)
    {
        float[] r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        i2 = 0;

     label1:
        if i2 >= 12 goto label2;

        $i11 = i0 + i2;

        $i9 = i1 + i2;

        $f13 = r1[$i9];

        r0[$i11] = $f13;

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = 0;

     label3:
        if i3 >= 4 goto label4;

        i4 = i0 + i3;

        i5 = i1 + i3;

        $i10 = i4 + 12;

        $f3 = r1[i5];

        $f6 = f0 * $f3;

        $i6 = i5 + 4;

        $f4 = r1[$i6];

        $f5 = f1 * $f4;

        $f8 = $f6 + $f5;

        $i7 = i5 + 8;

        $f7 = r1[$i7];

        $f9 = f2 * $f7;

        $f12 = $f8 + $f9;

        $i8 = i5 + 12;

        $f10 = r1[$i8];

        $f11 = $f12 + $f10;

        r0[$i10] = $f11;

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public static void transposeM(float[], int, float[], int)
    {
        float[] r0, r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        i2 = 0;

     label1:
        if i2 >= 4 goto label2;

        $i4 = i2 * 4;

        i3 = i1 + $i4;

        $i5 = i2 + i0;

        $f0 = r1[i3];

        r0[$i5] = $f0;

        $i6 = i2 + 4;

        $i8 = i0 + $i6;

        $i7 = i3 + 1;

        $f1 = r1[$i7];

        r0[$i8] = $f1;

        $i9 = i2 + 8;

        $i12 = i0 + $i9;

        $i10 = i3 + 2;

        $f2 = r1[$i10];

        r0[$i12] = $f2;

        $i11 = i2 + 12;

        $i14 = i0 + $i11;

        $i13 = i3 + 3;

        $f3 = r1[$i13];

        r0[$i14] = $f3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
}
