public class android.view.accessibility.AccessibilityNodeInfoCache extends java.lang.Object
{
    private static final boolean CHECK_INTEGRITY_IF_DEBUGGABLE_BUILD;
    private static final boolean DEBUG;
    private static final boolean ENABLED;
    private static final java.lang.String LOG_TAG;
    private final android.util.LongSparseArray mCacheImpl;
    private final java.lang.Object mLock;
    private int mWindowId;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.view.accessibility.AccessibilityNodeInfoCache: boolean ENABLED> = 1;

        <android.view.accessibility.AccessibilityNodeInfoCache: boolean DEBUG> = 0;

        <android.view.accessibility.AccessibilityNodeInfoCache: boolean CHECK_INTEGRITY_IF_DEBUGGABLE_BUILD> = 1;

        $r0 = class "android/view/accessibility/AccessibilityNodeInfoCache";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.view.accessibility.AccessibilityNodeInfoCache: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>()
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        java.lang.Object $r1;
        android.util.LongSparseArray $r2;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock> = $r1;

        $r2 = new android.util.LongSparseArray;

        specialinvoke $r2.<android.util.LongSparseArray: void <init>()>();

        r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl> = $r2;

        return;
    }

    private void checkIntegrity()
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        java.lang.Object r1, $r15, $r19, $r34, $r41, $r54;
        java.lang.Throwable r2, $r55;
        android.view.accessibility.AccessibilityNodeInfo r3, r4, r5, r6, r9, r10, r12;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i8;
        java.util.HashSet r7, $r17;
        java.util.LinkedList r8, $r16;
        android.util.SparseLongArray r11;
        long l3, $l14;
        android.util.LongSparseArray $r13, $r14, $r18, $r20, $r40, $r49;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r21, $r27, $r32, $r35, $r37, $r44, $r45, $r47, $r48, $r50;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r33, $r36, $r38, $r39, $r42, $r43, $r46, $r51, $r52, $r53;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        r1 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r13 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $i5 = virtualinvoke $r13.<android.util.LongSparseArray: int size()>();

        if $i5 > 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r14 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r15 = virtualinvoke $r14.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(0);

        r3 = (android.view.accessibility.AccessibilityNodeInfo) $r15;

     label04:
        r4 = r3;

     label05:
        if r4 == null goto label08;

        r3 = r4;

     label06:
        $r49 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $l14 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()>();

        $r54 = virtualinvoke $r49.<android.util.LongSparseArray: java.lang.Object get(long)>($l14);

        r4 = (android.view.accessibility.AccessibilityNodeInfo) $r54;

     label07:
        goto label05;

     label08:
        i0 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>();

     label09:
        r5 = null;

        r6 = null;

     label10:
        $r17 = new java.util.HashSet;

        specialinvoke $r17.<java.util.HashSet: void <init>()>();

        r7 = $r17;

        $r16 = new java.util.LinkedList;

        specialinvoke $r16.<java.util.LinkedList: void <init>()>();

        r8 = $r16;

        interfaceinvoke r8.<java.util.Queue: boolean add(java.lang.Object)>(r3);

     label11:
        $z1 = interfaceinvoke r8.<java.util.Queue: boolean isEmpty()>();

        if $z1 != 0 goto label38;

        $r34 = interfaceinvoke r8.<java.util.Queue: java.lang.Object poll()>();

        r10 = (android.view.accessibility.AccessibilityNodeInfo) $r34;

        $z3 = virtualinvoke r7.<java.util.HashSet: boolean add(java.lang.Object)>(r10);

        if $z3 != 0 goto label16;

        $r50 = <android.view.accessibility.AccessibilityNodeInfoCache: java.lang.String LOG_TAG>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate node: ");

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r48 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r50, $r48);

        exitmonitor r1;

     label12:
        return;

     label13:
        $r55 := @caughtexception;

        r2 = $r55;

     label14:
        exitmonitor r1;

     label15:
        throw r2;

     label16:
        $z5 = virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>();

        if $z5 == 0 goto label19;

     label17:
        if r5 == null goto label36;

     label18:
        $r47 = <android.view.accessibility.AccessibilityNodeInfoCache: java.lang.String LOG_TAG>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate accessibility focus:");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r47, $r44);

     label19:
        $z4 = virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        if $z4 == 0 goto label22;

     label20:
        if r6 == null goto label37;

     label21:
        $r37 = <android.view.accessibility.AccessibilityNodeInfoCache: java.lang.String LOG_TAG>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate input focus: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r37, $r45);

     label22:
        r11 = virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: android.util.SparseLongArray getChildNodeIds()>();

        i2 = virtualinvoke r11.<android.util.SparseLongArray: int size()>();

     label23:
        i4 = 0;

     label24:
        if i4 >= i2 goto label11;

     label25:
        l3 = virtualinvoke r11.<android.util.SparseLongArray: long valueAt(int)>(i4);

        $r40 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r41 = virtualinvoke $r40.<android.util.LongSparseArray: java.lang.Object get(long)>(l3);

        r12 = (android.view.accessibility.AccessibilityNodeInfo) $r41;

     label26:
        if r12 == null goto label35;

     label27:
        interfaceinvoke r8.<java.util.Queue: boolean add(java.lang.Object)>(r12);

     label28:
        goto label35;

     label29:
        $r18 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $i6 = virtualinvoke $r18.<android.util.LongSparseArray: int size()>();

        if i1 >= $i6 goto label33;

        $r20 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r19 = virtualinvoke $r20.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i1);

        r9 = (android.view.accessibility.AccessibilityNodeInfo) $r19;

        $z2 = virtualinvoke r7.<java.util.HashSet: boolean contains(java.lang.Object)>(r9);

        if $z2 != 0 goto label39;

        $i7 = virtualinvoke r9.<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>();

        if $i7 != i0 goto label31;

        $r32 = <android.view.accessibility.AccessibilityNodeInfoCache: java.lang.String LOG_TAG>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disconneced node: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r32, $r35);

     label30:
        goto label39;

     label31:
        $r21 = <android.view.accessibility.AccessibilityNodeInfoCache: java.lang.String LOG_TAG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node from: ");

        $i8 = virtualinvoke r9.<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not from:");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r21, $r27);

     label32:
        goto label39;

     label33:
        exitmonitor r1;

     label34:
        return;

     label35:
        i4 = i4 + 1;

        goto label24;

     label36:
        r5 = r10;

        goto label19;

     label37:
        r6 = r10;

        goto label22;

     label38:
        i1 = 0;

        goto label29;

     label39:
        i1 = i1 + 1;

        goto label29;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
        catch java.lang.Throwable from label18 to label19 with label13;
        catch java.lang.Throwable from label19 to label20 with label13;
        catch java.lang.Throwable from label21 to label22 with label13;
        catch java.lang.Throwable from label22 to label23 with label13;
        catch java.lang.Throwable from label25 to label26 with label13;
        catch java.lang.Throwable from label27 to label28 with label13;
        catch java.lang.Throwable from label29 to label30 with label13;
        catch java.lang.Throwable from label31 to label32 with label13;
        catch java.lang.Throwable from label33 to label34 with label13;
    }

    private void clearSubTreeLocked(long)
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        long l0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        l0 := @parameter0: long;

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clearSubTreeRecursiveLocked(long)>(l0);

        return;
    }

    private void clearSubTreeRecursiveLocked(long)
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        long l0, $l3;
        android.view.accessibility.AccessibilityNodeInfo r1;
        android.util.SparseLongArray r2;
        int i1, i2;
        android.util.LongSparseArray $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        l0 := @parameter0: long;

        $r3 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r4 = virtualinvoke $r3.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r1 = (android.view.accessibility.AccessibilityNodeInfo) $r4;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r5 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        virtualinvoke $r5.<android.util.LongSparseArray: void remove(long)>(l0);

        r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: android.util.SparseLongArray getChildNodeIds()>();

        i1 = virtualinvoke r2.<android.util.SparseLongArray: int size()>();

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        $l3 = virtualinvoke r2.<android.util.SparseLongArray: long valueAt(int)>(i2);

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clearSubTreeRecursiveLocked(long)>($l3);

        i2 = i2 + 1;

        goto label3;
    }

    private void refreshCachedNode(long)
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        long l0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r6;
        android.view.accessibility.AccessibilityNodeInfo r3;
        android.util.LongSparseArray $r4;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        l0 := @parameter0: long;

        r1 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r5 = virtualinvoke $r4.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r3 = (android.view.accessibility.AccessibilityNodeInfo) $r5;

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $z0 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean refresh(boolean)>(1);

        if $z0 == 0 goto label10;

        exitmonitor r1;

     label06:
        return;

     label07:
        $r6 := @caughtexception;

        r2 = $r6;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clearSubTreeLocked(long)>(l0);

        exitmonitor r1;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    public void add(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        android.view.accessibility.AccessibilityNodeInfo r1, r4, r7;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, $r11;
        long l0, l3, l4, $l5;
        android.util.SparseLongArray r5, r6;
        int i1, i2, $i7;
        android.util.LongSparseArray $r9, $r10;
        byte $b6;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r2 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        l0 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $r9 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r8 = virtualinvoke $r9.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r4 = (android.view.accessibility.AccessibilityNodeInfo) $r8;

     label02:
        if r4 == null goto label09;

     label03:
        r5 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: android.util.SparseLongArray getChildNodeIds()>();

        r6 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: android.util.SparseLongArray getChildNodeIds()>();

        i1 = virtualinvoke r5.<android.util.SparseLongArray: int size()>();

     label04:
        i2 = 0;

     label05:
        if i2 >= i1 goto label08;

     label06:
        l3 = virtualinvoke r5.<android.util.SparseLongArray: long valueAt(int)>(i2);

        $i7 = virtualinvoke r6.<android.util.SparseLongArray: int indexOfValue(long)>(l3);

        if $i7 >= 0 goto label14;

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clearSubTreeLocked(long)>(l3);

     label07:
        goto label14;

     label08:
        l4 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()>();

        $l5 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()>();

        $b6 = $l5 cmp l4;

        if $b6 == 0 goto label09;

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clearSubTreeLocked(long)>(l4);

     label09:
        r7 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r10 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        virtualinvoke $r10.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, r7);

        exitmonitor r2;

     label10:
        return;

     label11:
        $r11 := @caughtexception;

        r3 = $r11;

     label12:
        exitmonitor r2;

     label13:
        throw r3;

     label14:
        i2 = i2 + 1;

        goto label05;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void clear()
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, $r8;
        int i0, i1;
        android.util.LongSparseArray $r3, $r4, $r5;
        android.view.accessibility.AccessibilityNodeInfo $r7;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        r1 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        i0 = virtualinvoke $r3.<android.util.LongSparseArray: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r5 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r6 = virtualinvoke $r5.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i1);

        $r7 = (android.view.accessibility.AccessibilityNodeInfo) $r6;

        virtualinvoke $r7.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        $r4 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        virtualinvoke $r4.<android.util.LongSparseArray: void clear()>();

        exitmonitor r1;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

        r2 = $r8;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.view.accessibility.AccessibilityNodeInfo get(long)
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        long l0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r6;
        android.view.accessibility.AccessibilityNodeInfo r3;
        android.util.LongSparseArray $r4;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        l0 := @parameter0: long;

        r1 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: android.util.LongSparseArray mCacheImpl>;

        $r5 = virtualinvoke $r4.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r3 = (android.view.accessibility.AccessibilityNodeInfo) $r5;

     label2:
        if r3 == null goto label4;

     label3:
        r3 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>(r3);

     label4:
        exitmonitor r1;

     label5:
        return r3;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.accessibility.AccessibilityNodeInfoCache r0;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.Object r2, r4;
        java.lang.Throwable r3, r5, $r6, $r7;
        long l0, $l3, $l7;
        int i1, $i2, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfoCache;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        lookupswitch($i2)
        {
            case 4: goto label04;
            case 8: goto label04;
            case 16: goto label04;
            case 32: goto label03;
            case 128: goto label03;
            case 256: goto label03;
            case 1024: goto label03;
            case 2048: goto label11;
            case 4096: goto label05;
            case 8192: goto label04;
            case 32768: goto label04;
            case 65536: goto label04;
            default: goto label01;
        };

     label01:
        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label02;

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void checkIntegrity()>();

     label02:
        return;

     label03:
        i1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        $i6 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: int mWindowId>;

        if $i6 == i1 goto label01;

        r0.<android.view.accessibility.AccessibilityNodeInfoCache: int mWindowId> = i1;

        virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clear()>();

        goto label01;

     label04:
        $l7 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void refreshCachedNode(long)>($l7);

        goto label01;

     label05:
        r4 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock>;

        entermonitor r4;

     label06:
        $l3 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clearSubTreeLocked(long)>($l3);

        exitmonitor r4;

     label07:
        goto label01;

     label08:
        $r6 := @caughtexception;

        r5 = $r6;

     label09:
        exitmonitor r4;

     label10:
        throw r5;

     label11:
        r2 = r0.<android.view.accessibility.AccessibilityNodeInfoCache: java.lang.Object mLock>;

        entermonitor r2;

     label12:
        l0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        $i4 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>();

        $i5 = 1 & $i4;

        if $i5 == 0 goto label18;

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void clearSubTreeLocked(long)>(l0);

     label13:
        exitmonitor r2;

     label14:
        goto label01;

     label15:
        $r7 := @caughtexception;

        r3 = $r7;

     label16:
        exitmonitor r2;

     label17:
        throw r3;

     label18:
        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfoCache: void refreshCachedNode(long)>(l0);

     label19:
        goto label13;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label18 to label19 with label15;
    }
}
