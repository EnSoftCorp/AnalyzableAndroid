public class android.filterpacks.videosrc.CameraSource extends android.filterfw.core.Filter
{
    private static final int NEWFRAME_TIMEOUT;
    private static final int NEWFRAME_TIMEOUT_REPEAT;
    private static final java.lang.String TAG;
    private static final java.lang.String mFrameShader;
    private static final float[] mSourceCoords;
    private android.hardware.Camera mCamera;
    private android.filterfw.core.GLFrame mCameraFrame;
    private int mCameraId;
    private android.hardware.Camera$Parameters mCameraParameters;
    private float[] mCameraTransform;
    private int mFps;
    private android.filterfw.core.ShaderProgram mFrameExtractor;
    private int mHeight;
    private final boolean mLogVerbose;
    private float[] mMappedCoords;
    private boolean mNewFrameAvailable;
    private android.filterfw.core.MutableFrameFormat mOutputFormat;
    private android.graphics.SurfaceTexture mSurfaceTexture;
    private boolean mWaitForNewFrame;
    private int mWidth;
    private android.graphics.SurfaceTexture$OnFrameAvailableListener onCameraFrameAvailableListener;

    static void <clinit>()
    {
        float[] $r0;

        <android.filterpacks.videosrc.CameraSource: java.lang.String mFrameShader> = "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nuniform samplerExternalOES tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n}\n";

        <android.filterpacks.videosrc.CameraSource: java.lang.String TAG> = "CameraSource";

        <android.filterpacks.videosrc.CameraSource: int NEWFRAME_TIMEOUT_REPEAT> = 10;

        <android.filterpacks.videosrc.CameraSource: int NEWFRAME_TIMEOUT> = 100;

        $r0 = newarray (float)[16];

        $r0[0] = 0.0F;

        $r0[1] = 1.0F;

        $r0[2] = 0.0F;

        $r0[3] = 1.0F;

        $r0[4] = 1.0F;

        $r0[5] = 1.0F;

        $r0[6] = 0.0F;

        $r0[7] = 1.0F;

        $r0[8] = 0.0F;

        $r0[9] = 0.0F;

        $r0[10] = 0.0F;

        $r0[11] = 1.0F;

        $r0[12] = 1.0F;

        $r0[13] = 0.0F;

        $r0[14] = 0.0F;

        $r0[15] = 1.0F;

        <android.filterpacks.videosrc.CameraSource: float[] mSourceCoords> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        android.filterpacks.videosrc.CameraSource r0;
        java.lang.String r1;
        android.filterpacks.videosrc.CameraSource$1 $r2;
        float[] $r3, $r4;
        boolean $z0;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.videosrc.CameraSource: int mCameraId> = 0;

        r0.<android.filterpacks.videosrc.CameraSource: int mWidth> = 320;

        r0.<android.filterpacks.videosrc.CameraSource: int mHeight> = 240;

        r0.<android.filterpacks.videosrc.CameraSource: int mFps> = 30;

        r0.<android.filterpacks.videosrc.CameraSource: boolean mWaitForNewFrame> = 1;

        $r2 = new android.filterpacks.videosrc.CameraSource$1;

        specialinvoke $r2.<android.filterpacks.videosrc.CameraSource$1: void <init>(android.filterpacks.videosrc.CameraSource)>(r0);

        r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture$OnFrameAvailableListener onCameraFrameAvailableListener> = $r2;

        $r3 = newarray (float)[16];

        r0.<android.filterpacks.videosrc.CameraSource: float[] mCameraTransform> = $r3;

        $r4 = newarray (float)[16];

        r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords> = $r4;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CameraSource", 2);

        r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose> = $z0;

        return;
    }

    static boolean access$000(android.filterpacks.videosrc.CameraSource)
    {
        android.filterpacks.videosrc.CameraSource r0;
        boolean $z0;

        r0 := @parameter0: android.filterpacks.videosrc.CameraSource;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        return $z0;
    }

    static boolean access$102(android.filterpacks.videosrc.CameraSource, boolean)
    {
        android.filterpacks.videosrc.CameraSource r0;
        boolean z0;

        r0 := @parameter0: android.filterpacks.videosrc.CameraSource;

        z0 := @parameter1: boolean;

        r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable> = z0;

        return z0;
    }

    private void createFormats()
    {
        android.filterpacks.videosrc.CameraSource r0;
        int $i0, $i1;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        $i1 = r0.<android.filterpacks.videosrc.CameraSource: int mWidth>;

        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mHeight>;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>($i1, $i0, 3, 3);

        r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.MutableFrameFormat mOutputFormat> = $r1;

        return;
    }

    private int[] findClosestFpsRange(int, android.hardware.Camera$Parameters)
    {
        android.filterpacks.videosrc.CameraSource r0;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.hardware.Camera$Parameters r1;
        java.util.List r2;
        int[] r3, r5;
        java.util.Iterator r4;
        java.lang.Object $r6, $r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r15;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (int[]) $r6;

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (int[]) $r16;

        $i7 = r5[0];

        $i4 = i0 * 1000;

        if $i7 >= $i4 goto label1;

        $i5 = r5[1];

        $i8 = i0 * 1000;

        if $i5 <= $i8 goto label1;

        $i10 = r5[0];

        $i6 = r3[0];

        if $i10 <= $i6 goto label1;

        $i9 = r5[1];

        $i11 = r3[1];

        if $i9 >= $i11 goto label1;

        r3 = r5;

        goto label1;

     label2:
        $z1 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z1 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested fps: ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Closest frame rate range: [");

        $i1 = r3[0];

        $d0 = (double) $i1;

        $d1 = $d0 / 1000.0;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i2 = r3[1];

        $d3 = (double) $i2;

        $d2 = $d3 / 1000.0;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r15);

     label3:
        return r3;
    }

    private int[] findClosestSize(int, int, android.hardware.Camera$Parameters)
    {
        android.filterpacks.videosrc.CameraSource r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i8, $i9, $i10, $i11, $i12;
        android.hardware.Camera$Parameters r1;
        java.util.List r2;
        java.util.Iterator r3;
        android.hardware.Camera$Size r4, $r6, $r8;
        java.lang.Object $r5, $r7, $r20;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int[] $r10;
        java.lang.String $r21;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.hardware.Camera$Parameters;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

        i2 = -1;

        i3 = -1;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (android.hardware.Camera$Size) $r5;

        i4 = $r6.<android.hardware.Camera$Size: int width>;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (android.hardware.Camera$Size) $r7;

        i5 = $r8.<android.hardware.Camera$Size: int height>;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r20 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.hardware.Camera$Size) $r20;

        $i6 = r4.<android.hardware.Camera$Size: int width>;

        if $i6 > i0 goto label2;

        $i8 = r4.<android.hardware.Camera$Size: int height>;

        if $i8 > i1 goto label2;

        $i9 = r4.<android.hardware.Camera$Size: int width>;

        if $i9 < i2 goto label2;

        $i12 = r4.<android.hardware.Camera$Size: int height>;

        if $i12 < i3 goto label2;

        i2 = r4.<android.hardware.Camera$Size: int width>;

        i3 = r4.<android.hardware.Camera$Size: int height>;

     label2:
        $i10 = r4.<android.hardware.Camera$Size: int width>;

        if $i10 >= i4 goto label1;

        $i11 = r4.<android.hardware.Camera$Size: int height>;

        if $i11 >= i5 goto label1;

        i4 = r4.<android.hardware.Camera$Size: int width>;

        i5 = r4.<android.hardware.Camera$Size: int height>;

        goto label1;

     label3:
        if i2 != -1 goto label4;

        i2 = i4;

        i3 = i5;

     label4:
        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested resolution: (");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). Closest match: (");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r21);

     label5:
        $r10 = newarray (int)[2];

        $r10[0] = i2;

        $r10[1] = i3;

        return $r10;
    }

    public void close(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.hardware.Camera $r2;
        android.graphics.SurfaceTexture $r3;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Closing");

     label1:
        $r2 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        virtualinvoke $r2.<android.hardware.Camera: void release()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = null;

        $r3 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r3.<android.graphics.SurfaceTexture: void release()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture> = null;

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        int[] r3;
        boolean $z0;
        android.hardware.Camera$Parameters $r5, $r6, $r7;
        int $i0, $i1, $i2;
        android.hardware.Camera $r8;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("framerate");

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters getCameraParameters()>();

        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mFps>;

        $r5 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        r3 = specialinvoke r0.<android.filterpacks.videosrc.CameraSource: int[] findClosestFpsRange(int,android.hardware.Camera$Parameters)>($i0, $r5);

        $r6 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        $i2 = r3[0];

        $i1 = r3[1];

        virtualinvoke $r6.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i2, $i1);

        $r8 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r7 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        virtualinvoke $r8.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r7);

     label1:
        return;
    }

    public android.hardware.Camera$Parameters getCameraParameters()
    {
        android.filterpacks.videosrc.CameraSource r0;
        java.lang.Throwable r1, $r15;
        int[] r2, r3;
        android.hardware.Camera$Parameters r4, $r6, $r7, $r8, $r9, $r10, $r13;
        android.hardware.Camera r5, $r11, $r12, $r14;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        entermonitor r0;

     label01:
        $r6 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        if $r6 != null goto label08;

        r5 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

     label02:
        z0 = 0;

        if r5 != null goto label05;

     label03:
        $i9 = r0.<android.filterpacks.videosrc.CameraSource: int mCameraId>;

        $r14 = staticinvoke <android.hardware.Camera: android.hardware.Camera open(int)>($i9);

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = $r14;

     label04:
        z0 = 1;

     label05:
        $r11 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r13 = virtualinvoke $r11.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters> = $r13;

     label06:
        if z0 == 0 goto label08;

     label07:
        $r12 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        virtualinvoke $r12.<android.hardware.Camera: void release()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = null;

     label08:
        $i1 = r0.<android.filterpacks.videosrc.CameraSource: int mWidth>;

        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mHeight>;

        $r7 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        r2 = specialinvoke r0.<android.filterpacks.videosrc.CameraSource: int[] findClosestSize(int,int,android.hardware.Camera$Parameters)>($i1, $i0, $r7);

        $i2 = r2[0];

        r0.<android.filterpacks.videosrc.CameraSource: int mWidth> = $i2;

        $i3 = r2[1];

        r0.<android.filterpacks.videosrc.CameraSource: int mHeight> = $i3;

        $r8 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        $i5 = r0.<android.filterpacks.videosrc.CameraSource: int mWidth>;

        $i4 = r0.<android.filterpacks.videosrc.CameraSource: int mHeight>;

        virtualinvoke $r8.<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>($i5, $i4);

        $i6 = r0.<android.filterpacks.videosrc.CameraSource: int mFps>;

        $r9 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        r3 = specialinvoke r0.<android.filterpacks.videosrc.CameraSource: int[] findClosestFpsRange(int,android.hardware.Camera$Parameters)>($i6, $r9);

        $r10 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        $i8 = r3[0];

        $i7 = r3[1];

        virtualinvoke $r10.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i8, $i7);

        r4 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

     label09:
        exitmonitor r0;

        return r4;

     label10:
        $r15 := @caughtexception;

        r1 = $r15;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void open(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        java.io.IOException r2, $r18;
        boolean $z0;
        int $i0, $i1;
        android.hardware.Camera $r3, $r6, $r15, $r16;
        android.hardware.Camera$Parameters $r5;
        android.filterfw.core.FrameManager $r7;
        android.filterfw.core.MutableFrameFormat $r8;
        android.filterfw.core.Frame $r9;
        android.filterfw.core.GLFrame $r10, $r12;
        android.graphics.SurfaceTexture $r11, $r13, $r17;
        android.graphics.SurfaceTexture$OnFrameAvailableListener $r14;
        java.lang.StringBuilder $r19, $r22, $r23, $r24;
        java.lang.RuntimeException $r20;
        java.lang.String $r21, $r25;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Opening");

     label1:
        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mCameraId>;

        $r3 = staticinvoke <android.hardware.Camera: android.hardware.Camera open(int)>($i0);

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = $r3;

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters getCameraParameters()>();

        $r6 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r5 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        virtualinvoke $r6.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r5);

        specialinvoke r0.<android.filterpacks.videosrc.CameraSource: void createFormats()>();

        $r7 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r8 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        $r9 = virtualinvoke $r7.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)>($r8, 104, 0L);

        $r10 = (android.filterfw.core.GLFrame) $r9;

        r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame> = $r10;

        $r11 = new android.graphics.SurfaceTexture;

        $r12 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame>;

        $i1 = virtualinvoke $r12.<android.filterfw.core.GLFrame: int getTextureId()>();

        specialinvoke $r11.<android.graphics.SurfaceTexture: void <init>(int)>($i1);

        r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture> = $r11;

     label2:
        $r15 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r13 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r15.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>($r13);

     label3:
        $r17 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        $r14 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture$OnFrameAvailableListener onCameraFrameAvailableListener>;

        virtualinvoke $r17.<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>($r14);

        r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable> = 0;

        $r16 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        virtualinvoke $r16.<android.hardware.Camera: void startPreview()>();

        return;

     label4:
        $r18 := @caughtexception;

        r2 = $r18;

        $r20 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not bind camera surface texture: ");

        $r21 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r25);

        throw $r20;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void prepare(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.filterfw.core.ShaderProgram $r2;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Preparing");

     label1:
        $r2 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r2.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nuniform samplerExternalOES tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n}\n");

        r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.ShaderProgram mFrameExtractor> = $r2;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2;
        long l0;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8;
        android.graphics.SurfaceTexture $r4, $r5, $r24;
        float[] $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.filterfw.core.FrameManager $r18;
        android.filterfw.core.ShaderProgram $r19, $r21;
        android.filterfw.core.GLFrame $r20;
        android.filterfw.core.MutableFrameFormat $r22;
        java.lang.StringBuilder $r25, $r26, $r27, $r28, $r30, $r31, $r33;
        double $d0, $d1;
        java.lang.String $r29, $r36;
        java.lang.Thread $r32;
        java.lang.InterruptedException $r35;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Processing new frame");

     label01:
        $z1 = r0.<android.filterpacks.videosrc.CameraSource: boolean mWaitForNewFrame>;

        if $z1 == 0 goto label07;

     label02:
        $z6 = r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable>;

        if $z6 != 0 goto label06;

        goto label03;

     label03:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(100L);

     label04:
        goto label02;

     label05:
        $r35 := @caughtexception;

        $z8 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z8 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Interrupted while waiting for new frame");

        goto label02;

     label06:
        r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable> = 0;

        $z7 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z7 == 0 goto label07;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Got new frame");

     label07:
        $r4 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r4.<android.graphics.SurfaceTexture: void updateTexImage()>();

        $z2 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z2 == 0 goto label08;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using frame extractor in thread: ");

        $r32 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r36);

     label08:
        $r5 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        $r6 = r0.<android.filterpacks.videosrc.CameraSource: float[] mCameraTransform>;

        virtualinvoke $r5.<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>($r6);

        $r10 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $r7 = r0.<android.filterpacks.videosrc.CameraSource: float[] mCameraTransform>;

        $r8 = <android.filterpacks.videosrc.CameraSource: float[] mSourceCoords>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r10, 0, $r7, 0, $r8, 0);

        $r19 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.ShaderProgram mFrameExtractor>;

        $r9 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f7 = $r9[0];

        $r12 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f4 = $r12[1];

        $r11 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f3 = $r11[4];

        $r14 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f6 = $r14[5];

        $r13 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f5 = $r13[8];

        $r16 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f1 = $r16[9];

        $r15 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f2 = $r15[12];

        $r17 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f0 = $r17[13];

        virtualinvoke $r19.<android.filterfw.core.ShaderProgram: boolean setSourceRegion(float,float,float,float,float,float,float,float)>($f7, $f4, $f3, $f6, $f5, $f1, $f2, $f0);

        $r18 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r22 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        r2 = virtualinvoke $r18.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r22);

        $r21 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.ShaderProgram mFrameExtractor>;

        $r20 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame>;

        virtualinvoke $r21.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r20, r2);

        $r24 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        l0 = virtualinvoke $r24.<android.graphics.SurfaceTexture: long getTimestamp()>();

        $z4 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z4 == 0 goto label09;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timestamp: ");

        $d1 = (double) l0;

        $d0 = $d1 / 1.0E9;

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r29);

     label09:
        virtualinvoke r2.<android.filterfw.core.Frame: void setTimestamp(long)>(l0);

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("video", r2);

        virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        $z5 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z5 == 0 goto label10;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Done processing new frame");

     label10:
        return;

        catch java.lang.InterruptedException from label03 to label04 with label05;
    }

    public void setCameraParameters(android.hardware.Camera$Parameters)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.hardware.Camera$Parameters r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0, $i1;
        boolean $z0;
        android.hardware.Camera $r4;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.hardware.Camera$Parameters;

        entermonitor r0;

     label1:
        $i1 = r0.<android.filterpacks.videosrc.CameraSource: int mWidth>;

        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mHeight>;

        virtualinvoke r1.<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>($i1, $i0);

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters> = r1;

        $z0 = virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: boolean isOpen()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r3 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        virtualinvoke $r4.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setupPorts()
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 3);

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)>("video", $r1);

        return;
    }

    public void tearDown(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.GLFrame $r2, $r3;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame>;

        if $r2 == null goto label1;

        $r3 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame>;

        virtualinvoke $r3.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

     label1:
        return;
    }
}
