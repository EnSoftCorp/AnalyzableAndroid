public class android.test.DatabaseTestUtils extends java.lang.Object
{

    public void <init>()
    {
        android.test.DatabaseTestUtils r0;

        r0 := @this: android.test.DatabaseTestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertSchemaEquals(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0, r1;
        java.util.Set $r2, $r3;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        $r2 = staticinvoke <android.test.DatabaseTestUtils: java.util.Set getSchemaSet(android.database.sqlite.SQLiteDatabase)>(r0);

        $r3 = staticinvoke <android.test.DatabaseTestUtils: java.util.Set getSchemaSet(android.database.sqlite.SQLiteDatabase)>(r1);

        staticinvoke <android.test.MoreAsserts: void assertEquals(java.util.Set,java.util.Set)>($r2, $r3);

        return;
    }

    private static java.util.Set getSchemaSet(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.util.HashSet r1;
        android.database.Cursor r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.String $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT sql FROM sqlite_master", null);

     label1:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        goto label1;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        throw r3;

     label4:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
