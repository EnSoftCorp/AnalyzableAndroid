class gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask extends java.util.TimerTask
{
    java.lang.String callId;
    final gov.nist.javax.sip.clientauthutils.CredentialsCache this$0;
    java.lang.String userName;

    public void <init>(gov.nist.javax.sip.clientauthutils.CredentialsCache, java.lang.String, java.lang.String)
    {
        gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask r0;
        gov.nist.javax.sip.clientauthutils.CredentialsCache r1;
        java.lang.String r2, r3;

        r0 := @this: gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask;

        r1 := @parameter0: gov.nist.javax.sip.clientauthutils.CredentialsCache;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0.<gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask: gov.nist.javax.sip.clientauthutils.CredentialsCache this$0> = r1;

        specialinvoke r0.<java.util.TimerTask: void <init>()>();

        r0.<gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask: java.lang.String callId> = r3;

        r0.<gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask: java.lang.String userName> = r2;

        return;
    }

    public void run()
    {
        gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask r0;
        gov.nist.javax.sip.clientauthutils.CredentialsCache $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.String $r3;

        r0 := @this: gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask;

        $r1 = r0.<gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask: gov.nist.javax.sip.clientauthutils.CredentialsCache this$0>;

        $r2 = staticinvoke <gov.nist.javax.sip.clientauthutils.CredentialsCache: java.util.concurrent.ConcurrentHashMap access$000(gov.nist.javax.sip.clientauthutils.CredentialsCache)>($r1);

        $r3 = r0.<gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask: java.lang.String callId>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        return;
    }
}
