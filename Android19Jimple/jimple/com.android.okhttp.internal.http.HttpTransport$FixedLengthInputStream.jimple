class com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream extends com.android.okhttp.internal.http.AbstractHttpInputStream
{
    private int bytesRemaining;

    public void <init>(java.io.InputStream, java.net.CacheRequest, com.android.okhttp.internal.http.HttpEngine, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream r0;
        java.io.InputStream r1;
        java.net.CacheRequest r2;
        com.android.okhttp.internal.http.HttpEngine r3;
        int i0, $i1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.net.CacheRequest;

        r3 := @parameter2: com.android.okhttp.internal.http.HttpEngine;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: void <init>(java.io.InputStream,com.android.okhttp.internal.http.HttpEngine,java.net.CacheRequest)>(r1, r3, r2);

        r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining> = i0;

        $i1 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        if $i1 != 0 goto label1;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void endOfInput(boolean)>(0);

     label1:
        return;
    }

    public int available() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream r0;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void checkNotClosed()>();

        $i0 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        $i2 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        return $i3;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream r0;
        boolean $z0, $z1;
        int $i0;
        com.android.okhttp.internal.http.HttpEngine $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream;

        $z0 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        if $i0 == 0 goto label2;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $z1 = staticinvoke <com.android.okhttp.internal.http.HttpTransport: boolean access$200(com.android.okhttp.internal.http.HttpEngine,java.io.InputStream)>($r1, r0);

        if $z1 != 0 goto label2;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void unexpectedEndOfInput()>();

     label2:
        r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: boolean closed> = 1;

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.io.InputStream $r2;
        java.net.ProtocolException $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void checkNotClosed()>();

        $i4 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        if $i4 != 0 goto label2;

        i2 = -1;

     label1:
        return i2;

     label2:
        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: java.io.InputStream in>;

        $i5 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i5);

        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, $i6);

        if i2 != -1 goto label3;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void unexpectedEndOfInput()>();

        $r3 = new java.net.ProtocolException;

        specialinvoke $r3.<java.net.ProtocolException: void <init>(java.lang.String)>("unexpected end of stream");

        throw $r3;

     label3:
        $i7 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        $i8 = $i7 - i2;

        r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining> = $i8;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void cacheWrite(byte[],int,int)>(r1, i0, i2);

        $i9 = r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: int bytesRemaining>;

        if $i9 != 0 goto label1;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void endOfInput(boolean)>(0);

        return i2;
    }
}
