public final class libcore.io.NioBufferIterator extends libcore.io.BufferIterator
{
    private final long address;
    private int position;
    private final int size;
    private final boolean swap;

    void <init>(long, int, boolean)
    {
        libcore.io.NioBufferIterator r0;
        long l0;
        int i1;
        boolean z0;

        r0 := @this: libcore.io.NioBufferIterator;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<libcore.io.BufferIterator: void <init>()>();

        r0.<libcore.io.NioBufferIterator: long address> = l0;

        r0.<libcore.io.NioBufferIterator: int size> = i1;

        r0.<libcore.io.NioBufferIterator: boolean swap> = z0;

        return;
    }

    public byte readByte()
    {
        libcore.io.NioBufferIterator r0;
        byte b0;
        int $i1, $i5, $i6;
        long $l2, $l3, $l4;

        r0 := @this: libcore.io.NioBufferIterator;

        $l3 = r0.<libcore.io.NioBufferIterator: long address>;

        $i1 = r0.<libcore.io.NioBufferIterator: int position>;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        b0 = staticinvoke <libcore.io.Memory: byte peekByte(long)>($l4);

        $i5 = r0.<libcore.io.NioBufferIterator: int position>;

        $i6 = 1 + $i5;

        r0.<libcore.io.NioBufferIterator: int position> = $i6;

        return b0;
    }

    public void readByteArray(byte[], int, int)
    {
        libcore.io.NioBufferIterator r0;
        byte[] r1;
        int i0, i1, $i2, $i6, $i7;
        long $l3, $l4, $l5;

        r0 := @this: libcore.io.NioBufferIterator;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l4 = r0.<libcore.io.NioBufferIterator: long address>;

        $i2 = r0.<libcore.io.NioBufferIterator: int position>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekByteArray(long,byte[],int,int)>($l5, r1, i0, i1);

        $i6 = r0.<libcore.io.NioBufferIterator: int position>;

        $i7 = i1 + $i6;

        r0.<libcore.io.NioBufferIterator: int position> = $i7;

        return;
    }

    public int readInt()
    {
        libcore.io.NioBufferIterator r0;
        int i0, $i1, $i5, $i6;
        long $l2, $l3, $l4;
        boolean $z0;

        r0 := @this: libcore.io.NioBufferIterator;

        $l3 = r0.<libcore.io.NioBufferIterator: long address>;

        $i1 = r0.<libcore.io.NioBufferIterator: int position>;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        $z0 = r0.<libcore.io.NioBufferIterator: boolean swap>;

        i0 = staticinvoke <libcore.io.Memory: int peekInt(long,boolean)>($l4, $z0);

        $i5 = r0.<libcore.io.NioBufferIterator: int position>;

        $i6 = 4 + $i5;

        r0.<libcore.io.NioBufferIterator: int position> = $i6;

        return i0;
    }

    public void readIntArray(int[], int, int)
    {
        libcore.io.NioBufferIterator r0;
        int[] r1;
        int i0, i1, $i2, $i6, $i7, $i8;
        long $l3, $l4, $l5;
        boolean $z0;

        r0 := @this: libcore.io.NioBufferIterator;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l4 = r0.<libcore.io.NioBufferIterator: long address>;

        $i2 = r0.<libcore.io.NioBufferIterator: int position>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        $z0 = r0.<libcore.io.NioBufferIterator: boolean swap>;

        staticinvoke <libcore.io.Memory: void peekIntArray(long,int[],int,int,boolean)>($l5, r1, i0, i1, $z0);

        $i7 = r0.<libcore.io.NioBufferIterator: int position>;

        $i6 = i1 * 4;

        $i8 = $i7 + $i6;

        r0.<libcore.io.NioBufferIterator: int position> = $i8;

        return;
    }

    public short readShort()
    {
        libcore.io.NioBufferIterator r0;
        short s0;
        int $i1, $i5, $i6;
        long $l2, $l3, $l4;
        boolean $z0;

        r0 := @this: libcore.io.NioBufferIterator;

        $l3 = r0.<libcore.io.NioBufferIterator: long address>;

        $i1 = r0.<libcore.io.NioBufferIterator: int position>;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        $z0 = r0.<libcore.io.NioBufferIterator: boolean swap>;

        s0 = staticinvoke <libcore.io.Memory: short peekShort(long,boolean)>($l4, $z0);

        $i5 = r0.<libcore.io.NioBufferIterator: int position>;

        $i6 = 2 + $i5;

        r0.<libcore.io.NioBufferIterator: int position> = $i6;

        return s0;
    }

    public void seek(int)
    {
        libcore.io.NioBufferIterator r0;
        int i0;

        r0 := @this: libcore.io.NioBufferIterator;

        i0 := @parameter0: int;

        r0.<libcore.io.NioBufferIterator: int position> = i0;

        return;
    }

    public void skip(int)
    {
        libcore.io.NioBufferIterator r0;
        int i0, $i1, $i2;

        r0 := @this: libcore.io.NioBufferIterator;

        i0 := @parameter0: int;

        $i1 = r0.<libcore.io.NioBufferIterator: int position>;

        $i2 = i0 + $i1;

        r0.<libcore.io.NioBufferIterator: int position> = $i2;

        return;
    }
}
