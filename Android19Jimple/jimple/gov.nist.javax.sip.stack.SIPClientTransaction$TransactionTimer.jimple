public class gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer extends gov.nist.javax.sip.stack.SIPStackTimerTask
{
    final gov.nist.javax.sip.stack.SIPClientTransaction this$0;

    public void <init>(gov.nist.javax.sip.stack.SIPClientTransaction)
    {
        gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer r0;
        gov.nist.javax.sip.stack.SIPClientTransaction r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPClientTransaction;

        r0.<gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer: gov.nist.javax.sip.stack.SIPClientTransaction this$0> = r1;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPStackTimerTask: void <init>()>();

        return;
    }

    protected void runTask()
    {
        gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer r0;
        gov.nist.javax.sip.stack.SIPClientTransaction r1, $r12;
        gov.nist.javax.sip.stack.SIPTransactionStack r2;
        int i0, i1, $i2;
        gov.nist.javax.sip.stack.MessageChannel r4, $r6;
        gov.nist.javax.sip.stack.SIPTransaction$LingerTimer r5, $r13;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder $r7, $r9, $r10, $r16, $r17, $r18, $r19, $r22;
        gov.nist.core.StackLogger $r8, $r14;
        java.lang.String $r11, $r20;
        java.util.Timer $r15;
        java.lang.IllegalStateException $r21;

        r0 := @this: gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer;

        r1 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer: gov.nist.javax.sip.stack.SIPClientTransaction this$0>;

        r2 = r1.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isTerminated()>();

        if $z0 == 0 goto label7;

        $z1 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label1;

        $r14 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removing  = ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isReliable ");

        $z8 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r20);

     label1:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

     label2:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer: boolean cancel()>();

     label3:
        $z3 = r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheClientConnections>;

        if $z3 != 0 goto label6;

        $z7 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z7 == 0 goto label6;

        r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $i2 = r4.<gov.nist.javax.sip.stack.MessageChannel: int useCount>;

        i1 = -1 + $i2;

        r4.<gov.nist.javax.sip.stack.MessageChannel: int useCount> = i1;

        if i1 > 0 goto label4;

        $r13 = new gov.nist.javax.sip.stack.SIPTransaction$LingerTimer;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer: gov.nist.javax.sip.stack.SIPClientTransaction this$0>;

        specialinvoke $r13.<gov.nist.javax.sip.stack.SIPTransaction$LingerTimer: void <init>(gov.nist.javax.sip.stack.SIPTransaction)>($r12);

        r5 = $r13;

        $r15 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()>();

        virtualinvoke $r15.<java.util.Timer: void schedule(java.util.TimerTask,long)>(r5, 8000L);

     label4:
        return;

     label5:
        $r21 := @caughtexception;

        $z9 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAlive()>();

        if $z9 != 0 goto label3;

        return;

     label6:
        $z4 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label4;

        $z5 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isReliable()>();

        if $z5 == 0 goto label4;

        $r6 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        i0 = $r6.<gov.nist.javax.sip.stack.MessageChannel: int useCount>;

        $z6 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label4;

        $r8 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client Use Count = ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r11);

        return;

     label7:
        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: void fireTimer()>();

        return;

        catch java.lang.IllegalStateException from label2 to label3 with label5;
    }
}
