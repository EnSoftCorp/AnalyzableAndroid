public abstract class android.text.Layout extends java.lang.Object
{
    static final android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT;
    static final android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT;
    public static final int DIR_LEFT_TO_RIGHT;
    static final int DIR_REQUEST_DEFAULT_LTR;
    static final int DIR_REQUEST_DEFAULT_RTL;
    static final int DIR_REQUEST_LTR;
    static final int DIR_REQUEST_RTL;
    public static final int DIR_RIGHT_TO_LEFT;
    static final char[] ELLIPSIS_NORMAL;
    static final char[] ELLIPSIS_TWO_DOTS;
    static final android.emoji.EmojiFactory EMOJI_FACTORY;
    static final int MAX_EMOJI;
    static final int MIN_EMOJI;
    private static final android.text.style.ParagraphStyle[] NO_PARA_SPANS;
    static final int RUN_LENGTH_MASK;
    static final int RUN_LEVEL_MASK;
    static final int RUN_LEVEL_SHIFT;
    static final int RUN_RTL_FLAG;
    private static final int TAB_INCREMENT;
    private static final android.graphics.Rect sTempRect;
    private android.text.Layout$Alignment mAlignment;
    private android.text.SpanSet mLineBackgroundSpans;
    private android.text.TextPaint mPaint;
    private float mSpacingAdd;
    private float mSpacingMult;
    private boolean mSpannedText;
    private java.lang.CharSequence mText;
    private android.text.TextDirectionHeuristic mTextDir;
    private int mWidth;
    android.text.TextPaint mWorkPaint;

    static void <clinit>()
    {
        java.lang.Object[] $r0;
        android.text.style.ParagraphStyle[] $r1;
        android.emoji.EmojiFactory $r2, $r3, $r11, $r12;
        android.graphics.Rect $r4;
        android.text.Layout$Directions $r5, $r7;
        int[] $r6, $r8;
        char[] $r9, $r10;
        int $i0, $i1;

        <android.text.Layout: int TAB_INCREMENT> = 20;

        <android.text.Layout: int RUN_RTL_FLAG> = 67108864;

        <android.text.Layout: int RUN_LEVEL_SHIFT> = 26;

        <android.text.Layout: int RUN_LEVEL_MASK> = 63;

        <android.text.Layout: int RUN_LENGTH_MASK> = 67108863;

        <android.text.Layout: int DIR_RIGHT_TO_LEFT> = -1;

        <android.text.Layout: int DIR_REQUEST_RTL> = -1;

        <android.text.Layout: int DIR_REQUEST_LTR> = 1;

        <android.text.Layout: int DIR_REQUEST_DEFAULT_RTL> = -2;

        <android.text.Layout: int DIR_REQUEST_DEFAULT_LTR> = 2;

        <android.text.Layout: int DIR_LEFT_TO_RIGHT> = 1;

        $r0 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "android/text/style/ParagraphStyle");

        $r1 = (android.text.style.ParagraphStyle[]) $r0;

        <android.text.Layout: android.text.style.ParagraphStyle[] NO_PARA_SPANS> = $r1;

        $r2 = staticinvoke <android.emoji.EmojiFactory: android.emoji.EmojiFactory newAvailableInstance()>();

        <android.text.Layout: android.emoji.EmojiFactory EMOJI_FACTORY> = $r2;

        $r3 = <android.text.Layout: android.emoji.EmojiFactory EMOJI_FACTORY>;

        if $r3 == null goto label2;

        $r11 = <android.text.Layout: android.emoji.EmojiFactory EMOJI_FACTORY>;

        $i0 = virtualinvoke $r11.<android.emoji.EmojiFactory: int getMinimumAndroidPua()>();

        <android.text.Layout: int MIN_EMOJI> = $i0;

        $r12 = <android.text.Layout: android.emoji.EmojiFactory EMOJI_FACTORY>;

        $i1 = virtualinvoke $r12.<android.emoji.EmojiFactory: int getMaximumAndroidPua()>();

        <android.text.Layout: int MAX_EMOJI> = $i1;

     label1:
        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        <android.text.Layout: android.graphics.Rect sTempRect> = $r4;

        $r5 = new android.text.Layout$Directions;

        $r6 = newarray (int)[2];

        $r6[0] = 0;

        $r6[1] = 67108863;

        specialinvoke $r5.<android.text.Layout$Directions: void <init>(int[])>($r6);

        <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT> = $r5;

        $r7 = new android.text.Layout$Directions;

        $r8 = newarray (int)[2];

        $r8[0] = 0;

        $r8[1] = 134217727;

        specialinvoke $r7.<android.text.Layout$Directions: void <init>(int[])>($r8);

        <android.text.Layout: android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT> = $r7;

        $r9 = newarray (char)[1];

        $r9[0] = 8230;

        <android.text.Layout: char[] ELLIPSIS_NORMAL> = $r9;

        $r10 = newarray (char)[1];

        $r10[0] = 8229;

        <android.text.Layout: char[] ELLIPSIS_TWO_DOTS> = $r10;

        return;

     label2:
        <android.text.Layout: int MIN_EMOJI> = -1;

        <android.text.Layout: int MAX_EMOJI> = -1;

        goto label1;

        return;
    }

    protected void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float)
    {
        android.text.Layout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0;
        android.text.Layout$Alignment r3;
        float f0, f1;
        android.text.TextDirectionHeuristic $r4;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        $r4 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        specialinvoke r0.<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,android.text.TextDirectionHeuristic,float,float)>(r1, r2, i0, r3, $r4, f0, f1);

        return;
    }

    protected void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, android.text.TextDirectionHeuristic, float, float)
    {
        android.text.Layout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2, $r6;
        int i0;
        android.text.Layout$Alignment r3, $r5;
        android.text.TextDirectionHeuristic r4;
        float f0, f1;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        r4 := @parameter4: android.text.TextDirectionHeuristic;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        r0.<android.text.Layout: android.text.Layout$Alignment mAlignment> = $r5;

        if i0 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Layout: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        if r2 == null goto label2;

        r2.<android.text.TextPaint: int bgColor> = 0;

        r2.<android.text.TextPaint: int baselineShift> = 0;

     label2:
        r0.<android.text.Layout: java.lang.CharSequence mText> = r1;

        r0.<android.text.Layout: android.text.TextPaint mPaint> = r2;

        $r6 = new android.text.TextPaint;

        specialinvoke $r6.<android.text.TextPaint: void <init>()>();

        r0.<android.text.Layout: android.text.TextPaint mWorkPaint> = $r6;

        r0.<android.text.Layout: int mWidth> = i0;

        r0.<android.text.Layout: android.text.Layout$Alignment mAlignment> = r3;

        r0.<android.text.Layout: float mSpacingMult> = f0;

        r0.<android.text.Layout: float mSpacingAdd> = f1;

        $z0 = r1 instanceof android.text.Spanned;

        r0.<android.text.Layout: boolean mSpannedText> = $z0;

        r0.<android.text.Layout: android.text.TextDirectionHeuristic mTextDir> = r4;

        return;
    }

    static void access$000(android.text.Layout, int, int, int, char[], int, android.text.TextUtils$TruncateAt)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3;
        char[] r1;
        android.text.TextUtils$TruncateAt r2;

        r0 := @parameter0: android.text.Layout;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: char[];

        i3 := @parameter5: int;

        r2 := @parameter6: android.text.TextUtils$TruncateAt;

        specialinvoke r0.<android.text.Layout: void ellipsize(int,int,int,char[],int,android.text.TextUtils$TruncateAt)>(i0, i1, i2, r1, i3, r2);

        return;
    }

    private void addSelection(int, int, int, int, int, android.graphics.Path)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.graphics.Path r1;
        android.text.Layout$Directions r2;
        float f0, f1, f2, f3, $f4, $f5;
        int[] $r3, $r4, $r5;
        android.graphics.Path$Direction $r6;
        java.lang.CharSequence $r7;
        char $c18;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 := @parameter5: android.graphics.Path;

        i5 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        i6 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        if i6 <= i5 goto label1;

        $r7 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i17 = i6 - 1;

        $c18 = interfaceinvoke $r7.<java.lang.CharSequence: char charAt(int)>($i17);

        if $c18 != 10 goto label1;

        i6 = i6 + -1;

     label1:
        i7 = 0;

     label2:
        $r3 = r2.<android.text.Layout$Directions: int[] mDirections>;

        $i12 = lengthof $r3;

        if i7 >= $i12 goto label5;

        $r4 = r2.<android.text.Layout$Directions: int[] mDirections>;

        $i13 = $r4[i7];

        i8 = i5 + $i13;

        $r5 = r2.<android.text.Layout$Directions: int[] mDirections>;

        $i14 = i7 + 1;

        $i16 = $r5[$i14];

        $i15 = 67108863 & $i16;

        i9 = i8 + $i15;

        if i9 <= i6 goto label3;

        i9 = i6;

     label3:
        if i1 > i9 goto label4;

        if i2 < i8 goto label4;

        i10 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i8);

        i11 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i9);

        if i10 == i11 goto label4;

        f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,int,boolean)>(i10, 0, i0, 0);

        f2 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,int,boolean)>(i11, 1, i0, 0);

        f1 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f2);

        f3 = staticinvoke <java.lang.Math: float max(float,float)>(f0, f2);

        $f4 = (float) i3;

        $f5 = (float) i4;

        $r6 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke r1.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>(f1, $f4, f3, $f5, $r6);

     label4:
        i7 = i7 + 2;

        goto label2;

     label5:
        return;
    }

    private void ellipsize(int, int, int, char[], int, android.text.TextUtils$TruncateAt)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i9, $i10, $i11, $i12;
        char[] r1;
        android.text.TextUtils$TruncateAt r2;
        char c8;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: char[];

        i3 := @parameter4: int;

        r2 := @parameter5: android.text.TextUtils$TruncateAt;

        i4 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i2);

        if i4 != 0 goto label2;

     label1:
        return;

     label2:
        i5 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i2);

        i6 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i2);

        i7 = i5;

     label3:
        $i11 = i5 + i4;

        if i7 >= $i11 goto label1;

        if i7 != i5 goto label6;

        c8 = specialinvoke r0.<android.text.Layout: char getEllipsisChar(android.text.TextUtils$TruncateAt)>(r2);

     label4:
        i9 = i7 + i6;

        if i9 < i0 goto label5;

        if i9 >= i1 goto label5;

        $i10 = i3 + i9;

        $i12 = $i10 - i0;

        r1[$i12] = c8;

     label5:
        i7 = i7 + 1;

        goto label3;

     label6:
        c8 = 65279;

        goto label4;
    }

    public static float getDesiredWidth(java.lang.CharSequence, int, int, android.text.TextPaint)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3;
        android.text.TextPaint r1;
        float f0, f1;
        byte $b4;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.text.TextPaint;

        f0 = 0.0F;

        i2 = i0;

     label1:
        if i2 > i1 goto label4;

        i3 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>(r0, 10, i2, i1);

        if i3 >= 0 goto label2;

        i3 = i1;

     label2:
        f1 = staticinvoke <android.text.Layout: float measurePara(android.text.TextPaint,java.lang.CharSequence,int,int)>(r1, r0, i2, i3);

        $b4 = f1 cmpl f0;

        if $b4 <= 0 goto label3;

        f0 = f1;

     label3:
        i2 = i3 + 1;

        goto label1;

     label4:
        return f0;
    }

    public static float getDesiredWidth(java.lang.CharSequence, android.text.TextPaint)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        int $i0;
        float $f0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $f0 = staticinvoke <android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>(r0, 0, $i0, r1);

        return $f0;
    }

    private char getEllipsisChar(android.text.TextUtils$TruncateAt)
    {
        android.text.Layout r0;
        android.text.TextUtils$TruncateAt r1, $r2;
        char[] $r3, $r4;
        char $c0, $c1;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.text.TextUtils$TruncateAt;

        $r2 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END_SMALL>;

        if r1 != $r2 goto label1;

        $r4 = <android.text.Layout: char[] ELLIPSIS_TWO_DOTS>;

        $c1 = $r4[0];

        return $c1;

     label1:
        $r3 = <android.text.Layout: char[] ELLIPSIS_NORMAL>;

        $c0 = $r3[0];

        return $c0;
    }

    private float getHorizontal(int, boolean, int, boolean)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i11, $i12;
        boolean z0, z1, z2, z3;
        android.text.Layout$Directions r1;
        android.text.Layout$TabStops r2, $r12;
        android.text.TextLine r3;
        float f0, $f1, $f2, $f3;
        android.text.style.TabStopSpan[] r4;
        java.lang.CharSequence $r5, $r8, $r10;
        android.text.TextPaint $r6;
        byte $b10;
        android.text.Spanned $r9;
        java.lang.Object[] $r11;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        z1 := @parameter3: boolean;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        i3 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i1);

        i4 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i1);

        z2 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i1);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i1);

        r2 = null;

        if z2 == 0 goto label1;

        $r10 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        z3 = $r10 instanceof android.text.Spanned;

        r2 = null;

        if z3 == 0 goto label1;

        $r8 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $r9 = (android.text.Spanned) $r8;

        $r11 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r9, i2, i3, class "android/text/style/TabStopSpan");

        r4 = (android.text.style.TabStopSpan[]) $r11;

        i5 = lengthof r4;

        r2 = null;

        if i5 <= 0 goto label1;

        $r12 = new android.text.Layout$TabStops;

        specialinvoke $r12.<android.text.Layout$TabStops: void <init>(int,java.lang.Object[])>(20, r4);

        r2 = $r12;

     label1:
        r3 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r6 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        $r5 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        virtualinvoke r3.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>($r6, $r5, i2, i3, i4, r1, z2, r2);

        $i6 = i0 - i2;

        f0 = virtualinvoke r3.<android.text.TextLine: float measure(int,boolean,android.graphics.Paint$FontMetricsInt)>($i6, z0, null);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r3);

        if z1 == 0 goto label2;

        $i11 = r0.<android.text.Layout: int mWidth>;

        $f2 = (float) $i11;

        $b10 = f0 cmpl $f2;

        if $b10 <= 0 goto label2;

        $i12 = r0.<android.text.Layout: int mWidth>;

        f0 = (float) $i12;

     label2:
        $i8 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i1);

        $i7 = virtualinvoke r0.<android.text.Layout: int getParagraphRight(int)>(i1);

        $i9 = specialinvoke r0.<android.text.Layout: int getLineStartPos(int,int,int)>(i1, $i8, $i7);

        $f1 = (float) $i9;

        $f3 = f0 + $f1;

        return $f3;
    }

    private float getHorizontal(int, boolean, boolean)
    {
        android.text.Layout r0;
        int i0, $i1;
        boolean z0, z1;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        $f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,int,boolean)>(i0, z0, $i1, z1);

        return $f0;
    }

    private float getLineExtent(int, android.text.Layout$TabStops, boolean)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3;
        android.text.Layout$TabStops r1;
        boolean z0, z1;
        android.text.Layout$Directions r2;
        android.text.TextLine r3;
        float f0;
        java.lang.CharSequence $r4;
        android.text.TextPaint $r5;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.text.Layout$TabStops;

        z0 := @parameter2: boolean;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        if z0 == 0 goto label2;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

     label1:
        z1 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i0);

        r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        i3 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r3 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r5 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        $r4 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        virtualinvoke r3.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>($r5, $r4, i1, i2, i3, r2, z1, r1);

        f0 = virtualinvoke r3.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r3);

        return f0;

     label2:
        i2 = virtualinvoke r0.<android.text.Layout: int getLineVisibleEnd(int)>(i0);

        goto label1;
    }

    private float getLineExtent(int, boolean)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4;
        boolean z0, z1, z2;
        android.text.Layout$TabStops r1, $r11;
        android.text.Layout$Directions r2;
        android.text.TextLine r3;
        float f0;
        android.text.style.TabStopSpan[] r4;
        java.lang.CharSequence $r5, $r7, $r10;
        android.text.TextPaint $r6;
        android.text.Spanned $r9;
        java.lang.Object[] $r12;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        if z0 == 0 goto label3;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

     label1:
        z1 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i0);

        r1 = null;

        if z1 == 0 goto label2;

        $r7 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        z2 = $r7 instanceof android.text.Spanned;

        r1 = null;

        if z2 == 0 goto label2;

        $r10 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $r9 = (android.text.Spanned) $r10;

        $r12 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r9, i1, i2, class "android/text/style/TabStopSpan");

        r4 = (android.text.style.TabStopSpan[]) $r12;

        i4 = lengthof r4;

        r1 = null;

        if i4 <= 0 goto label2;

        $r11 = new android.text.Layout$TabStops;

        specialinvoke $r11.<android.text.Layout$TabStops: void <init>(int,java.lang.Object[])>(20, r4);

        r1 = $r11;

     label2:
        r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        if r2 != null goto label4;

        return 0.0F;

     label3:
        i2 = virtualinvoke r0.<android.text.Layout: int getLineVisibleEnd(int)>(i0);

        goto label1;

     label4:
        i3 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r3 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r6 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        $r5 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        virtualinvoke r3.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>($r6, $r5, i1, i2, i3, r2, z1, r1);

        f0 = virtualinvoke r3.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r3);

        return f0;
    }

    private int getLineStartPos(int, int, int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.text.Layout$Alignment r1, $r5, $r6, $r7, $r8;
        boolean z0, z1;
        android.text.Layout$TabStops r2, $r11;
        android.text.Spanned r3;
        android.text.style.TabStopSpan[] r4;
        float $f0;
        java.lang.CharSequence $r9;
        java.lang.Object[] $r10;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i0);

        i3 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        if r1 != $r5 goto label03;

        if i3 != 1 goto label02;

        r1 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

     label01:
        $r6 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r1 != $r6 goto label07;

        if i3 != 1 goto label06;

        return i1;

     label02:
        r1 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        goto label01;

     label03:
        $r7 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        if r1 != $r7 goto label01;

        if i3 != 1 goto label05;

        r1 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

     label04:
        goto label01;

     label05:
        r1 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        goto label04;

     label06:
        return i2;

     label07:
        z0 = r0.<android.text.Layout: boolean mSpannedText>;

        r2 = null;

        if z0 == 0 goto label08;

        z1 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i0);

        r2 = null;

        if z1 == 0 goto label08;

        $r9 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r3 = (android.text.Spanned) $r9;

        i6 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        $i14 = interfaceinvoke r3.<android.text.Spanned: int length()>();

        $i13 = interfaceinvoke r3.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i6, $i14, class "android/text/style/TabStopSpan");

        $r10 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r3, i6, $i13, class "android/text/style/TabStopSpan");

        r4 = (android.text.style.TabStopSpan[]) $r10;

        i7 = lengthof r4;

        r2 = null;

        if i7 <= 0 goto label08;

        $r11 = new android.text.Layout$TabStops;

        specialinvoke $r11.<android.text.Layout$TabStops: void <init>(int,java.lang.Object[])>(20, r4);

        r2 = $r11;

     label08:
        $f0 = specialinvoke r0.<android.text.Layout: float getLineExtent(int,android.text.Layout$TabStops,boolean)>(i0, r2, 0);

        i4 = (int) $f0;

        $r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        if r1 != $r8 goto label10;

        if i3 != 1 goto label09;

        $i12 = i2 - i4;

        return $i12;

     label09:
        $i10 = i1 - i4;

        return $i10;

     label10:
        i5 = i4 & -2;

        $i9 = i1 + i2;

        $i8 = $i9 - i5;

        $i11 = $i8 >> 1;

        return $i11;
    }

    private int getLineVisibleEnd(int, int, int)
    {
        android.text.Layout r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7;
        java.lang.CharSequence r1;
        char c3;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i4 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i5 = -1 + $i4;

        if i0 != $i5 goto label2;

        return i2;

     label1:
        i2 = i2 + -1;

     label2:
        if i2 <= i1 goto label4;

        $i6 = i2 - 1;

        c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i6);

        if c3 != 10 goto label3;

        $i7 = i2 - 1;

        return $i7;

     label3:
        if c3 == 32 goto label1;

        if c3 == 9 goto label1;

     label4:
        return i2;
    }

    private int getOffsetAtStartOf(int)
    {
        android.text.Layout r0;
        int i0, i2, i3, i4, $i6, $i7;
        java.lang.CharSequence r1;
        char c1, c5;
        android.text.style.ReplacementSpan[] r2;
        boolean $z0;
        android.text.Spanned $r3, $r6, $r8;
        java.lang.Object[] $r4;
        android.text.style.ReplacementSpan $r5, $r7;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i0);

        if c1 < 56320 goto label2;

        if c1 > 57343 goto label2;

        $i7 = i0 - 1;

        c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i7);

        if c5 < 55296 goto label2;

        if c5 > 56319 goto label2;

        i0 = i0 + -1;

     label2:
        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 == 0 goto label5;

        $r3 = (android.text.Spanned) r1;

        $r4 = interfaceinvoke $r3.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i0, class "android/text/style/ReplacementSpan");

        r2 = (android.text.style.ReplacementSpan[]) $r4;

        i2 = 0;

     label3:
        $i6 = lengthof r2;

        if i2 >= $i6 goto label5;

        $r6 = (android.text.Spanned) r1;

        $r5 = r2[i2];

        i3 = interfaceinvoke $r6.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r5);

        $r8 = (android.text.Spanned) r1;

        $r7 = r2[i2];

        i4 = interfaceinvoke $r8.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r7);

        if i3 >= i0 goto label4;

        if i4 <= i0 goto label4;

        i0 = i3;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return i0;
    }

    private int getOffsetToLeftRightOf(int, boolean)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10;
        boolean z0, z1, z2, z3;
        android.text.Layout$Directions r1;
        android.text.TextLine r2;
        java.lang.CharSequence $r3;
        android.text.TextPaint $r4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        i3 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i1);

        i4 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i1);

        if i4 != -1 goto label06;

        z1 = 1;

     label01:
        if z0 != z1 goto label07;

        z2 = 1;

     label02:
        if z2 == 0 goto label09;

        z3 = 0;

        if i0 != i3 goto label03;

        $i10 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i9 = -1 + $i10;

        if i1 >= $i9 goto label08;

        z3 = 1;

        i1 = i1 + 1;

     label03:
        if z3 == 0 goto label05;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        i3 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i1);

        i6 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i1);

        if i6 == i4 goto label05;

        if z0 != 0 goto label11;

        z0 = 1;

     label04:
        i4 = i6;

     label05:
        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i1);

        r2 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r4 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        $r3 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        virtualinvoke r2.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>($r4, $r3, i2, i3, i4, r1, 0, null);

        $i7 = i0 - i2;

        $i8 = virtualinvoke r2.<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)>($i7, z0);

        i5 = i2 + $i8;

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r2);

        return i5;

     label06:
        z1 = 0;

        goto label01;

     label07:
        z2 = 0;

        goto label02;

     label08:
        return i0;

     label09:
        z3 = 0;

        if i0 != i2 goto label03;

        if i1 <= 0 goto label10;

        z3 = 1;

        i1 = i1 + -1;

        goto label03;

     label10:
        return i0;

     label11:
        z0 = 0;

        goto label04;
    }

    private int getParagraphLeadingMargin(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.text.Spanned r1;
        android.text.style.LeadingMarginSpan[] r2;
        boolean z0, z1, $z2, $z3;
        android.text.style.LeadingMarginSpan r3;
        java.lang.CharSequence $r4;
        java.lang.Object[] $r5;
        android.text.style.LeadingMarginSpan$LeadingMarginSpan2 $r6;
        char $c14;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $z2 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z2 != 0 goto label2;

        i2 = 0;

     label1:
        return i2;

     label2:
        $r4 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r1 = (android.text.Spanned) $r4;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        $i4 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        $i5 = interfaceinvoke r1.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i1, $i4, class "android/text/style/LeadingMarginSpan");

        $r5 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r1, i1, $i5, class "android/text/style/LeadingMarginSpan");

        r2 = (android.text.style.LeadingMarginSpan[]) $r5;

        $i7 = lengthof r2;

        if $i7 != 0 goto label3;

        return 0;

     label3:
        i2 = 0;

        if i1 == 0 goto label4;

        $i12 = i1 - 1;

        $c14 = interfaceinvoke r1.<android.text.Spanned: char charAt(int)>($i12);

        if $c14 != 10 goto label8;

     label4:
        z0 = 1;

     label5:
        i3 = 0;

     label6:
        $i6 = lengthof r2;

        if i3 >= $i6 goto label1;

        r3 = r2[i3];

        z1 = z0;

        $z3 = r3 instanceof android.text.style.LeadingMarginSpan$LeadingMarginSpan2;

        if $z3 == 0 goto label7;

        $i10 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r3);

        $i9 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>($i10);

        $r6 = (android.text.style.LeadingMarginSpan$LeadingMarginSpan2) r3;

        $i11 = interfaceinvoke $r6.<android.text.style.LeadingMarginSpan$LeadingMarginSpan2: int getLeadingMarginLineCount()>();

        $i13 = $i9 + $i11;

        if i0 >= $i13 goto label9;

        z1 = 1;

     label7:
        $i8 = interfaceinvoke r3.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z1);

        i2 = i2 + $i8;

        i3 = i3 + 1;

        goto label6;

     label8:
        z0 = 0;

        goto label5;

     label9:
        z1 = 0;

        goto label7;
    }

    static java.lang.Object[] getParagraphSpans(android.text.Spanned, int, int, java.lang.Class)
    {
        android.text.Spanned r0;
        int i0, i1;
        java.lang.Class r1;
        java.lang.Object[] $r2, $r3;

        r0 := @parameter0: android.text.Spanned;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Class;

        if i0 != i1 goto label1;

        if i0 <= 0 goto label1;

        $r3 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(r1);

        return $r3;

     label1:
        $r2 = interfaceinvoke r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, r1);

        return $r2;
    }

    static float measurePara(android.text.TextPaint, java.lang.CharSequence, int, int)
    {
        android.text.TextPaint r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        android.text.MeasuredText r2;
        android.text.TextLine r3;
        java.lang.Throwable r4, $r19;
        android.text.Layout$Directions r5;
        char[] r6, $r12;
        boolean z0, z1, $z2;
        android.text.Layout$TabStops r7, $r18;
        android.text.Spanned r8;
        android.text.style.TabStopSpan[] r9;
        float f0;
        android.text.TextDirectionHeuristic $r10;
        byte[] $r11;
        java.lang.Object[] $r14;
        char $c9;

        r0 := @parameter0: android.text.TextPaint;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = staticinvoke <android.text.MeasuredText: android.text.MeasuredText obtain()>();

        r3 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

     label01:
        $r10 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic LTR>;

        virtualinvoke r2.<android.text.MeasuredText: void setPara(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)>(r1, i0, i1, $r10);

        $z2 = r2.<android.text.MeasuredText: boolean mEasy>;

        if $z2 == 0 goto label15;

        r5 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

     label02:
        i2 = 1;

     label03:
        r6 = r2.<android.text.MeasuredText: char[] mChars>;

        i3 = r2.<android.text.MeasuredText: int mLen>;

     label04:
        i4 = 0;

     label05:
        z0 = 0;

        r7 = null;

        if i4 >= i3 goto label13;

     label06:
        $c9 = r6[i4];

        if $c9 != 9 goto label17;

     label07:
        z0 = 1;

     label08:
        z1 = r1 instanceof android.text.Spanned;

     label09:
        r7 = null;

        if z1 == 0 goto label13;

     label10:
        r8 = (android.text.Spanned) r1;

        $i8 = interfaceinvoke r8.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i0, i1, class "android/text/style/TabStopSpan");

        $r14 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r8, i0, $i8, class "android/text/style/TabStopSpan");

        r9 = (android.text.style.TabStopSpan[]) $r14;

        i5 = lengthof r9;

     label11:
        r7 = null;

        if i5 <= 0 goto label13;

     label12:
        $r18 = new android.text.Layout$TabStops;

        specialinvoke $r18.<android.text.Layout$TabStops: void <init>(int,java.lang.Object[])>(20, r9);

        r7 = $r18;

     label13:
        virtualinvoke r3.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>(r0, r1, i0, i1, i2, r5, z0, r7);

        f0 = virtualinvoke r3.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

     label14:
        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r3);

        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r2);

        return f0;

     label15:
        $i7 = r2.<android.text.MeasuredText: int mDir>;

        $r11 = r2.<android.text.MeasuredText: byte[] mLevels>;

        $r12 = r2.<android.text.MeasuredText: char[] mChars>;

        $i6 = r2.<android.text.MeasuredText: int mLen>;

        r5 = staticinvoke <android.text.AndroidBidi: android.text.Layout$Directions directions(int,byte[],int,char[],int,int)>($i7, $r11, 0, $r12, 0, $i6);

        i2 = r2.<android.text.MeasuredText: int mDir>;

     label16:
        goto label03;

     label17:
        i4 = i4 + 1;

        goto label05;

     label18:
        $r19 := @caughtexception;

        r4 = $r19;

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r3);

        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r2);

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
    }

    static float nextTab(java.lang.CharSequence, int, int, float, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        float f0, f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.Object[] r1;
        boolean z0, $z1, $z2;
        java.lang.Object $r2, $r4;
        byte $b7, $b8, $b9;
        android.text.style.TabStopSpan $r3;
        android.text.Spanned $r5;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        r1 := @parameter4: java.lang.Object[];

        f1 = 3.4028235E38F;

        $z1 = r0 instanceof android.text.Spanned;

        if $z1 == 0 goto label6;

        z0 = 0;

        if r1 != null goto label1;

        $r5 = (android.text.Spanned) r0;

        r1 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r5, i0, i1, class "android/text/style/TabStopSpan");

        z0 = 1;

     label1:
        i2 = 0;

     label2:
        $i6 = lengthof r1;

        if i2 >= $i6 goto label5;

        if z0 != 0 goto label4;

        $r4 = r1[i2];

        $z2 = $r4 instanceof android.text.style.TabStopSpan;

        if $z2 != 0 goto label4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $r2 = r1[i2];

        $r3 = (android.text.style.TabStopSpan) $r2;

        i3 = interfaceinvoke $r3.<android.text.style.TabStopSpan: int getTabStop()>();

        $f5 = (float) i3;

        $b8 = $f5 cmpg f1;

        if $b8 >= 0 goto label3;

        $f6 = (float) i3;

        $b9 = $f6 cmpl f0;

        if $b9 <= 0 goto label3;

        f1 = (float) i3;

        goto label3;

     label5:
        $b7 = f1 cmpl 3.4028235E38F;

        if $b7 == 0 goto label6;

        return f1;

     label6:
        $f2 = f0 + 20.0F;

        $f3 = $f2 / 20.0F;

        $i4 = (int) $f3;

        $i5 = 20 * $i4;

        $f4 = (float) $i5;

        return $f4;
    }

    private boolean primaryIsTrailingPrevious(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34;
        boolean z0;
        int[] r1;
        android.text.Layout$Directions $r2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 = 1;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        i3 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i1);

        $r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i1);

        r1 = $r2.<android.text.Layout$Directions: int[] mDirections>;

        i4 = -1;

        i5 = 0;

     label01:
        $i14 = lengthof r1;

        if i5 >= $i14 goto label04;

        $i23 = r1[i5];

        i11 = i2 + $i23;

        $i27 = i5 + 1;

        $i28 = r1[$i27];

        $i25 = 67108863 & $i28;

        i12 = i11 + $i25;

        if i12 <= i3 goto label02;

        i12 = i3;

     label02:
        if i0 < i11 goto label08;

        if i0 >= i12 goto label08;

        if i0 <= i11 goto label03;

        return 0;

     label03:
        $i26 = i5 + 1;

        $i29 = r1[$i26];

        $i30 = $i29 >>> 26;

        i4 = 63 & $i30;

     label04:
        if i4 != -1 goto label05;

        $i24 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i1);

        i31 = (int) 1;

        if $i24 != i31 goto label09;

        i4 = 0;

     label05:
        i6 = -1;

        if i0 != i2 goto label11;

        $i21 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i1);

        i32 = (int) 1;

        if $i21 != i32 goto label10;

        i6 = 0;

     label06:
        if i6 >= i4 goto label15;

     label07:
        return z0;

     label08:
        i5 = i5 + 2;

        goto label01;

     label09:
        i33 = (int) 1;

        i4 = i33;

        goto label05;

     label10:
        i34 = (int) 1;

        i6 = i34;

        goto label06;

     label11:
        i7 = i0 - 1;

        i8 = 0;

     label12:
        $i13 = lengthof r1;

        if i8 >= $i13 goto label06;

        $i16 = r1[i8];

        i9 = i2 + $i16;

        $i15 = i8 + 1;

        $i18 = r1[$i15];

        $i17 = 67108863 & $i18;

        i10 = i9 + $i17;

        if i10 <= i3 goto label13;

        i10 = i3;

     label13:
        if i7 < i9 goto label14;

        if i7 >= i10 goto label14;

        $i20 = i8 + 1;

        $i19 = r1[$i20];

        $i22 = $i19 >>> 26;

        i6 = 63 & $i22;

        goto label06;

     label14:
        i8 = i8 + 2;

        goto label12;

     label15:
        z0 = 0;

        goto label07;
    }

    public void draw(android.graphics.Canvas)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        virtualinvoke r0.<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>(r1, null, null, 0);

        return;
    }

    public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        android.graphics.Paint r3;
        int i0, i2, i3;
        long l1;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        r3 := @parameter2: android.graphics.Paint;

        i0 := @parameter3: int;

        l1 = virtualinvoke r0.<android.text.Layout: long getLineRangeForDraw(android.graphics.Canvas)>(r1);

        i2 = staticinvoke <android.text.TextUtils: int unpackRangeStartFromLong(long)>(l1);

        i3 = staticinvoke <android.text.TextUtils: int unpackRangeEndFromLong(long)>(l1);

        if i3 >= 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.text.Layout: void drawBackground(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int,int,int)>(r1, r2, r3, i0, i2, i3);

        virtualinvoke r0.<android.text.Layout: void drawText(android.graphics.Canvas,int,int)>(r1, i2, i3);

        return;
    }

    public void drawBackground(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int, int, int)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        android.graphics.Paint r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        android.text.Spanned r4;
        android.text.style.ParagraphStyle[] r5, r7;
        android.text.TextPaint r6;
        boolean $z0;
        float $f0, $f1;
        android.text.SpanSet $r8, $r9, $r10, $r12, $r14, $r16, $r17, $r19, $r23, $r24;
        java.lang.CharSequence $r11;
        android.text.style.LineBackgroundSpan $r13, $r25;
        android.text.style.ParagraphStyle $r15;
        int[] $r18, $r20;
        android.text.style.LineBackgroundSpan[] $r21;
        java.lang.Object[] $r22;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        r3 := @parameter2: android.graphics.Paint;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 == 0 goto label12;

        $r8 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        if $r8 != null goto label01;

        $r24 = new android.text.SpanSet;

        specialinvoke $r24.<android.text.SpanSet: void <init>(java.lang.Class)>(class "android/text/style/LineBackgroundSpan");

        r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans> = $r24;

     label01:
        $r11 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r4 = (android.text.Spanned) $r11;

        i3 = interfaceinvoke r4.<android.text.Spanned: int length()>();

        $r9 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        virtualinvoke $r9.<android.text.SpanSet: void init(android.text.Spanned,int,int)>(r4, 0, i3);

        $r10 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $i20 = $r10.<android.text.SpanSet: int numberOfSpans>;

        if $i20 <= 0 goto label11;

        i4 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i1);

        i5 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        r5 = <android.text.Layout: android.text.style.ParagraphStyle[] NO_PARA_SPANS>;

        i6 = 0;

        r6 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        i7 = 0;

        i8 = r0.<android.text.Layout: int mWidth>;

        i10 = i1;

     label02:
        if i10 > i2 goto label11;

        i9 = i5;

        $i22 = i10 + 1;

        i12 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>($i22);

        i5 = i12;

        i11 = i4;

        $i21 = i10 + 1;

        i14 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i21);

        i4 = i14;

        $i23 = virtualinvoke r0.<android.text.Layout: int getLineDescent(int)>(i10);

        i13 = i14 - $i23;

        if i9 < i7 goto label08;

        $r14 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        i7 = virtualinvoke $r14.<android.text.SpanSet: int getNextTransition(int,int)>(i9, i3);

        i6 = 0;

        if i9 != i12 goto label03;

        i6 = 0;

        if i9 != 0 goto label08;

     label03:
        i15 = 0;

     label04:
        $r17 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $i24 = $r17.<android.text.SpanSet: int numberOfSpans>;

        if i15 >= $i24 goto label08;

        $r16 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $r20 = $r16.<android.text.SpanSet: int[] spanStarts>;

        $i25 = $r20[i15];

        if $i25 >= i12 goto label05;

        $r19 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $r18 = $r19.<android.text.SpanSet: int[] spanEnds>;

        $i26 = $r18[i15];

        if $i26 > i9 goto label06;

     label05:
        i15 = i15 + 1;

        goto label04;

     label06:
        i18 = lengthof r5;

        if i6 != i18 goto label07;

        $i28 = i6 * 2;

        $i27 = staticinvoke <com.android.internal.util.ArrayUtils: int idealObjectArraySize(int)>($i28);

        r7 = newarray (android.text.style.ParagraphStyle)[$i27];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r7, 0, i6);

        r5 = r7;

     label07:
        i17 = i6 + 1;

        $r23 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $r22 = $r23.<android.text.SpanSet: java.lang.Object[] spans>;

        $r21 = (android.text.style.LineBackgroundSpan[]) $r22;

        $r25 = $r21[i15];

        r5[i6] = $r25;

        i6 = i17;

        goto label05;

     label08:
        i16 = 0;

     label09:
        if i16 >= i6 goto label10;

        $r15 = r5[i16];

        $r13 = (android.text.style.LineBackgroundSpan) $r15;

        interfaceinvoke $r13.<android.text.style.LineBackgroundSpan: void drawBackground(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,int)>(r1, r6, 0, i8, i11, i13, i14, r4, i9, i12, i10);

        i16 = i16 + 1;

        goto label09;

     label10:
        i10 = i10 + 1;

        goto label02;

     label11:
        $r12 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        virtualinvoke $r12.<android.text.SpanSet: void recycle()>();

     label12:
        if r2 == null goto label14;

        if i0 == 0 goto label13;

        $f1 = (float) i0;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(0.0F, $f1);

     label13:
        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r2, r3);

        if i0 == 0 goto label14;

        $i19 = neg i0;

        $f0 = (float) $i19;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(0.0F, $f0);

     label14:
        return;
    }

    public void drawText(android.graphics.Canvas, int, int)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34;
        android.text.style.ParagraphStyle[] r2;
        android.text.TextPaint r3;
        java.lang.CharSequence r4;
        android.text.Layout$Alignment r5, r8, r10, r11, r12, r14;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8;
        android.text.TextLine r6;
        android.text.Layout$TabStops r7, r9, $r21;
        android.text.Layout$Directions r13, $r18;
        android.text.Spanned r15;
        android.text.style.LeadingMarginSpan r16;
        float $f0, $f1, $f2, $f3;
        android.text.style.ParagraphStyle $r19, $r20, $r25, $r26;
        java.lang.Object[] $r22;
        android.text.style.LeadingMarginSpan$LeadingMarginSpan2 $r23;
        android.text.style.AlignmentSpan $r24;
        char $c32;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i0);

        i3 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        r2 = <android.text.Layout: android.text.style.ParagraphStyle[] NO_PARA_SPANS>;

        i4 = 0;

        r3 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        r4 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r5 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        z0 = 0;

        r6 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        i5 = i0;

        r7 = null;

     label01:
        if i5 > i1 goto label31;

        i7 = i3;

        $i22 = i5 + 1;

        i3 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>($i22);

        i6 = specialinvoke r0.<android.text.Layout: int getLineVisibleEnd(int,int,int)>(i5, i7, i3);

        i9 = i2;

        $i24 = i5 + 1;

        i8 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i24);

        i2 = i8;

        $i23 = virtualinvoke r0.<android.text.Layout: int getLineDescent(int)>(i5);

        i11 = i8 - $i23;

        i10 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i5);

        i12 = r0.<android.text.Layout: int mWidth>;

        z1 = r0.<android.text.Layout: boolean mSpannedText>;

        i13 = 0;

        if z1 == 0 goto label15;

        r15 = (android.text.Spanned) r4;

        i18 = interfaceinvoke r4.<java.lang.CharSequence: int length()>();

        if i7 == 0 goto label02;

        $i33 = i7 - 1;

        $c32 = interfaceinvoke r4.<java.lang.CharSequence: char charAt(int)>($i33);

        if $c32 != 10 goto label11;

     label02:
        z3 = 1;

     label03:
        if i7 < i4 goto label07;

        if i5 == i0 goto label04;

        if z3 == 0 goto label07;

     label04:
        i4 = interfaceinvoke r15.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i7, i18, class "android/text/style/ParagraphStyle");

        $r22 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r15, i7, i4, class "android/text/style/ParagraphStyle");

        r2 = (android.text.style.ParagraphStyle[]) $r22;

        r5 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        $i34 = lengthof r2;

        i21 = -1 + $i34;

     label05:
        if i21 < 0 goto label06;

        $r25 = r2[i21];

        $z8 = $r25 instanceof android.text.style.AlignmentSpan;

        if $z8 == 0 goto label12;

        $r26 = r2[i21];

        $r24 = (android.text.style.AlignmentSpan) $r26;

        r5 = interfaceinvoke $r24.<android.text.style.AlignmentSpan: android.text.Layout$Alignment getAlignment()>();

     label06:
        z0 = 0;

     label07:
        i17 = lengthof r2;

        i20 = 0;

     label08:
        if i20 >= i17 goto label15;

        $r19 = r2[i20];

        $z6 = $r19 instanceof android.text.style.LeadingMarginSpan;

        if $z6 == 0 goto label10;

        $r20 = r2[i20];

        r16 = (android.text.style.LeadingMarginSpan) $r20;

        z4 = z3;

        $z7 = r16 instanceof android.text.style.LeadingMarginSpan$LeadingMarginSpan2;

        if $z7 == 0 goto label09;

        $r23 = (android.text.style.LeadingMarginSpan$LeadingMarginSpan2) r16;

        $i31 = interfaceinvoke $r23.<android.text.style.LeadingMarginSpan$LeadingMarginSpan2: int getLeadingMarginLineCount()>();

        $i27 = interfaceinvoke r15.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r16);

        $i28 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>($i27);

        i19 = $i31 + $i28;

        if i5 >= i19 goto label13;

        z4 = 1;

     label09:
        if i10 != -1 goto label14;

        interfaceinvoke r16.<android.text.style.LeadingMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>(r1, r3, i12, i10, i9, i11, i8, r4, i7, i6, z3, r0);

        $i30 = interfaceinvoke r16.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z4);

        i12 = i12 - $i30;

     label10:
        i20 = i20 + 1;

        goto label08;

     label11:
        z3 = 0;

        goto label03;

     label12:
        i21 = i21 + -1;

        goto label05;

     label13:
        z4 = 0;

        goto label09;

     label14:
        interfaceinvoke r16.<android.text.style.LeadingMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>(r1, r3, i13, i10, i9, i11, i8, r4, i7, i6, z3, r0);

        $i29 = interfaceinvoke r16.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z4);

        i13 = i13 + $i29;

        goto label10;

     label15:
        z2 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i5);

        if z2 == 0 goto label32;

        if z0 != 0 goto label32;

        if r7 != null goto label21;

        $r21 = new android.text.Layout$TabStops;

        specialinvoke $r21.<android.text.Layout$TabStops: void <init>(int,java.lang.Object[])>(20, r2);

        r9 = $r21;

     label16:
        z0 = 1;

     label17:
        r8 = r5;

        r11 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        if r8 != r11 goto label23;

        if i10 != 1 goto label22;

        r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

     label18:
        r12 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r8 != r12 goto label27;

        if i10 != 1 goto label26;

        i15 = i13;

     label19:
        r13 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i5);

        $r18 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        if r13 != $r18 goto label30;

        $z5 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z5 != 0 goto label30;

        if z2 != 0 goto label30;

        $f3 = (float) i15;

        $f2 = (float) i11;

        virtualinvoke r1.<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>(r4, i7, i6, $f3, $f2, r3);

     label20:
        i5 = i5 + 1;

        r7 = r9;

        goto label01;

     label21:
        virtualinvoke r7.<android.text.Layout$TabStops: void reset(int,java.lang.Object[])>(20, r2);

        r9 = r7;

        goto label16;

     label22:
        r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        goto label18;

     label23:
        r10 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        if r8 != r10 goto label18;

        if i10 != 1 goto label25;

        r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

     label24:
        goto label18;

     label25:
        r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        goto label24;

     label26:
        i15 = i12;

        goto label19;

     label27:
        $f0 = specialinvoke r0.<android.text.Layout: float getLineExtent(int,android.text.Layout$TabStops,boolean)>(i5, r9, 0);

        i14 = (int) $f0;

        r14 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        if r8 != r14 goto label29;

        if i10 != 1 goto label28;

        i15 = i12 - i14;

        goto label19;

     label28:
        i15 = i13 - i14;

        goto label19;

     label29:
        i16 = i14 & -2;

        $i26 = i12 + i13;

        $i25 = $i26 - i16;

        i15 = $i25 >> 1;

        goto label19;

     label30:
        virtualinvoke r6.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>(r3, r4, i7, i6, i10, r13, z2, r9);

        $f1 = (float) i15;

        virtualinvoke r6.<android.text.TextLine: void draw(android.graphics.Canvas,float,int,int,int)>(r1, $f1, i9, i11, i8);

        goto label20;

     label31:
        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r6);

        return;

     label32:
        r9 = r7;

        goto label17;
    }

    public final android.text.Layout$Alignment getAlignment()
    {
        android.text.Layout r0;
        android.text.Layout$Alignment $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        return $r1;
    }

    public abstract int getBottomPadding();

    public void getCursorPath(int, android.graphics.Path, java.lang.CharSequence)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        android.graphics.Path r1;
        java.lang.CharSequence r2;
        boolean z0, $z1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57;
        byte $b11, $b12;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Path;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r1.<android.graphics.Path: void reset()>();

        i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i1);

        $i7 = i1 + 1;

        i3 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i7);

        z0 = virtualinvoke r0.<android.text.Layout: boolean shouldClampCursor(int)>(i1);

        $f2 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int,boolean)>(i0, z0);

        f0 = $f2 - 0.5F;

        $z1 = virtualinvoke r0.<android.text.Layout: boolean isLevelBoundary(int)>(i0);

        if $z1 == 0 goto label10;

        $f57 = virtualinvoke r0.<android.text.Layout: float getSecondaryHorizontal(int,boolean)>(i0, z0);

        f1 = $f57 - 0.5F;

     label01:
        $i9 = staticinvoke <android.text.method.TextKeyListener: int getMetaState(java.lang.CharSequence,int)>(r2, 1);

        $i8 = staticinvoke <android.text.method.TextKeyListener: int getMetaState(java.lang.CharSequence,int)>(r2, 2048);

        i4 = $i9 | $i8;

        i5 = staticinvoke <android.text.method.TextKeyListener: int getMetaState(java.lang.CharSequence,int)>(r2, 2);

        if i4 != 0 goto label02;

        i6 = 0;

        if i5 == 0 goto label04;

     label02:
        $i10 = i3 - i2;

        i6 = $i10 >> 2;

        if i5 == 0 goto label03;

        i2 = i2 + i6;

     label03:
        if i4 == 0 goto label04;

        i3 = i3 - i6;

     label04:
        $b12 = f0 cmpg 0.5F;

        if $b12 >= 0 goto label05;

        f0 = 0.5F;

     label05:
        $b11 = f1 cmpg 0.5F;

        if $b11 >= 0 goto label06;

        f1 = 0.5F;

     label06:
        $i13 = staticinvoke <java.lang.Float: int compare(float,float)>(f0, f1);

        if $i13 != 0 goto label11;

        $f50 = (float) i2;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f0, $f50);

        $f56 = (float) i3;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f0, $f56);

     label07:
        if i4 != 2 goto label12;

        $f43 = (float) i3;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f1, $f43);

        $f45 = (float) i6;

        $f52 = f1 - $f45;

        $i27 = i3 + i6;

        $f53 = (float) $i27;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f52, $f53);

        $f55 = (float) i3;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f1, $f55);

        $f54 = (float) i6;

        $f51 = f1 + $f54;

        $i29 = i3 + i6;

        $f49 = (float) $i29;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f51, $f49);

     label08:
        if i5 != 2 goto label13;

        $f20 = (float) i2;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f0, $f20);

        $f26 = (float) i6;

        $f24 = f0 - $f26;

        $i22 = i2 - i6;

        $f25 = (float) $i22;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f24, $f25);

        $f29 = (float) i2;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f0, $f29);

        $f28 = (float) i6;

        $f33 = f0 + $f28;

        $i23 = i2 - i6;

        $f27 = (float) $i23;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f33, $f27);

     label09:
        return;

     label10:
        f1 = f0;

        goto label01;

     label11:
        $f3 = (float) i2;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f0, $f3);

        $i15 = i2 + i3;

        $i14 = $i15 >> 1;

        $f4 = (float) $i14;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f0, $f4);

        $i16 = i2 + i3;

        $i17 = $i16 >> 1;

        $f7 = (float) $i17;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f1, $f7);

        $f5 = (float) i3;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f1, $f5);

        goto label07;

     label12:
        if i4 != 1 goto label08;

        $f34 = (float) i3;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f1, $f34);

        $f35 = (float) i6;

        $f31 = f1 - $f35;

        $i25 = i3 + i6;

        $f30 = (float) $i25;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f31, $f30);

        $f32 = (float) i6;

        $f41 = f1 - $f32;

        $i24 = i3 + i6;

        $f39 = (float) $i24;

        $f40 = $f39 - 0.5F;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f41, $f40);

        $f42 = (float) i6;

        $f38 = f1 + $f42;

        $i26 = i3 + i6;

        $f36 = (float) $i26;

        $f37 = $f36 - 0.5F;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f38, $f37);

        $f46 = (float) i6;

        $f47 = f1 + $f46;

        $i28 = i3 + i6;

        $f48 = (float) $i28;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f47, $f48);

        $f44 = (float) i3;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f1, $f44);

        goto label08;

     label13:
        if i5 != 1 goto label09;

        $f6 = (float) i2;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f0, $f6);

        $f10 = (float) i6;

        $f9 = f0 - $f10;

        $i18 = i2 - i6;

        $f8 = (float) $i18;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f9, $f8);

        $f13 = (float) i6;

        $f15 = f0 - $f13;

        $i19 = i2 - i6;

        $f11 = (float) $i19;

        $f12 = 0.5F + $f11;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f15, $f12);

        $f16 = (float) i6;

        $f18 = f0 + $f16;

        $i20 = i2 - i6;

        $f14 = (float) $i20;

        $f19 = 0.5F + $f14;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f18, $f19);

        $f17 = (float) i6;

        $f22 = f0 + $f17;

        $i21 = i2 - i6;

        $f23 = (float) $i21;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f22, $f23);

        $f21 = (float) i2;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f0, $f21);

        return;
    }

    public abstract int getEllipsisCount(int);

    public abstract int getEllipsisStart(int);

    public int getEllipsizedWidth()
    {
        android.text.Layout r0;
        int $i0;

        r0 := @this: android.text.Layout;

        $i0 = r0.<android.text.Layout: int mWidth>;

        return $i0;
    }

    public int getHeight()
    {
        android.text.Layout r0;
        int $i0, $i1;

        r0 := @this: android.text.Layout;

        $i0 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i0);

        return $i1;
    }

    public final int getLineAscent(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i0);

        $i2 = i0 + 1;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i2);

        $i4 = virtualinvoke r0.<android.text.Layout: int getLineDescent(int)>(i0);

        $i5 = $i3 - $i4;

        $i6 = $i1 - $i5;

        return $i6;
    }

    public final int getLineBaseline(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i1);

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineDescent(int)>(i0);

        $i4 = $i2 - $i3;

        return $i4;
    }

    public final int getLineBottom(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i1);

        return $i2;
    }

    public int getLineBounds(int, android.graphics.Rect)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Rect r1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        if r1 == null goto label1;

        r1.<android.graphics.Rect: int left> = 0;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i0);

        r1.<android.graphics.Rect: int top> = $i2;

        $i3 = r0.<android.text.Layout: int mWidth>;

        r1.<android.graphics.Rect: int right> = $i3;

        $i4 = i0 + 1;

        $i5 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i4);

        r1.<android.graphics.Rect: int bottom> = $i5;

     label1:
        $i1 = virtualinvoke r0.<android.text.Layout: int getLineBaseline(int)>(i0);

        return $i1;
    }

    public abstract boolean getLineContainsTab(int);

    public abstract int getLineCount();

    public abstract int getLineDescent(int);

    public abstract android.text.Layout$Directions getLineDirections(int);

    public final int getLineEnd(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>($i1);

        return $i2;
    }

    public int getLineForOffset(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        i2 = -1;

     label1:
        $i4 = i1 - i2;

        if $i4 <= 1 goto label3;

        $i5 = i1 + i2;

        i3 = $i5 / 2;

        $i6 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i3);

        if $i6 <= i0 goto label2;

        i1 = i3;

        goto label1;

     label2:
        i2 = i3;

        goto label1;

     label3:
        if i2 >= 0 goto label4;

        i2 = 0;

     label4:
        return i2;
    }

    public int getLineForVertical(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        i2 = -1;

     label1:
        $i4 = i1 - i2;

        if $i4 <= 1 goto label3;

        $i5 = i1 + i2;

        i3 = $i5 / 2;

        $i6 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i3);

        if $i6 <= i0 goto label2;

        i1 = i3;

        goto label1;

     label2:
        i2 = i3;

        goto label1;

     label3:
        if i2 >= 0 goto label4;

        i2 = 0;

     label4:
        return i2;
    }

    public float getLineLeft(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.text.Layout$Alignment r1, $r2, $r3, $r4, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i0);

        $r2 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        if r1 != $r2 goto label2;

     label1:
        return 0.0F;

     label2:
        $r3 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r1 != $r3 goto label3;

        if i1 != -1 goto label1;

        $i12 = virtualinvoke r0.<android.text.Layout: int getParagraphRight(int)>(i0);

        $f9 = (float) $i12;

        $f10 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f8 = $f9 - $f10;

        return $f8;

     label3:
        $r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        if r1 != $r4 goto label4;

        $i11 = r0.<android.text.Layout: int mWidth>;

        $f6 = (float) $i11;

        $f5 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f7 = $f6 - $f5;

        return $f7;

     label4:
        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        if r1 != $r5 goto label5;

        if i1 == -1 goto label1;

        $i10 = r0.<android.text.Layout: int mWidth>;

        $f3 = (float) $i10;

        $f2 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f4 = $f3 - $f2;

        return $f4;

     label5:
        i2 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i0);

        i3 = virtualinvoke r0.<android.text.Layout: int getParagraphRight(int)>(i0);

        $f0 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $i5 = (int) $f0;

        i4 = -2 & $i5;

        $i7 = i3 - i2;

        $i6 = $i7 - i4;

        $i9 = $i6 / 2;

        $i8 = i2 + $i9;

        $f1 = (float) $i8;

        return $f1;
    }

    public float getLineMax(int)
    {
        android.text.Layout r0;
        int i0, $i1;
        float f0, f1, $f2, $f3;
        byte $b2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        f0 = (float) $i1;

        f1 = specialinvoke r0.<android.text.Layout: float getLineExtent(int,boolean)>(i0, 0);

        $f2 = f0 + f1;

        $b2 = $f2 cmpl 0.0F;

        if $b2 < 0 goto label1;

        return f1;

     label1:
        $f3 = neg f1;

        return $f3;
    }

    public long getLineRangeForDraw(android.graphics.Canvas)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2, $r4, $r5, $r6;
        java.lang.Throwable r3, $r7;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8;
        long l4, $l9, $l10;
        boolean $z0;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = <android.text.Layout: android.graphics.Rect sTempRect>;

        entermonitor r2;

     label1:
        $r4 = <android.text.Layout: android.graphics.Rect sTempRect>;

        $z0 = virtualinvoke r1.<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>($r4);

        if $z0 != 0 goto label3;

        l4 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>(0, -1);

        exitmonitor r2;

     label2:
        return l4;

     label3:
        $r5 = <android.text.Layout: android.graphics.Rect sTempRect>;

        i0 = $r5.<android.graphics.Rect: int top>;

        $r6 = <android.text.Layout: android.graphics.Rect sTempRect>;

        i1 = $r6.<android.graphics.Rect: int bottom>;

        exitmonitor r2;

     label4:
        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 0);

        $i5 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i6 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i5);

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i6, i1);

        if i2 < i3 goto label8;

        $l9 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>(0, -1);

        return $l9;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $i8 = virtualinvoke r0.<android.text.Layout: int getLineForVertical(int)>(i2);

        $i7 = virtualinvoke r0.<android.text.Layout: int getLineForVertical(int)>(i3);

        $l10 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>($i8, $i7);

        return $l10;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public float getLineRight(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.text.Layout$Alignment r1, $r2, $r3, $r4, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i0);

        $r2 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        if r1 != $r2 goto label1;

        $i13 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i0);

        $f8 = (float) $i13;

        $f10 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f11 = $f8 + $f10;

        return $f11;

     label1:
        $r3 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r1 != $r3 goto label3;

        if i1 != -1 goto label2;

        $i14 = r0.<android.text.Layout: int mWidth>;

        $f9 = (float) $i14;

        return $f9;

     label2:
        $i12 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i0);

        $f5 = (float) $i12;

        $f7 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f6 = $f5 + $f7;

        return $f6;

     label3:
        $r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        if r1 != $r4 goto label4;

        $i11 = r0.<android.text.Layout: int mWidth>;

        $f4 = (float) $i11;

        return $f4;

     label4:
        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        if r1 != $r5 goto label6;

        if i1 != -1 goto label5;

        $f2 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        return $f2;

     label5:
        $i10 = r0.<android.text.Layout: int mWidth>;

        $f3 = (float) $i10;

        return $f3;

     label6:
        i2 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i0);

        i3 = virtualinvoke r0.<android.text.Layout: int getParagraphRight(int)>(i0);

        $f0 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $i5 = (int) $f0;

        i4 = -2 & $i5;

        $i7 = i3 - i2;

        $i6 = $i7 - i4;

        $i9 = $i6 / 2;

        $i8 = i3 - $i9;

        $f1 = (float) $i8;

        return $f1;
    }

    public abstract int getLineStart(int);

    public abstract int getLineTop(int);

    public int getLineVisibleEnd(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        $i2 = i0 + 1;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>($i2);

        $i4 = specialinvoke r0.<android.text.Layout: int getLineVisibleEnd(int,int,int)>(i0, $i1, $i3);

        return $i4;
    }

    public float getLineWidth(int)
    {
        android.text.Layout r0;
        int i0, $i1;
        float f0, f1, $f2, $f3;
        byte $b2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        f0 = (float) $i1;

        f1 = specialinvoke r0.<android.text.Layout: float getLineExtent(int,boolean)>(i0, 1);

        $f2 = f0 + f1;

        $b2 = $f2 cmpl 0.0F;

        if $b2 < 0 goto label1;

        return f1;

     label1:
        $f3 = neg f1;

        return $f3;
    }

    public int getOffsetForHorizontal(int, float)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i8, i9, i10, i11, i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i32, $i33;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        android.text.Layout$Directions r1;
        byte b7, $b17, $b29, $b30, $b31, $b34;
        int[] $r2, $r3, $r4, $r5;
        java.lang.CharSequence $r6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i13 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        i1 = -1 + $i13;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        $i14 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i15 = -1 + $i14;

        if i0 != $i15 goto label01;

        i1 = i1 + 1;

     label01:
        i3 = i2;

        $f5 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i3);

        $f6 = $f5 - f0;

        f1 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        i4 = 0;

     label02:
        $r2 = r1.<android.text.Layout$Directions: int[] mDirections>;

        $i16 = lengthof $r2;

        if i4 >= $i16 goto label13;

        $r4 = r1.<android.text.Layout$Directions: int[] mDirections>;

        $i19 = $r4[i4];

        i5 = i2 + $i19;

        $r3 = r1.<android.text.Layout$Directions: int[] mDirections>;

        $i18 = i4 + 1;

        $i21 = $r3[$i18];

        $i22 = 67108863 & $i21;

        i6 = i5 + $i22;

        $r5 = r1.<android.text.Layout$Directions: int[] mDirections>;

        $i20 = i4 + 1;

        $i25 = $r5[$i20];

        $i26 = 67108864 & $i25;

        if $i26 == 0 goto label06;

        b7 = -1;

     label03:
        if i6 <= i1 goto label04;

        i6 = i1;

     label04:
        $i23 = i6 - 1;

        i8 = 1 + $i23;

        $i24 = i5 + 1;

        i9 = -1 + $i24;

     label05:
        $i28 = i8 - i9;

        if $i28 <= 1 goto label08;

        $i32 = i8 + i9;

        i12 = $i32 / 2;

        $i33 = specialinvoke r0.<android.text.Layout: int getOffsetAtStartOf(int)>(i12);

        $f20 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>($i33);

        $f16 = (float) b7;

        $f19 = $f20 * $f16;

        $f17 = (float) b7;

        $f18 = f0 * $f17;

        $b34 = $f19 cmpl $f18;

        if $b34 < 0 goto label07;

        i8 = i12;

        goto label05;

     label06:
        b7 = 1;

        goto label03;

     label07:
        i9 = i12;

        goto label05;

     label08:
        $i27 = i5 + 1;

        if i9 >= $i27 goto label09;

        i9 = i5 + 1;

     label09:
        if i9 >= i6 goto label11;

        i10 = specialinvoke r0.<android.text.Layout: int getOffsetAtStartOf(int)>(i9);

        $f12 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i10);

        $f13 = $f12 - f0;

        f3 = staticinvoke <java.lang.Math: float abs(float)>($f13);

        $r6 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        i11 = staticinvoke <android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>($r6, i10);

        if i11 >= i6 goto label10;

        $f15 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i11);

        $f14 = $f15 - f0;

        f4 = staticinvoke <java.lang.Math: float abs(float)>($f14);

        $b31 = f4 cmpg f3;

        if $b31 >= 0 goto label10;

        f3 = f4;

        i10 = i11;

     label10:
        $b30 = f3 cmpg f1;

        if $b30 >= 0 goto label11;

        f1 = f3;

        i3 = i10;

     label11:
        $f11 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i5);

        $f10 = $f11 - f0;

        f2 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        $b29 = f2 cmpg f1;

        if $b29 >= 0 goto label12;

        f1 = f2;

        i3 = i5;

     label12:
        i4 = i4 + 2;

        goto label02;

     label13:
        $f8 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i1);

        $f9 = $f8 - f0;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f9);

        $b17 = $f7 cmpg f1;

        if $b17 > 0 goto label14;

        i3 = i1;

     label14:
        return i3;
    }

    public int getOffsetToLeftOf(int)
    {
        android.text.Layout r0;
        int i0, $i1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getOffsetToLeftRightOf(int,boolean)>(i0, 1);

        return $i1;
    }

    public int getOffsetToRightOf(int)
    {
        android.text.Layout r0;
        int i0, $i1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getOffsetToLeftRightOf(int,boolean)>(i0, 0);

        return $i1;
    }

    public final android.text.TextPaint getPaint()
    {
        android.text.Layout r0;
        android.text.TextPaint $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        return $r1;
    }

    public final android.text.Layout$Alignment getParagraphAlignment(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, $i4;
        android.text.Layout$Alignment r1;
        android.text.style.AlignmentSpan[] r2;
        boolean $z0;
        java.lang.CharSequence $r3;
        android.text.Spanned $r4;
        java.lang.Object[] $r5;
        android.text.style.AlignmentSpan $r6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r1 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $r4 = (android.text.Spanned) $r3;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        $r5 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r4, $i2, $i3, class "android/text/style/AlignmentSpan");

        r2 = (android.text.style.AlignmentSpan[]) $r5;

        i1 = lengthof r2;

        if i1 <= 0 goto label1;

        $i4 = i1 - 1;

        $r6 = r2[$i4];

        r1 = interfaceinvoke $r6.<android.text.style.AlignmentSpan: android.text.Layout$Alignment getAlignment()>();

     label1:
        return r1;
    }

    public abstract int getParagraphDirection(int);

    public final int getParagraphLeft(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i1 == -1 goto label1;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i2 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        return $i2;
    }

    public final int getParagraphRight(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = r0.<android.text.Layout: int mWidth>;

        $i2 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i2 == 1 goto label1;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 != 0 goto label2;

     label1:
        return i1;

     label2:
        $i3 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        $i4 = i1 - $i3;

        return $i4;
    }

    public float getPrimaryHorizontal(int)
    {
        android.text.Layout r0;
        int i0;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $f0 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int,boolean)>(i0, 0);

        return $f0;
    }

    public float getPrimaryHorizontal(int, boolean)
    {
        android.text.Layout r0;
        int i0;
        boolean z0, $z1;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<android.text.Layout: boolean primaryIsTrailingPrevious(int)>(i0);

        $f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,boolean)>(i0, $z1, z0);

        return $f0;
    }

    public float getSecondaryHorizontal(int)
    {
        android.text.Layout r0;
        int i0;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $f0 = virtualinvoke r0.<android.text.Layout: float getSecondaryHorizontal(int,boolean)>(i0, 0);

        return $f0;
    }

    public float getSecondaryHorizontal(int, boolean)
    {
        android.text.Layout r0;
        int i0;
        boolean z0, z1, $z2;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z2 = specialinvoke r0.<android.text.Layout: boolean primaryIsTrailingPrevious(int)>(i0);

        if $z2 != 0 goto label2;

        z1 = 1;

     label1:
        $f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,boolean)>(i0, z1, z0);

        return $f0;

     label2:
        z1 = 0;

        goto label1;
    }

    public void getSelectionPath(int, int, android.graphics.Path)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19;
        android.graphics.Path r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;
        android.graphics.Path$Direction $r2, $r3, $r4, $r5, $r6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Path;

        virtualinvoke r1.<android.graphics.Path: void reset()>();

        if i0 != i1 goto label1;

        return;

     label1:
        if i1 >= i0 goto label2;

        i13 = i1;

        i1 = i0;

        i0 = i13;

     label2:
        i2 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        i3 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i1);

        i4 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i2);

        i5 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i3);

        if i2 != i3 goto label3;

        specialinvoke r0.<android.text.Layout: void addSelection(int,int,int,int,int,android.graphics.Path)>(i2, i0, i1, i4, i5, r1);

        return;

     label3:
        $i14 = r0.<android.text.Layout: int mWidth>;

        f0 = (float) $i14;

        i6 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i2);

        i7 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i2);

        specialinvoke r0.<android.text.Layout: void addSelection(int,int,int,int,int,android.graphics.Path)>(i2, i0, i6, i4, i7, r1);

        $i15 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i2);

        if $i15 != -1 goto label6;

        $f13 = virtualinvoke r0.<android.text.Layout: float getLineLeft(int)>(i2);

        $f12 = (float) i4;

        $i19 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i2);

        $f14 = (float) $i19;

        $r6 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke r1.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>($f13, $f12, 0.0F, $f14, $r6);

     label4:
        i8 = i2 + 1;

     label5:
        if i8 >= i3 goto label7;

        i11 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i8);

        i12 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i8);

        $f11 = (float) i11;

        $f10 = (float) i12;

        $r5 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke r1.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>(0.0F, $f11, f0, $f10, $r5);

        i8 = i8 + 1;

        goto label5;

     label6:
        $f1 = virtualinvoke r0.<android.text.Layout: float getLineRight(int)>(i2);

        $f2 = (float) i4;

        $i16 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i2);

        $f3 = (float) $i16;

        $r2 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke r1.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>($f1, $f2, f0, $f3, $r2);

        goto label4;

     label7:
        i9 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i3);

        i10 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i3);

        $i17 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i3);

        specialinvoke r0.<android.text.Layout: void addSelection(int,int,int,int,int,android.graphics.Path)>(i3, $i17, i1, i9, i10, r1);

        $i18 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i3);

        if $i18 != -1 goto label8;

        $f6 = (float) i9;

        $f9 = virtualinvoke r0.<android.text.Layout: float getLineRight(int)>(i3);

        $f8 = (float) i10;

        $r4 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke r1.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>(f0, $f6, $f9, $f8, $r4);

        return;

     label8:
        $f4 = (float) i9;

        $f7 = virtualinvoke r0.<android.text.Layout: float getLineLeft(int)>(i3);

        $f5 = (float) i10;

        $r3 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke r1.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>(0.0F, $f4, $f7, $f5, $r3);

        return;
    }

    public final float getSpacingAdd()
    {
        android.text.Layout r0;
        float $f0;

        r0 := @this: android.text.Layout;

        $f0 = r0.<android.text.Layout: float mSpacingAdd>;

        return $f0;
    }

    public final float getSpacingMultiplier()
    {
        android.text.Layout r0;
        float $f0;

        r0 := @this: android.text.Layout;

        $f0 = r0.<android.text.Layout: float mSpacingMult>;

        return $f0;
    }

    public final java.lang.CharSequence getText()
    {
        android.text.Layout r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        return $r1;
    }

    public final android.text.TextDirectionHeuristic getTextDirectionHeuristic()
    {
        android.text.Layout r0;
        android.text.TextDirectionHeuristic $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: android.text.TextDirectionHeuristic mTextDir>;

        return $r1;
    }

    public abstract int getTopPadding();

    public final int getWidth()
    {
        android.text.Layout r0;
        int $i0;

        r0 := @this: android.text.Layout;

        $i0 = r0.<android.text.Layout: int mWidth>;

        return $i0;
    }

    public final void increaseWidthTo(int)
    {
        android.text.Layout r0;
        int i0, $i1;
        java.lang.RuntimeException $r1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.Layout: int mWidth>;

        if i0 >= $i1 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("attempted to reduce Layout width");

        throw $r1;

     label1:
        r0.<android.text.Layout: int mWidth> = i0;

        return;
    }

    public boolean isLevelBoundary(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.text.Layout$Directions r1, $r3, $r4;
        int[] r2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i1);

        $r3 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        if r1 == $r3 goto label01;

        $r4 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT>;

        if r1 != $r4 goto label02;

     label01:
        return 0;

     label02:
        r2 = r1.<android.text.Layout$Directions: int[] mDirections>;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        i3 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i1);

        if i0 == i2 goto label03;

        if i0 != i3 goto label08;

     label03:
        $i8 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i1);

        if $i8 != 1 goto label06;

        i4 = 0;

     label04:
        if i0 != i2 goto label07;

        i5 = 0;

     label05:
        $i9 = i5 + 1;

        $i12 = r2[$i9];

        $i11 = $i12 >>> 26;

        $i14 = 63 & $i11;

        if $i14 == i4 goto label01;

        return 1;

     label06:
        i4 = 1;

        goto label04;

     label07:
        $i10 = lengthof r2;

        i5 = -2 + $i10;

        goto label05;

     label08:
        i6 = i0 - i2;

        i7 = 0;

     label09:
        $i13 = lengthof r2;

        if i7 >= $i13 goto label01;

        $i15 = r2[i7];

        if i6 != $i15 goto label10;

        return 1;

     label10:
        i7 = i7 + 2;

        goto label09;
    }

    public boolean isRtlCharAt(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0;
        android.text.Layout$Directions r1, $r3, $r4;
        int[] r2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 = 1;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i1);

        $r3 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        if r1 != $r3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT>;

        if r1 != $r4 goto label3;

        return 1;

     label3:
        r2 = r1.<android.text.Layout$Directions: int[] mDirections>;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        i3 = 0;

     label4:
        $i4 = lengthof r2;

        if i3 >= $i4 goto label1;

        $i5 = r2[i3];

        $i6 = 67108863 & $i5;

        $i8 = i2 + $i6;

        if i0 < $i8 goto label7;

        $i7 = i3 + 1;

        $i10 = r2[$i7];

        $i9 = $i10 >>> 26;

        $i12 = 63 & $i9;

        $i11 = 1 & $i12;

        if $i11 == 0 goto label6;

     label5:
        return z0;

     label6:
        z0 = 0;

        goto label5;

     label7:
        i3 = i3 + 2;

        goto label4;
    }

    protected final boolean isSpanned()
    {
        android.text.Layout r0;
        boolean $z0;

        r0 := @this: android.text.Layout;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        return $z0;
    }

    void replaceWith(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float)
    {
        android.text.Layout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0;
        android.text.Layout$Alignment r3;
        float f0, f1;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Layout: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        r0.<android.text.Layout: java.lang.CharSequence mText> = r1;

        r0.<android.text.Layout: android.text.TextPaint mPaint> = r2;

        r0.<android.text.Layout: int mWidth> = i0;

        r0.<android.text.Layout: android.text.Layout$Alignment mAlignment> = r3;

        r0.<android.text.Layout: float mSpacingMult> = f0;

        r0.<android.text.Layout: float mSpacingAdd> = f1;

        $z0 = r1 instanceof android.text.Spanned;

        r0.<android.text.Layout: boolean mSpannedText> = $z0;

        return;
    }

    public boolean shouldClampCursor(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3;
        boolean z0;
        int[] $r1;
        android.text.Layout$Alignment $r2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 = 1;

        $r1 = <android.text.Layout$1: int[] $SwitchMap$android$text$Layout$Alignment>;

        $r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i0);

        $i1 = virtualinvoke $r2.<android.text.Layout$Alignment: int ordinal()>();

        $i2 = $r1[$i1];

        tableswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $i3 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i3 > 0 goto label2;

        return 0;
    }
}
