public final class org.apache.xml.utils.BoolStack extends java.lang.Object implements java.lang.Cloneable
{
    private int m_allocatedSize;
    private int m_index;
    private boolean[] m_values;

    public void <init>()
    {
        org.apache.xml.utils.BoolStack r0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        specialinvoke r0.<org.apache.xml.utils.BoolStack: void <init>(int)>(32);

        return;
    }

    public void <init>(int)
    {
        org.apache.xml.utils.BoolStack r0;
        int i0;
        boolean[] $r1;

        r0 := @this: org.apache.xml.utils.BoolStack;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.BoolStack: int m_allocatedSize> = i0;

        $r1 = newarray (boolean)[i0];

        r0.<org.apache.xml.utils.BoolStack: boolean[] m_values> = $r1;

        r0.<org.apache.xml.utils.BoolStack: int m_index> = -1;

        return;
    }

    private void grow()
    {
        org.apache.xml.utils.BoolStack r0;
        boolean[] r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_allocatedSize>;

        $i1 = 2 * $i0;

        r0.<org.apache.xml.utils.BoolStack: int m_allocatedSize> = $i1;

        $i2 = r0.<org.apache.xml.utils.BoolStack: int m_allocatedSize>;

        r1 = newarray (boolean)[$i2];

        $r2 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        $i3 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $i4 = 1 + $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i4);

        r0.<org.apache.xml.utils.BoolStack: boolean[] m_values> = r1;

        return;
    }

    public final void clear()
    {
        org.apache.xml.utils.BoolStack r0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        r0.<org.apache.xml.utils.BoolStack: int m_index> = -1;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.utils.BoolStack r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public boolean isEmpty()
    {
        org.apache.xml.utils.BoolStack r0;
        int $i0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        if $i0 != -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean peek()
    {
        org.apache.xml.utils.BoolStack r0;
        int $i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $r1 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $z0 = $r1[$i0];

        return $z0;
    }

    public final boolean peekOrFalse()
    {
        org.apache.xml.utils.BoolStack r0;
        int $i0, $i1;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        if $i0 <= -1 goto label1;

        $r1 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        $i1 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $z0 = $r1[$i1];

        return $z0;

     label1:
        return 0;
    }

    public final boolean peekOrTrue()
    {
        org.apache.xml.utils.BoolStack r0;
        int $i0, $i1;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        if $i0 <= -1 goto label1;

        $r1 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        $i1 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $z0 = $r1[$i1];

        return $z0;

     label1:
        return 1;
    }

    public final boolean pop()
    {
        org.apache.xml.utils.BoolStack r0;
        boolean[] r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        r1 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $i1 = i0 - 1;

        r0.<org.apache.xml.utils.BoolStack: int m_index> = $i1;

        $z0 = r1[i0];

        return $z0;
    }

    public final boolean popAndTop()
    {
        org.apache.xml.utils.BoolStack r0;
        int $i0, $i1, $i2, $i3;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $i1 = -1 + $i0;

        r0.<org.apache.xml.utils.BoolStack: int m_index> = $i1;

        $i2 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        if $i2 < 0 goto label1;

        $r1 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        $i3 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $z0 = $r1[$i3];

        return $z0;

     label1:
        return 0;
    }

    public final boolean push(boolean)
    {
        org.apache.xml.utils.BoolStack r0;
        boolean z0;
        boolean[] r1;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xml.utils.BoolStack;

        z0 := @parameter0: boolean;

        $i3 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $i1 = r0.<org.apache.xml.utils.BoolStack: int m_allocatedSize>;

        $i2 = -1 + $i1;

        if $i3 != $i2 goto label1;

        specialinvoke r0.<org.apache.xml.utils.BoolStack: void grow()>();

     label1:
        r1 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        $i4 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        i0 = 1 + $i4;

        r0.<org.apache.xml.utils.BoolStack: int m_index> = i0;

        r1[i0] = z0;

        return z0;
    }

    public final void setTop(boolean)
    {
        org.apache.xml.utils.BoolStack r0;
        boolean z0;
        int $i0;
        boolean[] $r1;

        r0 := @this: org.apache.xml.utils.BoolStack;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.xml.utils.BoolStack: boolean[] m_values>;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $r1[$i0] = z0;

        return;
    }

    public final int size()
    {
        org.apache.xml.utils.BoolStack r0;
        int $i0, $i1;

        r0 := @this: org.apache.xml.utils.BoolStack;

        $i0 = r0.<org.apache.xml.utils.BoolStack: int m_index>;

        $i1 = 1 + $i0;

        return $i1;
    }
}
