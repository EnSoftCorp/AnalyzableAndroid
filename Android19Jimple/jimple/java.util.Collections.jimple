public class java.util.Collections extends java.lang.Object
{
    private static final java.util.Enumeration EMPTY_ENUMERATION;
    private static final java.util.Iterator EMPTY_ITERATOR;
    public static final java.util.List EMPTY_LIST;
    public static final java.util.Map EMPTY_MAP;
    public static final java.util.Set EMPTY_SET;

    static void <clinit>()
    {
        java.util.Collections$1 $r0;
        java.util.Collections$2 $r1;
        java.util.Collections$EmptyList $r2;
        java.util.Collections$EmptySet $r3;
        java.util.Collections$EmptyMap $r4;

        $r0 = new java.util.Collections$1;

        specialinvoke $r0.<java.util.Collections$1: void <init>()>();

        <java.util.Collections: java.util.Iterator EMPTY_ITERATOR> = $r0;

        $r1 = new java.util.Collections$2;

        specialinvoke $r1.<java.util.Collections$2: void <init>()>();

        <java.util.Collections: java.util.Enumeration EMPTY_ENUMERATION> = $r1;

        $r2 = new java.util.Collections$EmptyList;

        specialinvoke $r2.<java.util.Collections$EmptyList: void <init>(java.util.Collections$1)>(null);

        <java.util.Collections: java.util.List EMPTY_LIST> = $r2;

        $r3 = new java.util.Collections$EmptySet;

        specialinvoke $r3.<java.util.Collections$EmptySet: void <init>(java.util.Collections$1)>(null);

        <java.util.Collections: java.util.Set EMPTY_SET> = $r3;

        $r4 = new java.util.Collections$EmptyMap;

        specialinvoke $r4.<java.util.Collections$EmptyMap: void <init>(java.util.Collections$1)>(null);

        <java.util.Collections: java.util.Map EMPTY_MAP> = $r4;

        return;
    }

    private void <init>()
    {
        java.util.Collections r0;

        r0 := @this: java.util.Collections;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.Iterator access$000()
    {
        java.util.Iterator $r0;

        $r0 = <java.util.Collections: java.util.Iterator EMPTY_ITERATOR>;

        return $r0;
    }

    public static transient boolean addAll(java.util.Collection, java.lang.Object[])
    {
        java.util.Collection r0;
        java.lang.Object[] r1;
        boolean z0, $z1;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object[];

        z0 = 0;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label2;

        $r2 = r1[i0];

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        z0 = z0 | $z1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return z0;
    }

    public static java.util.Queue asLifoQueue(java.util.Deque)
    {
        java.util.Deque r0;
        java.util.Collections$AsLIFOQueue $r1;

        r0 := @parameter0: java.util.Deque;

        $r1 = new java.util.Collections$AsLIFOQueue;

        specialinvoke $r1.<java.util.Collections$AsLIFOQueue: void <init>(java.util.Deque)>(r0);

        return $r1;
    }

    public static int binarySearch(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1, $r3, $r6;
        int i0, i1, i2, i3, i4, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        byte b5;
        java.util.ListIterator r2;
        boolean $z0, $z1, $z2;
        java.lang.Comparable $r4, $r5;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label01;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("list == null");

        throw $r7;

     label01:
        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        i1 = -1;

     label02:
        return i1;

     label03:
        $z1 = r0 instanceof java.util.RandomAccess;

        if $z1 != 0 goto label07;

        r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label04:
        $z2 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r6 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        $r5 = (java.lang.Comparable) $r6;

        $i13 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        i6 = neg $i13;

        if i6 > 0 goto label04;

        if i6 != 0 goto label05;

        $i16 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        return $i16;

     label05:
        $i15 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        $i14 = neg $i15;

        $i17 = -1 + $i14;

        return $i17;

     label06:
        $i10 = interfaceinvoke r0.<java.util.List: int size()>();

        $i12 = neg $i10;

        $i11 = -1 + $i12;

        return $i11;

     label07:
        i0 = 0;

        i1 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = i1 - 1;

        i3 = -1;

     label08:
        if i0 > i2 goto label10;

        $i8 = i0 + i2;

        i1 = $i8 >>> 1;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (java.lang.Comparable) $r3;

        $i9 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        i3 = neg $i9;

        if i3 <= 0 goto label09;

        i0 = i1 + 1;

        goto label08;

     label09:
        if i3 == 0 goto label02;

        i2 = i1 - 1;

        goto label08;

     label10:
        i4 = neg i1;

        if i3 >= 0 goto label12;

        b5 = 1;

     label11:
        $i7 = i4 - b5;

        return $i7;

     label12:
        b5 = 2;

        goto label11;
    }

    public static int binarySearch(java.util.List, java.lang.Object, java.util.Comparator)
    {
        java.util.List r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Comparator r2;
        int i0, i1, i2, i3, i4, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        byte b5;
        java.util.ListIterator r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Comparator;

        if r2 != null goto label02;

        i1 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>(r0, r1);

     label01:
        return i1;

     label02:
        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 != 0 goto label06;

        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label03:
        $z1 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r5 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        $i13 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, r1);

        i6 = neg $i13;

        if i6 > 0 goto label03;

        if i6 != 0 goto label04;

        $i16 = interfaceinvoke r3.<java.util.ListIterator: int previousIndex()>();

        return $i16;

     label04:
        $i15 = interfaceinvoke r3.<java.util.ListIterator: int previousIndex()>();

        $i14 = neg $i15;

        $i17 = -1 + $i14;

        return $i17;

     label05:
        $i11 = interfaceinvoke r0.<java.util.List: int size()>();

        $i10 = neg $i11;

        $i12 = -1 + $i10;

        return $i12;

     label06:
        i0 = 0;

        i1 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = i1 - 1;

        i3 = -1;

     label07:
        if i0 > i2 goto label09;

        $i8 = i0 + i2;

        i1 = $i8 >>> 1;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $i9 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, r1);

        i3 = neg $i9;

        if i3 <= 0 goto label08;

        i0 = i1 + 1;

        goto label07;

     label08:
        if i3 == 0 goto label01;

        i2 = i1 - 1;

        goto label07;

     label09:
        i4 = neg i1;

        if i3 >= 0 goto label11;

        b5 = 1;

     label10:
        $i7 = i4 - b5;

        return $i7;

     label11:
        b5 = 2;

        goto label10;
    }

    static java.lang.Object checkType(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r5;
        boolean $z0;
        java.lang.ClassCastException $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.ClassCastException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to insert element of type ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into collection of type ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return r0;
    }

    public static java.util.Collection checkedCollection(java.util.Collection, java.lang.Class)
    {
        java.util.Collection r0;
        java.lang.Class r1;
        java.util.Collections$CheckedCollection $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Class;

        $r2 = new java.util.Collections$CheckedCollection;

        specialinvoke $r2.<java.util.Collections$CheckedCollection: void <init>(java.util.Collection,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.util.List checkedList(java.util.List, java.lang.Class)
    {
        java.util.List r0;
        java.lang.Class r1;
        boolean $z0;
        java.util.Collections$CheckedList $r2;
        java.util.Collections$CheckedRandomAccessList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Class;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r3 = new java.util.Collections$CheckedRandomAccessList;

        specialinvoke $r3.<java.util.Collections$CheckedRandomAccessList: void <init>(java.util.List,java.lang.Class)>(r0, r1);

        return $r3;

     label1:
        $r2 = new java.util.Collections$CheckedList;

        specialinvoke $r2.<java.util.Collections$CheckedList: void <init>(java.util.List,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.util.Map checkedMap(java.util.Map, java.lang.Class, java.lang.Class)
    {
        java.util.Map r0;
        java.lang.Class r1, r2;
        java.util.Collections$CheckedMap $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        $r3 = new java.util.Collections$CheckedMap;

        specialinvoke $r3.<java.util.Collections$CheckedMap: void <init>(java.util.Map,java.lang.Class,java.lang.Class,java.util.Collections$1)>(r0, r1, r2, null);

        return $r3;
    }

    public static java.util.Set checkedSet(java.util.Set, java.lang.Class)
    {
        java.util.Set r0;
        java.lang.Class r1;
        java.util.Collections$CheckedSet $r2;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.Class;

        $r2 = new java.util.Collections$CheckedSet;

        specialinvoke $r2.<java.util.Collections$CheckedSet: void <init>(java.util.Set,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.util.SortedMap checkedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)
    {
        java.util.SortedMap r0;
        java.lang.Class r1, r2;
        java.util.Collections$CheckedSortedMap $r3;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        $r3 = new java.util.Collections$CheckedSortedMap;

        specialinvoke $r3.<java.util.Collections$CheckedSortedMap: void <init>(java.util.SortedMap,java.lang.Class,java.lang.Class)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.SortedSet checkedSortedSet(java.util.SortedSet, java.lang.Class)
    {
        java.util.SortedSet r0;
        java.lang.Class r1;
        java.util.Collections$CheckedSortedSet $r2;

        r0 := @parameter0: java.util.SortedSet;

        r1 := @parameter1: java.lang.Class;

        $r2 = new java.util.Collections$CheckedSortedSet;

        specialinvoke $r2.<java.util.Collections$CheckedSortedSet: void <init>(java.util.SortedSet,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static void copy(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.Iterator r2;
        java.util.ListIterator r3;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.IndexOutOfBoundsException $r7, $r16;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r15, $r17, $r18, $r19;
        java.util.NoSuchElementException $r13;
        java.lang.String $r14, $r20;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label1;

        $r7 = new java.lang.IndexOutOfBoundsException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("destination.size() < source.size(): ");

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label1:
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

     label3:
        interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

     label4:
        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>($r6);

        goto label2;

     label5:
        $r13 := @caughtexception;

        $r16 = new java.lang.IndexOutOfBoundsException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source size ");

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fit into destination");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label6:
        return;

        catch java.util.NoSuchElementException from label3 to label4 with label5;
    }

    public static boolean disjoint(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $z0 = r0 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        $z3 = r1 instanceof java.util.Set;

        if $z3 == 0 goto label2;

     label1:
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 <= $i1 goto label3;

     label2:
        r3 = r0;

        r0 = r1;

        r1 = r3;

     label3:
        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z2 == 0 goto label4;

        return 0;

     label5:
        return 1;
    }

    public static java.util.Enumeration emptyEnumeration()
    {
        java.util.Enumeration $r0;

        $r0 = <java.util.Collections: java.util.Enumeration EMPTY_ENUMERATION>;

        return $r0;
    }

    public static java.util.Iterator emptyIterator()
    {
        java.util.Iterator $r0;

        $r0 = <java.util.Collections: java.util.Iterator EMPTY_ITERATOR>;

        return $r0;
    }

    public static final java.util.List emptyList()
    {
        java.util.List $r0;

        $r0 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r0;
    }

    public static java.util.ListIterator emptyListIterator()
    {
        java.util.List $r0;
        java.util.ListIterator $r1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.ListIterator listIterator()>();

        return $r1;
    }

    public static final java.util.Map emptyMap()
    {
        java.util.Map $r0;

        $r0 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        return $r0;
    }

    public static final java.util.Set emptySet()
    {
        java.util.Set $r0;

        $r0 = <java.util.Collections: java.util.Set EMPTY_SET>;

        return $r0;
    }

    public static java.util.Enumeration enumeration(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Collections$3 $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = new java.util.Collections$3;

        specialinvoke $r1.<java.util.Collections$3: void <init>(java.util.Collection)>(r0);

        return $r1;
    }

    public static void fill(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1;
        java.util.ListIterator r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(r1);

        goto label1;

     label2:
        return;
    }

    public static int frequency(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object r1, r3;
        int i0;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("c == null");

        throw $r4;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        i0 = 0;

     label2:
        return i0;

     label3:
        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if r1 != null goto label6;

        if r3 != null goto label4;

     label5:
        i0 = i0 + 1;

        goto label4;

     label6:
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label4;

        goto label5;
    }

    public static int indexOfSubList(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int i0, i1, i3, $i4;
        byte b2;
        java.lang.Object r2, r5, $r6, $r7, $r8, $r9;
        java.util.ListIterator r3, r4;
        boolean z0, z1, $z2, $z3, $z4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 <= i0 goto label02;

        b2 = -1;

     label01:
        return b2;

     label02:
        b2 = 0;

        if i1 == 0 goto label01;

        r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        i3 = interfaceinvoke r0.<java.util.List: int indexOf(java.lang.Object)>(r2);

        if i3 != -1 goto label04;

        return -1;

     label03:
        i3 = i3 + 1;

     label04:
        if i3 >= i0 goto label12;

        $i4 = i0 - i3;

        if $i4 < i1 goto label12;

        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>(i3);

        if r2 != null goto label07;

        $r8 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        if $r8 != null goto label03;

     label05:
        r4 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator(int)>(1);

     label06:
        z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasNext()>();

        z1 = 0;

        if z0 == 0 goto label10;

        r5 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object next()>();

        $z3 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();

        if $z3 != 0 goto label08;

        return -1;

     label07:
        $r6 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label03;

        goto label05;

     label08:
        if r5 != null goto label11;

        $r9 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        if $r9 == null goto label06;

     label09:
        z1 = 1;

     label10:
        if z1 != 0 goto label03;

        return i3;

     label11:
        $r7 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        $z4 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z4 != 0 goto label06;

        goto label09;

     label12:
        return -1;
    }

    public static int lastIndexOfSubList(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r2, r5, $r6, $r7, $r8, $r9;
        java.util.ListIterator r3, r4;
        boolean z0, z1, $z2, $z3, $z4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 <= i1 goto label02;

        i1 = -1;

     label01:
        return i1;

     label02:
        if i0 == 0 goto label01;

        $i3 = i0 - 1;

        r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        i2 = interfaceinvoke r0.<java.util.List: int lastIndexOf(java.lang.Object)>(r2);

     label03:
        if i2 <= -1 goto label12;

        $i5 = i2 + 1;

        if $i5 < i0 goto label12;

        $i4 = i2 + 1;

        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>($i4);

        if r2 != null goto label06;

        $r9 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        if $r9 != null goto label07;

     label04:
        $i6 = i0 - 1;

        r4 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator(int)>($i6);

     label05:
        z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasPrevious()>();

        z1 = 0;

        if z0 == 0 goto label10;

        r5 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object previous()>();

        $z3 = interfaceinvoke r3.<java.util.ListIterator: boolean hasPrevious()>();

        if $z3 != 0 goto label08;

        return -1;

     label06:
        $r6 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label04;

     label07:
        i2 = i2 + -1;

        goto label03;

     label08:
        if r5 != null goto label11;

        $r8 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        if $r8 == null goto label05;

     label09:
        z1 = 1;

     label10:
        if z1 != 0 goto label07;

        $i7 = interfaceinvoke r3.<java.util.ListIterator: int nextIndex()>();

        return $i7;

     label11:
        $r7 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        $z4 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z4 != 0 goto label05;

        goto label09;

     label12:
        return -1;
    }

    public static java.util.ArrayList list(java.util.Enumeration)
    {
        java.util.Enumeration r0;
        java.util.ArrayList r1, $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Enumeration;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Object max(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object r2, r3;
        boolean $z0;
        java.lang.Comparable $r4;
        int $i0;

        r0 := @parameter0: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Comparable) r2;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        if $i0 >= 0 goto label1;

        r2 = r3;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.Object max(java.util.Collection, java.util.Comparator)
    {
        java.util.Collection r0;
        java.util.Comparator r1;
        java.util.Iterator r2;
        java.lang.Object r3, r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Comparator;

        if r1 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>(r0);

        return $r5;

     label1:
        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, r4);

        if $i0 >= 0 goto label2;

        r3 = r4;

        goto label2;

     label3:
        return r3;
    }

    public static java.lang.Object min(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object r2, r3;
        boolean $z0;
        java.lang.Comparable $r4;
        int $i0;

        r0 := @parameter0: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Comparable) r2;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        if $i0 <= 0 goto label1;

        r2 = r3;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.Object min(java.util.Collection, java.util.Comparator)
    {
        java.util.Collection r0;
        java.util.Comparator r1;
        java.util.Iterator r2;
        java.lang.Object r3, r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Comparator;

        if r1 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.lang.Object min(java.util.Collection)>(r0);

        return $r5;

     label1:
        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, r4);

        if $i0 <= 0 goto label2;

        r3 = r4;

        goto label2;

     label3:
        return r3;
    }

    public static java.util.List nCopies(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r0;
        java.util.Collections$CopiesList $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        $r1 = new java.util.Collections$CopiesList;

        specialinvoke $r1.<java.util.Collections$CopiesList: void <init>(int,java.lang.Object)>(i0, r0);

        return $r1;
    }

    public static java.util.Set newSetFromMap(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.util.Collections$SetFromMap $r2;

        r0 := @parameter0: java.util.Map;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.Collections$SetFromMap;

        specialinvoke $r2.<java.util.Collections$SetFromMap: void <init>(java.util.Map)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("map not empty");

        throw $r1;
    }

    public static boolean replaceAll(java.util.List, java.lang.Object, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1, r2;
        boolean z0;
        int i0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        z0 = 0;

     label1:
        i0 = interfaceinvoke r0.<java.util.List: int indexOf(java.lang.Object)>(r1);

        if i0 <= -1 goto label2;

        z0 = 1;

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r2);

        goto label1;

     label2:
        return z0;
    }

    public static void reverse(java.util.List)
    {
        java.util.List r0;
        int i0, i1, $i2;
        java.util.ListIterator r1, r2;
        java.lang.Object r3, $r4;

        r0 := @parameter0: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

        r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>(i0);

        i1 = 0;

     label1:
        $i2 = i0 / 2;

        if i1 >= $i2 goto label2;

        r3 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        $r4 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke r1.<java.util.ListIterator: void set(java.lang.Object)>($r4);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.util.Comparator reverseOrder()
    {
        java.util.Collections$ReverseComparator $r0;

        $r0 = staticinvoke <java.util.Collections$ReverseComparator: java.util.Collections$ReverseComparator access$400()>();

        return $r0;
    }

    public static java.util.Comparator reverseOrder(java.util.Comparator)
    {
        java.util.Comparator r0, $r3, $r4;
        boolean $z0;
        java.util.Collections$ReverseComparator2 $r1, $r2;

        r0 := @parameter0: java.util.Comparator;

        if r0 != null goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder()>();

        return $r4;

     label1:
        $z0 = r0 instanceof java.util.Collections$ReverseComparator2;

        if $z0 == 0 goto label2;

        $r2 = (java.util.Collections$ReverseComparator2) r0;

        $r3 = staticinvoke <java.util.Collections$ReverseComparator2: java.util.Comparator access$500(java.util.Collections$ReverseComparator2)>($r2);

        return $r3;

     label2:
        $r1 = new java.util.Collections$ReverseComparator2;

        specialinvoke $r1.<java.util.Collections$ReverseComparator2: void <init>(java.util.Comparator)>(r0);

        return $r1;
    }

    public static void rotate(java.util.List, int)
    {
        java.util.List r0, r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10;
        java.lang.Object r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 != 0 goto label2;

     label1:
        return;

     label2:
        if i0 <= 0 goto label6;

        i2 = i0 % i1;

     label3:
        if i2 == 0 goto label1;

        if i2 == i1 goto label1;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label7;

        r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        i4 = 0;

        i5 = 0;

        i6 = 0;

     label4:
        if i6 >= i1 goto label1;

        $i10 = i4 + i2;

        i4 = $i10 % i1;

        r3 = interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i4, r3);

        if i4 != i5 goto label5;

        i5 = i5 + 1;

        i4 = i5;

        r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        $i7 = i0 % i1;

        $i8 = -1 * $i7;

        i2 = i1 - $i8;

        goto label3;

     label7:
        $i9 = i1 - i2;

        i3 = $i9 % i1;

        r1 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(0, i3);

        r2 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(i3, i1);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r1);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r2);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r0);

        return;
    }

    public static int roundUpToPowerOfTwo(int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;

        i0 := @parameter0: int;

        i1 = i0 - 1;

        $i6 = i1 >>> 1;

        i2 = i1 | $i6;

        $i7 = i2 >>> 2;

        i3 = i2 | $i7;

        $i8 = i3 >>> 4;

        i4 = i3 | $i8;

        $i9 = i4 >>> 8;

        i5 = i4 | $i9;

        $i10 = i5 >>> 16;

        $i11 = i5 | $i10;

        $i12 = 1 + $i11;

        return $i12;
    }

    private static int secondaryHash(int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        i0 := @parameter0: int;

        $i6 = i0 << 15;

        $i7 = -12931 ^ $i6;

        i1 = i0 + $i7;

        $i8 = i1 >>> 10;

        i2 = i1 ^ $i8;

        $i9 = i2 << 3;

        i3 = i2 + $i9;

        $i10 = i3 >>> 6;

        i4 = i3 ^ $i10;

        $i12 = i4 << 2;

        $i11 = i4 << 14;

        $i13 = $i12 + $i11;

        i5 = i4 + $i13;

        $i14 = i5 >>> 16;

        $i15 = i5 ^ $i14;

        return $i15;
    }

    public static int secondaryHash(java.lang.Object)
    {
        java.lang.Object r0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <java.util.Collections: int secondaryHash(int)>($i0);

        return $i1;
    }

    public static int secondaryIdentityHash(java.lang.Object)
    {
        java.lang.Object r0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $i1 = staticinvoke <java.util.Collections: int secondaryHash(int)>($i0);

        return $i1;
    }

    public static void shuffle(java.util.List)
    {
        java.util.List r0;
        java.util.Random $r1;

        r0 := @parameter0: java.util.List;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>(r0, $r1);

        return;
    }

    public static void shuffle(java.util.List, java.util.Random)
    {
        java.util.List r0;
        java.util.Random r1;
        java.lang.Object[] r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        java.util.ListIterator r3;
        java.lang.Object r4, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Random;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label2;

        $i8 = interfaceinvoke r0.<java.util.List: int size()>();

        i4 = -1 + $i8;

     label1:
        if i4 <= 0 goto label6;

        $i9 = i4 + 1;

        i5 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i9);

        $r9 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i4, $r9);

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i5, $r8);

        i4 = i4 + -1;

        goto label1;

     label2:
        r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();

        $i6 = lengthof r2;

        i0 = -1 + $i6;

     label3:
        if i0 <= 0 goto label4;

        $i7 = i0 + 1;

        i3 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i7);

        r4 = r2[i0];

        $r7 = r2[i3];

        r2[i0] = $r7;

        r2[i3] = r4;

        i0 = i0 + -1;

        goto label3;

     label4:
        i1 = 0;

        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label5:
        $z1 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        i2 = i1 + 1;

        $r6 = r2[i1];

        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>($r6);

        i1 = i2;

        goto label5;

     label6:
        return;
    }

    public static java.util.Set singleton(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Collections$SingletonSet $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new java.util.Collections$SingletonSet;

        specialinvoke $r1.<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.List singletonList(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Collections$SingletonList $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new java.util.Collections$SingletonList;

        specialinvoke $r1.<java.util.Collections$SingletonList: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.Map singletonMap(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.util.Collections$SingletonMap $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.util.Collections$SingletonMap;

        specialinvoke $r2.<java.util.Collections$SingletonMap: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static void sort(java.util.List)
    {
        java.util.List r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.util.ListIterator r2;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Comparable $r5;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r1);

        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        i1 = i0 + 1;

        $r4 = r1[i0];

        $r5 = (java.lang.Comparable) $r4;

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>($r5);

        i0 = i1;

        goto label1;

     label2:
        return;
    }

    public static void sort(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        java.util.Comparator r1;
        java.lang.Object[] r2, $r4, $r5;
        int i0, i1, $i2;
        java.util.ListIterator r3;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $r4 = newarray (java.lang.Object)[$i2];

        $r5 = (java.lang.Object[]) $r4;

        r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, r1);

        i0 = 0;

        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();

        i1 = i0 + 1;

        $r7 = r2[i0];

        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>($r7);

        i0 = i1;

        goto label1;

     label2:
        return;
    }

    public static void swap(java.util.List, int, int)
    {
        java.util.List r0;
        int i0, i1, i2;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.Object $r2, $r3;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("list == null");

        throw $r5;

     label1:
        i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 < 0 goto label2;

        if i0 >= i2 goto label2;

        if i1 < 0 goto label2;

        if i1 < i2 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        if i0 != i1 goto label4;

        return;

     label4:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r3);

        return;
    }

    public static java.util.Collection synchronizedCollection(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Collections$SynchronizedCollection $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("collection == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$SynchronizedCollection;

        specialinvoke $r1.<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.List synchronizedList(java.util.List)
    {
        java.util.List r0;
        boolean $z0;
        java.util.Collections$SynchronizedList $r1;
        java.util.Collections$SynchronizedRandomAccessList $r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("list == null");

        throw $r3;

     label1:
        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label2;

        $r2 = new java.util.Collections$SynchronizedRandomAccessList;

        specialinvoke $r2.<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List)>(r0);

        return $r2;

     label2:
        $r1 = new java.util.Collections$SynchronizedList;

        specialinvoke $r1.<java.util.Collections$SynchronizedList: void <init>(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.Map synchronizedMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Collections$SynchronizedMap $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("map == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$SynchronizedMap;

        specialinvoke $r1.<java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Set synchronizedSet(java.util.Set)
    {
        java.util.Set r0;
        java.util.Collections$SynchronizedSet $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Set;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("set == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$SynchronizedSet;

        specialinvoke $r1.<java.util.Collections$SynchronizedSet: void <init>(java.util.Set)>(r0);

        return $r1;
    }

    public static java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0;
        java.util.Collections$SynchronizedSortedMap $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.SortedMap;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("map == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$SynchronizedSortedMap;

        specialinvoke $r1.<java.util.Collections$SynchronizedSortedMap: void <init>(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)
    {
        java.util.SortedSet r0;
        java.util.Collections$SynchronizedSortedSet $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.SortedSet;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("set == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$SynchronizedSortedSet;

        specialinvoke $r1.<java.util.Collections$SynchronizedSortedSet: void <init>(java.util.SortedSet)>(r0);

        return $r1;
    }

    public static java.util.Collection unmodifiableCollection(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Collections$UnmodifiableCollection $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("collection == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$UnmodifiableCollection;

        specialinvoke $r1.<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.List unmodifiableList(java.util.List)
    {
        java.util.List r0;
        boolean $z0;
        java.util.Collections$UnmodifiableList $r1;
        java.util.Collections$UnmodifiableRandomAccessList $r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("list == null");

        throw $r3;

     label1:
        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label2;

        $r2 = new java.util.Collections$UnmodifiableRandomAccessList;

        specialinvoke $r2.<java.util.Collections$UnmodifiableRandomAccessList: void <init>(java.util.List)>(r0);

        return $r2;

     label2:
        $r1 = new java.util.Collections$UnmodifiableList;

        specialinvoke $r1.<java.util.Collections$UnmodifiableList: void <init>(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.Map unmodifiableMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Collections$UnmodifiableMap $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("map == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$UnmodifiableMap;

        specialinvoke $r1.<java.util.Collections$UnmodifiableMap: void <init>(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Set unmodifiableSet(java.util.Set)
    {
        java.util.Set r0;
        java.util.Collections$UnmodifiableSet $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Set;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("set == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$UnmodifiableSet;

        specialinvoke $r1.<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>(r0);

        return $r1;
    }

    public static java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0;
        java.util.Collections$UnmodifiableSortedMap $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.SortedMap;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("map == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$UnmodifiableSortedMap;

        specialinvoke $r1.<java.util.Collections$UnmodifiableSortedMap: void <init>(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)
    {
        java.util.SortedSet r0;
        java.util.Collections$UnmodifiableSortedSet $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.SortedSet;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("set == null");

        throw $r2;

     label1:
        $r1 = new java.util.Collections$UnmodifiableSortedSet;

        specialinvoke $r1.<java.util.Collections$UnmodifiableSortedSet: void <init>(java.util.SortedSet)>(r0);

        return $r1;
    }
}
