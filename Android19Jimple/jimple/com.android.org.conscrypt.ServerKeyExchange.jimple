public class com.android.org.conscrypt.ServerKeyExchange extends com.android.org.conscrypt.Message
{
    final byte[] bytes1;
    final byte[] bytes2;
    final byte[] bytes3;
    final byte[] hash;
    private java.security.interfaces.RSAPublicKey key;
    final java.math.BigInteger par1;
    final java.math.BigInteger par2;
    final java.math.BigInteger par3;

    public void <init>(com.android.org.conscrypt.HandshakeIODataStream, int, int) throws java.io.IOException
    {
        com.android.org.conscrypt.ServerKeyExchange r0;
        com.android.org.conscrypt.HandshakeIODataStream r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        byte[] $r2, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r15;
        java.math.BigInteger $r3, $r7, $r14;

        r0 := @this: com.android.org.conscrypt.ServerKeyExchange;

        r1 := @parameter0: com.android.org.conscrypt.HandshakeIODataStream;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        $i2 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: int readUint16()>();

        $r2 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: byte[] read(int)>($i2);

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes1> = $r2;

        $r3 = new java.math.BigInteger;

        $r4 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes1>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r4);

        r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par1> = $r3;

        $r5 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes1>;

        $i3 = lengthof $r5;

        $i4 = 2 + $i3;

        r0.<com.android.org.conscrypt.ServerKeyExchange: int length> = $i4;

        $i5 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: int readUint16()>();

        $r6 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: byte[] read(int)>($i5);

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes2> = $r6;

        $r7 = new java.math.BigInteger;

        $r8 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes2>;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, $r8);

        r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par2> = $r7;

        $i9 = r0.<com.android.org.conscrypt.ServerKeyExchange: int length>;

        $r9 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes2>;

        $i7 = lengthof $r9;

        $i6 = 2 + $i7;

        $i8 = $i9 + $i6;

        r0.<com.android.org.conscrypt.ServerKeyExchange: int length> = $i8;

        if i1 == 2 goto label4;

        $i16 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: int readUint16()>();

        $r12 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: byte[] read(int)>($i16);

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3> = $r12;

        $r14 = new java.math.BigInteger;

        $r13 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3>;

        specialinvoke $r14.<java.math.BigInteger: void <init>(int,byte[])>(1, $r13);

        r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par3> = $r14;

        $i18 = r0.<com.android.org.conscrypt.ServerKeyExchange: int length>;

        $r15 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3>;

        $i19 = lengthof $r15;

        $i17 = 2 + $i19;

        $i20 = $i18 + $i17;

        r0.<com.android.org.conscrypt.ServerKeyExchange: int length> = $i20;

     label1:
        if i1 == 10 goto label5;

        if i1 == 9 goto label5;

        $i10 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: int readUint16()>();

        $r11 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: byte[] read(int)>($i10);

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash> = $r11;

        $i15 = r0.<com.android.org.conscrypt.ServerKeyExchange: int length>;

        $r10 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash>;

        $i13 = lengthof $r10;

        $i12 = 2 + $i13;

        $i14 = $i15 + $i12;

        r0.<com.android.org.conscrypt.ServerKeyExchange: int length> = $i14;

     label2:
        $i11 = r0.<com.android.org.conscrypt.ServerKeyExchange: int length>;

        if $i11 == i0 goto label3;

        virtualinvoke r0.<com.android.org.conscrypt.ServerKeyExchange: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect ServerKeyExchange");

     label3:
        return;

     label4:
        r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par3> = null;

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3> = null;

        goto label1;

     label5:
        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash> = null;

        goto label2;
    }

    public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, byte[])
    {
        com.android.org.conscrypt.ServerKeyExchange r0;
        java.math.BigInteger r1, r2, r3, $r5, $r7, $r11;
        byte[] r4, $r6, $r8, $r9, $r10, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: com.android.org.conscrypt.ServerKeyExchange;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.math.BigInteger;

        r3 := @parameter2: java.math.BigInteger;

        r4 := @parameter3: byte[];

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par1> = r1;

        r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par2> = r2;

        r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par3> = r3;

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash> = r4;

        $r5 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par1>;

        $r6 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>($r5);

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes1> = $r6;

        $r7 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par2>;

        $r8 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>($r7);

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes2> = $r8;

        $r9 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes1>;

        $i0 = lengthof $r9;

        $i2 = 4 + $i0;

        $r10 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes2>;

        $i1 = lengthof $r10;

        $i3 = $i2 + $i1;

        r0.<com.android.org.conscrypt.ServerKeyExchange: int length> = $i3;

        if r4 == null goto label1;

        $i11 = r0.<com.android.org.conscrypt.ServerKeyExchange: int length>;

        $i9 = lengthof r4;

        $i8 = 2 + $i9;

        $i10 = $i11 + $i8;

        r0.<com.android.org.conscrypt.ServerKeyExchange: int length> = $i10;

     label1:
        if r3 != null goto label2;

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3> = null;

        return;

     label2:
        $r11 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par3>;

        $r13 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>($r11);

        r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3> = $r13;

        $i7 = r0.<com.android.org.conscrypt.ServerKeyExchange: int length>;

        $r12 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3>;

        $i5 = lengthof $r12;

        $i4 = 2 + $i5;

        $i6 = $i7 + $i4;

        r0.<com.android.org.conscrypt.ServerKeyExchange: int length> = $i6;

        return;
    }

    public static byte[] toUnsignedByteArray(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        byte[] r1, r2;
        byte $b0;
        int $i1, $i2, $i3;

        r0 := @parameter0: java.math.BigInteger;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = r1[0];

        if $b0 != 0 goto label2;

        $i1 = lengthof r1;

        $i2 = -1 + $i1;

        r2 = newarray (byte)[$i2];

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 1, r2, 0, $i3);

        return r2;

     label2:
        return r1;
    }

    public static void updateSignatureDh(com.android.org.conscrypt.DigitalSignature, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        com.android.org.conscrypt.DigitalSignature r0;
        java.math.BigInteger r1, r2, r3;
        byte[] r4, r5, r6, r7;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i20;
        byte $b3, $b6, $b11, $b12, $b18, $b19;

        r0 := @parameter0: com.android.org.conscrypt.DigitalSignature;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        r3 := @parameter3: java.math.BigInteger;

        r4 = newarray (byte)[2];

        r5 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>(r1);

        $i0 = lengthof r5;

        $i1 = 65280 & $i0;

        $i2 = $i1 >>> 8;

        $b3 = (byte) $i2;

        r4[0] = $b3;

        $i4 = lengthof r5;

        $i5 = 255 & $i4;

        $b6 = (byte) $i5;

        r4[1] = $b6;

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r4);

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r5);

        r6 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>(r2);

        $i7 = lengthof r6;

        $i9 = 65280 & $i7;

        $i8 = $i9 >>> 8;

        $b11 = (byte) $i8;

        r4[0] = $b11;

        $i10 = lengthof r6;

        $i13 = 255 & $i10;

        $b12 = (byte) $i13;

        r4[1] = $b12;

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r4);

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r6);

        r7 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>(r3);

        $i14 = lengthof r7;

        $i16 = 65280 & $i14;

        $i15 = $i16 >>> 8;

        $b18 = (byte) $i15;

        r4[0] = $b18;

        $i17 = lengthof r7;

        $i20 = 255 & $i17;

        $b19 = (byte) $i20;

        r4[1] = $b19;

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r4);

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r7);

        return;
    }

    public static void updateSignatureRsa(com.android.org.conscrypt.DigitalSignature, java.math.BigInteger, java.math.BigInteger)
    {
        com.android.org.conscrypt.DigitalSignature r0;
        java.math.BigInteger r1, r2;
        byte[] r3, r4, r5;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i13;
        byte $b3, $b6, $b11, $b12;

        r0 := @parameter0: com.android.org.conscrypt.DigitalSignature;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        r3 = newarray (byte)[2];

        r4 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>(r1);

        $i0 = lengthof r4;

        $i1 = 65280 & $i0;

        $i2 = $i1 >>> 8;

        $b3 = (byte) $i2;

        r3[0] = $b3;

        $i4 = lengthof r4;

        $i5 = 255 & $i4;

        $b6 = (byte) $i5;

        r3[1] = $b6;

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r3);

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r4);

        r5 = staticinvoke <com.android.org.conscrypt.ServerKeyExchange: byte[] toUnsignedByteArray(java.math.BigInteger)>(r2);

        $i7 = lengthof r5;

        $i9 = 65280 & $i7;

        $i8 = $i9 >>> 8;

        $b11 = (byte) $i8;

        r3[0] = $b11;

        $i10 = lengthof r5;

        $i13 = 255 & $i10;

        $b12 = (byte) $i13;

        r3[1] = $b12;

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r3);

        virtualinvoke r0.<com.android.org.conscrypt.DigitalSignature: void update(byte[])>(r5);

        return;
    }

    public java.security.interfaces.RSAPublicKey getRSAPublicKey()
    {
        com.android.org.conscrypt.ServerKeyExchange r0;
        java.security.interfaces.RSAPublicKey $r2, $r8, $r9, $r10;
        java.security.KeyFactory $r3;
        java.security.spec.RSAPublicKeySpec $r4;
        java.math.BigInteger $r5, $r6;
        java.security.PublicKey $r7;
        java.lang.Exception $r11;

        r0 := @this: com.android.org.conscrypt.ServerKeyExchange;

        $r2 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.security.interfaces.RSAPublicKey key>;

        if $r2 == null goto label1;

        $r10 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.security.interfaces.RSAPublicKey key>;

        return $r10;

     label1:
        $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r4 = new java.security.spec.RSAPublicKeySpec;

        $r6 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par1>;

        $r5 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par2>;

        specialinvoke $r4.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r6, $r5);

        $r7 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4);

        $r8 = (java.security.interfaces.RSAPublicKey) $r7;

        r0.<com.android.org.conscrypt.ServerKeyExchange: java.security.interfaces.RSAPublicKey key> = $r8;

     label2:
        $r9 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.security.interfaces.RSAPublicKey key>;

        return $r9;

     label3:
        $r11 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getType()
    {
        com.android.org.conscrypt.ServerKeyExchange r0;

        r0 := @this: com.android.org.conscrypt.ServerKeyExchange;

        return 12;
    }

    public boolean isAnonymous()
    {
        com.android.org.conscrypt.ServerKeyExchange r0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.ServerKeyExchange;

        $r1 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void send(com.android.org.conscrypt.HandshakeIODataStream)
    {
        com.android.org.conscrypt.ServerKeyExchange r0;
        com.android.org.conscrypt.HandshakeIODataStream r1;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: com.android.org.conscrypt.ServerKeyExchange;

        r1 := @parameter0: com.android.org.conscrypt.HandshakeIODataStream;

        $r2 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes1>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint16(long)>($l1);

        $r3 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes1>;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void write(byte[])>($r3);

        $r4 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes2>;

        $i2 = lengthof $r4;

        $l3 = (long) $i2;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint16(long)>($l3);

        $r5 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes2>;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void write(byte[])>($r5);

        $r6 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3>;

        if $r6 == null goto label1;

        $r10 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3>;

        $i6 = lengthof $r10;

        $l7 = (long) $i6;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint16(long)>($l7);

        $r11 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] bytes3>;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void write(byte[])>($r11);

     label1:
        $r7 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash>;

        if $r7 == null goto label2;

        $r8 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash>;

        $i4 = lengthof $r8;

        $l5 = (long) $i4;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint16(long)>($l5);

        $r9 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash>;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void write(byte[])>($r9);

     label2:
        return;
    }

    public boolean verifySignature(com.android.org.conscrypt.DigitalSignature)
    {
        com.android.org.conscrypt.ServerKeyExchange r0;
        com.android.org.conscrypt.DigitalSignature r1;
        java.math.BigInteger $r2, $r3, $r4, $r6, $r7, $r8;
        byte[] $r5;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.ServerKeyExchange;

        r1 := @parameter0: com.android.org.conscrypt.DigitalSignature;

        $r2 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par3>;

        if $r2 == null goto label2;

        $r8 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par1>;

        $r7 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par2>;

        $r6 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par3>;

        staticinvoke <com.android.org.conscrypt.ServerKeyExchange: void updateSignatureDh(com.android.org.conscrypt.DigitalSignature,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r1, $r8, $r7, $r6);

     label1:
        $r5 = r0.<com.android.org.conscrypt.ServerKeyExchange: byte[] hash>;

        $z0 = virtualinvoke r1.<com.android.org.conscrypt.DigitalSignature: boolean verifySignature(byte[])>($r5);

        return $z0;

     label2:
        $r4 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par1>;

        $r3 = r0.<com.android.org.conscrypt.ServerKeyExchange: java.math.BigInteger par2>;

        staticinvoke <com.android.org.conscrypt.ServerKeyExchange: void updateSignatureRsa(com.android.org.conscrypt.DigitalSignature,java.math.BigInteger,java.math.BigInteger)>(r1, $r4, $r3);

        goto label1;
    }
}
