public class org.apache.xalan.extensions.ExpressionVisitor extends org.apache.xpath.XPathVisitor
{
    private org.apache.xalan.templates.StylesheetRoot m_sroot;

    public void <init>(org.apache.xalan.templates.StylesheetRoot)
    {
        org.apache.xalan.extensions.ExpressionVisitor r0;
        org.apache.xalan.templates.StylesheetRoot r1;

        r0 := @this: org.apache.xalan.extensions.ExpressionVisitor;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xpath.XPathVisitor: void <init>()>();

        r0.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot> = r1;

        return;
    }

    public boolean visitFunction(org.apache.xpath.ExpressionOwner, org.apache.xpath.functions.Function)
    {
        org.apache.xalan.extensions.ExpressionVisitor r0;
        org.apache.xpath.ExpressionOwner r1;
        org.apache.xpath.functions.Function r2;
        java.lang.String r3, r4, r5, r6;
        boolean $z0, $z1;
        org.apache.xpath.functions.FuncExtFunctionAvailable $r7;
        org.apache.xpath.Expression $r8;
        int $i0, $i1;
        org.apache.xalan.templates.StylesheetRoot $r9, $r11, $r14;
        org.apache.xalan.extensions.ExtensionNamespacesManager $r10, $r13;
        org.apache.xpath.functions.FuncExtFunction $r12;

        r0 := @this: org.apache.xalan.extensions.ExpressionVisitor;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r2 := @parameter1: org.apache.xpath.functions.Function;

        $z0 = r2 instanceof org.apache.xpath.functions.FuncExtFunction;

        if $z0 == 0 goto label2;

        $r12 = (org.apache.xpath.functions.FuncExtFunction) r2;

        r6 = virtualinvoke $r12.<org.apache.xpath.functions.FuncExtFunction: java.lang.String getNamespace()>();

        $r14 = r0.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot>;

        $r13 = virtualinvoke $r14.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        virtualinvoke $r13.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(java.lang.String)>(r6);

     label1:
        return 1;

     label2:
        $z1 = r2 instanceof org.apache.xpath.functions.FuncExtFunctionAvailable;

        if $z1 == 0 goto label1;

        $r7 = (org.apache.xpath.functions.FuncExtFunctionAvailable) r2;

        $r8 = virtualinvoke $r7.<org.apache.xpath.functions.FuncExtFunctionAvailable: org.apache.xpath.Expression getArg0()>();

        r3 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r9 = r0.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot>;

        r5 = virtualinvoke $r9.<org.apache.xalan.templates.StylesheetRoot: java.lang.String getNamespaceForPrefix(java.lang.String)>(r4);

        $r11 = r0.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot>;

        $r10 = virtualinvoke $r11.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        virtualinvoke $r10.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(java.lang.String)>(r5);

        goto label1;
    }
}
