final class java.util.concurrent.ForkJoinTask$ExceptionNode extends java.lang.ref.WeakReference
{
    final java.lang.Throwable ex;
    java.util.concurrent.ForkJoinTask$ExceptionNode next;
    final long thrower;

    void <init>(java.util.concurrent.ForkJoinTask, java.lang.Throwable, java.util.concurrent.ForkJoinTask$ExceptionNode)
    {
        java.util.concurrent.ForkJoinTask$ExceptionNode r0, r3;
        java.util.concurrent.ForkJoinTask r1;
        java.lang.Throwable r2;
        java.lang.ref.ReferenceQueue $r4;
        java.lang.Thread $r5;
        long $l0;

        r0 := @this: java.util.concurrent.ForkJoinTask$ExceptionNode;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        r2 := @parameter1: java.lang.Throwable;

        r3 := @parameter2: java.util.concurrent.ForkJoinTask$ExceptionNode;

        $r4 = staticinvoke <java.util.concurrent.ForkJoinTask: java.lang.ref.ReferenceQueue access$000()>();

        specialinvoke r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, $r4);

        r0.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.lang.Throwable ex> = r2;

        r0.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.util.concurrent.ForkJoinTask$ExceptionNode next> = r3;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l0 = virtualinvoke $r5.<java.lang.Thread: long getId()>();

        r0.<java.util.concurrent.ForkJoinTask$ExceptionNode: long thrower> = $l0;

        return;
    }
}
