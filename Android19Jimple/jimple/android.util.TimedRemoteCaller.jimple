public abstract class android.util.TimedRemoteCaller extends java.lang.Object
{
    public static final long DEFAULT_CALL_TIMEOUT_MILLIS;
    private static final int UNDEFINED_SEQUENCE;
    private int mAwaitedSequence;
    private final long mCallTimeoutMillis;
    private final java.lang.Object mLock;
    private int mReceivedSequence;
    private java.lang.Object mResult;
    private int mSequenceCounter;

    public void <init>(long)
    {
        android.util.TimedRemoteCaller r0;
        long l0;
        java.lang.Object $r1;

        r0 := @this: android.util.TimedRemoteCaller;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.util.TimedRemoteCaller: java.lang.Object mLock> = $r1;

        r0.<android.util.TimedRemoteCaller: int mReceivedSequence> = -1;

        r0.<android.util.TimedRemoteCaller: int mAwaitedSequence> = -1;

        r0.<android.util.TimedRemoteCaller: long mCallTimeoutMillis> = l0;

        return;
    }

    private boolean waitForResultTimedLocked(int)
    {
        android.util.TimedRemoteCaller r0;
        int i0, $i4;
        long l1, l2, l3, $l5, $l6;
        byte $b7;
        java.lang.Object $r2;
        java.lang.InterruptedException $r3;

        r0 := @this: android.util.TimedRemoteCaller;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label1:
        $i4 = r0.<android.util.TimedRemoteCaller: int mReceivedSequence>;

        if $i4 != i0 goto label3;

     label2:
        return 1;

     label3:
        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l2 = $l5 - l1;

        $l6 = r0.<android.util.TimedRemoteCaller: long mCallTimeoutMillis>;

        l3 = $l6 - l2;

     label4:
        $b7 = l3 cmp 0L;

        if $b7 > 0 goto label5;

        return 0;

     label5:
        $r2 = r0.<android.util.TimedRemoteCaller: java.lang.Object mLock>;

        virtualinvoke $r2.<java.lang.Object: void wait(long)>(l3);

     label6:
        goto label1;

     label7:
        $r3 := @caughtexception;

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label7;
        catch java.lang.InterruptedException from label3 to label4 with label7;
        catch java.lang.InterruptedException from label5 to label6 with label7;
    }

    public final java.lang.Object getResultTimed(int) throws java.util.concurrent.TimeoutException
    {
        android.util.TimedRemoteCaller r0;
        int i0;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, $r9;
        boolean $z0;
        java.util.concurrent.TimeoutException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: android.util.TimedRemoteCaller;

        i0 := @parameter0: int;

        r1 = r0.<android.util.TimedRemoteCaller: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<android.util.TimedRemoteCaller: boolean waitForResultTimedLocked(int)>(i0);

        if $z0 != 0 goto label5;

        $r4 = new java.util.concurrent.TimeoutException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No reponse for sequence: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r9 := @caughtexception;

        r2 = $r9;

     label3:
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        r3 = r0.<android.util.TimedRemoteCaller: java.lang.Object mResult>;

        r0.<android.util.TimedRemoteCaller: java.lang.Object mResult> = null;

        exitmonitor r1;

     label6:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }

    public final int onBeforeRemoteCall()
    {
        android.util.TimedRemoteCaller r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0, i1, $i2;

        r0 := @this: android.util.TimedRemoteCaller;

        r1 = r0.<android.util.TimedRemoteCaller: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.util.TimedRemoteCaller: int mSequenceCounter>;

        $i2 = i0 + 1;

        r0.<android.util.TimedRemoteCaller: int mSequenceCounter> = $i2;

        r0.<android.util.TimedRemoteCaller: int mAwaitedSequence> = i0;

        i1 = r0.<android.util.TimedRemoteCaller: int mAwaitedSequence>;

        exitmonitor r1;

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final void onRemoteMethodResult(java.lang.Object, int)
    {
        android.util.TimedRemoteCaller r0;
        java.lang.Object r1, r2, $r4;
        int i0, $i1;
        java.lang.Throwable r3, $r5;

        r0 := @this: android.util.TimedRemoteCaller;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = r0.<android.util.TimedRemoteCaller: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $i1 = r0.<android.util.TimedRemoteCaller: int mAwaitedSequence>;

        if i0 != $i1 goto label2;

        r0.<android.util.TimedRemoteCaller: int mReceivedSequence> = i0;

        r0.<android.util.TimedRemoteCaller: java.lang.Object mResult> = r1;

        $r4 = r0.<android.util.TimedRemoteCaller: java.lang.Object mLock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void <clinit>()
    {
        <android.util.TimedRemoteCaller: int UNDEFINED_SEQUENCE> = -1;

        <android.util.TimedRemoteCaller: long DEFAULT_CALL_TIMEOUT_MILLIS> = 5000L;

        return;
    }
}
