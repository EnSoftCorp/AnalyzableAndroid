Permission:android.permission.CHANGE_WIFI_STATE
305 Callers:
<com.android.server.wifi.WifiService: void enforceChangePermission()> (18)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiServiceMessenger()> (2)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiStateMachineMessenger()> (2)
<com.android.server.wifi.WifiService: boolean disableNetwork(int)> (2)
<com.android.server.wifi.WifiService: boolean enableNetwork(int,boolean)> (2)
<com.android.server.wifi.WifiService: boolean removeNetwork(int)> (2)
<com.android.server.wifi.WifiService: boolean saveConfiguration()> (2)
<com.android.server.wifi.WifiService: boolean setWifiEnabled(boolean)> (3)
<com.android.server.wifi.WifiService: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<com.android.server.wifi.WifiService: void addToBlacklist(java.lang.String)> (2)
<com.android.server.wifi.WifiService: void clearBlacklist()> (2)
<com.android.server.wifi.WifiService: void disconnect()> (2)
<com.android.server.wifi.WifiService: void reassociate()> (2)
<com.android.server.wifi.WifiService: void reconnect()> (2)
<com.android.server.wifi.WifiService: void setCountryCode(java.lang.String,boolean)> (2)
<com.android.server.wifi.WifiService: void setFrequencyBand(int,boolean)> (2)
<com.android.server.wifi.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (2)
<com.android.server.wifi.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<com.android.server.wifi.WifiService: void startScan()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiServiceMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiStateMachineMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean disableNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean enableNetwork(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean removeNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean saveConfiguration()> ()
<android.net.wifi.IWifiManager$Stub: boolean saveConfiguration()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean setWifiEnabled(boolean)> (2)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.IWifiManager$Stub: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: void addToBlacklist(java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void clearBlacklist()> ()
<android.net.wifi.IWifiManager$Stub: void clearBlacklist()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void disconnect()> ()
<android.net.wifi.IWifiManager$Stub: void disconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void reassociate()> ()
<android.net.wifi.IWifiManager$Stub: void reassociate()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void reconnect()> ()
<android.net.wifi.IWifiManager$Stub: void reconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setCountryCode(java.lang.String,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setFrequencyBand(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.IWifiManager$Stub: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void startScan()> ()
<android.net.wifi.IWifiManager$Stub: void startScan()> (2)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.IWifiManager: boolean disableNetwork(int)> (1)
<android.net.wifi.IWifiManager: boolean enableNetwork(int,boolean)> (1)
<android.net.wifi.IWifiManager: boolean removeNetwork(int)> (1)
<android.net.wifi.IWifiManager: boolean saveConfiguration()> (1)
<android.net.wifi.IWifiManager: boolean setWifiEnabled(boolean)> (2)
<com.android.server.ServerThread: void run()> (1)
<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.IWifiManager: void addToBlacklist(java.lang.String)> (1)
<android.net.wifi.IWifiManager: void clearBlacklist()> (1)
<android.net.wifi.IWifiManager: void disconnect()> (1)
<android.net.wifi.IWifiManager: void reassociate()> (1)
<android.net.wifi.IWifiManager: void reconnect()> (1)
<android.net.wifi.IWifiManager: void setCountryCode(java.lang.String,boolean)> (1)
<android.net.wifi.IWifiManager: void setFrequencyBand(int,boolean)> (1)
<android.net.wifi.IWifiManager: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.IWifiManager: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (1)
<android.net.wifi.IWifiManager: void startScan()> (1)
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()> (2)
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.WifiManager: boolean disableNetwork(int)> (1)
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> (1)
<android.net.wifi.WifiManager: boolean removeNetwork(int)> ()
<android.net.wifi.WifiManager: boolean saveConfiguration()> ()
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> (11)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<android.net.wifi.WifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.WifiManager: boolean addToBlacklist(java.lang.String)> ()
<android.net.wifi.WifiManager: boolean clearBlacklist()> ()
<android.net.wifi.WifiManager: boolean disconnect()> (3)
<android.net.wifi.WifiManager: boolean reassociate()> (1)
<android.net.wifi.WifiManager: boolean reconnect()> ()
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> (2)
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> (1)
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (5)
<android.net.wifi.WifiManager: boolean startScan()> (3)
<android.net.wifi.WifiManager: void init()> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (2)
<android.net.wifi.WifiWatchdogStateMachine: void <init>(android.content.Context)> (1)
<com.android.settings.wifi.WifiAPITest$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiAPITest$3: void onClick(android.content.DialogInterface,int)> (1)
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.providers.settings.SettingsBackupAgent: int enableWifi(boolean)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.wifi.WifiApEnabler: void setSoftapEnabled(boolean)> (2)
<com.android.settings.wifi.WifiEnabler: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onCreate(android.os.Bundle)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$8$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> ()
<com.android.development.Connectivity: void onStartScanCycle()> (1)
<com.android.settings.wifi.WifiAPITest: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void refreshAccessPoints(boolean)> (3)
<com.android.internal.telephony.MccTable: void setWifiCountryCodeFromMcc(android.content.Context,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (6)
<com.android.settings.wifi.AdvancedWifiSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TetherSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.development.Connectivity$WifiScanReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<android.net.NetworkStateTracker: boolean setRadio(boolean)> (2)
<com.android.providers.settings.SettingsBackupAgent: int access$000(com.android.providers.settings.SettingsBackupAgent,boolean)> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.TetherSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TetherSettings: void startTethering()> (2)
<com.android.systemui.statusbar.phone.QuickSettings$8$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.development.Connectivity: void access$2200(com.android.development.Connectivity)> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.development.Connectivity: void access$2600(com.android.development.Connectivity)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onBackButtonPressed()> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void updateConnectionState(android.net.NetworkInfo$DetailedState)> ()
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addStatusBarWindow()> (1)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<com.android.providers.settings.SettingsBackupAgent$WifiRestoreRunnable: void run()> (1)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void startProvisioningIfNecessary(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.phone.SipCallOptionHandler: void access$300(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<android.net.wifi.p2p.WifiP2pService: void enforceChangePermission()> (1)
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getMessenger()> (1)
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> (2)
<android.net.wifi.WifiStateMachine$InitialState: void enter()> (1)
<com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)> (1)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.internal.util.State: void enter()> (29)
<com.android.server.display.WifiDisplayAdapter$1: void run()> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (42)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.SyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
Permission:android.permission.READ_SMS
445 Callers:
<com.android.mms.transaction.RetrieveTransaction: boolean isDuplicateMessage(android.content.Context,com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> (4)
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> (3)
<com.android.mms.data.Conversation: long getOrCreateThreadId(android.content.Context,com.android.mms.data.ContactList)> (2)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)> (7)
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> (2)
<com.android.mms.data.Conversation: long getOrCreateThreadId(android.content.Context,java.lang.String)> (1)
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,com.android.mms.data.ContactList,boolean)> (2)
<com.android.mms.data.Conversation: long ensureThreadId()> (4)
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> (3)
<com.android.mms.transaction.MmsMessageSender: void sendReadRec(android.content.Context,java.lang.String,java.lang.String,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,com.google.android.mms.pdu.NotificationInd)> (6)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])> (1)
<com.android.mms.ui.ComposeMessageActivity$11: void run()> (1)
<com.android.mms.data.WorkingMessage: void updateDraftMmsMessage(android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,java.util.HashMap)> (3)
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,android.net.Uri,boolean)> (3)
<com.android.mms.data.WorkingMessage: android.net.Uri saveAsMms(boolean)> (3)
<com.android.mms.data.WorkingMessage: void ensureThreadIdIfNeeded(com.android.mms.data.Conversation,boolean)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri access$1300(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> (1)
<com.android.mms.data.Conversation: void sendReadReport(android.content.Context,long,int)> (1)
<com.android.mms.ui.MessageUtils$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.data.WorkingMessage: void access$1400(android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,java.util.HashMap)> (1)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.Conversation: boolean sameRecipient(android.net.Uri,android.content.Context)> ()
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$4: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$1500(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,boolean)> (2)
<com.android.mms.data.WorkingMessage: void access$900(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.Conversation: void access$300(com.android.mms.data.Conversation,android.content.Context,long,int)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.data.WorkingMessage$5: void run()> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.Conversation$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.data.Conversation$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri()> (2)
<com.android.mms.data.Conversation: void markAsRead()> (4)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery(int)> (3)
<com.android.mms.data.Conversation: void blockMarkAsRead(boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void loadMessageContent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onPause()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onResume()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void startMsgListQuery(int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$7300(com.android.mms.ui.ComposeMessageActivity,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery()> (3)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void loadMessageContent()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadMessagesAndDraft(int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onPause()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onResume()> (2)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$7300(com.android.mms.ui.ComposeMessageActivity,int)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void startMsgListQuery()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5100(com.android.mms.ui.ComposeMessageActivity)> (4)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStop()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void loadMessagesAndDraft(int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4300(com.android.mms.ui.ComposeMessageActivity,int)> (3)
<com.android.mms.data.Conversation$ConversationQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (3)
<com.android.mms.ui.ComposeMessageActivity$24: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$42: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5100(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity$17: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$39: void onSizeChanged(int,int,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4300(com.android.mms.ui.ComposeMessageActivity,int)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.MessageListView$OnSizeChangedListener: void onSizeChanged(int,int,int,int)> (1)
<com.android.mms.ui.MessageListAdapter: void onContentChanged()> (1)
<com.android.mms.ui.MessageListView: void onSizeChanged(int,int,int,int)> (5)
<com.android.mms.ui.ComposeMessageActivity: boolean isDrmRingtoneWithRights(long)> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3000(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeMenuStringRsrc(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeSavedStringRsrc(long,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean isDrmRingtoneWithRights(long)> (1)
<com.android.mms.ui.ComposeMessageActivity$10: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$3000(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3100(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int getDrmMimeMenuStringRsrc(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3900(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int getDrmMimeSavedStringRsrc(long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int access$3100(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int access$3900(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (1)
<com.android.mms.data.Conversation: java.lang.String verifySingleRecipient(android.content.Context,long,java.lang.String)> (2)
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> (3)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (5)
<com.android.mms.ui.NoConfirmationSendService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendInactiveMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$500(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean saveRingtone(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3800(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean saveRingtone(long)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$3800(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,long,boolean)> (5)
<com.android.mms.transaction.MessageStatusService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.util.DraftCache: void rebuildCache()> (1)
<com.android.mms.util.DraftCache: void access$000(com.android.mms.util.DraftCache)> (1)
<com.android.mms.util.DraftCache$1: void run()> (1)
<com.android.mms.ui.MessageUtils: void handleReadReport(android.content.Context,java.util.Collection,int,java.lang.Runnable)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)> (4)
<com.android.mms.transaction.MessagingNotification: void addMmsNotificationInfos(android.content.Context,java.util.Set,java.util.SortedSet)> (1)
<com.android.mms.ui.MessageItem: void interpretFrom(com.google.android.mms.pdu.EncodedStringValue,android.net.Uri)> (1)
<com.android.mms.ui.MessageItem: void access$200(com.android.mms.ui.MessageItem,com.google.android.mms.pdu.EncodedStringValue,android.net.Uri)> (1)
<com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.util.ItemLoadedCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (5)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(com.android.mms.util.ThumbnailManager$ImageLoaded,java.lang.Throwable)> (1)
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.PduLoaderManager$PduTask$1: void run()> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.util.ThumbnailManager$ThumbnailTask$1: void run()> (1)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.data.WorkingMessage: int setAttachment(int,android.net.Uri,boolean)> (4)
<com.android.mms.ui.MmsThumbnailPresenter: void presentImageThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.ImageModel)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAudio(android.net.Uri)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addImage(android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void addVideo(android.net.Uri,boolean)> (3)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAudio(android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addImage(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(java.lang.String,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addVideo(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.ComposeMessageActivity$33: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAttachment(java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity$34: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.Presenter: void present(com.android.mms.util.ItemLoadedCallback)> (3)
<com.android.mms.ui.ComposeMessageActivity$35: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$36: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(boolean)> (2)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel(boolean)> (6)
<com.android.mms.ui.MessageListItem: void access$500(com.android.mms.ui.MessageListItem,boolean)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageItem,boolean,int)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void drawTopPanel(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.MessageListItem$2: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$21: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$41: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.MessageItem$PduLoadedCallback: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesInSameThreadAsMessage(android.content.Context,android.net.Uri)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage$1: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.mms.data.WorkingMessage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean isForwardable(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2800(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean isForwardable(long)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$2800(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.content.Intent createIntent(android.content.Context,long)> (5)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$NotificationInfo getNewMessageNotificationInfo(android.content.Context,boolean,java.lang.String,java.lang.String,java.lang.String,long,long,android.graphics.Bitmap,com.android.mms.data.Contact,int)> (2)
<com.android.mms.ui.ComposeMessageActivity$12: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.content.Intent createIntent(android.content.Context,long)> (1)
<com.android.mms.ui.ConversationList: void createNewMessage()> (1)
<com.android.mms.ui.ConversationList: void openThread(long)> (2)
<com.android.mms.transaction.MessagingNotification: void addSmsNotificationInfos(android.content.Context,java.util.Set,java.util.SortedSet)> (1)
<com.android.mms.ui.ConversationList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.mms.data.WorkingMessage: android.net.Uri readDraftMmsMessage(android.content.Context,com.android.mms.data.Conversation,java.lang.StringBuilder)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri access$200(android.content.Context,com.android.mms.data.Conversation,java.lang.StringBuilder)> (1)
<com.android.mms.data.Conversation: void cacheAllThreads(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$800(android.content.Context)> (1)
<com.android.mms.data.Conversation$2: void run()> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.data.Conversation: void blockingMarkAllMmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$1000(android.content.Context)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.Conversation: void dumpThreadsTable(android.content.Context)> (1)
<com.android.mms.LogTag$1: void run()> (1)
<com.android.mms.transaction.MessagingNotification: int getDownloadFailedMessageCount(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void updateDownloadFailedNotification(android.content.Context)> (2)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context,long)> (2)
<com.android.mms.ui.MessageUtils: java.lang.String getNotificationIndDetails(android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean showMessageDetails(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean access$700(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean showMessageDetails(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$700(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.transaction.PushReceiver: boolean isDuplicateNotification(android.content.Context,com.google.android.mms.pdu.NotificationInd)> (1)
<com.android.mms.transaction.PushReceiver: boolean access$100(android.content.Context,com.google.android.mms.pdu.NotificationInd)> (1)
<com.android.mms.ui.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.data.Conversation: void dumpSmsTable(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.Map getMmsReportStatus()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.transaction.RetryScheduler: int getRetrieveStatus(long)> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToSDCard(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2900(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean haveSomethingToCopyToSDCard(long)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$2900(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.transaction.RetryScheduler: int getResponseStatus(long)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (11)
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (6)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,java.lang.String)> (6)
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)> (1)
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> (4)
<com.android.mms.util.PduLoaderManager$PduTask: void run()> (1)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean copyMedia(long)> (2)
<com.android.mms.util.DownloadManager: java.lang.String access$400(com.android.mms.util.DownloadManager,android.net.Uri)> (1)
<com.android.mms.ui.MessageListItem$1: void onClick(android.view.View)> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromUri(android.net.Uri)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void initSlideList()> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3700(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean copyMedia(long)> (1)
<com.android.mms.util.DownloadManager$4: void run()> (1)
<com.android.mms.data.WorkingMessage: boolean access$300(com.android.mms.data.WorkingMessage,android.net.Uri)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage load(com.android.mms.ui.ComposeMessageActivity,android.net.Uri)> (3)
<com.android.mms.data.WorkingMessage: void readStateFromBundle(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$3700(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean handleForwardedMessage()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean handleForwardedMessage()> (1)
<com.android.mms.util.RateController: boolean isLimitSurpassed()> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.mms.widget.MmsWidgetService$MmsFactory: android.database.Cursor queryAllConversations()> (1)
<com.android.mms.widget.MmsWidgetService$MmsFactory: void onDataSetChanged()> (1)
<com.android.mms.widget.MmsWidgetService$MmsFactory: int queryUnreadCount()> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.Conversation: void startQuery(android.content.AsyncQueryHandler,int,java.lang.String)> (2)
<com.android.mms.data.Conversation: void startQueryForAll(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList: void startAsyncQuery()> (3)
<com.android.mms.ui.ConversationList: void access$100(com.android.mms.ui.ConversationList)> (2)
<com.android.mms.ui.ConversationList: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ConversationList: void onStart()> (2)
<com.android.mms.ui.ConversationList$1: void onContentChanged(com.android.mms.ui.ConversationListAdapter)> (1)
<com.android.mms.ui.ConversationListAdapter$OnContentChangedListener: void onContentChanged(com.android.mms.ui.ConversationListAdapter)> (1)
<com.android.mms.ui.ConversationListAdapter: void onContentChanged()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (4)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> (2)
<com.android.mms.transaction.RetryScheduler: void setRetryAlarm(android.content.Context)> (2)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportRequests()> (1)
<com.android.mms.data.Conversation: boolean loadFromThreadId(long,boolean)> (1)
<com.android.mms.data.Conversation: void <init>(android.content.Context,long,boolean)> (2)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,long,boolean)> (6)
<com.android.mms.ui.RecipientListActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.data.Conversation: void startQueryHaveLockedMessages(android.content.AsyncQueryHandler,java.util.Collection,int)> (2)
<com.android.mms.data.Conversation: void startQueryHaveLockedMessages(android.content.AsyncQueryHandler,long,int)> (1)
<com.android.mms.ui.ConversationList: void confirmDeleteThreads(java.util.Collection,android.content.AsyncQueryHandler)> (2)
<com.android.mms.ui.ComposeMessageActivity: void confirmDeleteThread(long)> (2)
<com.android.mms.ui.ConversationList$ModeCallback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: void confirmDeleteThread(long,android.content.AsyncQueryHandler)> (3)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void confirmDeleteThread(long)> (1)
<com.android.mms.ui.ConversationList$7: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.transaction.MessagingNotification: int getUndeliveredMessageCount(android.content.Context,long[])> (3)
<com.android.mms.transaction.MessagingNotification: int access$300(android.content.Context,long[])> (1)
<com.android.mms.transaction.MessagingNotification: void notifyFailed(android.content.Context,boolean,long,boolean)> (3)
<com.android.mms.transaction.MessagingNotification: void updateSendFailedNotificationForThread(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification$4: java.lang.Integer doInBackground(java.lang.Void[])> (1)
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)> (3)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)> (1)
<com.android.mms.ui.ComposeMessageActivity$18: void run()> (1)
<com.android.mms.transaction.MessagingNotification$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.transaction.SmsReceiverService: void messageFailedToSend(android.net.Uri,int)> (2)
<com.android.mms.transaction.MessagingNotification$4: void onPostExecute(java.lang.Integer)> (1)
<com.android.mms.transaction.MessagingNotification$4: void onPostExecute(java.lang.Object)> (1)
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.mms.transaction.PushReceiver: long findThreadId(android.content.Context,com.google.android.mms.pdu.GenericPdu,int)> (1)
<com.android.mms.transaction.PushReceiver: long access$000(android.content.Context,com.google.android.mms.pdu.GenericPdu,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.mms.data.Conversation: void asyncDeleteObsoleteThreads(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList$8: void run()> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)> (1)
<com.android.mms.data.Conversation: void startDeleteAll(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener$1: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesOlderThanDate(android.content.Context,long,long)> (2)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.Conversation: void startDelete(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean,java.util.Collection)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (4)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft(boolean)> (4)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void saveDraft(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onMaxPendingMessagesReached()> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftMmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage: void saveDraft(boolean)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftSmsMessage(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$1700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()> (1)
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
Permission:android.permission.GET_TASKS
42 Callers:
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<android.app.ActivityManagerNative: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)> (1)
<android.app.ActivityManager: java.util.List getRunningTasks(int)> ()
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)> (1)
<android.app.ActivityManagerNative: java.util.List getRecentTasks(int,int,int)> (2)
<android.app.IActivityManager: java.util.List getRecentTasks(int,int,int)> (2)
<android.app.ActivityManager: java.util.List getRecentTasksForUser(int,int,int)> (1)
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> (3)
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription loadFirstTask()> (2)
<com.android.internal.policy.impl.RecentApplicationsDialog: void reloadButtons()> (1)
<com.android.systemui.recent.RecentsActivity: void dismissAndGoBack()> (3)
<com.android.systemui.recent.RecentTasksLoader$3: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.systemui.recent.RecentTasksLoader$2: void run()> (1)
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription getFirstTask()> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void onStart()> (1)
<com.android.systemui.recent.RecentsActivity: void handleIntent(android.content.Intent,boolean)> (2)
<com.android.systemui.recent.RecentsActivity: void onBackPressed()> (1)
<com.android.systemui.recent.RecentsPanelView: void dismissAndGoBack()> (1)
<com.android.systemui.recent.RecentTasksLoader$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.systemui.statusbar.BaseStatusBar: void toggleRecentsActivity()> (5)
<com.android.systemui.recent.RecentsActivity: void onCreate(android.os.Bundle)> (1)
<com.android.systemui.recent.RecentsActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.systemui.recent.RecentsPanelView: void handleSwipe(android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void toggleRecentsActivity()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void toggleRecentsActivity()> (1)
<com.android.systemui.statusbar.tv.TvStatusBar: void toggleRecentsActivity()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void toggleRecentApps()> (3)
<com.android.systemui.recent.RecentsCallback: void handleSwipe(android.view.View)> (2)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void toggleRecentApps()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void toggleRecentApps()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void toggleRecentApps()> (2)
<com.android.systemui.recent.RecentsHorizontalScrollView: void onChildDismissed(android.view.View)> (1)
<com.android.systemui.recent.RecentsVerticalScrollView: void onChildDismissed(android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$8: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void onClickRecentButton()> (1)
<com.android.systemui.SwipeHelper$Callback: void onChildDismissed(android.view.View)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar$6: void onClick(android.view.View)> (1)
<com.android.systemui.SwipeHelper$2: void onAnimationEnd(android.animation.Animator)> (1)
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
19 Callers:
<com.android.server.wifi.WifiService: void enforceMulticastChangePermission()> (3)
<com.android.server.wifi.WifiService: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<com.android.server.wifi.WifiService: void initializeMulticastFiltering()> (2)
<com.android.server.wifi.WifiService: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void initializeMulticastFiltering()> ()
<android.net.wifi.IWifiManager$Stub: void initializeMulticastFiltering()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void releaseMulticastLock()> ()
<android.net.wifi.IWifiManager$Stub: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (1)
<android.net.wifi.IWifiManager: void initializeMulticastFiltering()> (1)
<android.net.wifi.IWifiManager: void releaseMulticastLock()> (2)
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$MulticastLock: void acquire()> ()
<android.net.wifi.WifiManager: boolean initializeMulticastFiltering()> ()
<android.net.wifi.WifiManager$MulticastLock: void release()> (1)
<android.net.wifi.WifiManager$MulticastLock: void finalize()> ()
Permission:android.permission.ACCESS_WIFI_STATE
520 Callers:
<com.android.server.wifi.WifiService: void enforceAccessPermission()> (14)
<com.android.server.wifi.WifiService: android.net.DhcpInfo getDhcpInfo()> (2)
<com.android.server.wifi.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<com.android.server.wifi.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiServiceMessenger()> (2)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiStateMachineMessenger()> (2)
<com.android.server.wifi.WifiService: boolean isMulticastEnabled()> (2)
<com.android.server.wifi.WifiService: boolean isScanAlwaysAvailable()> (2)
<com.android.server.wifi.WifiService: boolean pingSupplicant()> (2)
<com.android.server.wifi.WifiService: int getFrequencyBand()> (2)
<com.android.server.wifi.WifiService: int getWifiApEnabledState()> (2)
<com.android.server.wifi.WifiService: int getWifiEnabledState()> (2)
<com.android.server.wifi.WifiService: java.lang.String getConfigFile()> (2)
<com.android.server.wifi.WifiService: java.util.List getConfiguredNetworks()> (2)
<com.android.server.wifi.WifiService: java.util.List getScanResults(java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.DhcpInfo getDhcpInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()> ()
<android.net.wifi.IWifiManager$Stub: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiServiceMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiStateMachineMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean isMulticastEnabled()> ()
<android.net.wifi.IWifiManager$Stub: boolean isMulticastEnabled()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean isScanAlwaysAvailable()> ()
<android.net.wifi.IWifiManager$Stub: boolean isScanAlwaysAvailable()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean pingSupplicant()> ()
<android.net.wifi.IWifiManager$Stub: boolean pingSupplicant()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()> ()
<android.net.wifi.IWifiManager$Stub: int getFrequencyBand()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiApEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()> ()
<android.net.wifi.IWifiManager$Stub: java.lang.String getConfigFile()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getConfiguredNetworks()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults(java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getScanResults(java.lang.String)> (2)
<android.net.wifi.IWifiManager: android.net.DhcpInfo getDhcpInfo()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (1)
<android.net.wifi.IWifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (1)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger()> (1)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.IWifiManager: boolean isMulticastEnabled()> (1)
<android.net.wifi.IWifiManager: boolean isScanAlwaysAvailable()> (1)
<android.net.wifi.IWifiManager: boolean pingSupplicant()> (1)
<android.net.wifi.IWifiManager: int getFrequencyBand()> (1)
<android.net.wifi.IWifiManager: int getWifiApEnabledState()> (1)
<android.net.wifi.IWifiManager: int getWifiEnabledState()> (1)
<android.net.wifi.IWifiManager: java.lang.String getConfigFile()> (1)
<android.net.wifi.IWifiManager: java.util.List getConfiguredNetworks()> (1)
<android.net.wifi.IWifiManager: java.util.List getScanResults(java.lang.String)> (1)
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> ()
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (10)
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()> (2)
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.WifiManager: boolean isMulticastEnabled()> ()
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()> ()
<android.net.wifi.WifiManager: boolean pingSupplicant()> ()
<android.net.wifi.WifiManager: int getFrequencyBand()> (1)
<android.net.wifi.WifiManager: int getWifiApState()> (5)
<android.net.wifi.WifiManager: int getWifiState()> (10)
<android.net.wifi.WifiManager: java.lang.String getConfigFile()> (1)
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> (5)
<android.net.wifi.WifiManager: java.util.List getScanResults()> (3)
<com.android.settings.TetherSettings: void initWifiTethering()> (1)
<com.android.settings.wifi.WifiApEnabler: void updateTetherState(java.lang.Object[],java.lang.Object[],java.lang.Object[])> (1)
<android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)> (4)
<android.net.sip.SipAudioCall: boolean isWifiOn()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: boolean processMessage(android.os.Message)> (1)
<com.android.settings.deviceinfo.Status: void setWifiStatus()> (1)
<com.android.settings.wifi.AdvancedWifiSettings: void refreshWifiInfo()> (1)
<com.android.settings.wifi.WifiSettings: void updateConnectionState(android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.wifi.WifiStatusTest$3: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiStatusTest: void handleNetworkStateChanged(android.net.NetworkInfo)> (1)
<com.android.settings.wifi.WpsDialog: void handleEvent(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void updateWifiState(android.content.Intent)> (1)
<android.net.wifi.WifiManager: void init()> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (2)
<android.net.wifi.WifiWatchdogStateMachine: void <init>(android.content.Context)> (1)
<com.android.settings.wifi.AdvancedWifiSettings: void initPreferences()> (1)
<android.net.wifi.WifiManager: boolean isWifiApEnabled()> ()
<com.android.settings.TetherSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.wifi.WifiEnabler: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$8$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<android.net.wifi.WifiManager: boolean isWifiEnabled()> (15)
<com.android.providers.settings.SettingsBackupAgent: int enableWifi(boolean)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.wifi.WifiApEnabler: void setSoftapEnabled(boolean)> (2)
<com.android.settings.wifi.WifiEnabler: void setSwitch(android.widget.Switch)> (1)
<com.android.settings.wifi.WifiSettings: void updateAccessPoints()> (4)
<com.android.systemui.statusbar.phone.QuickSettings$8: boolean onLongClick(android.view.View)> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.providers.settings.SettingsBackupAgent: void onCreate()> (2)
<com.android.settings.net.DataUsageMeteredSettings: void updateNetworks(android.content.Context)> (1)
<com.android.settings.wifi.WifiConfigInfo: void onResume()> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onBackButtonPressed()> (1)
<com.android.settings.wifi.WifiSettings: java.util.List constructAccessPoints()> (1)
<com.android.systemui.statusbar.policy.NetworkController: java.lang.String huntForSsid(android.net.wifi.WifiInfo)> (1)
<com.android.development.Connectivity$WifiScanReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiStatusTest: void handleScanResultsAvailable()> (1)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiApEnabler: void access$100(com.android.settings.wifi.WifiApEnabler,java.lang.Object[],java.lang.Object[],java.lang.Object[])> (1)
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)> (1)
<com.android.server.net.NetworkPolicyManagerService: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()> (5)
<com.android.server.net.NetworkStatsService: void updateIfacesLocked()> (1)
<android.net.sip.SipAudioCall: void startAudioInternal()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void handleEvent(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiStatusTest: void access$100(com.android.settings.wifi.WifiStatusTest,android.net.NetworkInfo)> (1)
<com.android.settings.wifi.WpsDialog: void access$200(com.android.settings.wifi.WpsDialog,android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.systemui.statusbar.phone.QuickSettings$8$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.wifi.WifiSettings$2: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiSettings$3: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: int getAccessPointsCount()> (2)
<com.android.settings.wifi.WifiSettings: void forget()> (1)
<com.android.settings.wifi.WifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.WifiSettings: void pauseWifiScan()> (1)
<com.android.settings.wifi.WifiSettings: void refreshAccessPoints()> (1)
<com.android.settings.wifi.WifiSettings: void resumeWifiScan()> (1)
<com.android.settings.wifi.WifiSettings: void submit(com.android.settings.wifi.WifiConfigController)> (2)
<com.android.providers.settings.SettingsBackupAgent: int access$000(com.android.providers.settings.SettingsBackupAgent,boolean)> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.TetherSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TetherSettings: void startTethering()> (2)
<com.android.settings.Settings$HeaderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.development.Connectivity: void access$2200(com.android.development.Connectivity)> (1)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiStatusTest: void access$200(com.android.settings.wifi.WifiStatusTest)> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (38)
<com.android.settings.wifi.WifiApEnabler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isNetworkMetered(android.net.NetworkState)> ()
<android.net.INetworkPolicyManager$Stub: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void access$1300(com.android.server.net.NetworkPolicyManagerService)> (2)
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)> (2)
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<android.net.sip.SipAudioCall: void startAudio()> (4)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.settings.wifi.WifiSettings: void access$000(com.android.settings.wifi.WifiSettings,android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiStatusTest$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WpsDialog$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addStatusBarWindow()> (1)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<com.android.settings.SettingsPreferenceFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (8)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void showDisconnectedState(java.lang.String)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void updateConnectionState(android.net.NetworkInfo$DetailedState)> ()
<com.android.settings.wifi.WifiSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (39)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void showConfigUi(com.android.settings.wifi.AccessPoint,boolean)> ()
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void refreshAccessPoints(boolean)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onConnectButtonPressed()> (1)
<com.android.providers.settings.SettingsBackupAgent$WifiRestoreRunnable: void run()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void startProvisioningIfNecessary(int)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<android.net.INetworkPolicyManager: boolean isNetworkMetered(android.net.NetworkState)> (1)
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.net.NetworkPolicyManagerService$10: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1200(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkPolicy)> (1)
<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1000(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkTemplate,int)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.INetworkPolicyManager$Stub: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<android.net.sip.SipAudioCall: void transferToNewSession()> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEstablished(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallHeld(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void separate()> (1)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.settings.deviceinfo.Memory: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.users.UserSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.vpn2.VpnSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wfd.WifiDisplaySettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (6)
<com.android.settings.AccessibilitySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (5)
<com.android.settings.accounts.SyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.ApplicationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DateTimeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DeviceInfoSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DreamSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.LocationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.NotificationStation: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.PrivacySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SecuritySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SoundSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.TetherSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.UserSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WirelessSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.server.ConnectivityService: boolean isNetworkMeteredUnchecked(int)> (2)
<com.android.server.net.NetworkPolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void access$1500(com.android.server.net.NetworkPolicyManagerService)> (1)
<com.android.server.net.NetworkPolicyManagerService$8: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.sip.SipAudioCall: void access$800(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.Connection: void separate()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<android.net.sip.SipAudioCall$1: void onCallEstablished(android.net.sip.SipSession,java.lang.String)> (1)
<com.android.phone.PhoneUtils: void separateCall(com.android.internal.telephony.Connection)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<com.android.settings.net.NetworkPolicyEditor: void write(android.net.NetworkPolicy[])> (1)
<com.android.phone.ManageConferenceUtils: void separateConferenceConnection(int,com.android.internal.telephony.Connection)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (4)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<com.android.settings.net.NetworkPolicyEditor$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.phone.ManageConferenceUtils$2: void onClick(android.view.View)> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.net.NetworkPolicyEditor$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (5)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.development.Connectivity: void access$3600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.internal.util.State: void enter()> (29)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<android.net.wifi.p2p.WifiP2pService: void enforceAccessPermission()> (1)
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getMessenger()> (1)
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> (2)
<android.net.wifi.WifiStateMachine$InitialState: void enter()> (1)
<com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)> (1)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.server.display.WifiDisplayAdapter$1: void run()> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (42)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.SyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
Permission:android.permission.EXPAND_STATUS_BAR
23 Callers:
<com.android.server.StatusBarManagerService: void enforceExpandStatusBar()> (3)
<com.android.server.StatusBarManagerService: void collapsePanels()> (3)
<com.android.server.StatusBarManagerService: void expandNotificationsPanel()> (2)
<com.android.server.StatusBarManagerService: void expandSettingsPanel()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void collapsePanels()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void collapsePanels()> (2)
<com.android.server.StatusBarManagerService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void expandNotificationsPanel()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void expandNotificationsPanel()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void expandSettingsPanel()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void expandSettingsPanel()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.statusbar.IStatusBarService: void collapsePanels()> (2)
<com.android.internal.statusbar.IStatusBarService: void expandNotificationsPanel()> (1)
<com.android.internal.statusbar.IStatusBarService: void expandSettingsPanel()> (1)
<com.android.server.StatusBarManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.StatusBarManager: void collapsePanels()> (2)
<com.android.internal.policy.impl.PhoneWindowManager$9: void run()> (1)
<android.app.StatusBarManager: void expandNotificationsPanel()> (1)
<android.app.StatusBarManager: void expandSettingsPanel()> (1)
<com.android.systemui.statusbar.tablet.SettingsView: void onClickNetwork()> (1)
<com.android.systemui.statusbar.tablet.SettingsView: void onClickSettings()> (1)
<com.android.systemui.statusbar.tablet.SettingsView: void onClick(android.view.View)> (1)
Permission:android.permission.ACCESS_MOCK_LOCATION
43 Callers:
<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> (8)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> (2)
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> (2)
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> ()
<android.location.ILocationManager$Stub: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderStatus(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeTestProvider(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.ILocationManager$Stub: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.ILocationManager$Stub: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<android.location.ILocationManager$Stub: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (1)
<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)> (1)
<android.location.ILocationManager: void removeTestProvider(java.lang.String)> (1)
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (1)
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (1)
<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> ()
<android.location.LocationManager: void removeTestProvider(java.lang.String)> ()
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
Permission:android.permission.BLUETOOTH_ADMIN
1031 Callers:
<com.android.server.BluetoothManagerService: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableNoAutoConnect()> ()
<android.bluetooth.IBluetoothManager$Stub: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetoothManager: boolean enableNoAutoConnect()> (1)
<android.bluetooth.IBluetoothManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean enableNoAutoConnect()> ()
<com.android.server.BluetoothManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.BluetoothManagerService: boolean enable()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetoothManager$Stub: boolean enable()> (2)
<android.bluetooth.IBluetoothManager: boolean enable()> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (5)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: void startTethering()> (2)
<com.android.systemui.statusbar.phone.QuickSettings$17: boolean onLongClick(android.view.View)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (2)
<com.android.settings.bluetooth.BluetoothEnabler: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void startProvisioningIfNecessary(int)> (2)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<com.android.settings.TetherSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (25)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (5)
<com.android.musicfx.ControlPanelPicker: void onCreate(android.os.Bundle)> (2)
<com.android.providers.media.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AllowBindAppWidgetActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.shell.BugreportWarningActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbDebuggingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.vpndialogs.ConfirmDialog: void onCreate(android.os.Bundle)> (2)
<com.android.vpndialogs.ManageDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.server.BluetoothManagerService: boolean disable(boolean)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetoothManager$Stub: boolean disable(boolean)> (2)
<android.bluetooth.IBluetoothManager: boolean disable(boolean)> (3)
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)> ()
<android.bluetooth.BluetoothAdapter: boolean disable()> (4)
<com.android.server.power.ShutdownThread$5: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean disable()> (2)
<com.android.settings.bluetooth.DockService: boolean msgTypeDisableBluetooth(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: void disconnect()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void disconnect()> ()
<android.bluetooth.IBluetoothPbap$Stub: void disconnect()> (2)
<android.bluetooth.IBluetoothPbap: void disconnect()> (1)
<android.bluetooth.BluetoothPbap: boolean disconnect()> (1)
<com.android.settings.bluetooth.PbapServerProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<com.android.bluetooth.btservice.AdapterService: void autoConnectHeadset()> (1)
<com.android.bluetooth.btservice.AdapterService: void processConnectOtherProfiles(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.AdapterService: void autoConnect()> (1)
<com.android.bluetooth.btservice.AdapterService: void access$200(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.AdapterState$OnState: void enter()> (1)
<com.android.bluetooth.btservice.AdapterService: void connectOtherProfile(android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.IBluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.util.State: void enter()> (29)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void processProfileStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.AdapterService: void access$100(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.settings.bluetooth.HeadsetProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.bluetooth.btservice.AdapterService: void onProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (6)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int,int)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.a2dp.A2dpService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.gatt.GattService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hid.HidService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.pan.PanService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1900(com.android.bluetooth.pbap.BluetoothPbapService,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine$IntentBroadcastHandler: void onConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: void updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hid.HidService: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile,android.preference.CheckBoxPreference)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void broadcastHealthDeviceStateChange(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$1000(com.android.bluetooth.hfp.HeadsetStateMachine,android.bluetooth.BluetoothDevice,int,int)> (7)
<com.android.bluetooth.hid.HidService: void access$100(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice,int)> (4)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void access$1100(com.android.bluetooth.a2dp.A2dpStateMachine,android.bluetooth.BluetoothDevice,int,int)> (6)
<com.android.bluetooth.hdp.HealthService: void callHealthChannelCallback(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: void onConnectStateChanged(byte[],int)> ()
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (3)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: void access$1700(com.android.bluetooth.hdp.HealthService,android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (3)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (7)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService: boolean connectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<android.bluetooth.IBluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothInputDevice$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.BluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (3)
<android.bluetooth.IBluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.IBluetoothHealth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<com.android.settings.bluetooth.HidProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (3)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<android.bluetooth.BluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleCaptivePortalTrackerCheck(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$400(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$1200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$1500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<com.android.server.ConnectivityService: void access$2400(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (4)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (8)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (5)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.State: void exit()> (101)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void access$3600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.HeadsetProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (5)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherHeadsetPriorities(com.android.bluetooth.hfp.HeadsetService,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void setProfileAutoConnectionPriority(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.btservice.BondStateMachine: void clearProfilePriorty(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: void setProfilePriorty(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.bluetooth.btservice.BondStateMachine: void access$1400(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: void access$1500(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.IBluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.settings.bluetooth.HeadsetProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (4)
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)> (9)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.HeadsetProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (5)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: int getConnectionSummary()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refreshProfilePreference(android.preference.CheckBoxPreference,com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.DockService: java.lang.CharSequence[] initBtSettings(android.bluetooth.BluetoothDevice,int,boolean)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onDeviceAttributesChanged()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.preference.CheckBoxPreference createProfilePreference(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refreshProfiles()> (1)
<com.android.settings.bluetooth.DockService: void createDialog(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void <init>(android.content.Context,com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void addPreferencesForProfiles()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refresh()> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onDeviceAttributesChanged()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (6)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (38)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.settings.bluetooth.BluetoothCallback: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void addCachedDevices()> (2)
<com.android.settings.bluetooth.DevicePickerFragment: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(android.content.Context,com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.LocalBluetoothProfileManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile$A2dpServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.settings.bluetooth.HeadsetProfile$HeadsetServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.settings.bluetooth.HidProfile$InputDeviceServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$StateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$DeviceFoundHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$DockEventHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean onDeviceDisappeared(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (5)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothEventManager: void dispatchDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothSettings: void addCachedDevices()> (2)
<com.android.settings.bluetooth.DevicePickerFragment: void addCachedDevices()> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: com.android.settings.bluetooth.CachedBluetoothDevice addDevice(com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.LocalBluetoothProfileManager,android.bluetooth.BluetoothDevice)> (9)
<com.android.settings.bluetooth.BluetoothEventManager$ClassChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$NameChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$PanStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$DeviceDisappearedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$AdapterStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$ScanningStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothEventManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.BluetoothEventManager: void access$1400(com.android.settings.bluetooth.BluetoothEventManager,com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void addDeviceCategory(android.preference.PreferenceGroup,int,com.android.settings.bluetooth.BluetoothDeviceFilter$Filter)> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void savePhonebookPermissionChoice(int)> (2)
<com.android.settings.bluetooth.BluetoothPermissionRequest: boolean checkUserChoice()> (1)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void setBluetoothStateOn()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void updateContent(int,boolean)> (3)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onNegative()> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onPositive()> (1)
<com.android.settings.bluetooth.BluetoothPermissionRequest: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothStateInt(int)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDeviceBondStateChanged(com.android.settings.bluetooth.CachedBluetoothDevice,int)> ()
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean syncBluetoothState()> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onBluetoothStateChanged(int)> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: int getBluetoothState()> (12)
<com.android.settings.bluetooth.BluetoothCallback: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.bluetooth.BluetoothEnabler: void setSwitch(android.widget.Switch)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onProfileStateChanged(com.android.settings.bluetooth.LocalBluetoothProfile,int)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.Settings$HeaderAdapter: void resume()> (1)
<com.android.settings.Settings$HeaderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.settings.SettingsPreferenceFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (8)
<com.android.settings.SettingsPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (39)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.Settings: void onResume()> (46)
<com.android.settings.deviceinfo.Memory: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.users.UserSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.vpn2.VpnSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wfd.WifiDisplaySettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (6)
<com.android.settings.AccessibilitySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (5)
<com.android.settings.accounts.SyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.ApplicationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DateTimeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DeviceInfoSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DreamSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.LocationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.NotificationStation: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.PrivacySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SecuritySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SoundSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.TetherSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.UserSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.WifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WirelessSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onResume()> (4)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$ApplicationSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AppOpsSummaryActivity: void onResume()> (4)
<com.android.settings.Settings$BluetoothSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DataUsageSummaryActivity: void onResume()> (4)
<com.android.settings.Settings$DateTimeSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DisplaySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DreamSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onResume()> (4)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onResume()> (4)
<com.android.settings.Settings$LocalePickerActivity: void onResume()> (4)
<com.android.settings.Settings$LocationSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$ManageApplicationsActivity: void onResume()> (4)
<com.android.settings.Settings$NotificationAccessSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$NotificationStationActivity: void onResume()> (4)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onResume()> (4)
<com.android.settings.Settings$PrivacySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$RunningServicesActivity: void onResume()> (4)
<com.android.settings.Settings$SecuritySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$SoundSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$StorageSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$StorageUseActivity: void onResume()> (4)
<com.android.settings.Settings$TetherSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$UserSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$VpnSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WifiDisplaySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WifiSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WirelessSettingsActivity: void onResume()> (4)
<com.android.settings.SubSettings: void onResume()> (4)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.bluetooth.a2dp.A2dpService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.AdapterService: void autoConnectA2dp()> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (5)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherSinkPriorities(com.android.bluetooth.a2dp.A2dpService,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.settings.bluetooth.A2dpProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)> (8)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.A2dpProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.HidProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService: boolean access$600(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.HidProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> ()
<com.android.bluetooth.hid.HidService: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> ()
<com.android.bluetooth.hid.HidService: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: void startScan(int,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScan(int,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void startScan(int,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void startScan(int,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothGatt: void startScan(int,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter$GattCallbackWrapper: void onClientRegistered(int,int)> (2)
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onClientRegistered(int,int)> ()
<com.android.bluetooth.gatt.GattService: void startScanWithUuids(int,boolean,java.util.UUID[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> (2)
<android.bluetooth.IBluetoothGatt: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> (1)
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (7)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.btservice.AdapterService: boolean enable(boolean)> (2)
<com.android.bluetooth.btservice.AdapterService: boolean enableNoAutoConnect()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean enable()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enableNoAutoConnect()> (2)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enable()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enableNoAutoConnect()> ()
<android.bluetooth.IBluetooth$Stub: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<android.bluetooth.IBluetooth: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean enable()> (2)
<com.android.server.BluetoothManagerService: void handleEnable(boolean)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.BluetoothManagerService: void access$1900(com.android.server.BluetoothManagerService,boolean)> (3)
<com.android.server.BluetoothManagerService: void recoverBluetoothServiceFromError()> (1)
<com.android.server.BluetoothManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BluetoothManagerService: void access$2900(com.android.server.BluetoothManagerService)> (2)
<com.android.server.BluetoothManagerService$1: void onBluetoothStateChange(int,int)> (2)
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onBluetoothStateChange(int,int)> ()
<com.android.bluetooth.btservice.AdapterService: boolean disable()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean disable()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disable()> ()
<android.bluetooth.IBluetooth$Stub: boolean disable()> (2)
<android.bluetooth.IBluetooth: boolean disable()> (2)
<com.android.server.BluetoothManagerService: void handleDisable()> (2)
<com.android.server.BluetoothManagerService: void access$2000(com.android.server.BluetoothManagerService)> (3)
<com.android.server.BluetoothManagerService: void sendDisableMsg()> (2)
<com.android.server.BluetoothManagerService: void access$600(com.android.server.BluetoothManagerService)> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setName(java.lang.String)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setName(java.lang.String)> (1)
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothNameDialogFragment: void setDeviceName(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothNameDialogFragment: void access$000(com.android.settings.bluetooth.BluetoothNameDialogFragment,java.lang.String)> (2)
<com.android.settings.bluetooth.BluetoothNameDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothNameDialogFragment$3: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.bluetooth.btservice.AdapterService: boolean startDiscovery()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean startDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean startDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void startScanning(boolean)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void startScanning()> (2)
<com.android.bluetooth.btservice.AdapterService: boolean cancelDiscovery()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelDiscovery()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean cancelDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void cancelDiscovery()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void stopScanning()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void removeAllDevices()> (3)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void removeAllDevices()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onPause()> (5)
<com.android.settings.bluetooth.DevicePickerFragment: void removeAllDevices()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onPause()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onPause()> (4)
<com.android.settings.SettingsPreferenceFragment: void onPause()> (23)
<com.android.settings.AccessibilitySettings: void onPause()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onPause()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onPause()> (3)
<com.android.settings.DateTimeSettings: void onPause()> (3)
<com.android.settings.deviceinfo.Memory: void onPause()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onPause()> (3)
<com.android.settings.DisplaySettings: void onPause()> (3)
<com.android.settings.DreamSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onPause()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onPause()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onPause()> (3)
<com.android.settings.NotificationStation: void onPause()> (3)
<com.android.settings.SoundSettings: void onPause()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onPause()> (3)
<com.android.settings.vpn2.VpnSettings: void onPause()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onPause()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onPause()> (3)
<com.android.settings.wifi.WifiSettings: void onPause()> (3)
<com.android.settings.WirelessSettings: void onPause()> (3)
<com.android.settings.accounts.AccountSyncSettings: void onPause()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPause()> (4)
<com.android.settings.accounts.SyncSettings: void onPause()> (4)
<com.android.bluetooth.btservice.AdapterService: boolean createBond(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean createBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean createBond(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.bluetooth.btservice.AdapterService: boolean removeBond(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean removeBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean removeBond(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean removeBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean removeBond(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean removeBond()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$1: void handleMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean checkAccessPermission(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
Permission:android.permission.VIBRATE
506 Callers:
<com.android.server.VibratorService: void vibrate(int,java.lang.String,long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,long,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibrate(int,java.lang.String,long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IVibratorService: void vibrate(int,java.lang.String,long,android.os.IBinder)> (1)
<com.android.server.VibratorService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.SystemVibrator: void vibrate(int,java.lang.String,long)> (2)
<android.os.SystemVibrator: void vibrate(long)> (1)
<android.os.Vibrator: void vibrate(int,java.lang.String,long)> (1)
<android.os.Vibrator: void vibrate(long)> (19)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (6)
<android.view.VolumePanel: void onVibrate()> (2)
<com.android.datetimepicker.date.DatePickerDialog: void tryVibrate()> (3)
<com.android.datetimepicker.time.RadialPickerLayout: void tryVibrate()> (5)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void vibrate()> (2)
<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void vibrate(long)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void vibrate()> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void vibrate()> (2)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.internal.widget.WaveView: void vibrate(long)> (1)
<com.android.launcher2.DragController: void startDrag(android.graphics.Bitmap,int,int,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Point,android.graphics.Rect,float)> (2)
<com.android.phone.common.HapticFeedback: void vibrate()> (4)
<com.android.phone.Ringer$VibratorThread: void run()> (2)
<com.android.server.power.ShutdownThread: void rebootOrShutdown(boolean,java.lang.String)> (2)
<com.android.server.VibratorService: void doVibratorOn(long,int)> (2)
<com.android.systemui.ExpandHelper: void vibrate(long)> (1)
<com.android.systemui.SearchPanelView: void vibrate()> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void vibrate()> (2)
<com.android.voicedialer.VoiceDialerActivity: int playSound(int)> (1)
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistLongPressAction()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void setSafeMode(boolean)> (1)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (3)
<com.android.datetimepicker.date.DatePickerController: void tryVibrate()> (2)
<com.android.datetimepicker.date.DatePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.RadialPickerLayout: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.TimePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$2: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$3: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$4: void onClick(android.view.View)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void vibrateInternal(android.view.View)> (1)
<com.android.inputmethod.latin.SettingsFragment$2: void feedbackValue(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void setGrabbedState(int)> (2)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.WaveView: void dispatchTriggerEvent(int)> (1)
<com.android.launcher2.DragController: void startDrag(android.view.View,android.graphics.Bitmap,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Point,float)> (1)
<com.android.launcher2.Workspace: void beginDragShared(android.view.View,com.android.launcher2.DragSource)> (3)
<com.android.dialer.dialpad.DialpadFragment: void keyPressed(int)> (3)
<com.android.dialer.dialpad.DialpadFragment: void onClick(android.view.View)> (1)
<com.android.phone.EmergencyDialer: void keyPressed(int)> (2)
<com.android.phone.EmergencyDialer: void onClick(android.view.View)> (1)
<com.android.phone.Ringer: void ring()> (4)
<com.android.server.power.ShutdownThread: void run()> (2)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.VibratorService: void access$1300(com.android.server.VibratorService,long,int)> (1)
<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)> (3)
<com.android.systemui.ExpandHelper: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.systemui.SearchPanelView: void access$300(com.android.systemui.SearchPanelView)> (1)
<com.android.systemui.SearchPanelView: void show(boolean,boolean)> (6)
<com.android.systemui.statusbar.phone.PhoneStatusBar$28: void run()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$29: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity: int access$600(com.android.voicedialer.VoiceDialerActivity,int)> (4)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<android.view.WindowManagerPolicy: void setSafeMode(boolean)> (1)
<android.view.VolumePanel: void onRemoteVolumeChanged(int,int)> (1)
<android.view.VolumePanel: void onRemoteVolumeUpdateIfShown()> (1)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (2)
<com.android.datetimepicker.date.SimpleMonthAdapter: void onDayTapped(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.datetimepicker.date.YearPickerView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void hapticAndAudioFeedback(int,android.view.View)> (2)
<com.android.inputmethod.latin.SeekBarDialogPreference$ValueProxy: void feedbackValue(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.multiwaveview.MultiWaveView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void waveUpdateFrame(float,float,boolean)> (2)
<com.android.launcher2.AppsCustomizePagedView: boolean beginDraggingWidget(android.view.View)> (1)
<com.android.launcher2.AppsCustomizePagedView: void beginDraggingApplication(android.view.View)> (1)
<com.android.launcher2.Folder: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.Workspace: void startDrag(com.android.launcher2.CellLayout$CellInfo)> (1)
<com.android.dialer.dialpad.DialpadFragment: boolean onLongClick(android.view.View)> (1)
<com.android.dialer.dialpad.DialpadFragment: void onPressed(android.view.View,boolean)> (1)
<com.android.phone.EmergencyDialer: boolean onLongClick(android.view.View)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (2)
<com.android.phone.CallNotifier: void restartRinger()> (1)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.VibratorService$VibrateThread: void run()> (2)
<com.android.server.VibratorService: void startNextVibrationLocked()> (4)
<com.android.systemui.Gefingerpoken: boolean onTouchEvent(android.view.MotionEvent)> ()
<com.android.systemui.statusbar.phone.StatusBarWindowView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.systemui.statusbar.tablet.NotificationPanel: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.systemui.SearchPanelView$GlowPadTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void updateSearchPanel()> (3)
<com.android.systemui.statusbar.BaseStatusBar: void showSearchPanel()> (5)
<com.android.systemui.statusbar.BaseStatusBar: void hideSearchPanel()> (6)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void animateCollapsePanels(int)> (5)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void animateCollapsePanels(int)> (3)
<com.android.voicedialer.VoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.voicedialer.VoiceDialerActivity$ErrorRunnable: void run()> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.WindowManagerService: boolean detectSafeMode()> (1)
<android.view.VolumePanel: void onMuteChanged(int,int)> (1)
<com.android.datetimepicker.date.SimpleMonthAdapter: void onDayClick(com.android.datetimepicker.date.SimpleMonthView,com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void access$300(com.android.deskclock.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void hapticAndAudioFeedback(int)> (3)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.latin.SeekBarDialogPreference: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void access$300(com.android.internal.widget.multiwaveview.MultiWaveView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void onDraw(android.graphics.Canvas)> (1)
<com.android.launcher2.AppsCustomizePagedView: boolean beginDragging(android.view.View)> (1)
<com.android.launcher2.Launcher: boolean onLongClick(android.view.View)> (1)
<com.android.dialer.dialpad.DialpadImageButton$OnPressedListener: void onPressed(android.view.View,boolean)> (1)
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.server.power.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)> (3)
<com.android.server.VibratorService: void access$300(com.android.server.VibratorService)> (3)
<com.android.server.VibratorService: void updateInputDeviceVibrators()> (5)
<com.android.systemui.statusbar.phone.PhoneStatusBar$3: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void updateSearchPanel()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void updateSearchPanel()> (3)
<com.android.systemui.statusbar.tv.TvStatusBar: void updateSearchPanel()> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void showSearchPanel()> ()
<com.android.systemui.statusbar.DelegateViewHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void showSearchPanel()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void showSearchPanel()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void showSearchPanel()> (1)
<com.android.systemui.SearchPanelView$1: void run()> (1)
<com.android.systemui.SearchPanelView$GlowPadTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void hideSearchPanel()> ()
<com.android.systemui.statusbar.phone.PhoneStatusBar: void hideSearchPanel()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void hideSearchPanel()> (1)
<com.android.systemui.statusbar.tv.TvStatusBar: void hideSearchPanel()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void animateCollapsePanels(int)> (6)
<com.android.systemui.statusbar.phone.PhoneStatusBar$23$1$3: void run()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$23: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$27: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void animateCollapsePanels()> (9)
<com.android.systemui.statusbar.tablet.TabletStatusBar$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void animateCollapsePanels()> (5)
<com.android.voicedialer.RecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputMonitor: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.datetimepicker.date.SimpleMonthView$OnDayClickListener: void onDayClick(com.android.datetimepicker.date.SimpleMonthView,com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void hapticAndAudioFeedback(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean onLongClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean beginDragging(android.view.View)> (3)
<com.android.dialer.dialpad.DialpadImageButton: void setPressed(boolean)> (4)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.server.power.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)> (1)
<com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)> (2)
<com.android.server.VibratorService$3: void run()> (1)
<com.android.server.VibratorService$Vibration: void binderDied()> (1)
<com.android.server.VibratorService: void access$400(com.android.server.VibratorService)> (2)
<com.android.server.VibratorService: void onInputDeviceAdded(int)> (1)
<com.android.server.VibratorService: void onInputDeviceChanged(int)> (1)
<com.android.server.VibratorService: void onInputDeviceRemoved(int)> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void prepareNavigationBarView()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addPanelWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.systemui.statusbar.phone.NavigationBarView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.systemui.statusbar.phone.NavigationBarView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.systemui.statusbar.tablet.TabletStatusBarView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBarView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar$9: void run()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar$1: void run()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.systemui.SearchPanelView: void hide(boolean)> ()
<com.android.systemui.SearchPanelView: void startAssistActivity()> (1)
<com.android.systemui.statusbar.BaseStatusBar$2: boolean onClickHandler(android.view.View,android.app.PendingIntent,android.content.Intent)> (1)
<com.android.systemui.statusbar.BaseStatusBar$5$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.systemui.statusbar.BaseStatusBar$NotificationClicker: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void animateCollapsePanels(int)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void disable(int)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void removeNotification(android.os.IBinder)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setSystemUiVisibility(int,int)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void startActivityDismissingKeyguard(android.content.Intent,boolean)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void collapsePanels()> (2)
<com.android.systemui.statusbar.phone.StatusBarWindowView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.systemui.statusbar.tablet.NotificationPanel: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.systemui.statusbar.tablet.TabletStatusBar$H$1: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void clearAll()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void disable(int)> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void onDayClick(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (2)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onLongPressTimeout(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onLongClick(android.view.View)> (2)
<com.android.launcher2.PagedViewWithDraggableItems: void determineDraggingStart(android.view.MotionEvent)> (1)
<com.android.dialer.dialpad.DialpadImageButton: void simulateClickForAccessibility()> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.server.power.PowerManagerService$2: void run()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: void shutdown(boolean)> (1)
<com.android.server.VibratorService$1: void onChange(boolean)> (1)
<com.android.server.VibratorService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addNavigationBar()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void repositionNavigationBar()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.systemui.SystemUI: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.systemui.SearchPanelView: void access$200(com.android.systemui.SearchPanelView)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void disable(int)> (2)
<com.android.systemui.statusbar.BaseStatusBar: void removeNotification(android.os.IBinder)> (2)
<com.android.systemui.statusbar.BaseStatusBar: void setSystemUiVisibility(int,int)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setLightsOn(boolean)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$24: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$25: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void userSwitched(int)> (3)
<com.android.systemui.statusbar.phone.QuickSettings: void access$300(com.android.systemui.statusbar.phone.QuickSettings)> (3)
<com.android.systemui.statusbar.phone.QuickSettings: void startSettingsActivity(android.content.Intent,boolean)> (1)
<com.android.systemui.statusbar.tablet.NotificationPanel$1: void onClick(android.view.View)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.datetimepicker.date.SimpleMonthView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void access$000(com.android.datetimepicker.date.SimpleMonthView,com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onLongPressTimeout(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key)> (2)
<com.android.launcher2.AppsCustomizePagedView: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: void handleTouchEvent(android.view.MotionEvent)> (3)
<com.android.dialer.dialpad.DialpadImageButton: boolean onHoverEvent(android.view.MotionEvent)> (3)
<com.android.dialer.dialpad.DialpadImageButton: boolean performAccessibilityAction(int,android.os.Bundle)> (3)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void access$3000(com.android.systemui.statusbar.phone.PhoneStatusBar)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.systemui.media.RingtonePlayer: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.power.PowerUI: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.settings.SettingsUI: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.SystemUIService: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void disable(int)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void handleNotificationError(android.os.IBinder,android.service.notification.StatusBarNotification,java.lang.String)> (5)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void removeNotification(android.os.IBinder)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void setSystemUiVisibility(int,int)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void topAppWindowChanged(boolean)> (1)
<com.android.systemui.statusbar.BaseStatusBar$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.tv.TvStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$24: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$3: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$5: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void startSettingsActivity(android.content.Intent)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.datetimepicker.date.SimpleMonthView$MonthViewNodeProvider: boolean performActionForItem(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay,int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.launcher2.AppsCustomizePagedView: void handleTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.internal.policy.impl.GlobalActions$2: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.statusbar.BaseStatusBar: com.android.systemui.statusbar.StatusBarIconView addNotificationViews(android.os.IBinder,android.service.notification.StatusBarNotification)> (4)
<com.android.systemui.statusbar.BaseStatusBar: void updateNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void handleNotificationError(android.os.IBinder,android.service.notification.StatusBarNotification,java.lang.String)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void handleNotificationError(android.os.IBinder,android.service.notification.StatusBarNotification,java.lang.String)> (1)
<com.android.systemui.statusbar.tv.TvStatusBar: void handleNotificationError(android.os.IBinder,android.service.notification.StatusBarNotification,java.lang.String)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void topAppWindowChanged(boolean)> (2)
<com.android.systemui.statusbar.phone.QuickSettings: void access$700(com.android.systemui.statusbar.phone.QuickSettings,android.content.Intent)> (2)
<com.android.systemui.statusbar.phone.QuickSettings: void startSettingsActivity(java.lang.String)> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewNodeProvider: boolean performActionForItem(java.lang.Object,int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.launcher2.AppsCustomizePagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.PagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.AppsCustomizePagedView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.PagedView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: boolean onLongPress()> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.StatusBarIconView addNotificationViews(android.os.IBinder,android.service.notification.StatusBarNotification)> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: com.android.systemui.statusbar.StatusBarIconView addNotificationViews(android.os.IBinder,android.service.notification.StatusBarNotification)> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: com.android.systemui.statusbar.StatusBarIconView addNotificationViews(android.os.IBinder,android.service.notification.StatusBarNotification)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void updateNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void updateNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void updateNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void topAppWindowChanged(boolean)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$10: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$19: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void access$500(com.android.systemui.statusbar.phone.QuickSettings,java.lang.String)> (6)
<com.googlecode.eyesfree.utils.TouchExplorationHelper: boolean performActionForItem(java.lang.Object,int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (2)
<com.android.launcher2.SmoothPagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.SmoothPagedView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.Workspace: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.internal.policy.impl.GlobalActions$5: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$13: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$16: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$21: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$22: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$6: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$7: void onClick(android.view.View)> (1)
<com.googlecode.eyesfree.utils.TouchExplorationHelper: boolean performAction(int,int,android.os.Bundle)> (4)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator$ProcessMotionEvent: boolean processMotionEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.launcher2.Workspace: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.GlobalActions$4: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void addNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (2)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewNodeProvider: boolean performAction(int,int,android.os.Bundle)> (2)
<com.googlecode.eyesfree.utils.TouchExplorationHelper: void clearFocusedItem()> (1)
<com.googlecode.eyesfree.utils.TouchExplorationHelper: void setFocusedItem(java.lang.Object)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean handleSuddenJumping(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$6: void run()> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void addNotification(android.os.IBinder,android.service.notification.StatusBarNotification)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewNodeProvider: void clearFocusedItem()> (2)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewNodeProvider: void setFocusedItem(java.lang.Object)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void clearAccessibilityFocus()> (2)
<com.android.datetimepicker.date.SimpleMonthView: boolean restoreAccessibilityFocus(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay findAccessibilityFocus()> (1)
<com.android.datetimepicker.date.DayPickerView: boolean restoreAccessibilityFocus(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.datetimepicker.date.DayPickerView: void layoutChildren()> (2)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.VibratorService: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> (1)
<android.os.SystemVibrator: void vibrate(int,java.lang.String,long[],int)> (2)
<android.os.SystemVibrator: void vibrate(long[],int)> (1)
<android.os.Vibrator: void vibrate(int,java.lang.String,long[],int)> (2)
<android.os.Vibrator: void vibrate(long[],int)> (4)
<com.android.deskclock.AlarmKlaxon: void play(com.android.deskclock.Alarm)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: void tryVibrate()> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void start()> (1)
<com.android.deskclock.AlarmKlaxon: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: com.android.inputmethod.pinyin.SoftKey onKeyPress(int,int,com.android.inputmethod.pinyin.SkbContainer$LongPressTimer,boolean)> (2)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void access$200(com.android.phone.CallNotifier$EmergencyTonePlayerVibrator)> (1)
<com.android.inputmethod.pinyin.SkbContainer: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.inputmethod.pinyin.SoftKeyboardView: com.android.inputmethod.pinyin.SoftKey onKeyMove(int,int)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.inputmethod.pinyin.SkbContainer: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService: void cancelVibrate(android.os.IBinder)> (1)
<android.os.SystemVibrator: void cancel()> (1)
<android.os.Vibrator: void cancel()> (8)
<com.android.deskclock.AlarmKlaxon: void stop()> (2)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void stop()> (1)
<com.android.phone.Ringer: void stopRing()> (3)
<com.android.server.VibratorService: void doVibratorOff()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void access$300(com.android.phone.CallNotifier$EmergencyTonePlayerVibrator)> (2)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (4)
<com.android.server.VibratorService: void doCancelVibrateLocked()> (5)
<com.android.phone.InCallScreen: void internalSilenceRinger()> (2)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (7)
<com.android.server.VibratorService: void access$200(com.android.server.VibratorService)> (3)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.phone.InCallScreen: void internalRespondViaSms()> (1)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.BluetoothPhoneService$3: boolean answerCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: void internalAnswerCall()> (2)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.server.VibratorService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean answerCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<android.bluetooth.IBluetoothHeadsetPhone: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAnswerCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4900(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
Permission:android.permission.READ_PROFILE
3428 Callers:
<com.android.providers.contacts.ProfileProvider: void enforceReadPermission(android.net.Uri)> (3)
<com.android.providers.contacts.ProfileProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> (2)
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (3)
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)> (3)
<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)> (2)
<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)> (3)
<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)> (2)
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)> ()
<com.android.internal.widget.ILockSettings$Stub: boolean getBoolean(java.lang.String,boolean,int)> (2)
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)> ()
<com.android.internal.widget.ILockSettings$Stub: java.lang.String getString(java.lang.String,java.lang.String,int)> (2)
<com.android.server.LockSettingsService: void migrateOldData()> (1)
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)> ()
<com.android.internal.widget.ILockSettings$Stub: long getLong(java.lang.String,long,int)> (2)
<com.android.internal.widget.ILockSettings: boolean getBoolean(java.lang.String,boolean,int)> (1)
<com.android.internal.widget.ILockSettings$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)> (2)
<com.android.server.LockSettingsService: void systemReady()> (1)
<com.android.internal.widget.ILockSettings: long getLong(java.lang.String,long,int)> (1)
<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)> (7)
<com.android.server.LockSettingsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> (25)
<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)> (2)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)> (10)
<com.android.internal.widget.LockPatternUtils: boolean getPowerButtonInstantlyLocks()> (2)
<com.android.internal.widget.LockPatternUtils: boolean isBiometricWeakEverChosen()> ()
<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()> (6)
<com.android.internal.widget.LockPatternUtils: boolean isOwnerInfoEnabled()> (2)
<com.android.internal.widget.LockPatternUtils: boolean isPatternEverChosen()> (1)
<com.android.internal.widget.LockPatternUtils: boolean isPermanentlyLocked()> (4)
<com.android.internal.widget.LockPatternUtils: boolean isVisiblePatternEnabled()> (2)
<android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)> (2)
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> (1)
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> (14)
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> (3)
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> (37)
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> (1)
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> (10)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getDisabledSystemInputMethods()> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getEnabledInputMethodsStr()> (4)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getSelectedInputMethod()> (9)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getSubtypeHistoryStr()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void updateSettings()> (3)
<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()> (4)
<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)> (2)
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponentsForUser(int)> (2)
<com.android.server.location.LocationBlacklist: java.lang.String[] getStringArrayLocked(java.lang.String)> (1)
<com.android.server.NotificationManagerService: void disableNonexistentListeners()> (1)
<com.android.server.NotificationManagerService: void rebindListenerServices()> (3)
<com.android.server.RecognitionManagerService: android.content.ComponentName getCurRecognizer(int)> (2)
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellCheckerSubtype()> (1)
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellChecker()> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String)> (2)
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)> (3)
<com.android.internal.widget.LockPatternUtils: boolean isBiometricWeakLivelinessEnabled()> (2)
<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()> (6)
<com.android.internal.widget.LockPatternUtils: boolean isLockScreenDisabled()> (3)
<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()> (6)
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()> (3)
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()> (6)
<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt()> (1)
<com.android.internal.widget.LockPatternUtils: long getLockoutAttemptDeadline()> (3)
<com.android.internal.widget.LockPatternUtils: void setBiometricWeakLivelinessEnabled(boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean isSecure()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()> (8)
<com.android.internal.widget.LockPatternUtils: boolean isSecure()> (10)
<com.android.settings.ChooseLockSettingsHelper: boolean confirmPattern(int,java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.settings.users.UserSettings: boolean hasLockscreenSecurity()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: java.lang.String getOwnerInfo()> (1)
<com.android.settings.OwnerInfoSettings: void initView(android.view.View)> (1)
<com.android.settings.ChooseLockPattern$ChooseLockPatternFragment: void saveChosenPatternAndFinish()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void reset()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showSecurityScreen(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (7)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onFinishInflate()> (3)
<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)> (4)
<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)> (5)
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)> (1)
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)> (32)
<android.service.dreams.Sandman: boolean isScreenSaverActivatedOnDock(android.content.Context)> (1)
<android.service.dreams.Sandman: boolean isScreenSaverEnabled(android.content.Context)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void updateTargets()> (2)
<com.android.internal.widget.LockPatternUtils: int getFallbackAppWidgetId()> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readDisplayMagnificationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readEnhancedWebAccessibilityEnabledChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.power.PowerManagerService: void updateSettingsLocked()> (2)
<com.android.server.TextServicesManagerService$TextServicesSettings: boolean isSpellCheckerEnabled()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$2: void onChange(boolean)> (1)
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)> (3)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: int getSelectedInputMethodSubtypeHashCode()> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: java.lang.String getPersistedDeviceName()> (1)
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> ()
<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()> (1)
<android.speech.tts.TtsEngines: java.lang.String getLocalePrefForEngine(java.lang.String)> (2)
<android.speech.tts.TtsEngines: java.lang.String getV1Locale()> (1)
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.lang.String)> (1)
<android.webkit.AccessibilityInjectorFallback: void ensureWebContentKeyBindings()> (1)
<android.webkit.AccessibilityInjector: java.lang.String getScreenReaderInjectionUrl()> (1)
<com.android.browser.BrowserSettings: java.lang.String getDefaultLinkPrefetchSetting()> (2)
<com.android.browser.BrowserSettings: java.lang.String getDefaultPreloadSetting()> (2)
<com.android.browser.SystemAllowGeolocationOrigins: java.lang.String getSystemSetting()> (1)
<com.android.inputmethod.latin.setup.SetupActivity: boolean isThisImeCurrent(android.content.Context)> (2)
<com.android.providers.settings.SettingsHelper: boolean isAlreadyConfiguredCriticalAccessibilitySetting(java.lang.String)> (1)
<com.android.server.am.CoreSettingsObserver: void populateCoreSettings(android.os.Bundle)> (1)
<com.android.server.BackupManagerService: void <init>(android.content.Context)> (1)
<com.android.server.BluetoothManagerService: void loadStoredNameAndAddress()> (1)
<com.android.server.BluetoothManagerService: void storeNameAndAddress(java.lang.String,java.lang.String)> (1)
<com.android.server.CertBlacklister$BlacklistObserver: java.lang.String getValue()> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<com.android.server.location.LocationFudger: float loadCoarseAccuracy()> (2)
<com.android.server.search.Searchables: java.lang.String getGlobalSearchProviderSetting()> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (7)
<com.android.settings.AccessibilitySettings: java.util.Set getEnabledServicesFromSettings(android.content.Context)> (2)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment$1: void onChange(boolean,android.net.Uri)> (2)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: java.lang.CharSequence getCurrentInputMethodName(android.content.Context,android.content.ContentResolver,android.view.inputmethod.InputMethodManager,java.util.List,android.content.pm.PackageManager)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: java.util.HashMap getEnabledInputMethodsAndSubtypeList(android.content.ContentResolver)> (2)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: java.util.HashSet getDisabledSystemIMEs(android.content.ContentResolver)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: void saveInputMethodSubtypeList(com.android.settings.SettingsPreferenceFragment,android.content.ContentResolver,java.util.List,boolean)> (4)
<com.android.settings.NotificationAccessSettings: void loadEnabledListeners()> (1)
<com.android.settings.SecuritySettings: int getNumEnabledNotificationListeners()> (1)
<com.android.settings.VoiceInputOutputSettings: boolean populateOrRemoveRecognizerPrefs()> (1)
<com.android.settings.VoiceInputOutputSettings: void populateRecognizerPreference(java.util.List)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: java.lang.String getCurrentInputMethodName(android.content.Context,android.content.ContentResolver,android.view.inputmethod.InputMethodManager,java.util.List,android.content.pm.PackageManager)> (1)
<com.android.systemui.statusbar.tablet.InputMethodsPanel: android.view.inputmethod.InputMethodInfo getCurrentInputMethodInfo()> (1)
<com.android.systemui.statusbar.tablet.InputMethodsPanel: java.util.TreeMap getEnabledInputMethodAndSubtypeList()> (2)
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)> (2)
<android.media.AudioService: void restoreMediaButtonReceiver()> (1)
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> (4)
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> (19)
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> (6)
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> (13)
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getNextAlarm()> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void onNextAlarmChanged()> (3)
<com.android.server.InputMethodManagerService: void buildInputMethodListLocked(java.util.ArrayList,java.util.HashMap,boolean)> (5)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodsAndSubtypeListLocked()> (5)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void appendAndPutEnabledInputMethodLocked(java.lang.String,boolean)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void enableAllIMEsIfThereIsNoEnabledIME()> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void onChange(boolean)> (1)
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabledLocked(java.lang.String,boolean)> (3)
<com.android.server.InputMethodManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)> (1)
<com.android.server.InputMethodManagerService: void resetAllInternalStateLocked(boolean,boolean)> (2)
<com.android.server.InputMethodManagerService: void showInputMethodMenuInternal(boolean)> (2)
<com.android.server.InputMethodManagerService: void switchUserLocked(int)> (1)
<com.android.server.InputMethodManagerService: void updateFromSettingsLocked(boolean)> (5)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List loadInputMethodAndSubtypeHistoryLocked()> (2)
<com.android.internal.policy.impl.PhoneWindowManager$20: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void onChange(boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void addWidgetsFromSettings()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void cleanupAppWidgetIds()> (2)
<com.android.internal.widget.LockPatternUtils: boolean addAppWidget(int,int)> (2)
<com.android.internal.widget.LockPatternUtils: boolean removeAppWidget(int)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.dreams.DreamManagerService: android.content.ComponentName chooseDreamForUser(int)> (1)
<com.android.server.location.LocationBlacklist: void reloadBlacklistLocked()> (2)
<com.android.server.NotificationManagerService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void update(android.net.Uri)> (3)
<com.android.server.NotificationManagerService: void systemReady()> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.RecognitionManagerService: void initForUser(int)> (2)
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> (2)
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> (7)
<com.android.internal.widget.LockPatternUtils: boolean checkPasswordHistory(java.lang.String)> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getOwnerInfo(int)> (2)
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean)> (1)
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)> (1)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void startUi(android.os.IBinder,int,int,int,int)> (1)
<com.android.settings.ChooseLockSettingsHelper: boolean confirmPassword(int)> (1)
<com.android.settings.CryptKeeperSettings: boolean runKeyguardConfirmation(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLocked(android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void maybeSendUserPresentBroadcast()> (2)
<com.android.settings.SecuritySettings: android.preference.PreferenceScreen createPreferenceHierarchy()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: boolean isBiometricUnlockEnabled()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.widget.LockPatternUtils: void deleteGallery()> (3)
<com.android.server.DevicePolicyManagerService: void loadSettingsLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData,int)> (2)
<com.android.settings.CredentialStorage: boolean checkKeyGuardQuality()> (2)
<com.android.settings.ChooseLockSettingsHelper: boolean launchConfirmationActivity(int,java.lang.CharSequence,java.lang.CharSequence)> (8)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void reset()> (7)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void reset()> (3)
<com.android.settings.ConfirmLockPattern$ConfirmLockPatternFragment: void onResume()> (1)
<com.android.settings.SecuritySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (2)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void wakeWhenReadyTq(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean showNextSecurityScreenIfPresent()> ()
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void reportFailedUnlockAttempt()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showNextSecurityScreenOrFinish(boolean)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showPrimarySecurityScreen(boolean)> (6)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showTimeoutDialog()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void verifyUnlock()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void updateEmergencyCallButton(com.android.internal.telephony.IccCardConstants$State,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: android.content.Intent getCameraIntent()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: void launchCamera(android.os.Handler,java.lang.Runnable)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: boolean isSecure()> (6)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onDreamingStarted()> (1)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onAddUserClicked(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void update()> (6)
<com.android.settings.OwnerInfoSettings: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.ChooseLockPattern$ChooseLockPatternFragment: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void onFinishInflate()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityView: void reset()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showBackupSecurityScreen()> (1)
<com.android.settings.LocationSettings: void updateLocationToggles()> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getActualState(android.content.Context)> (2)
<com.android.settings.wifi.WifiSettings: void setOffMessage()> (2)
<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)> (4)
<com.android.server.LocationManagerService: void applyAllProviderRequirementsLocked()> (1)
<com.android.server.LocationManagerService: void handleLocationChanged(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)> (4)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (7)
<com.android.server.accessibility.ScreenMagnifier: float getPersistedScale()> (1)
<android.inputmethodservice.KeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (2)
<android.speech.tts.TextToSpeechService: int getSecureSettingInt(java.lang.String,int)> (3)
<android.webkit.AccessibilityInjector: boolean isScriptInjectionEnabled()> (1)
<android.widget.TextView: boolean shouldSpeakPasswordsForAccessibility()> (66)
<com.android.dialer.dialpad.DialpadFragment: void onResume()> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long,int)> (4)
<com.android.inputmethod.accessibility.AccessibilityUtils: boolean shouldObscureInput(android.view.inputmethod.EditorInfo)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLaterLocked()> (2)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: boolean shouldObscureSpeech()> (3)
<com.android.phone.CallFeaturesSetting: void handleTTYChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.CallFeaturesSetting: void onCreate(android.os.Bundle)> (2)
<com.android.phone.CallFeaturesSetting: void onResume()> (3)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.server.accessibility.ScreenMagnifier: boolean isScreenMagnificationAutoUpdateEnabled(android.content.Context)> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (3)
<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> (8)
<com.android.server.net.NetworkPolicyManagerService: void upgradeLegacyBackgroundData()> (1)
<com.android.server.UiModeManagerService: void <init>(android.content.Context,com.android.server.TwilightService)> (1)
<com.android.settings.AccessibilitySettings: void handleDisplayMagnificationPreferenceScreenClick()> (1)
<com.android.settings.AccessibilitySettings: void updateServicesPreferences()> (2)
<com.android.settings.AccessibilitySettings: void updateSystemPreferences()> (1)
<com.android.settings.DevelopmentSettings: void updateAllOptions()> (3)
<com.android.settings.DevelopmentSettings: void updateShowAllANRsOptions()> (1)
<com.android.settings.DreamBackend: boolean getBoolean(java.lang.String,boolean)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: int loadInputMethodSelectorVisibility()> ()
<com.android.settings.PrivacySettings: void updateToggles()> (2)
<com.android.systemui.statusbar.tablet.InputMethodButton: int loadInputMethodSelectorVisibility()> (1)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.service.dreams.Sandman: void startDreamWhenDockedIfAppropriate(android.content.Context)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void <init>(android.content.Context)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void access$700(com.android.internal.policy.impl.keyguard.KeyguardSelectorView)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void onFinishInflate()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void checkAppWidgetConsistency()> (3)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4400(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4600(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4900(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4500(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: int getInputMethodSubtypeSelected(android.content.ContentResolver)> (2)
<com.android.settings.tts.TextToSpeechSettings: void initSettings()> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: boolean isSubtypeSelected()> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: int getSelectedInputMethodSubtypeId(java.lang.String)> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void initializeP2pSettings()> (1)
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()> (2)
<android.speech.tts.TextToSpeechService: java.lang.String[] getSettingsLocale()> (4)
<com.android.settings.tts.TtsEngineSettingsFragment: void updateDefaultLocalePref(java.util.ArrayList)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: void updateLanguageTo(java.lang.String)> (2)
<android.webkit.AccessibilityInjectorFallback: void <init>(android.webkit.WebViewClassic)> (1)
<android.webkit.AccessibilityInjector: void injectJavaScript()> (1)
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchEnabled()> (1)
<com.android.browser.preferences.BandwidthPreferencesFragment: void onResume()> (2)
<com.android.browser.BrowserSettings: java.lang.String getPreloadEnabled()> (1)
<com.android.browser.SystemAllowGeolocationOrigins: java.lang.String access$000(com.android.browser.SystemAllowGeolocationOrigins)> (1)
<com.android.inputmethod.latin.setup.LauncherIconVisibilityManager: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: int determineSetupStepNumber()> (5)
<com.android.providers.settings.SettingsHelper: boolean restoreValue(java.lang.String,java.lang.String)> (1)
<com.android.server.am.CoreSettingsObserver: void sendCoreSettings()> (2)
<com.android.server.BluetoothManagerService: void <init>(android.content.Context)> (1)
<com.android.server.BluetoothManagerService: void access$100(com.android.server.BluetoothManagerService,java.lang.String,java.lang.String)> (2)
<com.android.server.CertBlacklister$BlacklistObserver$1: void run()> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.location.LocationFudger: float access$000(com.android.server.location.LocationFudger)> (1)
<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)> (1)
<com.android.server.search.Searchables: android.content.ComponentName findGlobalSearchActivity(java.util.List)> (1)
<com.android.server.updates.CarrierProvisioningUrlsInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.CertPinInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (7)
<com.android.server.updates.IntentFirewallInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.SELinuxPolicyInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.SmsShortCodesInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.TZInfoInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.settings.AccessibilitySettings: java.util.Set access$600(android.content.Context)> (1)
<com.android.settings.AccessibilitySettings$SettingsContentObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void updateCurrentImeName()> (2)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: void loadInputMethodSubtypeList(com.android.settings.SettingsPreferenceFragment,android.content.ContentResolver,java.util.List,java.util.Map)> (2)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void setSubtypeAutoSelectionEnabled(java.lang.String,boolean)> (2)
<com.android.settings.inputmethod.InputMethodPreference: void saveImeSettings()> (1)
<com.android.settings.NotificationAccessSettings: void updateList()> (3)
<com.android.settings.VoiceInputOutputSettings: void populateOrRemovePreferences()> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void onImeWindowStatusChanged(boolean)> (1)
<com.android.systemui.statusbar.tablet.InputMethodsPanel: void updateRadioButtons()> (1)
<com.android.systemui.statusbar.tablet.InputMethodsPanel: void updateUiElements()> (2)
<com.android.settings.SecuritySettings: void setupLockAfterPreference()> (1)
<com.android.settings.SecuritySettings: void updateLockAfterPreferenceSummary()> (2)
<android.media.AudioService: void readPersistedSettings()> (2)
<android.media.AudioService: void restoreMasterVolume()> (2)
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)> ()
<android.provider.Settings$System: void getConfigurationForUser(android.content.ContentResolver,android.content.res.Configuration,int)> (1)
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)> ()
<android.media.AudioService$SettingsObserver: void onChange(boolean)> (1)
<android.media.AudioService$VolumeStreamState: void readSettings()> (2)
<android.provider.Settings$System: boolean getShowGTalkServiceStatusForUser(android.content.ContentResolver,int)> (1)
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)> (34)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (6)
<com.android.internal.policy.impl.PhoneWindowManager: int getUserRotationMode()> (1)
<com.android.internal.view.RotationPolicy: boolean isRotationLocked(android.content.Context)> (5)
<com.android.internal.view.RotationPolicy: boolean isRotationLockToggleVisible(android.content.Context)> (1)
<com.android.internal.widget.LockPatternUtils: boolean isTactileFeedbackEnabled()> (5)
<com.android.internal.widget.multiwaveview.GlowPadView: void vibrate()> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void vibrate()> (2)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.internal.widget.WaveView: void vibrate(long)> (1)
<com.android.systemui.SearchPanelView: void vibrate()> (2)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void onBrightnessLevelChanged()> (5)
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)> (9)
<com.android.server.input.InputManagerService: int getPointerSpeedSetting()> (1)
<com.android.server.input.InputManagerService: int getShowTouchesSetting(int)> (1)
<com.android.server.VibratorService: void updateInputDeviceVibrators()> (5)
<com.android.systemui.settings.BrightnessController: void updateMode()> (2)
<com.android.systemui.settings.BrightnessController: void updateSlider()> (2)
<android.media.MediaScanner$MyMediaScannerClient: void setSettingIfNotSet(java.lang.String,android.net.Uri,long)> (1)
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> (11)
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)> (26)
<android.text.format.DateFormat: java.lang.String getDateFormatString(android.content.Context)> (1)
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)> (6)
<android.widget.DateTimeView: java.text.DateFormat getDateFormat()> (1)
<com.android.alarmclock.DigitalAppWidgetProvider: void refreshAlarm(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.alarmclock.DigitalWidgetViewsFactory: void refreshAlarm(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: boolean isBluetoothAllowed()> (1)
<com.android.deskclock.Utils: void refreshAlarm(android.content.Context,android.view.View)> (4)
<com.android.phone.sip.SipSharedPreferences: java.lang.String getSipCallOption()> (2)
<com.android.server.NotificationManagerService: void enqueueNotificationInternal(java.lang.String,java.lang.String,int,int,java.lang.String,int,android.app.Notification,int[],int)> (2)
<com.android.settings.DateTimeSettings: java.lang.String getDateFormat()> (1)
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)> ()
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: void refreshAlarmStatus()> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel$2: void onUserSwitched(int)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel$NextAlarmObserver: void onChange(boolean)> (1)
<com.android.server.InputMethodManagerService: void systemReady(com.android.server.StatusBarManagerService)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: android.util.Pair getLastSubtypeForInputMethodLockedInternal(java.lang.String)> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodAndSubtypeHashCodeListLocked()> ()
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodListLocked()> (10)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo)> (1)
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (12)
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged()> (6)
<com.android.server.InputMethodManagerService: void resetStateIfCurrentLocaleChangedLocked()> (2)
<com.android.server.InputMethodManagerService: void showInputMethodMenu()> (1)
<com.android.server.InputMethodManagerService: void showInputMethodSubtypeMenu()> (1)
<com.android.server.InputMethodManagerService: void access$1000(com.android.server.InputMethodManagerService,int)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void addSubtypeToHistory(java.lang.String,java.lang.String)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$16: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onFinishInflate()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$200(com.android.internal.policy.impl.keyguard.KeyguardHostView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager$2: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean addWidget(int,int,boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager$1: void run()> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4700(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4800(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.dreams.DreamManagerService: void startDream()> (1)
<com.android.server.location.LocationBlacklist: void reloadBlacklist()> (2)
<com.android.server.location.LocationBlacklist: void switchUser(int)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void observe()> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.RecognitionManagerService: void access$000(com.android.server.RecognitionManagerService,int)> (1)
<com.android.server.RecognitionManagerService: void systemReady()> (1)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> (2)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onSomePackagesChanged()> (1)
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerLocked(java.lang.String)> (3)
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtypeLocked(int)> (2)
<com.android.server.TextServicesManagerService: void switchUserLocked(int)> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: java.lang.String validatePassword(java.lang.String)> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void handleNext()> (2)
<com.android.internal.widget.LockPatternUtils: void clearLock(boolean)> (2)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleServiceConnected()> (1)
<com.android.settings.CryptKeeperSettings: boolean access$300(com.android.settings.CryptKeeperSettings,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2600(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLocked()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getAlternateFor(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (3)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List,boolean)> (2)
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)> (42)
<com.android.server.DevicePolicyManagerService: void systemReady()> (1)
<com.android.settings.CredentialStorage: void ensureKeyGuard()> (2)
<com.android.settings.CredentialStorage: void handleUnlockOrInstall()> (2)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.ChooseLockPattern$ChooseLockPatternFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.CredentialStorage: boolean confirmKeyGuard()> (1)
<com.android.settings.MasterClear: boolean runKeyguardConfirmation(int)> (1)
<com.android.settings.MediaFormat: boolean runKeyguardConfirmation(int)> (1)
<com.android.internal.widget.LockPatternUtils: boolean checkPassword(java.lang.String)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void onResume(int)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void onWindowFocusChanged(boolean)> (7)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onWindowFocusChanged(boolean)> (3)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void wakeWhenReadyTq(int)> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$1500(com.android.internal.policy.impl.keyguard.KeyguardHostView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean handleMenuKey()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$900(com.android.internal.policy.impl.keyguard.KeyguardHostView,boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void dismiss()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean handleBackKey()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onScreenTurnedOff()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onScreenTurnedOn()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void show()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void verifyUnlock()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void access$100(com.android.internal.policy.impl.keyguard.EmergencyButton,com.android.internal.telephony.IccCardConstants$State,int)> (2)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void onFinishInflate()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo getCameraWidgetInfo()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: android.content.Intent getCameraIntent()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: android.content.Intent getCameraIntent()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$2: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: void launchCamera(android.os.Handler,java.lang.Runnable)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$1: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: void launchCamera(android.os.Handler,java.lang.Runnable)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: boolean isDismissable()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void adjustStatusBarLocked()> (4)
<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecure()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int finishPostLayoutPolicyLw()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()> (3)
<com.android.internal.policy.impl.PhoneWindowManager$15: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.users.UserSettings: void access$1400(com.android.settings.users.UserSettings,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$1: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$3: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void hideMessage(int,boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void securityMessageChanged()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityView: void onResume(int)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: void reset()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$1700(com.android.internal.policy.impl.keyguard.KeyguardHostView)> (1)
<com.android.settings.LocationSettings: void access$000(com.android.settings.LocationSettings)> (1)
<com.android.settings.LocationSettings: void onToggleLocationAccess(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings: void updateAccessPoints()> (4)
<com.android.settings.wifi.WifiSettings: void updateWifiState(int)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(android.location.LocationRequest,com.android.server.LocationManagerService$Receiver,int,int,java.lang.String)> (1)
<com.android.server.LocationManagerService: void access$100(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void access$1200(com.android.server.LocationManagerService,android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService: void access$900(com.android.server.LocationManagerService,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)> (2)
<com.android.server.LocationManagerService: void access$200(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void switchUser(int)> (1)
<com.android.server.LocationManagerService: void systemReady()> (1)
<com.android.server.accessibility.ScreenMagnifier: float access$1100(com.android.server.accessibility.ScreenMagnifier)> (3)
<android.inputmethodservice.KeyboardView: void showPreview(int)> (4)
<com.android.internal.widget.PasswordEntryKeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (1)
<android.speech.tts.TextToSpeechService: int getDefaultSpeechRate()> (3)
<com.android.tts.compat.CompatTtsService: int getSecureSettingInt(java.lang.String,int)> (1)
<com.svox.pico.PicoService: int getSecureSettingInt(java.lang.String,int)> (1)
<android.webkit.AccessibilityInjector: boolean shouldInjectJavaScript(java.lang.String)> (1)
<android.inputmethodservice.ExtractButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.inputmethodservice.ExtractEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.AutoCompleteTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.Button: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.CheckBox: boolean shouldSpeakPasswordsForAccessibility()> (2)
<android.widget.CheckedTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.Chronometer: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.CompoundButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.DateTimeView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.DigitalClock: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.EditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.MultiAutoCompleteTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.NumberPicker$CustomEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.RadioButton: boolean shouldSpeakPasswordsForAccessibility()> (2)
<android.widget.SearchView$SearchAutoComplete: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.Switch: boolean shouldSpeakPasswordsForAccessibility()> (2)
<android.widget.TextClock: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.TextView: boolean access$900(android.widget.TextView)> (65)
<android.widget.TextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (61)
<android.widget.ToggleButton: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.browser.UrlInputView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calculator2.CalculatorEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calculator2.ColorButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calendar.MultiStateButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calendar.recurrencepicker.WeekButton: boolean shouldSpeakPasswordsForAccessibility()> (3)
<com.android.camera.ui.Switch: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.datetimepicker.AccessibleTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.deskclock.AndroidClockTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.deskclock.ZeroTopPaddingTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.development.LogTextBox: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.dialer.dialpad.DigitsEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.dialer.dialpad.SmartDialTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.dreams.phototable.BummerView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.email.activity.AddressTextView: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.email.activity.ChipsAddressTextView: boolean shouldSpeakPasswordsForAccessibility()> (3)
<com.android.ex.chips.RecipientEditTextView: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.ex.editstyledtext.EditStyledText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.gallery3d.filtershow.ui.FilterIconButton: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.gallery3d.filtershow.ui.IconButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.policy.impl.keyguard.NumPadKey: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.view.menu.IconMenuItemView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.widget.DialogTitle: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.AccessibleTabView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.BubbleTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.ButtonDropTarget: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.DeleteDropTarget: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.FolderEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.InfoDropTarget: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.PagedViewIcon: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.launcher2.StrokedTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.mms.ui.RecipientsEditor: boolean shouldSpeakPasswordsForAccessibility()> (3)
<com.android.mms.ui.SearchActivity$TextViewSnippet: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.quicksearchbox.ui.QueryTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.settings.AccessibilitySettings$ToggleSwitch: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.settings.applications.RunningProcessesView$TimeTicker: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.systemui.statusbar.phone.CarrierLabel: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.systemui.statusbar.policy.Clock: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.systemui.statusbar.policy.DateView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.systemui.statusbar.RotationToggle: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long,int)> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> (2)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> (2)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (2)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: java.lang.String getKeyDescription(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.accessibility.AccessibilityUtils: void onStartInputViewInternal(android.view.View,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> (1)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> (1)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: void sendAccessibilityEvent(android.view.View,int)> (1)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.accessibility.ScreenMagnifier: boolean access$3000(android.content.Context)> (1)
<com.android.server.accessibility.ScreenMagnifier: void resetMagnificationIfNeeded()> (2)
<com.android.server.am.ActiveServices: void serviceTimeout(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService$8: void run()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run()> (1)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> (2)
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> (2)
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<com.android.server.net.NetworkPolicyManagerService: void readPolicyLocked()> (1)
<com.android.settings.AccessibilitySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.AccessibilitySettings: void access$200(com.android.settings.AccessibilitySettings)> (2)
<com.android.settings.AccessibilitySettings: void updateAllPreferences()> (1)
<com.android.settings.DevelopmentSettings: void access$100(com.android.settings.DevelopmentSettings)> (2)
<com.android.settings.DevelopmentSettings: void resetDangerousOptions()> (1)
<com.android.settings.DevelopmentSettings: void setPrefsEnabledState(boolean)> (3)
<com.android.settings.DreamBackend: boolean isActivatedOnDock()> (2)
<com.android.settings.DreamBackend: boolean isActivatedOnSleep()> (2)
<com.android.settings.DreamBackend: boolean isEnabled()> (4)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.systemui.statusbar.tablet.InputMethodButton: boolean needsToShowIMEButton()> (1)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrashInner(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.UiModeManagerService: void sendConfigurationAndStartDreamOrDockAppLocked(java.lang.String)> (2)
<com.android.systemui.Somnambulator: void onStart()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void <init>(android.content.Context)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onBootCompleted()> (1)
<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$400(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void switchUser(int)> (1)
<com.android.server.power.PowerManagerService: void access$1600(com.android.server.power.PowerManagerService)> (2)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: boolean isInputMethodSubtypeSelected(android.content.ContentResolver)> (1)
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtypeLocked()> (4)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (1)
<android.speech.tts.TextToSpeech: int initTts()> (3)
<com.android.settings.tts.TextToSpeechSettings: void getSampleText()> (1)
<android.speech.tts.TextToSpeechService: java.lang.String[] access$400(android.speech.tts.TextToSpeechService)> (4)
<android.speech.tts.TextToSpeechService: void onCreate()> (2)
<com.android.tts.compat.CompatTtsService: java.lang.String[] getSettingsLocale()> (1)
<com.svox.pico.PicoService: java.lang.String[] getSettingsLocale()> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: void updateVoiceDetails()> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.webkit.AccessibilityInjector: void toggleFallbackAccessibilityInjector(boolean)> (4)
<android.webkit.AccessibilityInjector: void access$300(android.webkit.AccessibilityInjector)> (1)
<com.android.browser.BrowserSettings: void updateConnectionType()> (3)
<com.android.browser.PreloadRequestReceiver: boolean isPreloadEnabledOnCurrentNetwork(android.content.Context)> (1)
<com.android.browser.SystemAllowGeolocationOrigins$1: void run()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: int determineSetupStepNumberFromLauncher()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onRestart()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void updateSetupStepView()> (4)
<com.android.providers.settings.SettingsBackupAgent: void restoreSettings(byte[],int,android.net.Uri,java.util.HashSet)> (2)
<com.android.server.am.CoreSettingsObserver: void <init>(com.android.server.am.ActivityManagerService)> (1)
<com.android.server.am.CoreSettingsObserver: void onChange(boolean)> (1)
<com.android.server.BluetoothManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.CertBlacklister$BlacklistObserver: void writeBlacklist()> (1)
<com.android.server.location.LocationFudger$1: void onChange(boolean)> (1)
<com.android.server.updates.CarrierProvisioningUrlsInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.CertPinInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver$1: void run()> (2)
<com.android.server.updates.IntentFirewallInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.SELinuxPolicyInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.SmsShortCodesInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.TZInfoInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onPreferenceToggled(java.lang.String,boolean)> (2)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void access$100(com.android.settings.inputmethod.InputMethodAndLanguageSettings)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void updateActiveInputMethodsSummary()> (1)
<com.android.settings.SettingsPreferenceFragment: void onPause()> (23)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void updateAutoSelectionCB()> (2)
<com.android.settings.inputmethod.InputMethodPreference: void setChecked(boolean,boolean)> (3)
<com.android.settings.NotificationAccessSettings$1: void onChange(boolean,android.net.Uri)> (1)
<com.android.settings.NotificationAccessSettings$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.NotificationAccessSettings: void onResume()> (1)
<com.android.settings.VoiceInputOutputSettings: void onCreate()> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void setImeWindowStatus(boolean)> (2)
<com.android.systemui.statusbar.tablet.InputMethodsPanel: void onFinishInflate()> (3)
<com.android.systemui.statusbar.tablet.InputMethodsPanel: void openPanel()> (1)
<com.android.settings.SecuritySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.AudioService: void readAudioSettings(boolean)> (2)
<android.media.AudioService: void access$5600(android.media.AudioService)> (1)
<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)> (1)
<android.media.AudioService$VolumeStreamState: void <init>(android.media.AudioService,java.lang.String,int)> (1)
<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)> ()
<android.media.AudioManager: boolean querySoundEffectsEnabled()> (1)
<android.text.method.TextKeyListener: void updatePrefs(android.content.ContentResolver)> (2)
<com.android.camera.CameraActivity: void onResume()> (4)
<com.android.camera.Util: boolean systemRotationLocked(android.app.Activity)> (2)
<com.android.deskclock.SettingsActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.dialer.dialpad.DialpadFragment: boolean onLongClick(android.view.View)> (1)
<com.android.gallery3d.app.OrientationManager: void resume()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void <init>(android.content.Context,com.android.internal.widget.LockPatternUtils)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void playSounds(boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: int getRecoveryAction()> (5)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setKeyboardMode(int)> (2)
<com.android.phone.ADNList: boolean isAirplaneModeOn(android.content.Context)> (3)
<com.android.phone.CallFeaturesSetting: boolean getVibrateWhenRinging(android.content.Context)> (2)
<com.android.phone.CallFeaturesSetting: boolean isAirplaneModeOn()> (1)
<com.android.phone.common.HapticFeedback: void checkSystemSetting()> (2)
<com.android.phone.DTMFTwelveKeyDialer: boolean useShortDtmfTones(com.android.internal.telephony.Phone,android.content.Context)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void startDialerSession()> (2)
<com.android.phone.EmergencyDialer: void onResume()> (1)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.ApplicationSettings: boolean isAdvancedSettingsEnabled()> (1)
<com.android.settings.DevelopmentSettings: void updatePointerLocationOptions()> (1)
<com.android.settings.DevelopmentSettings: void updateShowTouchesOptions()> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void updateGameControllers()> (1)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistLongPressAction()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void setSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy: int getUserRotationMode()> (1)
<com.android.settings.AccessibilitySettings: void updateLockScreenRotationCheckbox()> (2)
<com.android.settings.DisplaySettings: void updateAccelerometerRotationCheckbox()> (2)
<com.android.systemui.statusbar.phone.QuickSettings$12: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void onRotationLockChanged()> (4)
<com.android.systemui.statusbar.policy.AutoRotateController: void updateState()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (5)
<com.android.internal.policy.impl.keyguard.NumPadKey: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.settings.ConfirmLockPattern$ConfirmLockPatternFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void setGrabbedState(int)> (2)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.WaveView: void dispatchTriggerEvent(int)> (1)
<com.android.systemui.SearchPanelView: void access$300(com.android.systemui.SearchPanelView)> (1)
<com.android.systemui.SearchPanelView: void show(boolean,boolean)> (6)
<com.android.systemui.settings.BrightnessController$BrightnessStateChangeCallback: void onBrightnessLevelChanged()> (2)
<com.android.systemui.statusbar.phone.QuickSettingsModel$BrightnessObserver: void onChange(boolean)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void addBrightnessTile(com.android.systemui.statusbar.phone.QuickSettingsTileView,com.android.systemui.statusbar.phone.QuickSettingsModel$RefreshCallback)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void refreshBrightnessTile()> (1)
<android.hardware.input.InputManager: int getPointerSpeed(android.content.Context)> (2)
<android.webkit.WebSettingsClassic: void <init>(android.content.Context,android.webkit.WebViewClassic)> (1)
<com.android.contacts.common.preference.ContactsPreferences: int getDisplayOrder()> (8)
<com.android.contacts.common.preference.ContactsPreferences: int getSortOrder()> (7)
<com.android.phone.sip.SipSharedPreferences: boolean isReceivingCallsEnabled()> (5)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: boolean getBrightnessMode(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: int getBrightness(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleBrightness(android.content.Context)> (1)
<com.android.server.input.InputManagerService: void updatePointerSpeedFromSettings()> (3)
<com.android.server.input.InputManagerService: void updateShowTouchesFromSettings()> (3)
<com.android.server.VibratorService: void access$400(com.android.server.VibratorService)> (2)
<com.android.server.VibratorService: void onInputDeviceAdded(int)> (1)
<com.android.server.VibratorService: void onInputDeviceChanged(int)> (1)
<com.android.server.VibratorService: void onInputDeviceRemoved(int)> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<com.android.systemui.settings.BrightnessController: void access$000(com.android.systemui.settings.BrightnessController)> (2)
<com.android.systemui.settings.BrightnessController: void <init>(android.content.Context,android.widget.ImageView,com.android.systemui.settings.ToggleSlider)> (2)
<com.android.systemui.settings.BrightnessController: void access$100(com.android.systemui.settings.BrightnessController)> (2)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri endFile(android.media.MediaScanner$FileEntry,boolean,boolean,boolean,boolean,boolean)> (1)
<android.media.Ringtone: boolean playFallbackRingtone()> (1)
<android.media.Ringtone: java.lang.String getTitle(android.content.Context,android.net.Uri,boolean)> (2)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (3)
<com.android.deskclock.AlarmClock: void asyncAddAlarm()> (1)
<com.android.deskclock.AlarmPreference: android.net.Uri onRestoreRingtone()> (1)
<com.android.phone.CallFeaturesSetting: void updateRingtoneName(int,android.preference.Preference,int)> (1)
<com.android.phone.DefaultRingtonePreference: android.net.Uri onRestoreRingtone()> (1)
<com.android.providers.settings.SettingsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> (1)
<com.android.providers.settings.SettingsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.settings.DefaultRingtonePreference: android.net.Uri onRestoreRingtone()> (1)
<com.android.settings.SoundSettings: void updateRingtoneName(int,android.preference.Preference,int)> (1)
<android.text.format.DateFormat: java.lang.String getTimeFormatString(android.content.Context)> (2)
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)> (18)
<android.widget.TextClock: boolean is24HourModeEnabled()> (2)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: void updateView(android.widget.RemoteViews,com.android.deskclock.worldclock.CityObj,int,int,int,int)> (1)
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertAdapter: void updateView(android.content.Context,android.view.View,java.lang.String,java.lang.String,long,long,boolean)> (1)
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)> (2)
<com.android.calendar.AllInOneActivity: void updateSecondaryTitleFields(long)> (3)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void appendEventAccessibilityString(java.lang.StringBuilder,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void handleOnResume()> (2)
<com.android.calendar.DayView: void updateEventDetails()> (1)
<com.android.calendar.event.EditEventView$TimeClickListener: void onClick(android.view.View)> (1)
<com.android.calendar.event.EditEventView: void setTime(android.widget.TextView,long)> (3)
<com.android.calendar.event.EditEventView: void setWhenString()> (1)
<com.android.calendar.event.EditEventView: void updateHomeTime()> (4)
<com.android.calendar.month.MonthWeekEventsView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.OtherPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$EventInfo populateEventInfo(long,boolean,long,long,int,int,java.lang.String,java.lang.String,int,int)> (1)
<com.android.deskclock.Alarms: boolean get24HourMode(android.content.Context)> (6)
<com.android.internal.policy.impl.keyguard.ClockView: void setDateFormat()> (2)
<com.android.settings.DateTimeSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DateTimeSettings: boolean is24Hour()> (1)
<com.android.systemui.statusbar.policy.Clock: java.lang.CharSequence getSmallTime()> (1)
<com.android.timezonepicker.TimeZoneData: void <init>(android.content.Context,java.lang.String,long)> (1)
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)> (3)
<android.net.http.SslCertificate: java.lang.String formatCertificateDate(android.content.Context,java.util.Date)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.contacts.datepicker.DatePicker: void reorderPickers(java.lang.String[])> (2)
<com.android.contacts.util.DateUtils: java.lang.String formatDate(android.content.Context,java.lang.String,boolean)> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (6)
<com.android.settings.DateTimeSettings: void updateTimeAndDateDisplay(android.content.Context)> (8)
<android.widget.DateTimeView: void update()> (3)
<com.android.alarmclock.DigitalAppWidgetProvider: void updateClock(android.content.Context,android.appwidget.AppWidgetManager,int,float)> (2)
<com.android.alarmclock.DigitalWidgetViewsFactory: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.ClockFragment$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.ClockFragment: void onResume()> (1)
<com.android.deskclock.ScreensaverActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.ScreensaverActivity: void layoutClockSaver()> (2)
<com.android.phone.CallFeaturesSetting: void createSipCallSettings()> (1)
<com.android.phone.SipCallOptionHandler: void onCreate(android.os.Bundle)> (1)
<com.android.server.am.ServiceRecord$1: void run()> (1)
<com.android.server.NotificationManagerService: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)> (2)
<com.android.settings.DateTimeSettings: void initUI()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: void refresh()> (3)
<com.android.systemui.settings.CurrentUserTracker: void onUserSwitched(int)> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: android.util.Pair getLastInputMethodAndSubtypeLocked()> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getLastSubtypeForInputMethodLocked(java.lang.String)> (1)
<com.android.server.InputMethodManagerService: android.util.Pair findLastResortApplicableShortcutInputMethodAndSubtypeLocked(java.lang.String)> (1)
<com.android.server.InputMethodManagerService: boolean chooseNewDefaultIMELocked()> (4)
<com.android.server.InputMethodManagerService: boolean needsToShowImeSwitchOngoingNotification()> (1)
<com.android.server.InputMethodManagerService: boolean switchToLastInputMethod(android.os.IBinder)> (2)
<com.android.server.InputMethodManagerService: java.util.HashMap getExplicitlyOrImplicitlyEnabledInputMethodsAndSubtypeListLocked()> (2)
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()> (2)
<com.android.server.InputMethodManagerService: void resetDefaultImeLocked(android.content.Context)> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.content.Context,android.view.inputmethod.InputMethodInfo,boolean)> (5)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.app.ResolverActivity$1: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (15)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.am.UsageStatsService$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.LocationManagerService$4: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.ServiceWatcher$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.am.UsageStatsService$2: void onSomePackagesChanged()> (1)
<com.android.server.LocationManagerService$4: void onSomePackagesChanged()> (1)
<com.android.server.ServiceWatcher$2: void onSomePackagesChanged()> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService: void access$1100(com.android.server.InputMethodManagerService)> (1)
<com.android.server.InputMethodManagerService$3: void onUserSwitching(int,android.os.IRemoteCallback)> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void saveCurrentInputMethodAndSubtypeToHistory(java.lang.String,android.view.inputmethod.InputMethodSubtype)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.location.LocationBlacklist: void init()> (1)
<com.android.server.location.LocationBlacklist: void onChange(boolean)> (1)
<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.StatusBarManagerService,com.android.server.LightsService)> (1)
<com.android.server.RecognitionManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> (1)
<com.android.internal.textservice.ITextServicesManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> (2)
<com.android.server.TextServicesManagerService: void access$800(com.android.server.TextServicesManagerService,java.lang.String)> (1)
<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)> (2)
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)> (2)
<com.android.server.TextServicesManagerService: void access$100(com.android.server.TextServicesManagerService,int)> (1)
<com.android.server.TextServicesManagerService: void <init>(android.content.Context)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void updateUi()> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void onClick(android.view.View)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void updateUnlockMethodAndFinish(int,boolean)> (2)
<com.android.settings.CryptKeeperSettings$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardTimeout(android.os.Bundle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.PhoneWindowManager: void waitForKeyguard(android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)> (3)
<com.android.server.DevicePolicyManagerService$1$1: void run()> (1)
<com.android.server.DevicePolicyManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)> (2)
<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> (2)
<com.android.server.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int)> (3)
<com.android.server.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: boolean isActivePasswordSufficient(int)> (2)
<com.android.server.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)> (2)
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int,int)> (2)
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)> (21)
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)> (22)
<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int)> (2)
<com.android.server.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> (3)
<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)> (4)
<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean,int)> (2)
<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins(int)> (2)
<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)> (3)
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.DevicePolicyManagerService: void handlePackagesChanged(int)> (1)
<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)> (2)
<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)> (2)
<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)> (23)
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)> (3)
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)> (2)
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,int)> (2)
<com.android.server.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> (2)
<com.android.server.DevicePolicyManagerService: void updatePasswordExpirationsLocked(int)> (1)
<com.android.settings.CredentialStorage: void access$600(com.android.settings.CredentialStorage)> (1)
<com.android.settings.CredentialStorage: void access$700(com.android.settings.CredentialStorage)> (1)
<com.android.settings.CredentialStorage: void onResume()> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (38)
<com.android.settings.MasterClear: boolean access$000(com.android.settings.MasterClear,int)> (1)
<com.android.settings.MediaFormat: boolean access$000(com.android.settings.MediaFormat,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void verifyPasswordAndUnlock()> (3)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: void handleNext()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void onWindowFocusChanged(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void onWindowFocusChanged(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void onWindowFocusChanged(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void onWindowFocusChanged(boolean)> (4)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.server.power.Notifier: void sendGoToSleepBroadcast(int)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void reportFailedUnlockAttempt()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewManager$ViewManagerHost: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void dismiss(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void dismiss()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void onScreenTurnedOff()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void onScreenTurnedOff()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void onScreenTurnedOn()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void show()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void show(android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: com.android.internal.policy.impl.keyguard.CameraWidgetFrame create(android.content.Context,com.android.internal.policy.impl.keyguard.CameraWidgetFrame$Callbacks,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo getCameraWidgetInfo()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo getCameraWidgetInfo()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$19: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleShow(android.os.Bundle)> (1)
<android.view.WindowManagerPolicy: boolean isKeyguardSecure()> (1)
<android.view.WindowManagerPolicy: int finishPostLayoutPolicyLw()> (1)
<android.view.WindowManagerPolicy: void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (2)
<com.android.settings.users.UserSettings$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (11)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void access$000(com.android.internal.policy.impl.keyguard.KeyguardMessageArea,int,boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void <init>(android.content.Context)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$Helper: void setMessage(int,boolean,java.lang.Object[])> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$Helper: void setMessage(int,boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$Helper: void setMessage(java.lang.CharSequence,boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: void onScrollStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void showBackupSecurity()> (1)
<com.android.settings.LocationSettings$1: void update(java.util.Observable,java.lang.Object)> ()
<com.android.settings.LocationSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<com.android.settings.wifi.WifiSettings: void forget()> (1)
<com.android.settings.wifi.WifiSettings: void handleEvent(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiSettings: void submit(com.android.settings.wifi.WifiConfigController)> (2)
<com.android.server.LocationManagerService$1: void opChanged(int,java.lang.String)> (1)
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService$4: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.LocationManagerService$Receiver: void binderDied()> (1)
<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)> (3)
<com.android.server.LocationManagerService$2: void onChange(boolean)> (1)
<com.android.server.LocationManagerService: void access$300(com.android.server.LocationManagerService,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onActionTapAndHold(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onActionTap(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$MagnifiedContentInteractonStateHandler: void onMotionEvent(android.view.MotionEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (2)
<android.inputmethodservice.KeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (2)
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (5)
<com.android.internal.widget.PasswordEntryKeyboardView: void showPreview(int)> (1)
<android.speech.tts.TextToSpeechService: int access$600(android.speech.tts.TextToSpeechService)> (3)
<com.android.tts.compat.CompatTtsService: int getDefaultSpeechRate()> (1)
<com.svox.pico.PicoService: int getDefaultSpeechRate()> (1)
<android.webkit.AccessibilityInjector: void onPageFinished(java.lang.String)> (1)
<android.inputmethodservice.ExtractButton: boolean access$900(android.widget.TextView)> (1)
<android.inputmethodservice.ExtractEditText: boolean access$900(android.widget.TextView)> (1)
<android.widget.AutoCompleteTextView: boolean access$900(android.widget.TextView)> (1)
<android.widget.Button: boolean access$900(android.widget.TextView)> (1)
<android.widget.CheckBox: boolean access$900(android.widget.TextView)> (2)
<android.widget.CheckedTextView: boolean access$900(android.widget.TextView)> (1)
<android.widget.Chronometer: boolean access$900(android.widget.TextView)> (1)
<android.widget.CompoundButton: boolean access$900(android.widget.TextView)> (1)
<android.widget.DateTimeView: boolean access$900(android.widget.TextView)> (1)
<android.widget.DigitalClock: boolean access$900(android.widget.TextView)> (1)
<android.widget.EditText: boolean access$900(android.widget.TextView)> (1)
<android.widget.MultiAutoCompleteTextView: boolean access$900(android.widget.TextView)> (1)
<android.widget.NumberPicker$CustomEditText: boolean access$900(android.widget.TextView)> (1)
<android.widget.RadioButton: boolean access$900(android.widget.TextView)> (2)
<android.widget.SearchView$SearchAutoComplete: boolean access$900(android.widget.TextView)> (1)
<android.widget.Switch: boolean access$900(android.widget.TextView)> (2)
<android.widget.TextClock: boolean access$900(android.widget.TextView)> (1)
<android.widget.TextView$ChangeWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.ToggleButton: boolean access$900(android.widget.TextView)> (2)
<com.android.browser.UrlInputView: boolean access$900(android.widget.TextView)> (1)
<com.android.calculator2.CalculatorEditText: boolean access$900(android.widget.TextView)> (1)
<com.android.calculator2.ColorButton: boolean access$900(android.widget.TextView)> (1)
<com.android.calendar.MultiStateButton: boolean access$900(android.widget.TextView)> (1)
<com.android.calendar.recurrencepicker.WeekButton: boolean access$900(android.widget.TextView)> (3)
<com.android.camera.ui.Switch: boolean access$900(android.widget.TextView)> (2)
<com.android.datetimepicker.AccessibleTextView: boolean access$900(android.widget.TextView)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: boolean access$900(android.widget.TextView)> (1)
<com.android.deskclock.AndroidClockTextView: boolean access$900(android.widget.TextView)> (1)
<com.android.deskclock.ZeroTopPaddingTextView: boolean access$900(android.widget.TextView)> (1)
<com.android.development.LogTextBox: boolean access$900(android.widget.TextView)> (1)
<com.android.dialer.dialpad.DigitsEditText: boolean access$900(android.widget.TextView)> (1)
<com.android.dialer.dialpad.SmartDialTextView: boolean access$900(android.widget.TextView)> (1)
<com.android.dreams.phototable.BummerView: boolean access$900(android.widget.TextView)> (1)
<com.android.email.activity.AddressTextView: boolean access$900(android.widget.TextView)> (2)
<com.android.email.activity.ChipsAddressTextView: boolean access$900(android.widget.TextView)> (3)
<com.android.ex.chips.RecipientEditTextView: boolean access$900(android.widget.TextView)> (2)
<com.android.ex.editstyledtext.EditStyledText: boolean access$900(android.widget.TextView)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: boolean access$900(android.widget.TextView)> (1)
<com.android.gallery3d.filtershow.ui.FilterIconButton: boolean access$900(android.widget.TextView)> (2)
<com.android.gallery3d.filtershow.ui.IconButton: boolean access$900(android.widget.TextView)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: boolean access$900(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: boolean access$900(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton: boolean access$900(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: boolean access$900(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.NumPadKey: boolean access$900(android.widget.TextView)> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean access$900(android.widget.TextView)> (1)
<com.android.internal.view.menu.IconMenuItemView: boolean access$900(android.widget.TextView)> (1)
<com.android.internal.widget.DialogTitle: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.AccessibleTabView: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.BubbleTextView: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.ButtonDropTarget: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.DeleteDropTarget: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.FolderEditText: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.InfoDropTarget: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.PagedViewIcon: boolean access$900(android.widget.TextView)> (1)
<com.android.launcher2.StrokedTextView: boolean access$900(android.widget.TextView)> (1)
<com.android.mms.ui.RecipientsEditor: boolean access$900(android.widget.TextView)> (3)
<com.android.mms.ui.SearchActivity$TextViewSnippet: boolean access$900(android.widget.TextView)> (1)
<com.android.quicksearchbox.ui.QueryTextView: boolean access$900(android.widget.TextView)> (1)
<com.android.settings.AccessibilitySettings$ToggleSwitch: boolean access$900(android.widget.TextView)> (2)
<com.android.settings.applications.RunningProcessesView$TimeTicker: boolean access$900(android.widget.TextView)> (1)
<com.android.systemui.statusbar.phone.CarrierLabel: boolean access$900(android.widget.TextView)> (1)
<com.android.systemui.statusbar.policy.Clock: boolean access$900(android.widget.TextView)> (1)
<com.android.systemui.statusbar.policy.DateView: boolean access$900(android.widget.TextView)> (1)
<com.android.systemui.statusbar.RotationToggle: boolean access$900(android.widget.TextView)> (2)
<android.inputmethodservice.ExtractButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.inputmethodservice.ExtractEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.AutoCompleteTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.Button: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.CheckBox: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<android.widget.CheckedTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.Chronometer: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.CompoundButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (5)
<android.widget.DateTimeView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.DigitalClock: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.EditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.MultiAutoCompleteTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<android.widget.NumberPicker$CustomEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.RadioButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<android.widget.SearchView$SearchAutoComplete: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<android.widget.TextClock: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.ToggleButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<com.android.browser.UrlInputView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<com.android.calculator2.ColorButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.calendar.MultiStateButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.calendar.recurrencepicker.WeekButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (5)
<com.android.datetimepicker.AccessibleTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.deskclock.AndroidClockTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.deskclock.ZeroTopPaddingTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.development.LogTextBox: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.dialer.dialpad.DigitsEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.dialer.dialpad.SmartDialTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.dreams.phototable.BummerView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.email.activity.AddressTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (5)
<com.android.email.activity.ChipsAddressTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (6)
<com.android.ex.chips.RecipientEditTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (5)
<com.android.ex.editstyledtext.EditStyledText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.gallery3d.filtershow.editors.SwapButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.gallery3d.filtershow.ui.FilterIconButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<com.android.gallery3d.filtershow.ui.IconButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.internal.policy.impl.keyguard.CarrierText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.internal.policy.impl.keyguard.NumPadKey: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.internal.view.menu.ActionMenuItemView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.internal.view.menu.IconMenuItemView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.internal.widget.DialogTitle: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.launcher2.AccessibleTabView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.launcher2.BubbleTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.launcher2.ButtonDropTarget: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.launcher2.DeleteDropTarget: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.launcher2.FolderEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.launcher2.InfoDropTarget: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.launcher2.PagedViewIcon: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.launcher2.StrokedTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.mms.ui.RecipientsEditor: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (6)
<com.android.mms.ui.SearchActivity$TextViewSnippet: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.quicksearchbox.ui.QueryTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.settings.applications.RunningProcessesView$TimeTicker: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.systemui.statusbar.phone.CarrierLabel: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.systemui.statusbar.policy.Clock: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.systemui.statusbar.policy.DateView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.systemui.statusbar.RotationToggle: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment,android.widget.ProgressBar)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.view.accessibility.AccessibilityEvent createAccessibilityEvent(com.android.inputmethod.keyboard.Key,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver: void handleOnScreenStateChange(java.lang.String)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnRotationChanged(int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnUserContextChanged()> (1)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> ()
<android.location.ILocationManager$Stub: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderStatus(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeTestProvider(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.ILocationManager$Stub: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.ILocationManager$Stub: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<android.location.ILocationManager$Stub: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<com.android.server.net.NetworkPolicyManagerService: void systemReady()> (1)
<com.android.settings.AccessibilitySettings$1: void dispatchMessage(android.os.Message)> (1)
<com.android.settings.AccessibilitySettings$2: void onChange(boolean,android.net.Uri)> (2)
<com.android.settings.DevelopmentSettings$ConfirmEnforceFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DevelopmentSettings$ConfirmEnforceFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DevelopmentSettings: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DevelopmentSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DevelopmentSettings: void onResume()> (2)
<com.android.settings.DreamSettings: android.app.Dialog createWhenToDreamDialog()> (1)
<com.android.settings.DreamSettings: int getSummaryResource(android.content.Context)> ()
<com.android.settings.DreamSettings: java.lang.CharSequence getSummaryTextWithDreamName(android.content.Context)> (1)
<com.android.settings.DreamSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DreamSettings: void refreshFromBackend()> (2)
<com.android.systemui.statusbar.tablet.InputMethodButton: void refreshStatusIcon()> (4)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener$NativeCrashReporter: void run()> (2)
<com.android.server.UiModeManagerService: void updateAfterBroadcastLocked(java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService: void updateLocked(int,int)> (7)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onDevicePolicyManagerStateChanged()> (10)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (8)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onBootCompleted()> (9)
<com.android.server.accessibility.AccessibilityManagerService$1: void onSomePackagesChanged()> (1)
<com.android.server.accessibility.AccessibilityManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void access$800(com.android.server.accessibility.AccessibilityManagerService,int)> (1)
<com.android.server.power.PowerManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService: void setInputMethodLocked(java.lang.String,int)> (4)
<com.android.server.InputMethodManagerService: void setSelectedInputMethodAndSubtypeLocked(android.view.inputmethod.InputMethodInfo,int,boolean)> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: void enter()> (1)
<android.speech.tts.TextToSpeech: int access$1700(android.speech.tts.TextToSpeech)> (1)
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)> ()
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String,java.lang.String,boolean)> (2)
<com.android.settings.tts.TextToSpeechSettings: boolean onPreferenceClick(android.preference.Preference)> (1)
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getClientDefaultLanguage()> (2)
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.Object,int,int,android.os.Bundle,java.lang.String)> (3)
<com.android.tts.compat.CompatTtsService: java.lang.String[] access$400(android.speech.tts.TextToSpeechService)> (1)
<com.svox.pico.PicoService: java.lang.String[] access$400(android.speech.tts.TextToSpeechService)> (1)
<com.android.tts.compat.CompatTtsService: void onCreate()> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<android.webkit.AccessibilityInjector: boolean handleKeyEventIfNecessary(android.view.KeyEvent)> (2)
<android.webkit.AccessibilityInjector: boolean performAccessibilityAction(int,android.os.Bundle)> (1)
<android.webkit.AccessibilityInjector$1: void run()> (1)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.NetworkStateHandler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NetworkStateHandler: void onResume()> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onCreate(android.os.Bundle)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onBackPressed()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onResume()> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)> (2)
<com.android.providers.settings.SettingsBackupAgent: void restoreSettings(android.app.backup.BackupDataInput,android.net.Uri,java.util.HashSet)> (1)
<com.android.server.am.ActivityManagerService: void installSystemProviders()> (1)
<com.android.server.CertBlacklister$BlacklistObserver: void onChange(boolean)> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (7)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onPreferenceToggled(java.lang.String,boolean)> ()
<com.android.settings.inputmethod.InputMethodAndLanguageSettings$SettingsObserver: void onChange(boolean)> (1)
<com.android.settings.AccessibilitySettings: void onPause()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onPause()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onPause()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onPause()> (3)
<com.android.settings.DateTimeSettings: void onPause()> (3)
<com.android.settings.deviceinfo.Memory: void onPause()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onPause()> (3)
<com.android.settings.DisplaySettings: void onPause()> (3)
<com.android.settings.DreamSettings: void onPause()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onPause()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onPause()> (3)
<com.android.settings.NotificationStation: void onPause()> (3)
<com.android.settings.SoundSettings: void onPause()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onPause()> (3)
<com.android.settings.vpn2.VpnSettings: void onPause()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onPause()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onPause()> (3)
<com.android.settings.wifi.WifiSettings: void onPause()> (3)
<com.android.settings.WirelessSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodPreference$1: void onClick(android.view.View)> (1)
<com.android.settings.inputmethod.InputMethodPreference$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.inputmethod.InputMethodPreference: void setChecked(boolean)> (2)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setImeWindowStatus(android.os.IBinder,int,int)> (1)
<com.android.systemui.statusbar.phone.SettingsPanelView: void setImeWindowStatus(boolean)> ()
<android.media.AudioService: void access$9300(android.media.AudioService,boolean)> (1)
<android.media.AudioService: void reloadAudioSettings()> (2)
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<android.media.AudioService$VolumeStreamState: void <init>(android.media.AudioService,java.lang.String,int,android.media.AudioService$1)> (1)
<android.media.AudioManager: void playSoundEffect(int)> (2)
<android.text.method.TextKeyListener: void access$200(android.text.method.TextKeyListener,android.content.ContentResolver)> (1)
<android.text.method.TextKeyListener: void initPrefs(android.content.Context)> (1)
<com.android.camera.ActivityBase: void onResume()> (3)
<com.android.camera.SecureCameraActivity: void onResume()> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (6)
<com.android.camera.VideoModule: boolean stopVideoRecording()> (4)
<com.android.camera.VideoModule: void startVideoRecording()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataStallAlarm(int)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void restartDataStallAlarm()> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void startDataStallAlarm(boolean)> (6)
<com.android.internal.telephony.dataconnection.DcTracker: int getRecoveryAction()> (1)
<com.android.phone.ADNList: void displayProgress(boolean)> (4)
<com.android.phone.FdnList: boolean isAirplaneModeOn(android.content.Context)> (1)
<com.android.phone.SimContacts: boolean isAirplaneModeOn(android.content.Context)> (1)
<com.android.phone.Ringer: boolean shouldVibrate()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void startTone(char,boolean)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.OtaUtils: void initOtaInCallScreen()> (1)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void updateInputDevices()> (5)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<android.view.WindowManagerPolicy: void setSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: boolean isRotationFrozen()> (2)
<com.android.settings.AccessibilitySettings: void access$300(com.android.settings.AccessibilitySettings)> (1)
<com.android.settings.DisplaySettings: void access$000(com.android.settings.DisplaySettings)> (1)
<com.android.settings.DisplaySettings: void updateState()> (1)
<com.android.systemui.statusbar.phone.QuickSettings$1: void onChange()> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void addRotationLockTile(com.android.systemui.statusbar.phone.QuickSettingsTileView,com.android.systemui.statusbar.phone.QuickSettingsModel$RefreshCallback)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void refreshRotationLockTile()> (1)
<com.android.systemui.statusbar.policy.AutoRotateController: void access$000(com.android.systemui.statusbar.policy.AutoRotateController)> (1)
<com.android.systemui.statusbar.policy.AutoRotateController: void <init>(android.content.Context,android.widget.CompoundButton,com.android.systemui.statusbar.policy.AutoRotateController$RotationLockCallbacks)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (2)
<com.android.internal.policy.impl.keyguard.NumPadKey: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.multiwaveview.MultiWaveView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void waveUpdateFrame(float,float,boolean)> (2)
<com.android.systemui.SearchPanelView$GlowPadTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void updateSearchPanel()> (3)
<com.android.systemui.statusbar.BaseStatusBar: void showSearchPanel()> (5)
<com.android.systemui.statusbar.BaseStatusBar: void hideSearchPanel()> (6)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void animateCollapsePanels(int)> (5)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void animateCollapsePanels(int)> (3)
<com.android.systemui.settings.BrightnessController$BrightnessObserver: void onChange(boolean,android.net.Uri)> (2)
<com.android.systemui.settings.BrightnessController: void onChanged(com.android.systemui.settings.ToggleSlider,boolean,boolean,int)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void addUserTiles(android.view.ViewGroup,android.view.LayoutInflater)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void updateResources()> (1)
<com.android.settings.PointerSpeedPreference: void onBindDialogView(android.view.View)> (2)
<com.android.settings.PointerSpeedPreference: void onSpeedChanged()> (1)
<android.webkit.WebViewCore: void <init>(android.content.Context,android.webkit.WebViewClassic,android.webkit.CallbackProxy,java.util.Map)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: boolean loadPreferences()> (10)
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.CharSequence getDisplayName(android.content.Context,com.android.contacts.model.Contact)> (2)
<com.android.contacts.preference.DisplayOrderPreference: boolean persistString(java.lang.String)> (3)
<com.android.contacts.preference.DisplayOrderPreference: java.lang.CharSequence getSummary()> (3)
<com.android.contacts.preference.DisplayOrderPreference: void prepare()> (2)
<com.android.dialer.dialpad.DialpadFragment: void initializeSmartDialingState()> (1)
<com.android.dialer.list.PhoneFavoriteFragment: boolean loadContactsPreferences()> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onAttach(android.app.Activity)> (1)
<com.android.contacts.GroupMemberLoader: void <init>(android.content.Context,long,java.lang.String[])> (2)
<com.android.contacts.preference.SortOrderPreference: boolean persistString(java.lang.String)> (3)
<com.android.contacts.preference.SortOrderPreference: java.lang.CharSequence getSummary()> (3)
<com.android.contacts.preference.SortOrderPreference: void prepare()> (2)
<com.android.phone.sip.SipEditor: android.net.sip.SipProfile createSipProfile()> (1)
<com.android.phone.sip.SipEditor: void unregisterOldPrimaryAccount()> (1)
<com.android.phone.sip.SipSettings$SipPreference: void setProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void registerForReceiveCallsCheckBox()> (1)
<com.android.phone.sip.SipSettings: void retrieveSipLists()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.input.InputManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.input.InputManagerService$7: void onChange(boolean)> (1)
<com.android.server.input.InputManagerService: void start()> (1)
<com.android.server.input.InputManagerService$8: void onChange(boolean)> (1)
<com.android.server.VibratorService$1: void onChange(boolean)> (1)
<com.android.server.VibratorService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.settings.BrightnessController$1: void onUserSwitched(int)> (1)
<com.android.systemui.settings.BrightnessDialog: void onStart()> (1)
<com.android.systemui.statusbar.tablet.SettingsView: void onFinishInflate()> (3)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri doScanFile(java.lang.String,java.lang.String,long,long,boolean,boolean,boolean)> (3)
<android.media.Ringtone: void play()> (10)
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)> (4)
<android.view.VolumePanel: void onRemoteVolumeChanged(int,int)> (1)
<android.view.VolumePanel: void onRemoteVolumeUpdateIfShown()> (1)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (2)
<com.android.deskclock.AlarmClock: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.phone.CallFeaturesSetting: void access$1500(com.android.phone.CallFeaturesSetting,int,android.preference.Preference,int)> (1)
<com.android.settings.SoundSettings: void access$300(com.android.settings.SoundSettings,int,android.preference.Preference,int)> (1)
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)> (4)
<android.widget.DigitalClock: void setFormat()> (2)
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int)> (2)
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.String formatDateString(int)> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (2)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildDayOfWeek()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildFullDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildMonthDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildMonthDayDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildMonthYearDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildWeekDate()> (1)
<com.android.calendar.month.MonthWeekEventsView: int drawEvent(android.graphics.Canvas,com.android.calendar.Event,int,int,int,boolean,boolean,boolean)> (1)
<com.android.datetimepicker.date.SimpleMonthView: java.lang.String getMonthAndYearString()> (1)
<com.android.settings.DataUsageSummary: java.lang.String formatDateRange(android.content.Context,long,long)> (3)
<com.android.timezonepicker.TimeZoneInfo: java.lang.CharSequence getGmtDisplayName(android.content.Context)> (1)
<android.widget.TextClock: void chooseFormat(boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int getClockFlags(android.widget.TextClock)> (2)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)> (1)
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> (1)
<com.android.calendar.AllInOneActivity: void access$700(com.android.calendar.AllInOneActivity,long)> (1)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void setTitleInActionBar(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: void sendAccessibilityEventAsNeeded(boolean)> (2)
<com.android.calendar.DayFragment: void onResume()> (1)
<com.android.calendar.DayView: void init(android.content.Context)> (1)
<com.android.calendar.DayView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.event.EditEventView: void access$400(com.android.calendar.event.EditEventView,android.widget.TextView,long)> (2)
<com.android.calendar.event.EditEventView: void populateWhen()> (1)
<com.android.calendar.event.EditEventView: void setAllDayViewsVisibility(boolean)> (3)
<com.android.calendar.event.EditEventView: void setViewStates(int)> (1)
<com.android.calendar.event.EditEventView: void access$500(com.android.calendar.event.EditEventView)> (2)
<com.android.calendar.event.EditEventView: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView: void setModification(int)> (3)
<com.android.calendar.month.SimpleWeekView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.EventInfoFragment: void updateEvent(android.view.View)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: void buildFromCursor(android.database.Cursor,java.lang.String)> (1)
<com.android.deskclock.Alarms: java.lang.String formatDayAndTime(android.content.Context,java.util.Calendar)> (1)
<com.android.deskclock.Alarms: java.lang.String formatTime(android.content.Context,java.util.Calendar)> (3)
<com.android.deskclock.DigitalClock: void setDateFormat()> (2)
<com.android.deskclock.DigitalClock: void updateTime()> (5)
<com.android.deskclock.TimePicker: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void set24HoursMode(android.content.Context)> (2)
<com.android.internal.policy.impl.keyguard.ClockView: void access$200(com.android.internal.policy.impl.keyguard.ClockView)> (1)
<com.android.internal.policy.impl.keyguard.ClockView: void onFinishInflate()> (3)
<com.android.settings.SettingsPreferenceFragment: android.app.Dialog onCreateDialog(int)> (34)
<com.android.systemui.statusbar.policy.Clock: void updateClock()> (2)
<com.android.timezonepicker.TimeZonePickerView: void <init>(android.content.Context,android.util.AttributeSet,java.lang.String,long,com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener,boolean)> (1)
<android.widget.DatePicker: void reorderSpinners()> (1)
<com.android.contacts.util.DateUtils: boolean isMonthBeforeDay(android.content.Context)> (1)
<android.net.http.SslCertificate: android.view.View inflateCertificateView(android.content.Context)> (2)
<com.android.contacts.datepicker.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.contacts.datepicker.DatePicker: void updateDate(int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void rebuildDateView()> (3)
<com.android.contacts.util.DateUtils: java.lang.String formatDate(android.content.Context,java.lang.String)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.SyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (42)
<com.android.settings.DateTimeSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.DateTimeSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.settings.DateTimeSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.DateTimeSettings: void onDateSet(android.widget.DatePicker,int,int,int)> (1)
<com.android.settings.DateTimeSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.settings.DateTimeSettings: void onTimeSet(android.widget.TimePicker,int,int)> (1)
<android.widget.DateTimeView$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.widget.DateTimeView$2: void onChange(boolean)> (1)
<android.widget.DateTimeView: void setTime(long)> (1)
<com.android.alarmclock.DigitalAppWidgetProvider: void onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle)> (1)
<com.android.alarmclock.DigitalAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.deskclock.ScreensaverActivity: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.deskclock.ScreensaverActivity: void onResume()> (1)
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)> ()
<android.app.INotificationManager$Stub: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)> (2)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: void onFinishInflate()> (3)
<com.android.systemui.settings.CurrentUserTracker: void onReceive(android.content.Context,android.content.Intent)> (3)
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService: void resetSelectedInputMethodAndSubtypeLocked(java.lang.String)> (3)
<com.android.server.InputMethodManagerService: java.util.List getShortcutInputMethodsAndSubtypes()> (2)
<com.android.server.InputMethodManagerService: boolean access$300(com.android.server.InputMethodManagerService)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToLastInputMethod(android.os.IBinder)> ()
<com.android.internal.view.IInputMethodManager$Stub: boolean switchToLastInputMethod(android.os.IBinder)> (2)
<com.android.server.InputMethodManagerService: java.util.HashMap access$1700(com.android.server.InputMethodManagerService)> (1)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodList()> ()
<com.android.internal.view.IInputMethodManager$Stub: java.util.List getEnabledInputMethodList()> (2)
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> (2)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.app.ResolverActivity$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.accessibility.AccessibilityManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.am.UsageStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.LocationManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.ServiceWatcher$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.app.IUserSwitchObserver$Stub$Proxy: void onUserSwitching(int,android.os.IRemoteCallback)> ()
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<com.android.server.power.PowerManagerService: void access$1900(com.android.server.power.PowerManagerService)> (2)
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)> (4)
<com.android.server.TextServicesManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()> (2)
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)> (1)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellChecker(java.lang.String,java.lang.String)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: void setCurrentSpellChecker(java.lang.String,java.lang.String)> (2)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellCheckerSubtype(java.lang.String,int)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: void setCurrentSpellCheckerSubtype(java.lang.String,int)> (2)
<com.android.server.TextServicesManagerService$1: void onUserSwitching(int,android.os.IRemoteCallback)> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void afterTextChanged(android.text.Editable)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void updateStage(com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment$Stage)> (4)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void updatePreferencesOrFinish()> (2)
<com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView$1: void run()> (1)
<com.android.providers.settings.DatabaseHelper: void upgradeLockPatternLocation(android.database.sqlite.SQLiteDatabase)> (1)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getGlobalProxyAdmin(int)> ()
<android.app.admin.IDevicePolicyManager$Stub: android.content.ComponentName getGlobalProxyAdmin(int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean getCameraDisabled(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)> (5)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean getStorageEncryption(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isActivePasswordSufficient(int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean isActivePasswordSufficient(int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean packageHasActiveAdmins(java.lang.String,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean resetPassword(java.lang.String,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void lockNow()> (2)
<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: void wipeData(int,int)> (2)
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> (2)
<com.android.server.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> (2)
<com.android.server.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void removeActiveAdminLocked(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getCurrentFailedPasswordAttempts(int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getCurrentFailedPasswordAttempts(int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordHistoryLength(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordMinimumLength(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordMinimumLetters(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordMinimumNumeric(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordMinimumSymbols(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int getPasswordQuality(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setStorageEncryption(android.content.ComponentName,boolean,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: int setStorageEncryption(android.content.ComponentName,boolean,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getActiveAdmins(int)> ()
<android.app.admin.IDevicePolicyManager$Stub: java.util.List getActiveAdmins(int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: long getMaximumTimeToLock(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)> (3)
<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)> (3)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: long getPasswordExpirationTimeout(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void access$100(com.android.server.DevicePolicyManagerService,int)> (1)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportFailedPasswordAttempt(int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void reportFailedPasswordAttempt(int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportSuccessfulPasswordAttempt(int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void reportSuccessfulPasswordAttempt(int)> (2)
<com.android.server.DevicePolicyManagerService: void access$300(com.android.server.DevicePolicyManagerService,int)> (1)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setActiveAdmin(android.content.ComponentName,boolean,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCameraDisabled(android.content.ComponentName,boolean,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setCameraDisabled(android.content.ComponentName,boolean,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumTimeToLock(android.content.ComponentName,long,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setMaximumTimeToLock(android.content.ComponentName,long,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> (2)
<com.android.settings.CredentialStorage$UnlockDialog: void onDismiss(android.content.DialogInterface)> (1)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate(android.os.Bundle)> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.MasterClear$1: void onClick(android.view.View)> (1)
<com.android.settings.MediaFormat$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void verifyPasswordAndUnlock()> (2)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: void onClick(android.view.View)> (1)
<com.android.server.power.Notifier: void sendNextBroadcast()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2200(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,int)> (8)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void reportFailedUnlockAttempt()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void dismiss(boolean)> (11)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void dismiss()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleNotifyScreenOff()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleNotifyScreenOn(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1900(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onPhoneStateChanged(int)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void addDefaultWidgets()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1700(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2500(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.server.wm.WindowManagerService: boolean isKeyguardSecure()> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<android.view.WindowManagerPolicy: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleBatteryUpdate(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void sendUpdates(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onRefreshBatteryInfo(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$Helper: void showBouncer(int)> (1)
<com.android.internal.policy.impl.keyguard.SecurityMessageDisplay: void setMessage(int,boolean,java.lang.Object[])> (2)
<com.android.internal.policy.impl.keyguard.SecurityMessageDisplay: void setMessage(int,boolean)> (13)
<com.android.internal.policy.impl.keyguard.SecurityMessageDisplay: void setMessage(java.lang.CharSequence,boolean)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$OnChallengeScrolledListener: void onScrollStateChanged(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void showBackupSecurity()> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiSettings: void access$000(com.android.settings.wifi.WifiSettings,android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onConnectButtonPressed()> (1)
<android.app.AppOpsManager$Callback: void opChanged(int,java.lang.String)> (1)
<android.location.ILocationManager$Stub$Proxy: void reportLocation(android.location.Location,boolean)> ()
<android.location.ILocationManager$Stub: void reportLocation(android.location.Location,boolean)> (2)
<com.android.internal.content.PackageMonitor: void onPackageDisappeared(java.lang.String,int)> (13)
<com.android.server.LocationManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void access$1700(com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler,android.view.MotionEvent,int)> (2)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (2)
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (2)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleModeChange()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleShift()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (1)
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: int getSpeechRate()> (2)
<com.android.tts.compat.CompatTtsService: int access$600(android.speech.tts.TextToSpeechService)> (1)
<com.svox.pico.PicoService: int access$600(android.speech.tts.TextToSpeechService)> (1)
<android.webkit.WebViewClassic: void onPageFinished(java.lang.String)> (3)
<android.widget.Switch: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (5)
<com.android.camera.ui.Switch: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: void sendAccessibilityEventForVirtualText(int)> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo,com.android.email.activity.MessageViewFragmentBase$1)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment,android.widget.ProgressBar,com.android.email.activity.MessageViewFragmentBase$1)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void sendAccessibilityEventForKey(com.android.inputmethod.keyboard.Key,int)> (2)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver: void access$2900(com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver,java.lang.String)> (1)
<com.android.server.accessibility.ScreenMagnifier: void access$300(com.android.server.accessibility.ScreenMagnifier,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void access$200(com.android.server.accessibility.ScreenMagnifier)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (1)
<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)> (1)
<android.location.ILocationManager: void removeTestProvider(java.lang.String)> (1)
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (1)
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (1)
<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (1)
<com.android.settings.DreamSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DisplaySettings: void updateScreenSaverSummary()> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (39)
<com.android.settings.DreamSettings: void access$300(com.android.settings.DreamSettings)> (2)
<com.android.systemui.statusbar.tablet.InputMethodButton: void onAttachedToWindow()> (2)
<com.android.systemui.statusbar.tablet.InputMethodButton: void setHardKeyboardStatus(boolean)> (1)
<com.android.systemui.statusbar.tablet.InputMethodButton: void setImeWindowStatus(android.os.IBinder,boolean)> (1)
<com.android.systemui.statusbar.tablet.InputMethodButton: void setScreenLocked(boolean)> (1)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.NativeCrashListener: void consumeNativeCrashData(java.io.FileDescriptor)> (1)
<com.android.server.UiModeManagerService: void access$000(com.android.server.UiModeManagerService,java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService: void access$400(com.android.server.UiModeManagerService,int,int)> (1)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<com.android.server.UiModeManagerService: void updateDockState(int)> (1)
<com.android.server.UiModeManagerService: void updateTwilight()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onBootCompleted()> (1)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> ()
<com.android.internal.view.IInputMethodManager$Stub: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.internal.util.State: void enter()> (29)
<android.speech.tts.TextToSpeech$Connection: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String,boolean,boolean)> (1)
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String)> (4)
<android.webkit.AccessibilityInjector$TextToSpeechWrapper: void <init>(android.content.Context)> (1)
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getClientDefaultLanguage()> ()
<android.speech.tts.ITextToSpeechService$Stub: java.lang.String[] getClientDefaultLanguage()> (2)
<android.speech.tts.TextToSpeechService$1: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> (2)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.Object,int,int,android.os.Bundle,java.lang.String,java.io.FileOutputStream)> (1)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.Object,int,int,android.os.Bundle,java.lang.String)> (1)
<com.svox.pico.PicoService: void onCreate()> (3)
<android.webkit.WebViewClassic: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<android.webkit.WebViewClassic: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.webkit.WebViewClassic: boolean performAccessibilityAction(int,android.os.Bundle)> (1)
<com.android.browser.Controller: void onResume()> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.server.updates.CarrierProvisioningUrlsInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.CertPinInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.IntentFirewallInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.SELinuxPolicyInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.SmsShortCodesInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.TZInfoInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.accounts.AccountSyncSettings: void onPause()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPause()> (4)
<com.android.settings.accounts.SyncSettings: void onPause()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onPause()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onPause()> (4)
<com.android.systemui.statusbar.BaseStatusBar: void setImeWindowStatus(android.os.IBinder,int,int)> (2)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.IAudioService$Stub$Proxy: void reloadAudioSettings()> ()
<android.media.IAudioService$Stub: void reloadAudioSettings()> (2)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<android.media.AudioService: void createStreamStates()> (1)
<android.view.ViewRootImpl: void playSoundEffect(int)> (2)
<com.android.internal.policy.impl.PhoneWindow: void onKeyUpPanel(int,android.view.KeyEvent)> (1)
<android.text.method.TextKeyListener$SettingsObserver: void onChange(boolean)> (1)
<android.text.method.TextKeyListener: int getPrefs(android.content.Context)> (3)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (3)
<com.android.gallery3d.app.DialogPicker: void onResume()> (3)
<com.android.gallery3d.app.Gallery: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.camera.VideoModule: boolean access$1300(com.android.camera.VideoModule)> (1)
<com.android.camera.VideoModule: void onError(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoModule: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: void onStopVideoRecording()> (4)
<com.android.camera.VideoModule: void onShutterButtonClick()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onPollPdp()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataStallAlarm(int)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void restartDataStallAlarm()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void startDataStallAlarm(boolean)> (5)
<com.android.internal.telephony.dataconnection.DcTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.phone.ADNList: void access$100(com.android.phone.ADNList,boolean)> (3)
<com.android.phone.ADNList: void query()> (4)
<com.android.phone.FdnList: void displayProgress(boolean)> (1)
<com.android.phone.SimContacts: void displayProgress(boolean)> (1)
<com.android.phone.Ringer: void ring()> (4)
<com.android.phone.DTMFTwelveKeyDialer: void processDtmf(char,boolean)> (2)
<com.android.phone.OtaUtils: void updateUiWidgets(com.android.phone.InCallScreen,android.view.ViewGroup,com.android.phone.CallCard)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onInputDeviceAdded(int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onInputDeviceChanged(int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onInputDeviceRemoved(int)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.WindowManagerService: boolean detectSafeMode()> (1)
<android.view.IWindowManager$Stub$Proxy: boolean isRotationFrozen()> ()
<android.view.IWindowManager$Stub: boolean isRotationFrozen()> (2)
<com.android.settings.AccessibilitySettings$3: void onChange()> (1)
<com.android.settings.DisplaySettings$1: void onChange()> (1)
<com.android.internal.view.RotationPolicy$RotationPolicyListener: void onChange()> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void addSystemTiles(android.view.ViewGroup,android.view.LayoutInflater)> (1)
<com.android.systemui.statusbar.policy.AutoRotateController$1: void onChange()> (1)
<com.android.systemui.statusbar.RotationToggle: void onAttachedToWindow()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void updateSecurityView(android.view.View)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (1)
<com.android.internal.policy.impl.keyguard.NumPadKey: void <init>(android.content.Context)> (3)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void access$300(com.android.internal.widget.multiwaveview.MultiWaveView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void onDraw(android.graphics.Canvas)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void updateSearchPanel()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void updateSearchPanel()> (3)
<com.android.systemui.statusbar.tv.TvStatusBar: void updateSearchPanel()> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void showSearchPanel()> ()
<com.android.systemui.statusbar.DelegateViewHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void showSearchPanel()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void showSearchPanel()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void showSearchPanel()> (1)
<com.android.systemui.SearchPanelView$1: void run()> (1)
<com.android.systemui.SearchPanelView$GlowPadTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void hideSearchPanel()> ()
<com.android.systemui.statusbar.phone.PhoneStatusBar: void hideSearchPanel()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void hideSearchPanel()> (1)
<com.android.systemui.statusbar.tv.TvStatusBar: void hideSearchPanel()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void animateCollapsePanels(int)> (6)
<com.android.systemui.statusbar.phone.PhoneStatusBar$23$1$3: void run()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$23: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$27: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void animateCollapsePanels()> (9)
<com.android.systemui.statusbar.tablet.TabletStatusBar$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void animateCollapsePanels()> (5)
<com.android.systemui.settings.BrightnessController$BrightnessObserver: void onChange(boolean)> (1)
<com.android.systemui.settings.ToggleSlider$Listener: void onChanged(com.android.systemui.settings.ToggleSlider,boolean,boolean,int)> (4)
<com.android.systemui.statusbar.phone.QuickSettings: void setupQuickSettings()> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void updateResources()> (3)
<com.android.settings.PointerSpeedPreference: void access$000(com.android.settings.PointerSpeedPreference)> (1)
<android.webkit.WebViewClassic: void init(java.util.Map,boolean)> (1)
<com.android.contacts.common.list.ContactEntryListFragment$2: void onChange()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onStart()> (9)
<com.android.contacts.common.list.PhoneNumberPickerFragment: boolean loadPreferences()> (1)
<com.android.contacts.list.ContactBrowseListFragment: boolean loadPreferences()> (1)
<com.android.contacts.list.ContactPickerFragment: boolean loadPreferences()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: boolean loadPreferences()> (2)
<com.android.contacts.list.EmailAddressPickerFragment: boolean loadPreferences()> (1)
<com.android.contacts.list.JoinContactListFragment: boolean loadPreferences()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: boolean loadPreferences()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: boolean loadPreferences()> (1)
<com.android.contacts.activities.ContactDetailActivity: void setupTitle()> (1)
<com.android.contacts.detail.ContactDetailDisplayUtils: void setDisplayName(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView)> (1)
<com.android.contacts.preference.DisplayOrderPreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.contacts.preference.DisplayOrderPreference: void <init>(android.content.Context)> (3)
<com.android.dialer.list.PhoneFavoriteFragment: boolean access$1300(com.android.dialer.list.PhoneFavoriteFragment)> (1)
<com.android.dialer.list.PhoneFavoriteFragment: void onStart()> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupDetailQuery(android.content.Context,long)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupEditorQuery(android.content.Context,long)> (1)
<com.android.contacts.preference.SortOrderPreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.contacts.preference.SortOrderPreference: void <init>(android.content.Context)> (3)
<com.android.phone.sip.SipEditor: void validateAndSetResult()> (3)
<com.android.phone.sip.SipEditor: void access$400(com.android.phone.sip.SipEditor)> (1)
<com.android.phone.sip.SipSettings$SipPreference: void <init>(com.android.phone.sip.SipSettings,android.content.Context,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void onCreate(android.os.Bundle)> (2)
<com.android.phone.sip.SipSettings: void access$800(com.android.phone.sip.SipSettings)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<android.media.MediaScanner: android.net.Uri scanSingleFile(java.lang.String,java.lang.String,java.lang.String)> (1)
<android.media.MediaScanner$MyMediaScannerClient: void scanFile(java.lang.String,long,long,boolean,boolean)> (1)
<android.media.MediaScanner: void scanMtpFile(java.lang.String,java.lang.String,int,int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void startSample()> (3)
<com.android.internal.policy.impl.PhoneWindowManager: void performAuditoryFeedbackForAccessibilityIfNeed()> (1)
<com.android.providers.media.RingtonePickerActivity: void run()> (1)
<com.android.server.DockObserver: void handleDockStateChange()> (1)
<com.android.server.power.Notifier: void playWirelessChargingStartedSound()> (1)
<com.android.systemui.media.RingtonePlayer$1: void play(android.os.IBinder,android.net.Uri,int)> (2)
<com.android.systemui.power.PowerUI: void playLowBatterySound()> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)> (2)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: java.lang.String getRingToneTitle(android.net.Uri)> (1)
<com.android.deskclock.AlarmPreference$1: java.lang.String doInBackground(android.net.Uri[])> (1)
<com.android.mms.ui.MessagingPreferenceActivity: void setRingtoneSummary(java.lang.String)> (2)
<android.view.VolumePanel: void onMuteChanged(int,int)> (1)
<com.android.phone.CallFeaturesSetting$5: void run()> (1)
<com.android.settings.SoundSettings$3: void run()> (1)
<android.widget.DateTimeView: java.text.DateFormat getTimeFormat()> (1)
<android.widget.DigitalClock: void access$300(android.widget.DigitalClock)> (1)
<android.widget.DigitalClock: void initClock()> (2)
<android.text.format.DateUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (7)
<com.android.email.activity.MessageViewFragmentBase: java.lang.String formatDate(long,boolean)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void updateHeaderFooter(int,int)> (1)
<com.android.calendar.Utils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (15)
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> (2)
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.month.MonthWeekEventsView: void drawEvents(android.graphics.Canvas)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void drawMonthTitle(android.graphics.Canvas)> (1)
<com.android.settings.DataUsageSummary$CycleItem: void <init>(android.content.Context,long,long)> (2)
<com.android.settings.DataUsageSummary: void updateDetailData()> (3)
<com.android.settings.widget.ChartGridView: void setBounds(long,long)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<android.widget.TextClock: void chooseFormat()> (3)
<android.widget.TextClock: void init()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: int getClockFlags(android.widget.TextClock)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int findClockInHierarchy(android.view.View)> (3)
<com.android.alarmclock.DigitalWidgetViewsFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (6)
<com.android.calendar.AllInOneActivity$2: void run()> (1)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean setSelectionFromPosition(int,int,boolean)> (4)
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)> (3)
<com.android.calendar.DayView: void <init>(android.content.Context,com.android.calendar.CalendarController,android.widget.ViewSwitcher,com.android.calendar.EventLoader,int)> (1)
<com.android.calendar.event.EditEventView$DateListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.calendar.event.EditEventView$TimeListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (1)
<com.android.calendar.event.EditEventView: void setModel(com.android.calendar.CalendarEventModel)> (3)
<com.android.calendar.event.EditEventView$4: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.calendar.event.EditEventView: void updateView()> (2)
<com.android.timezonepicker.TimeZonePickerDialog$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventFragment$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventFragment: void setModelIfDone(int)> (1)
<com.android.calendar.event.EditEventFragment: void startQuery()> (1)
<com.android.calendar.EventInfoFragment: void access$100(com.android.calendar.EventInfoFragment,android.view.View)> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: com.android.calendar.widget.CalendarAppWidgetModel buildAppWidgetModel(android.content.Context,android.database.Cursor,java.lang.String)> (1)
<com.android.deskclock.Alarms: void enableAlert(android.content.Context,com.android.deskclock.Alarm,long)> (1)
<com.android.deskclock.AlarmAlertFullScreen: void snooze()> (4)
<com.android.deskclock.AlarmReceiver: void handleIntent(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.Alarms: java.lang.String formatTime(android.content.Context,int,int,com.android.deskclock.Alarm$DaysOfWeek)> (1)
<com.android.deskclock.DigitalClock: void access$400(com.android.deskclock.DigitalClock)> (1)
<com.android.deskclock.DigitalClock: void onFinishInflate()> (3)
<com.android.deskclock.DigitalClock: void access$200(com.android.deskclock.DigitalClock)> (2)
<com.android.deskclock.DigitalClock: void onAttachedToWindow()> (3)
<com.android.deskclock.DigitalClock: void setTimeZone(java.lang.String)> (1)
<com.android.deskclock.DigitalClock: void updateTime(int,int)> (1)
<com.android.deskclock.DigitalClock: void updateTime(java.util.Calendar)> ()
<com.android.deskclock.TimePicker: void <init>(android.content.Context)> (4)
<com.android.deskclock.TimerSetupView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void <init>(com.android.deskclock.worldclock.CitiesActivity,android.content.Context,java.util.HashMap,android.view.LayoutInflater)> (1)
<com.android.deskclock.worldclock.CitiesActivity: void onResume()> (1)
<com.android.internal.policy.impl.keyguard.ClockView$FormatChangeObserver: void onChange(boolean)> (1)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.AccountPreferenceBase: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.ManageAccountsSettings: android.app.Dialog onCreateDialog(int)> (2)
<com.android.settings.accounts.SyncSettings: android.app.Dialog onCreateDialog(int)> (3)
<com.android.settings.ApplicationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DeviceInfoSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.deviceinfo.UsbSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DialogCreatable: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.SpellCheckersSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.UserDictionaryList: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.LocationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.net.DataUsageMeteredSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.NotificationStation: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.PrivacySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SecuritySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TextToSpeechSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.vpn2.VpnSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WallpaperTypeSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wfd.WifiDisplaySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.AdvancedWifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.WifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WirelessSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.systemui.statusbar.policy.Clock$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.policy.Clock: void onAttachedToWindow()> (2)
<com.android.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.contacts.util.DateUtils: java.text.DateFormat getLocalizedDateFormatWithoutYear(android.content.Context)> (2)
<com.android.browser.PageDialogsHandler: android.app.AlertDialog$Builder createSslCertificateDialog(android.net.http.SslCertificate,android.net.http.SslError)> (2)
<com.android.settings.TrustedCredentialsSettings: void showCertDialog(com.android.settings.TrustedCredentialsSettings$CertHolder)> (1)
<com.android.contacts.datepicker.DatePicker: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.contacts.datepicker.DatePickerDialog: void updateDate(int,int,int)> ()
<com.android.contacts.editor.EventFieldEditorView: void access$000(com.android.contacts.editor.EventFieldEditorView)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.EventFieldEditorView: void setValues(com.android.contacts.common.model.dataitem.DataKind,com.android.contacts.common.model.ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> (1)
<com.android.contacts.detail.ContactDetailFragment: void buildEntries()> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.NotificationStation$NotificationHistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<android.app.INotificationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)> (6)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onKeyguardVisibilityChanged(boolean)> (8)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onTimeChanged()> (11)
<com.android.systemui.settings.BrightnessController$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.systemui.statusbar.phone.QuickSettingsModel$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> ()
<com.android.internal.view.IInputMethodManager$Stub: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService: void access$200(com.android.server.InputMethodManagerService,java.lang.String)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getShortcutInputMethodsAndSubtypes()> ()
<com.android.internal.view.IInputMethodManager$Stub: java.util.List getShortcutInputMethodsAndSubtypes()> (2)
<com.android.internal.view.IInputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)> (1)
<com.android.internal.view.IInputMethodManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList(boolean,boolean,boolean)> (2)
<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodList()> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> ()
<com.android.internal.view.IInputMethodManager$Stub: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> (2)
<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()> (2)
<android.widget.SpellChecker: void resetSession()> (2)
<android.widget.TextView: void updateTextServicesLocaleLocked()> (65)
<com.android.settings.inputmethod.SingleSpellCheckerPreference: void onSubtypeButtonClicked(android.view.View)> (1)
<com.android.internal.inputmethod.InputMethodUtils: void setNonSelectedSystemImesDisabledUntilUsed(android.content.pm.PackageManager,java.util.List)> (2)
<com.android.settings.inputmethod.SpellCheckerUtils: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(android.view.textservice.TextServicesManager)> (1)
<com.android.internal.textservice.ITextServicesManager: void setCurrentSpellChecker(java.lang.String,java.lang.String)> (1)
<com.android.internal.textservice.ITextServicesManager: void setCurrentSpellCheckerSubtype(java.lang.String,int)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void onResume()> (1)
<com.android.providers.settings.DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<android.app.admin.IDevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin(int)> (1)
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.admin.IDevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> (1)
<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(int)> (1)
<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)> (2)
<android.app.admin.IDevicePolicyManager: boolean resetPassword(java.lang.String,int,int)> (1)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void lockNow()> ()
<android.app.admin.IDevicePolicyManager$Stub: void lockNow()> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordHistoryLength(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordMinimumLength(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordQuality(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void setPasswordQuality(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void wipeData(int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void wipeData(int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean isAdminActive(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> (2)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: void removeActiveAdmin(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int)> (1)
<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean,int)> (1)
<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)> (1)
<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: long getPasswordExpiration(android.content.ComponentName,int)> (2)
<com.android.server.DevicePolicyManagerService: void handlePasswordExpirationNotification(com.android.server.DevicePolicyManagerService$DevicePolicyData)> (1)
<android.app.admin.IDevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName,int)> (1)
<com.android.server.DevicePolicyManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.app.admin.IDevicePolicyManager: void reportFailedPasswordAttempt(int)> (1)
<android.app.admin.IDevicePolicyManager: void reportSuccessfulPasswordAttempt(int)> (1)
<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)> (1)
<android.app.admin.IDevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean,int)> (1)
<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView$1: void onClick(android.view.View)> (1)
<com.android.server.power.Notifier: void access$500(com.android.server.power.Notifier)> (4)
<com.android.server.power.Notifier: void sendWakeUpBroadcast()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void resetStateLocked(android.os.Bundle)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void notifyScreenOnLocked(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void wakeWhenReady(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void showLocked(android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleReportFailedAttempt()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleUnlock(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$4: boolean onClickHandler(android.view.View,android.app.PendingIntent,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView$4$1: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView$4$1: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$11: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2000(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2100(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (7)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handlePhoneStateChanged(java.lang.String)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onClockVisibilityChanged()> (11)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onUserSwitching(int)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2300(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,boolean)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (13)
<android.view.IWindowManager$Stub$Proxy: boolean isKeyguardSecure()> ()
<android.view.IWindowManager$Stub: boolean isKeyguardSecure()> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedLoop()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$100(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor,com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void registerCallback(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback)> (10)
<com.android.internal.policy.impl.keyguard.SecurityMessageDisplay: void showBouncer(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView$3: void onTick(long)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$3: void onTick(long)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void resetState()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void displayDefaultSecurityMessage()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void resetState()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void resetState()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void verifyPasswordAndUnlock()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView$StateMachine: void next()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView$StateMachine: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView$3: void onFinish()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void sendInitialListenerUpdates()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void setScrollState(int)> (5)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleCancel()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$2: void onClick(android.view.View)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onClick(android.view.View)> (1)
<android.app.AppOpsManager$1: void opChanged(int,java.lang.String)> (2)
<android.location.ILocationManager: void reportLocation(android.location.Location,boolean)> (4)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.am.UsageStatsService$2: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.ServiceWatcher$2: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.accessibility.EventStreamTransformation: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (3)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void sendDelayedMotionEvents()> (2)
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void onKey(int,int[])> (1)
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: void setRequestParams(android.speech.tts.SynthesisRequest)> (2)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: int getSpeechRate()> (1)
<android.webkit.CallbackProxy: void onPageFinished(java.lang.String)> ()
<android.webkit.CallbackProxy: void sendMessageToUiThreadSync(android.os.Message)> (9)
<com.android.settings.AccessibilitySettings$ToggleSwitch: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (5)
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: void sendAccessibilityEventForVirtualView(int,int)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.email.activity.MessageViewFragmentBase: void updateAttachmentTab()> (3)
<com.android.email.activity.MessageViewFragmentBase: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (3)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performActionForKey(com.android.inputmethod.keyboard.Key,int,android.os.Bundle)> (2)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onHoverKey(com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.server.accessibility.ScreenMagnifier: void onUserContextChanged()> (2)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> ()
<android.location.LocationManager: void removeTestProvider(java.lang.String)> ()
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (6)
<com.android.settings.AccessibilitySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (5)
<com.android.settings.accounts.SyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.ApplicationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DateTimeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DeviceInfoSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.LocationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.NotificationStation: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.PrivacySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SecuritySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SoundSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.TetherSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.UserSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.WifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WirelessSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DreamSettings$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DreamSettings$PackageReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void setHardKeyboardStatus(boolean,boolean)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void setImeWindowStatus(android.os.IBinder,int,int)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void setNavigationVisibility(int)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener: void run()> (2)
<com.android.server.UiModeManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService: void access$100(com.android.server.UiModeManagerService,int)> (1)
<com.android.server.UiModeManagerService: void access$500(com.android.server.UiModeManagerService)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor,com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void reportSimUnlocked()> (1)
<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (1)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> ()
<com.android.internal.view.IInputMethodManager$Stub: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (2)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<android.speech.tts.TextToSpeech: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String,boolean,boolean)> (2)
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onUpdateEngine(int)> (1)
<com.android.settings.tts.TextToSpeechSettings: void updateDefaultEngine(java.lang.String)> (1)
<android.webkit.AccessibilityInjector: void addTtsApis()> (1)
<android.speech.tts.ITextToSpeechService: java.lang.String[] getClientDefaultLanguage()> (2)
<android.speech.tts.ITextToSpeechService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> ()
<android.speech.tts.ITextToSpeechService$Stub: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> (2)
<android.speech.tts.TextToSpeechService$1: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> (2)
<android.webkit.PluginFullScreenHolder$CustomFrameLayout: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<android.webkit.PluginFullScreenHolder$CustomFrameLayout: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<android.webkit.WebViewProvider$ViewDelegate: boolean performAccessibilityAction(int,android.os.Bundle)> (1)
<com.android.browser.ActivityController: void onResume()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void setImeWindowStatus(android.os.IBinder,int,int)> (1)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void reloadAudioSettings()> (1)
<com.android.server.am.ActivityManagerService$10$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.view.View$AttachInfo$Callbacks: void playSoundEffect(int)> (1)
<android.view.ViewRootImpl$ViewPostImeInputStage: int processKeyEvent(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow: boolean onKeyUp(int,int,android.view.KeyEvent)> (1)
<android.text.method.MultiTapKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> (2)
<android.text.method.PasswordTransformationMethod: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.text.method.QwertyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> (2)
<com.android.camera.VideoModule$MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.VideoController: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: boolean onBackPressed()> (1)
<com.android.camera.VideoModule: void onInfo(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onVoiceCallEnded()> (1)
<com.android.phone.ADNList$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.FdnList: void access$100(com.android.phone.ADNList,boolean)> (1)
<com.android.phone.SimContacts: void access$100(com.android.phone.ADNList,boolean)> (1)
<com.android.phone.ADNList: void onResume()> (4)
<com.android.phone.ADNList: void reQuery()> (3)
<com.android.phone.FdnList: void query()> (1)
<com.android.phone.SimContacts: void query()> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (2)
<com.android.phone.CallNotifier: void restartRinger()> (1)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onClick(android.view.View)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void processDtmf(char)> (3)
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputMonitor: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.view.IWindowManager: boolean isRotationFrozen()> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.view.RotationPolicy$RotationPolicyListener$1: void onChange(boolean,android.net.Uri)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void updateSecurityViews()> (2)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void prepareNavigationBarView()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addPanelWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.systemui.statusbar.phone.NavigationBarView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.systemui.statusbar.phone.NavigationBarView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.systemui.statusbar.tablet.TabletStatusBarView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBarView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar$9: void run()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar$1: void run()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.systemui.SearchPanelView: void hide(boolean)> ()
<com.android.systemui.SearchPanelView: void startAssistActivity()> (1)
<com.android.systemui.statusbar.BaseStatusBar$2: boolean onClickHandler(android.view.View,android.app.PendingIntent,android.content.Intent)> (1)
<com.android.systemui.statusbar.BaseStatusBar$5$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.systemui.statusbar.BaseStatusBar$NotificationClicker: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void animateCollapsePanels(int)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$3: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void disable(int)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void removeNotification(android.os.IBinder)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setSystemUiVisibility(int,int)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void startActivityDismissingKeyguard(android.content.Intent,boolean)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void collapsePanels()> (2)
<com.android.systemui.statusbar.phone.StatusBarWindowView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.systemui.statusbar.tablet.NotificationPanel: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.systemui.statusbar.tablet.TabletStatusBar$H$1: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void clearAll()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void disable(int)> (1)
<com.android.systemui.settings.ToggleSlider: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.systemui.settings.ToggleSlider: void onProgressChanged(android.widget.SeekBar,int,boolean)> (1)
<com.android.systemui.settings.ToggleSlider: void onStartTrackingTouch(android.widget.SeekBar)> (1)
<com.android.systemui.settings.ToggleSlider: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void setup(com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.policy.LocationController)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void updateResources()> (1)
<com.android.systemui.statusbar.phone.SettingsPanelView: void updateResources()> ()
<com.android.settings.PointerSpeedPreference$1: void onChange(boolean)> (1)
<android.webkit.WebViewProvider: void init(java.util.Map,boolean)> (1)
<com.android.contacts.common.preference.ContactsPreferences$ChangeListener: void onChange()> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onStart()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onStart()> (2)
<com.android.contacts.list.ContactPickerFragment: void onStart()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onStart()> (3)
<com.android.contacts.list.EmailAddressPickerFragment: void onStart()> (2)
<com.android.contacts.list.JoinContactListFragment: void onStart()> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onStart()> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onStart()> (2)
<com.android.contacts.activities.ContactDetailActivity: void access$200(com.android.contacts.activities.ContactDetailActivity)> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getHeaderEntryView(android.view.View,android.view.ViewGroup)> (1)
<com.android.dialer.list.PhoneFavoriteFragment$ContactsPreferenceChangeListener: void onChange()> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.phone.sip.SipEditor: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.sip.SipEditor: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.phone.sip.SipEditor: void onPause()> (3)
<com.android.phone.sip.SipEditor$2: void run()> (1)
<com.android.phone.sip.SipSettings: void addPreferenceFor(android.net.sip.SipProfile)> (2)
<com.android.phone.sip.SipSettings$3: void run()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (4)
<com.android.providers.media.MediaScannerService: android.net.Uri scanFile(java.lang.String,java.lang.String)> (1)
<android.media.MediaScannerClient: void scanFile(java.lang.String,long,long,boolean,boolean)> ()
<android.mtp.MtpDatabase: void endSendObject(java.lang.String,int,int,boolean)> ()
<android.preference.VolumePreference$SeekBarVolumizer: void changeVolumeBy(int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void muteVolume()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void access$200(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.server.DockObserver: void access$000(com.android.server.DockObserver)> (2)
<com.android.server.power.Notifier: void access$700(com.android.server.power.Notifier)> (2)
<android.media.IRingtonePlayer$Stub$Proxy: void play(android.os.IBinder,android.net.Uri,int)> ()
<android.media.IRingtonePlayer$Stub: void play(android.os.IBinder,android.net.Uri,int)> (2)
<com.android.systemui.power.PowerUI$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.GeneralPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void bindExpandArea(com.android.deskclock.AlarmClock$AlarmItemAdapter$ItemHolder,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.AlarmPreference$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.MessagingPreferenceActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.mms.ui.MessagingPreferenceActivity: void setMessagePreferences()> (1)
<android.widget.DigitalClock$FormatChangeObserver: void onChange(boolean)> (1)
<android.widget.DigitalClock: void <init>(android.content.Context,android.util.AttributeSet)> (2)
<android.widget.DigitalClock: void <init>(android.content.Context)> (2)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)> ()
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)> (2)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)> (6)
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)> (19)
<android.widget.CalendarView: void setMonthDisplayed(java.util.Calendar)> (3)
<com.android.dialer.calllog.CallDetailHistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.gallery3d.data.Cluster: java.lang.String generateCaption(android.content.Context)> (1)
<com.android.email.activity.MessageFileViewFragment: java.lang.String formatDate(long,boolean)> (1)
<com.android.email.activity.MessageViewFragmentBase: void showDetails()> (3)
<com.android.email.activity.MessageViewFragment: java.lang.String formatDate(long,boolean)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$2400(com.android.calendar.agenda.AgendaWindowAdapter,int,int)> (1)
<com.android.calendar.DayView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.calendar.Utils: java.lang.String formatMonthYear(android.content.Context,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$DayInfo populateDayInfo(int,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetProvider: void performUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[],long[])> (2)
<com.android.calendar.month.MonthWeekEventsView: void onDraw(android.graphics.Canvas)> (2)
<com.android.datetimepicker.date.SimpleMonthView: void onDraw(android.graphics.Canvas)> (1)
<com.android.settings.DataUsageSummary$CycleChangeItem: void <init>(android.content.Context,long,long)> (1)
<com.android.settings.DataUsageSummary: void updateCycleList(android.net.NetworkPolicy)> (1)
<com.android.settings.DataUsageSummary: void access$1500(com.android.settings.DataUsageSummary)> (2)
<com.android.settings.DataUsageSummary: void updateAppDetail()> (1)
<com.android.settings.widget.ChartDataUsageView: void setVisibleRange(long,long)> (1)
<android.widget.TextClock: void access$000(android.widget.TextClock)> (2)
<android.widget.TextClock: void setFormat12Hour(java.lang.CharSequence)> ()
<android.widget.TextClock: void setFormat24Hour(java.lang.CharSequence)> ()
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<android.widget.TextClock: void <init>(android.content.Context)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: int findClockInHierarchy(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void onPageSwitched(android.view.View,int)> (2)
<com.android.calendar.alerts.AlertActivity: void onStop()> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Void doInBackground(android.util.Pair[])> (1)
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.DayView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doLongPress(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View makeView()> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.datetimepicker.date.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.datetimepicker.time.TimePickerDialog$OnTimeSetListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (2)
<com.android.calendar.event.EditEventFragment: void onDestroy()> (1)
<com.android.calendar.event.EditEventView: void <init>(android.app.Activity,android.view.View,com.android.calendar.event.EditEventHelper$EditDoneRunnable,boolean,boolean)> (1)
<com.android.timezonepicker.TimeZonePickerDialog: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventFragment: void access$800(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.EventInfoFragment$1: void run()> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,android.database.Cursor)> (1)
<com.android.deskclock.Alarms: void setNextAlert(android.content.Context)> (7)
<com.android.deskclock.AlarmAlertFullScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (2)
<com.android.deskclock.AlarmAlertFullScreen: void onTrigger(android.view.View,int)> (2)
<com.android.deskclock.AlarmAlert: void snooze()> (1)
<com.android.deskclock.AlarmReceiver: void access$000(com.android.deskclock.AlarmReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.SetAlarm: void updateTime()> (2)
<com.android.deskclock.DigitalClock$FormatChangeObserver: void onChange(boolean)> (1)
<com.android.deskclock.DigitalClock$1$1: void run()> (1)
<com.android.deskclock.worldclock.WorldClockAdapter: void updateView(android.view.View,com.android.deskclock.worldclock.CityObj)> (2)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (3)
<com.android.deskclock.TimerSetupView: void <init>(android.content.Context)> (3)
<com.android.deskclock.worldclock.CitiesActivity: void updateLayout()> (1)
<com.android.settings.SettingsPreferenceFragment$SettingsDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.contacts.datepicker.DatePickerDialog: void <init>(android.content.Context,int,com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener,int,int,int,boolean)> (2)
<com.android.browser.PageDialogsHandler: void showSSLCertificate(com.android.browser.Tab)> (2)
<com.android.browser.PageDialogsHandler: void showSSLCertificateOnError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (5)
<com.android.settings.TrustedCredentialsSettings: void access$1000(com.android.settings.TrustedCredentialsSettings,com.android.settings.TrustedCredentialsSettings$CertHolder)> (1)
<com.android.contacts.datepicker.DatePicker: void <init>(android.content.Context)> (3)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.editor.LabeledEditorView: void setValues(com.android.contacts.common.model.dataitem.DataKind,com.android.contacts.common.model.ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> (4)
<com.android.contacts.detail.ContactDetailFragment: void bindData()> (2)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.server.NotificationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)> (15)
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> (16)
<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long)> (1)
<com.android.server.net.NetworkPolicyManagerService: void enqueueRestrictedNotification(java.lang.String)> (1)
<com.android.systemui.statusbar.policy.LocationController: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleKeyguardVisibilityChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleTimeUpdate()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onTimeChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onTimeChanged()> (1)
<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> (1)
<com.android.internal.view.IInputMethodManager: java.util.List getShortcutInputMethodsAndSubtypes()> (1)
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)> ()
<com.android.server.InputMethodManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList()> (1)
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()> (8)
<com.android.commands.ime.Ime: void runList()> (1)
<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> (1)
<com.android.server.power.PowerManagerService: void access$1500(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void updateDreamLocked(int)> (1)
<android.widget.SpellChecker: void setLocale(java.util.Locale)> (2)
<android.widget.SpellChecker: void spellCheck(int,int)> (1)
<android.inputmethodservice.ExtractButton: void updateTextServicesLocaleLocked()> (1)
<android.inputmethodservice.ExtractEditText: void updateTextServicesLocaleLocked()> (1)
<android.widget.AutoCompleteTextView: void updateTextServicesLocaleLocked()> (1)
<android.widget.Button: void updateTextServicesLocaleLocked()> (1)
<android.widget.CheckBox: void updateTextServicesLocaleLocked()> (2)
<android.widget.CheckedTextView: void updateTextServicesLocaleLocked()> (1)
<android.widget.Chronometer: void updateTextServicesLocaleLocked()> (1)
<android.widget.CompoundButton: void updateTextServicesLocaleLocked()> (1)
<android.widget.DateTimeView: void updateTextServicesLocaleLocked()> (1)
<android.widget.DigitalClock: void updateTextServicesLocaleLocked()> (1)
<android.widget.EditText: void updateTextServicesLocaleLocked()> (1)
<android.widget.MultiAutoCompleteTextView: void updateTextServicesLocaleLocked()> (1)
<android.widget.NumberPicker$CustomEditText: void updateTextServicesLocaleLocked()> (1)
<android.widget.RadioButton: void updateTextServicesLocaleLocked()> (2)
<android.widget.SearchView$SearchAutoComplete: void updateTextServicesLocaleLocked()> (1)
<android.widget.Switch: void updateTextServicesLocaleLocked()> (2)
<android.widget.TextClock: void updateTextServicesLocaleLocked()> (1)
<android.widget.TextView: void access$300(android.widget.TextView)> (65)
<android.widget.ToggleButton: void updateTextServicesLocaleLocked()> (2)
<com.android.browser.UrlInputView: void updateTextServicesLocaleLocked()> (1)
<com.android.calculator2.CalculatorEditText: void updateTextServicesLocaleLocked()> (1)
<com.android.calculator2.ColorButton: void updateTextServicesLocaleLocked()> (1)
<com.android.calendar.MultiStateButton: void updateTextServicesLocaleLocked()> (1)
<com.android.calendar.recurrencepicker.WeekButton: void updateTextServicesLocaleLocked()> (3)
<com.android.camera.ui.Switch: void updateTextServicesLocaleLocked()> (2)
<com.android.datetimepicker.AccessibleTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void updateTextServicesLocaleLocked()> (1)
<com.android.deskclock.AndroidClockTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.deskclock.ZeroTopPaddingTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.development.LogTextBox: void updateTextServicesLocaleLocked()> (1)
<com.android.dialer.dialpad.DigitsEditText: void updateTextServicesLocaleLocked()> (1)
<com.android.dialer.dialpad.SmartDialTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.dreams.phototable.BummerView: void updateTextServicesLocaleLocked()> (1)
<com.android.email.activity.AddressTextView: void updateTextServicesLocaleLocked()> (2)
<com.android.email.activity.ChipsAddressTextView: void updateTextServicesLocaleLocked()> (3)
<com.android.ex.chips.RecipientEditTextView: void updateTextServicesLocaleLocked()> (2)
<com.android.ex.editstyledtext.EditStyledText: void updateTextServicesLocaleLocked()> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: void updateTextServicesLocaleLocked()> (1)
<com.android.gallery3d.filtershow.ui.FilterIconButton: void updateTextServicesLocaleLocked()> (2)
<com.android.gallery3d.filtershow.ui.IconButton: void updateTextServicesLocaleLocked()> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.policy.impl.keyguard.NumPadKey: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.view.menu.ActionMenuItemView: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.view.menu.IconMenuItemView: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.widget.DialogTitle: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.AccessibleTabView: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.BubbleTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.ButtonDropTarget: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.DeleteDropTarget: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.FolderEditText: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.InfoDropTarget: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.PagedViewIcon: void updateTextServicesLocaleLocked()> (1)
<com.android.launcher2.StrokedTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.mms.ui.RecipientsEditor: void updateTextServicesLocaleLocked()> (3)
<com.android.mms.ui.SearchActivity$TextViewSnippet: void updateTextServicesLocaleLocked()> (1)
<com.android.quicksearchbox.ui.QueryTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.settings.AccessibilitySettings$ToggleSwitch: void updateTextServicesLocaleLocked()> (2)
<com.android.settings.applications.RunningProcessesView$TimeTicker: void updateTextServicesLocaleLocked()> (1)
<com.android.systemui.statusbar.phone.CarrierLabel: void updateTextServicesLocaleLocked()> (1)
<com.android.systemui.statusbar.policy.Clock: void updateTextServicesLocaleLocked()> (1)
<com.android.systemui.statusbar.policy.DateView: void updateTextServicesLocaleLocked()> (1)
<com.android.systemui.statusbar.RotationToggle: void updateTextServicesLocaleLocked()> (2)
<com.android.settings.inputmethod.SingleSpellCheckerPreference: void access$100(com.android.settings.inputmethod.SingleSpellCheckerPreference,android.view.View)> (1)
<com.android.settings.inputmethod.SpellCheckersSettings: void updateEnabledSpellCheckers()> (1)
<android.view.textservice.TextServicesManager: void setCurrentSpellChecker(android.view.textservice.SpellCheckerInfo)> (1)
<android.view.textservice.TextServicesManager: void setSpellCheckerSubtype(android.view.textservice.SpellCheckerSubtype)> (1)
<android.app.admin.DevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin()> (2)
<com.android.server.DevicePolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)> ()
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)> (3)
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)> ()
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()> (1)
<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String)> (5)
<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,int,int)> (1)
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)> ()
<android.app.admin.IDevicePolicyManager: void lockNow()> (1)
<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: void wipeData(int,int)> (1)
<android.app.admin.IDevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> (1)
<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)> (1)
<android.app.admin.IDevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> (1)
<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()> ()
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> (3)
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)> (3)
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)> (1)
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()> (1)
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)> (2)
<android.app.admin.IDevicePolicyManager: long getPasswordExpiration(android.content.ComponentName,int)> (1)
<com.android.server.DevicePolicyManagerService: void access$000(com.android.server.DevicePolicyManagerService,com.android.server.DevicePolicyManagerService$DevicePolicyData)> (1)
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)> (2)
<android.app.admin.DevicePolicyManager: void reportFailedPasswordAttempt(int)> (1)
<android.app.admin.DevicePolicyManager: void reportSuccessfulPasswordAttempt(int)> (1)
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)> (1)
<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> (2)
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)> (1)
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)> (1)
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)> (1)
<com.android.server.power.Notifier$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier: void updatePendingBroadcastLocked()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$100(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onWakeMotionWhenKeyguardShowingTq()> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleUserSwitching(int,android.os.IRemoteCallback)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$2: void keyguardDone(boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$10: void run()> (1)
<android.view.IWindowManager: boolean isKeyguardSecure()> (1)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (20)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void <init>(android.content.Context,com.android.internal.policy.impl.keyguard.CameraWidgetFrame$Callbacks,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo,android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: void onAttachedToWindow()> (2)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: void onAttachedToWindow()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewHelper: void showBouncer(com.android.internal.policy.impl.keyguard.SecurityMessageDisplay,android.view.View,android.graphics.drawable.Drawable,int)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void resetState()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void access$1100(com.android.internal.policy.impl.keyguard.KeyguardPatternView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void verifyPasswordAndUnlock()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void resetState()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void setOnChallengeScrolledListener(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$OnChallengeScrolledListener)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void animateChallengeTo(int,int)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void completeChallengeScroll()> (3)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void onFadeEnd(boolean)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void onFadeStart(boolean)> (1)
<com.android.internal.app.IAppOpsCallback$Stub$Proxy: void opChanged(int,java.lang.String)> ()
<com.android.internal.app.IAppOpsCallback$Stub: void opChanged(int,java.lang.String)> (2)
<com.android.location.provider.LocationProviderBase: void reportLocation(android.location.Location)> (1)
<com.android.server.location.GpsLocationProvider: void reportLocation(int,double,double,double,float,float,float,long)> ()
<com.android.server.location.MockProvider: void setLocation(android.location.Location)> (1)
<com.android.server.location.PassiveProvider: void updateLocation(android.location.Location)> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void handleMotionEvent(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleMotionEventStateDelegating(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendMotionEvent(android.view.MotionEvent,int,int,int)> (9)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void access$1800(com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler)> (2)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void transitionToDelegatingStateAndClear()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: void setRequestParams(android.speech.tts.SynthesisRequest)> (1)
<android.webkit.CallbackProxy: android.net.Uri openFileChooser(java.lang.String,java.lang.String)> (1)
<android.webkit.CallbackProxy: android.webkit.BrowserFrame createWindow(boolean,boolean)> ()
<android.webkit.CallbackProxy: boolean onJsBeforeUnload(java.lang.String,java.lang.String)> (1)
<android.webkit.CallbackProxy: boolean onJsConfirm(java.lang.String,java.lang.String)> (1)
<android.webkit.CallbackProxy: boolean onJsTimeout()> (1)
<android.webkit.CallbackProxy: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<android.webkit.CallbackProxy: boolean shouldOverrideUrlLoading(java.lang.String)> ()
<android.webkit.CallbackProxy: java.lang.String onJsPrompt(java.lang.String,java.lang.String,java.lang.String)> (1)
<android.webkit.CallbackProxy: void onJsAlert(java.lang.String,java.lang.String)> (1)
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: boolean performAction(int,int,android.os.Bundle)> (2)
<android.widget.NumberPicker: boolean dispatchHoverEvent(android.view.MotionEvent)> (3)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.activity.MessageFileViewFragment: void updateAttachmentTab()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onResume()> (3)
<com.android.email.activity.MessageViewFragment: void updateAttachmentTab()> (1)
<com.android.email.activity.MessageFileViewFragment: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.email.activity.MessageViewFragmentBase: void access$1900(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (3)
<com.android.email.activity.MessageViewFragment: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onTransitionKey(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<android.view.IMagnificationCallbacks$Stub$Proxy: void onUserContextChanged()> ()
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.systemui.statusbar.BaseStatusBar: void setHardKeyboardStatus(boolean,boolean)> (2)
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> (1)
<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()> (1)
<com.android.server.UiModeManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$4: void onTwilightStateChanged()> (1)
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (7)
<com.android.internal.view.IInputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<android.speech.tts.TextToSpeech: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String)> (11)
<android.speech.tts.TextToSpeech: java.lang.Object runActionNoReconnect(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: void <init>(android.content.Context)> (1)
<com.android.voicedialer.VoiceDialerActivity: void updateBluetoothParameters(boolean)> (1)
<com.android.settings.tts.TextToSpeechSettings$2: void onInit(int)> (1)
<com.android.settings.tts.TextToSpeechSettings: void setCurrentKey(java.lang.String)> (1)
<android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()> (3)
<android.speech.tts.TextToSpeech$8: java.util.Locale run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask: java.lang.Integer doInBackground(java.lang.Void[])> (1)
<android.speech.tts.TextToSpeechService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.tts.ITextToSpeechService: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> (1)
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> ()
<android.speech.tts.ITextToSpeechService$Stub: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> (2)
<android.webkit.WebView: boolean performAccessibilityAction(int,android.os.Bundle)> (5)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void reloadAudioSettings()> (1)
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<android.view.View: void playSoundEffect(int)> (592)
<android.view.ViewRootImpl$ViewPostImeInputStage: int onProcess(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.camera.VideoUI$3: void onClick(android.view.View)> (1)
<com.android.camera.CameraModule: boolean onBackPressed()> (1)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> (2)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onVoiceCallEnded()> (1)
<com.android.phone.FdnList: void onResume()> (3)
<com.android.phone.SimContacts: void onResume()> (3)
<com.android.phone.ADNList: void access$200(com.android.phone.ADNList)> (5)
<com.android.phone.FdnList: void reQuery()> (1)
<com.android.phone.SimContacts: void reQuery()> (1)
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void access$000(com.android.phone.DTMFTwelveKeyDialer,char)> (2)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.app.UiAutomationConnection: void storeRotationStateLocked()> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addNavigationBar()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void repositionNavigationBar()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.systemui.SystemUI: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.systemui.SearchPanelView: void access$200(com.android.systemui.SearchPanelView)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void disable(int)> (2)
<com.android.systemui.statusbar.BaseStatusBar: void removeNotification(android.os.IBinder)> (2)
<com.android.systemui.statusbar.BaseStatusBar: void setSystemUiVisibility(int,int)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setLightsOn(boolean)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$24: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$25: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void userSwitched(int)> (3)
<com.android.systemui.statusbar.phone.QuickSettings: void access$300(com.android.systemui.statusbar.phone.QuickSettings)> (3)
<com.android.systemui.statusbar.phone.QuickSettings: void startSettingsActivity(android.content.Intent,boolean)> (1)
<com.android.systemui.statusbar.tablet.NotificationPanel$1: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.phone.SettingsPanelView: void setup(com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.policy.LocationController)> ()
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (3)
<com.android.contacts.common.preference.ContactsPreferences$1: void run()> (1)
<com.android.contacts.activities.ContactDetailActivity$3$1: void run()> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.phone.sip.SipSettings: void addProfile(android.net.sip.SipProfile)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.providers.media.MediaScannerService: android.net.Uri access$100(com.android.providers.media.MediaScannerService,java.lang.String,java.lang.String)> (1)
<android.preference.VolumePreference: boolean onKey(android.view.View,int,android.view.KeyEvent)> (4)
<com.android.server.DockObserver: void updateLocked()> (2)
<com.android.server.power.Notifier: void onWirelessChargingStarted()> (1)
<android.media.IRingtonePlayer$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IRingtonePlayer: void play(android.os.IBinder,android.net.Uri,int)> (1)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void expandAlarm(com.android.deskclock.AlarmClock$AlarmItemAdapter$ItemHolder)> (2)
<com.android.mms.ui.MessagingPreferenceActivity: void loadPrefs()> (2)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)> (3)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long)> (1)
<com.android.contacts.util.ContactBadgeUtil: java.lang.CharSequence getSocialDate(com.android.contacts.util.StreamItemEntry,android.content.Context)> (1)
<com.android.contacts.util.DataStatus: java.lang.CharSequence getTimestampLabel(android.content.Context)> ()
<com.android.dialer.PhoneCallDetailsHelper: void setPhoneCallDetails(com.android.dialer.PhoneCallDetailsViews,com.android.dialer.PhoneCallDetails,boolean)> (1)
<com.android.settings.applications.AppOpsState$AppOpEntry: java.lang.CharSequence getTimeText(android.content.res.Resources,boolean)> (2)
<android.app.DatePickerDialog: void updateTitle(int,int,int)> (2)
<android.telephony.CellBroadcastMessage: java.lang.String getDateString(android.content.Context)> ()
<android.telephony.CellBroadcastMessage: java.lang.String getSpokenDateString(android.content.Context)> ()
<android.widget.AnalogClock: void updateContentDescription(android.text.format.Time)> (1)
<android.widget.DatePicker: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<android.widget.TimePicker: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<com.android.calendar.event.EditEventView: void setDate(android.widget.TextView,long)> (3)
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.Context,android.content.res.Resources,com.android.calendarcommon2.EventRecurrence,boolean)> (2)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void updateDialog()> (5)
<com.android.datetimepicker.date.AccessibleDateAnimator: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<com.android.datetimepicker.date.DatePickerDialog: void setCurrentView(int)> (3)
<com.android.datetimepicker.date.DatePickerDialog: void updateDisplay(boolean)> (3)
<com.android.datetimepicker.time.RadialPickerLayout: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.deskclock.AnalogClock: void updateContentDescription(android.text.format.Time)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void refreshInterface()> (2)
<com.android.mms.ui.MessageUtils: java.lang.String formatTimeStampString(android.content.Context,long,boolean)> (6)
<com.android.providers.media.MediaProvider: java.lang.String dump(com.android.providers.media.MediaProvider$DatabaseHelper,boolean)> (2)
<android.widget.CalendarView: void access$2300(android.widget.CalendarView,java.util.Calendar)> (1)
<android.widget.CalendarView: void goTo(java.util.Calendar,boolean,boolean,boolean)> (4)
<android.widget.CalendarView: void onScroll(android.widget.AbsListView,int,int,int)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.email.activity.MessageFileViewFragment: void showDetails()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void showDetails()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (4)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.calendar.month.SimpleWeekView: void onDraw(android.graphics.Canvas)> (1)
<com.android.settings.DataUsageSummary: void updatePolicy(boolean)> (4)
<com.android.settings.DataUsageSummary$12: void onInspectRangeChanged()> (1)
<com.android.settings.DataUsageSummary$9: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.settings.DataUsageSummary: void access$1800(com.android.settings.DataUsageSummary)> (1)
<android.widget.TextClock$1: void onChange(boolean,android.net.Uri)> (1)
<android.widget.TextClock$1: void onChange(boolean)> (1)
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void onPageSwitched(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.PagedView$PageSwitchListener: void onPageSwitched(android.view.View,int)> (2)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (10)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtraWithTitleWithCalendarId(java.lang.Object,long,long,long,long,int,int,long,long,java.lang.String,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.DayView: void access$5100(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$4600(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$4500(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.datetimepicker.date.DatePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$3: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean processKeyUp(int)> (1)
<com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.deskclock.AlarmInitReceiver$1: void run()> (1)
<com.android.deskclock.Alarms: long addAlarm(android.content.Context,com.android.deskclock.Alarm)> (2)
<com.android.deskclock.Alarms: long setAlarm(android.content.Context,com.android.deskclock.Alarm)> (3)
<com.android.deskclock.Alarms: void deleteAlarm(android.content.Context,int)> (4)
<com.android.deskclock.Alarms: void enableAlarm(android.content.Context,int,boolean)> (2)
<com.android.deskclock.Alarms: void saveSnoozeAlert(android.content.Context,int,long)> (3)
<com.android.deskclock.AlarmAlert: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmAlert: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (1)
<com.android.deskclock.AlarmAlert: void onTrigger(android.view.View,int)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.deskclock.AlarmReceiver$1: void run()> (1)
<com.android.deskclock.SetAlarm: void onDialogTimeSet(com.android.deskclock.Alarm,int,int)> (1)
<com.android.deskclock.SetAlarm: void updatePrefs(com.android.deskclock.Alarm)> (2)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: void updateView(android.view.View,com.android.deskclock.worldclock.CityObj)> (1)
<com.android.deskclock.worldclock.WorldClockAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void onCreate(android.os.Bundle)> (1)
<android.widget.DatePicker: void <init>(android.content.Context)> (3)
<com.android.contacts.datepicker.DatePickerDialog: void <init>(android.content.Context,com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener,int,int,int,boolean)> (2)
<com.android.contacts.datepicker.DatePickerDialog: void <init>(android.content.Context,int,com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener,int,int,int)> ()
<com.android.browser.PageDialogsHandler: void access$700(com.android.browser.PageDialogsHandler,com.android.browser.Tab)> (1)
<com.android.browser.PageDialogsHandler: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.browser.Controller: void showSslCertificateOnError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<com.android.browser.PageDialogsHandler$3: void onCancel(android.content.DialogInterface)> (1)
<com.android.browser.PageDialogsHandler$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.PageDialogsHandler$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.TrustedCredentialsSettings$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.Editor: void setValues(com.android.contacts.common.model.dataitem.DataKind,com.android.contacts.common.model.ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> (2)
<com.android.contacts.editor.LabeledEditorView: void rebuildValues()> (4)
<com.android.contacts.editor.TextFieldsEditorView: void setValues(com.android.contacts.common.model.dataitem.DataKind,com.android.contacts.common.model.ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> (3)
<com.android.contacts.detail.ContactDetailFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailFragment: void setData(android.net.Uri,com.android.contacts.model.Contact)> (3)
<com.android.internal.location.GpsNetInitiatedHandler: void setNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)> (1)
<com.android.server.accounts.AccountManagerService: void installNotification(int,android.app.Notification,android.os.UserHandle)> (2)
<com.android.server.connectivity.Tethering: void showTetheredNotification(int)> (1)
<com.android.server.connectivity.Vpn: void showNotification(com.android.internal.net.VpnConfig,java.lang.String,android.graphics.Bitmap)> (2)
<com.android.server.content.SyncManager$SyncHandler: void installHandleTooManyDeletesNotification(android.accounts.Account,java.lang.String,long,int)> (1)
<com.android.server.DeviceStorageMonitorService: void sendNotification()> (1)
<com.android.server.display.WifiDisplayAdapter: void handleUpdateNotification()> (1)
<com.android.server.input.InputManagerService: void showMissingKeyboardLayoutNotification()> (1)
<com.android.server.UiModeManagerService: void adjustStatusBarCarModeLocked()> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateAdbNotification()> (4)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbNotification()> (3)
<com.android.server.wifi.WifiNotificationController: void setNotificationVisible(boolean,int,boolean,int)> (2)
<com.android.systemui.usb.StorageNotification: void setMediaStorageNotification(int,int,int,boolean,boolean,android.app.PendingIntent)> (1)
<com.android.systemui.usb.StorageNotification: void setUsbStorageNotification(int,int,int,boolean,boolean,android.app.PendingIntent)> (2)
<android.app.NotificationManager: void notify(int,android.app.Notification)> (37)
<com.android.contacts.common.vcard.ExportProcessor: void doCancelNotification()> (1)
<com.android.contacts.common.vcard.ExportProcessor: void doFinishNotification(java.lang.String,java.lang.String)> (1)
<com.android.contacts.common.vcard.ExportProcessor: void doProgressNotification(android.net.Uri,int,int)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity: void showFailureNotification(int)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onCancelRequest(com.android.contacts.common.vcard.CancelRequest,int)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onExportProcessed(com.android.contacts.common.vcard.ExportRequest,int)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportCanceled(com.android.contacts.common.vcard.ImportRequest,int)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportProcessed(com.android.contacts.common.vcard.ImportRequest,int,int)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier: void updateNotification(android.net.Uri)> (2)
<com.android.providers.downloads.DownloadNotifier: void updateWithLocked(java.util.Collection)> (1)
<com.android.server.ConnectivityService: void setProvNotificationVisible(boolean,int,java.lang.String,java.lang.String)> (4)
<com.android.server.net.LockdownVpnTracker: void showNotification(int,int)> (1)
<com.android.shell.BugreportReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()> (7)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$500(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$000(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor)> (1)
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> ()
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()> (1)
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: com.android.server.InputMethodManagerService$ImeSubtypeListItem getNextInputMethod(boolean,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.RichInputMethodManager: boolean hasMultipleEnabledIMEsOrSubtypes(boolean)> (3)
<com.android.inputmethod.latin.RichInputMethodManager: boolean switchToNextInputMethodAndSubtype(android.os.IBinder)> (1)
<com.android.inputmethod.latin.setup.SetupActivity: boolean isThisImeEnabled(android.content.Context)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: boolean hasMultipleEnabledIMEsOrSubtypes(android.view.inputmethod.InputMethodManager,boolean)> (1)
<com.android.settings.CryptKeeper: boolean hasMultipleEnabledIMEsOrSubtypes(android.view.inputmethod.InputMethodManager,boolean)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: boolean needsToShowImeSwitchOngoingNotification(android.view.inputmethod.InputMethodManager)> (1)
<com.android.systemui.statusbar.tablet.InputMethodButton: boolean needsToShowIMEButtonWhenVisibilityAuto()> (1)
<com.android.commands.ime.Ime: void run(java.lang.String[])> (1)
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> (12)
<com.android.server.power.PowerManagerService$DreamReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (21)
<android.widget.SpellChecker: void <init>(android.widget.TextView)> (1)
<android.widget.Editor: void updateSpellCheckSpans(int,int,boolean)> (3)
<android.inputmethodservice.ExtractButton: void access$300(android.widget.TextView)> (1)
<android.inputmethodservice.ExtractEditText: void access$300(android.widget.TextView)> (1)
<android.widget.AutoCompleteTextView: void access$300(android.widget.TextView)> (1)
<android.widget.Button: void access$300(android.widget.TextView)> (1)
<android.widget.CheckBox: void access$300(android.widget.TextView)> (2)
<android.widget.CheckedTextView: void access$300(android.widget.TextView)> (1)
<android.widget.Chronometer: void access$300(android.widget.TextView)> (1)
<android.widget.CompoundButton: void access$300(android.widget.TextView)> (1)
<android.widget.DateTimeView: void access$300(android.widget.TextView)> (1)
<android.widget.DigitalClock: void access$300(android.widget.TextView)> (1)
<android.widget.EditText: void access$300(android.widget.TextView)> (1)
<android.widget.MultiAutoCompleteTextView: void access$300(android.widget.TextView)> (1)
<android.widget.NumberPicker$CustomEditText: void access$300(android.widget.TextView)> (1)
<android.widget.RadioButton: void access$300(android.widget.TextView)> (2)
<android.widget.SearchView$SearchAutoComplete: void access$300(android.widget.TextView)> (1)
<android.widget.Switch: void access$300(android.widget.TextView)> (2)
<android.widget.TextClock: void access$300(android.widget.TextView)> (1)
<android.widget.TextView$3: void run()> (1)
<android.widget.ToggleButton: void access$300(android.widget.TextView)> (2)
<com.android.browser.UrlInputView: void access$300(android.widget.TextView)> (1)
<com.android.calculator2.CalculatorEditText: void access$300(android.widget.TextView)> (1)
<com.android.calculator2.ColorButton: void access$300(android.widget.TextView)> (1)
<com.android.calendar.MultiStateButton: void access$300(android.widget.TextView)> (1)
<com.android.calendar.recurrencepicker.WeekButton: void access$300(android.widget.TextView)> (3)
<com.android.camera.ui.Switch: void access$300(android.widget.TextView)> (2)
<com.android.datetimepicker.AccessibleTextView: void access$300(android.widget.TextView)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void access$300(android.widget.TextView)> (1)
<com.android.deskclock.AndroidClockTextView: void access$300(android.widget.TextView)> (1)
<com.android.deskclock.ZeroTopPaddingTextView: void access$300(android.widget.TextView)> (1)
<com.android.development.LogTextBox: void access$300(android.widget.TextView)> (1)
<com.android.dialer.dialpad.DigitsEditText: void access$300(android.widget.TextView)> (1)
<com.android.dialer.dialpad.SmartDialTextView: void access$300(android.widget.TextView)> (1)
<com.android.dreams.phototable.BummerView: void access$300(android.widget.TextView)> (1)
<com.android.email.activity.AddressTextView: void access$300(android.widget.TextView)> (2)
<com.android.email.activity.ChipsAddressTextView: void access$300(android.widget.TextView)> (3)
<com.android.ex.chips.RecipientEditTextView: void access$300(android.widget.TextView)> (2)
<com.android.ex.editstyledtext.EditStyledText: void access$300(android.widget.TextView)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: void access$300(android.widget.TextView)> (1)
<com.android.gallery3d.filtershow.ui.FilterIconButton: void access$300(android.widget.TextView)> (2)
<com.android.gallery3d.filtershow.ui.IconButton: void access$300(android.widget.TextView)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void access$300(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: void access$300(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void access$300(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void access$300(android.widget.TextView)> (1)
<com.android.internal.policy.impl.keyguard.NumPadKey: void access$300(android.widget.TextView)> (1)
<com.android.internal.view.menu.ActionMenuItemView: void access$300(android.widget.TextView)> (1)
<com.android.internal.view.menu.IconMenuItemView: void access$300(android.widget.TextView)> (1)
<com.android.internal.widget.DialogTitle: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.AccessibleTabView: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.BubbleTextView: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.ButtonDropTarget: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.DeleteDropTarget: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.FolderEditText: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.InfoDropTarget: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.PagedViewIcon: void access$300(android.widget.TextView)> (1)
<com.android.launcher2.StrokedTextView: void access$300(android.widget.TextView)> (1)
<com.android.mms.ui.RecipientsEditor: void access$300(android.widget.TextView)> (3)
<com.android.mms.ui.SearchActivity$TextViewSnippet: void access$300(android.widget.TextView)> (1)
<com.android.quicksearchbox.ui.QueryTextView: void access$300(android.widget.TextView)> (1)
<com.android.settings.AccessibilitySettings$ToggleSwitch: void access$300(android.widget.TextView)> (2)
<com.android.settings.applications.RunningProcessesView$TimeTicker: void access$300(android.widget.TextView)> (1)
<com.android.systemui.statusbar.phone.CarrierLabel: void access$300(android.widget.TextView)> (1)
<com.android.systemui.statusbar.policy.Clock: void access$300(android.widget.TextView)> (1)
<com.android.systemui.statusbar.policy.DateView: void access$300(android.widget.TextView)> (1)
<com.android.systemui.statusbar.RotationToggle: void access$300(android.widget.TextView)> (2)
<com.android.settings.inputmethod.SingleSpellCheckerPreference$2: void onClick(android.view.View)> (1)
<com.android.settings.inputmethod.SpellCheckersSettings: void updateScreen()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void changeCurrentSpellChecker(com.android.settings.inputmethod.SingleSpellCheckerPreference)> (2)
<com.android.settings.inputmethod.SingleSpellCheckerPreference$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.ProxySelector: void onActivityCreated(android.os.Bundle)> (1)
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)> (3)
<com.android.internal.widget.LockPatternUtils: boolean isBiometricWeakInstalled()> (5)
<com.android.email.SecurityPolicy: int getInactiveReasons(com.android.emailcommon.provider.Policy)> (2)
<com.android.settings.applications.InstalledAppDetails: void checkForceStop()> (3)
<com.android.settings.applications.InstalledAppDetails: void initDataButtons()> (1)
<com.android.settings.applications.InstalledAppDetails: void initUninstallButtons()> (1)
<com.android.settings.applications.InstalledAppDetails: void onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.settings.fuelgauge.PowerUsageDetail: void checkForceStop()> (2)
<com.android.server.pm.PackageManagerService: int access$3600(com.android.server.pm.PackageManagerService,java.lang.String,int,int)> (1)
<android.app.admin.DevicePolicyManager: void lockNow()> ()
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)> ()
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> ()
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> ()
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)> (1)
<android.app.admin.DevicePolicyManager: void wipeData(int)> (1)
<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)> (2)
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)> (5)
<android.app.admin.DevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)> (1)
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)> (3)
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName)> ()
<com.android.internal.policy.impl.keyguard.KeyguardHostView: int getDisabledFeatures(android.app.admin.DevicePolicyManager)> (1)
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)> ()
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)> (1)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()> (2)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)> (2)
<com.android.internal.widget.LockPatternUtils: int getRequestedMinimumPasswordLength()> (1)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName)> ()
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLetters()> (1)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName)> ()
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLowerCase()> (1)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)> (1)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNonLetter()> (1)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName)> ()
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNumeric()> (1)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName)> ()
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumSymbols()> (1)
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName)> ()
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumUpperCase()> (1)
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)> (2)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordQuality()> (1)
<com.android.server.wm.KeyguardDisableHandler$KeyguardTokenWatcher: void acquired()> (1)
<com.android.email.SecurityPolicy: void setActivePolicies()> (4)
<com.android.settings.DeviceAdminSettings: void updateList()> (1)
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)> (4)
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)> (2)
<com.android.internal.widget.LockPatternUtils: void reportFailedPasswordAttempt()> (1)
<com.android.internal.widget.LockPatternUtils: void reportSuccessfulPasswordAttempt()> (1)
<com.android.settings.DeviceAdminAdd$3: void onClick(android.view.View)> (1)
<com.android.server.power.Notifier: void onGoToSleepFinished()> (1)
<com.android.server.power.Notifier: void onWakeUpStarted()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.internal.widget.LockPatternView: void notifyPatternDetected()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$400(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor)> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$ViewMediatorCallback: void keyguardDone(boolean)> (2)
<android.app.KeyguardManager: boolean isKeyguardSecure()> (4)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration()> (2)
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> (3)
<com.android.server.wm.WindowManagerService: void access$300(com.android.server.wm.WindowManagerService)> (5)
<com.android.server.wm.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)> (2)
<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)> (2)
<com.android.server.wm.WindowManagerService: void reevaluateStatusBarVisibility()> (1)
<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)> (4)
<com.android.server.wm.WindowManagerService: void setCurrentUser(int)> (1)
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.wm.WindowManagerService: void setOverscan(int,int,int,int,int)> (2)
<com.android.server.wm.WindowManagerService: void setUniverseTransformLocked(com.android.server.wm.WindowState,float,float,float,float,float,float,float)> (1)
<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)> (6)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void onAttachedToWindow()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void showBouncer(int)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void showBouncer(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void showBouncer(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void showBouncer(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$3: void onFinish()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void showChallenge(boolean,int)> (2)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$4: void run()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void cancelTransitionsInProgress()> (2)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void access$200(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout,boolean)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void access$100(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout,boolean)> (1)
<com.android.internal.app.IAppOpsCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.IAppOpsCallback: void opChanged(int,java.lang.String)> (2)
<com.android.location.fused.FusedLocationProvider: void reportLocation(android.location.Location)> (2)
<com.android.server.accessibility.AccessibilityInputFilter: void processBatchedEvents(long)> (1)
<com.android.server.accessibility.TouchExplorer: void access$2900(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int,int,int)> (1)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateDragging(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateTouchExploring(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendActionDownAndUp(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendDownForAllActiveNotInjectedPointers(android.view.MotionEvent,int)> (4)
<com.android.server.accessibility.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)> (3)
<com.android.server.accessibility.TouchExplorer: void sendMotionEventStripInactivePointers(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendTouchExplorationGestureStartAndHoverEnterIfNeeded(int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendUpForInjectedDownPointers(android.view.MotionEvent,int)> (1)
<android.webkit.WebViewCore: java.lang.String openFileChooser(java.lang.String,java.lang.String)> ()
<android.webkit.WebViewCore: boolean jsUnload(java.lang.String,java.lang.String)> ()
<android.webkit.WebViewCore: boolean jsConfirm(java.lang.String,java.lang.String)> ()
<android.webkit.WebViewCore: boolean jsInterrupt()> ()
<android.webkit.WebViewCore: java.lang.String jsPrompt(java.lang.String,java.lang.String,java.lang.String)> ()
<android.webkit.WebViewCore: void jsAlert(java.lang.String,java.lang.String)> ()
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.email.activity.MessageFileViewFragment: void onResume()> (2)
<com.android.email.activity.MessageViewFragment: void onResume()> (2)
<com.android.email.activity.MessageFileViewFragment: void access$1900(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void onSuccess(com.android.emailcommon.provider.EmailContent$Attachment[])> (1)
<com.android.email.activity.MessageViewFragment: void access$1900(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void setHardKeyboardStatus(boolean,boolean)> (1)
<com.android.server.TwilightService$TwilightListener: void onTwilightStateChanged()> (1)
<com.android.inputmethod.latin.LatinIME$SubtypeState: void switchSubtype(android.os.IBinder,com.android.inputmethod.latin.RichInputMethodManager)> (1)
<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.RichInputMethodManager: boolean switchToNextInputSubtypeInThisIme(android.os.IBinder,boolean)> (1)
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> ()
<android.speech.tts.TextToSpeech: boolean isSpeaking()> (1)
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)> (1)
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)> (2)
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)> (11)
<android.speech.tts.TextToSpeech: int stop()> (2)
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)> ()
<android.speech.tts.TextToSpeech: java.util.Locale getDefaultLanguage()> (1)
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()> (3)
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)> (1)
<android.speech.tts.TextToSpeech: void shutdown()> (6)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: void onStart()> (1)
<com.android.voicedialer.VoiceDialerActivity: void access$2200(com.android.voicedialer.VoiceDialerActivity,boolean)> (2)
<com.android.settings.tts.TtsEnginePreference$RadioButtonGroupState: void setCurrentKey(java.lang.String)> (1)
<android.webkit.AccessibilityInjector: void onPageStarted(java.lang.String)> (1)
<android.webkit.AccessibilityInjector: void updateJavaScriptEnabled(boolean)> (1)
<android.webkit.WebViewClassic: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> (1)
<android.speech.tts.TextToSpeech$8: java.lang.Object run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.speech.tts.TextToSpeech$2: java.lang.Integer run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.ITextToSpeechService: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> (1)
<com.android.browser.BrowserWebView: boolean performAccessibilityAction(int,android.os.Bundle)> (4)
<com.android.email.view.RigidWebView: boolean performAccessibilityAction(int,android.os.Bundle)> (4)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.providers.settings.SettingsHelper: void applyAudioSettings()> (1)
<android.app.IActivityManager: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.camera.CameraActivity: void onBackPressed()> (3)
<com.android.camera.CameraActivity: void closeModule(com.android.camera.CameraModule)> (2)
<com.android.camera.CameraActivity: void onPause()> (4)
<com.android.camera.VideoUI: void clickShutter()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.phone.ADNList$QueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.phone.ADNList$QueryHandler: void onInsertComplete(int,java.lang.Object,android.net.Uri)> (1)
<com.android.phone.ADNList$QueryHandler: void onUpdateComplete(int,java.lang.Object,int)> (1)
<com.android.phone.FdnList: void access$200(com.android.phone.ADNList)> (1)
<com.android.phone.SimContacts: void access$200(com.android.phone.ADNList)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: boolean onKeyDown(android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> (4)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<android.app.UiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void inflateKeyguardView(android.os.Bundle)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void access$3000(com.android.systemui.statusbar.phone.PhoneStatusBar)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.systemui.media.RingtonePlayer: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.power.PowerUI: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.settings.SettingsUI: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.SystemUIService: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void disable(int)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void handleNotificationError(android.os.IBinder,android.service.notification.StatusBarNotification,java.lang.String)> (5)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void removeNotification(android.os.IBinder)> (1)
<com.android.systemui.statusbar.CommandQueue$Callbacks: void setSystemUiVisibility(int,int)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void topAppWindowChanged(boolean)> (1)
<com.android.systemui.statusbar.BaseStatusBar$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.tv.TvStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$24: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$3: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$5: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void startSettingsActivity(android.content.Intent)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)> (3)
<com.android.browser.BrowserWebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (1)
<com.android.email.view.RigidWebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (1)
<com.android.phone.sip.SipSettings: void access$500(com.android.phone.sip.SipSettings,android.net.sip.SipProfile)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.systemui.media.RingtonePlayer$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void access$1300(com.android.deskclock.AlarmClock$AlarmItemAdapter,com.android.deskclock.AlarmClock$AlarmItemAdapter$ItemHolder)> (4)
<com.android.mms.ui.MessagingPreferenceActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.MessagingPreferenceActivity: void restoreDefaultPreferences()> (1)
<com.android.email.activity.MessageListItem: void setTimestamp(long)> (1)
<com.android.email.activity.MessageViewFragmentBase: void updateHeaderView(com.android.emailcommon.provider.EmailContent$Message)> (4)
<com.android.email.widget.EmailWidget: android.widget.RemoteViews getViewAt(int)> (1)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)> ()
<com.android.contacts.detail.ContactDetailDisplayUtils: android.view.View addStreamItemText(android.content.Context,com.android.contacts.util.StreamItemEntry,android.view.View)> (1)
<com.android.dialer.calllog.CallLogListItemHelper: void setPhoneCallDetails(com.android.dialer.calllog.CallLogListItemViews,com.android.dialer.PhoneCallDetails,boolean)> (1)
<com.android.settings.applications.AppOpsCategory$AppListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.settings.applications.AppOpsDetails: boolean refreshUi()> (1)
<android.app.DatePickerDialog: void <init>(android.content.Context,int,android.app.DatePickerDialog$OnDateSetListener,int,int,int)> (1)
<android.app.DatePickerDialog: void onDateChanged(android.widget.DatePicker,int,int,int)> (1)
<android.widget.AnalogClock: void onTimeChanged()> (2)
<android.widget.DatePicker: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.TimePicker: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.calendar.event.EditEventView: void access$300(com.android.calendar.event.EditEventView,android.widget.TextView,long)> (2)
<com.android.calendar.event.EditEventView: void populateRepeats()> (3)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onCheckedChanged(android.widget.RadioGroup,int)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.datetimepicker.date.DatePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onClick(android.view.View)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onYearSelected(int)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onDayOfMonthSelected(int,int,int)> (1)
<com.android.deskclock.AnalogClock: void onTimeChanged()> (3)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void access$100(com.android.inputmethod.dictionarypack.DictionarySettingsFragment)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.ui.MessageUtils: java.lang.String formatTimeStampString(android.content.Context,long)> (5)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getNotificationIndDetails(android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageUtils: java.lang.String getTextMessageDetails(android.content.Context,android.database.Cursor)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void dumpMessage(android.database.Cursor,android.content.Context)> (1)
<com.android.providers.media.MediaProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.media.MediaProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<android.widget.CalendarView$WeeksAdapter: void onDateTapped(java.util.Calendar)> (1)
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<android.widget.CalendarView: void setDate(long,boolean,boolean)> (2)
<android.widget.CalendarView: void setMaxDate(long)> (1)
<android.widget.CalendarView: void setMinDate(long)> (1)
<android.widget.CalendarView: void access$900(android.widget.CalendarView,android.widget.AbsListView,int,int,int)> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: boolean goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void updateMonthHighlight(android.widget.AbsListView)> (2)
<com.android.settings.DataUsageSummary: void access$600(com.android.settings.DataUsageSummary,boolean)> (5)
<com.android.settings.DataUsageSummary: void setMobileDataEnabled(boolean)> (1)
<com.android.settings.DataUsageSummary: void setPolicyLimitBytes(long)> (1)
<com.android.settings.DataUsageSummary: void setPolicyWarningBytes(long)> (1)
<com.android.settings.widget.ChartDataUsageView$DataUsageChartListener: void onInspectRangeChanged()> (1)
<com.android.settings.DataUsageSummary$10: void onLoadFinished(android.content.Loader,com.android.settings.net.ChartData)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void notifyPageSwitched()> (5)
<com.android.internal.policy.impl.keyguard.PagedView: void setPageSwitchListener(com.android.internal.policy.impl.keyguard.PagedView$PageSwitchListener)> (2)
<com.android.calendar.agenda.AgendaFragment$2: void run()> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void handleSelectSyncedCalendarsClicked(android.view.View)> ()
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (5)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (16)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> (7)
<com.android.calendar.event.CreateEventDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$5000(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean access$800(com.android.datetimepicker.time.TimePickerDialog,int)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.deskclock.AlarmClock$7: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.deskclock.SetAlarm: long saveAlarm(com.android.deskclock.Alarm)> (4)
<com.android.deskclock.AlarmClock$8: java.lang.Void doInBackground(com.android.deskclock.Alarm[])> (1)
<com.android.deskclock.HandleSetAlarm: boolean handleCursorResult(android.database.Cursor,long,boolean,boolean)> (1)
<com.android.deskclock.AlarmClock$4: java.lang.Void doInBackground(java.lang.Integer[])> (1)
<com.android.deskclock.AlarmClock$5: java.lang.Void doInBackground(com.android.deskclock.Alarm[])> (1)
<com.android.deskclock.SetAlarm$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.deskclock.SetAlarm: void revert()> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.deskclock.AlarmTimePickerDialogFragment$AlarmTimePickerDialogHandler: void onDialogTimeSet(com.android.deskclock.Alarm,int,int)> (1)
<com.android.deskclock.SetAlarm: void onCreate(android.os.Bundle)> (2)
<com.android.deskclock.SetAlarm: void onRestoreInstanceState(android.os.Bundle)> (3)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.deskclock.AlarmClock$7: void onPostExecute(java.lang.Void)> (1)
<com.android.deskclock.AlarmClock: void scrollToAlarm(int)> (2)
<com.android.contacts.datepicker.DatePickerDialog: void <init>(android.content.Context,com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener,int,int,int)> ()
<com.android.contacts.editor.EventFieldEditorView: android.app.Dialog createDatePickerDialog()> (1)
<com.android.browser.Controller: void onConfgurationChanged(android.content.res.Configuration)> (1)
<com.android.browser.WebViewController: void showSslCertificateOnError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
Permission:android.permission.MODIFY_AUDIO_SETTINGS
346 Callers:
<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)> (5)
<android.media.AudioService: void setBluetoothScoOn(boolean)> (2)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (2)
<android.media.AudioService: void setSpeakerphoneOn(boolean)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder,int)> (2)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> ()
<android.media.IAudioService$Stub: void setBluetoothScoOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)> ()
<android.media.IAudioService$Stub: void setSpeakerphoneOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder,int)> (2)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setBluetoothScoOn(boolean)> (1)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.IAudioService: void setSpeakerphoneOn(boolean)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder,int)> (1)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setBluetoothScoOn(boolean)> (3)
<android.media.AudioManager: void setMode(int)> (2)
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> (3)
<android.media.AudioManager: void startBluetoothSco()> ()
<android.media.AudioManager: void stopBluetoothSco()> ()
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processAudioEvent(int,android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processAudioEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.telephony.CallManager: void acceptCall(com.android.internal.telephony.Call)> (1)
<com.android.internal.telephony.CallManager: void setAudioMode()> (1)
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> ()
<com.android.dialer.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setSpeakerPhoneOn(boolean)> (1)
<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)> (10)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (7)
<com.android.phone.PhoneUtils: void setAudioMode(com.android.internal.telephony.CallManager)> (5)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$PlaybackView: void setSpeakerPhoneOn(boolean)> (2)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void switchInCallAudio(com.android.phone.InCallScreen$InCallAudioMode)> (1)
<com.android.phone.InCallScreen: void toggleBluetooth()> ()
<com.android.phone.InCallScreen: void toggleSpeaker()> (1)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.PhoneUtils: boolean activateSpeakerIfDocked(com.android.internal.telephony.Phone)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (4)
<com.android.phone.PhoneUtils: void restoreSpeakerMode(android.content.Context)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.phone.BluetoothPhoneService$3: boolean answerCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: void internalAnswerCall()> (2)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.phone.PhoneUtils: void setAudioMode()> (4)
<com.android.phone.PhoneUtils: void switchHoldingAndActive(com.android.internal.telephony.Call)> (7)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$SpeakerphoneListener: void onClick(android.view.View)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter: void postSuccessfulPrepareActions()> (1)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.phone.InCallTouchUi: void handleAudioButtonClick()> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean answerCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.Ringer: void stopRing()> (3)
<com.android.phone.InCallScreen: void internalResolveIntent(android.content.Intent)> (2)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.PhoneUtils: void mergeCalls(com.android.internal.telephony.CallManager)> (3)
<com.android.phone.PhoneUtils: void sendEmptyFlash(com.android.internal.telephony.Phone)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter: void access$700(com.android.dialer.voicemail.VoicemailPlaybackPresenter)> (1)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallUiState$InCallScreenMode)> (12)
<com.android.phone.PhoneGlobals: void clearOtaState()> (3)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<android.bluetooth.IBluetoothHeadsetPhone: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (4)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.PhoneUtils: void mergeCalls()> (1)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$2: void onPostExecute(java.lang.Exception)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: boolean ignoreAllIncomingCalls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAnswerCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void internalSilenceRinger()> (2)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$2: void onPostExecute(java.lang.Object)> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneGlobals: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4900(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void internalRespondViaSms()> (1)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<android.media.AudioManager: boolean isBluetoothA2dpOn()> (5)
<android.inputmethodservice.KeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (2)
<com.android.inputmethod.accessibility.AccessibilityUtils: boolean shouldObscureInput(android.view.inputmethod.EditorInfo)> (2)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: boolean shouldObscureSpeech()> (3)
<com.android.musicfx.ActivityMusic$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.musicfx.ActivityMusic: void onResume()> (1)
<android.inputmethodservice.KeyboardView: void showPreview(int)> (4)
<com.android.internal.widget.PasswordEntryKeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: java.lang.String getKeyDescription(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.accessibility.AccessibilityUtils: void onStartInputViewInternal(android.view.View,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> (1)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> (1)
<com.android.internal.policy.impl.keyguard.ObscureSpeechDelegate: void sendAccessibilityEvent(android.view.View,int)> (1)
<android.inputmethodservice.KeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (2)
<android.inputmethodservice.KeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (2)
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (5)
<com.android.internal.widget.PasswordEntryKeyboardView: void showPreview(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.view.accessibility.AccessibilityEvent createAccessibilityEvent(com.android.inputmethod.keyboard.Key,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (2)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleModeChange()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleShift()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setKeyboardMode(int)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void sendAccessibilityEventForKey(com.android.inputmethod.keyboard.Key,int)> (2)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void onKey(int,int[])> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performActionForKey(com.android.inputmethod.keyboard.Key,int,android.os.Bundle)> (2)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onHoverKey(com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onTransitionKey(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: boolean performAction(int,int,android.os.Bundle)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: boolean performAction(int,int,android.os.Bundle)> (1)
<android.media.AudioManager: boolean isWiredHeadsetOn()> (5)
<android.media.AudioManager: void setMicrophoneMute(boolean)> (1)
<com.android.phone.PhoneUtils: void setMuteInternal(com.android.internal.telephony.Phone,boolean)> (3)
<com.android.phone.PhoneUtils: boolean startNewCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.PhoneUtils: void access$100(com.android.internal.telephony.Phone,boolean)> (1)
<com.android.phone.PhoneUtils: void setMute(boolean)> (7)
<com.android.phone.CallNotifier: void onResendMute()> (1)
<com.android.phone.InCallScreen: void onMuteClick()> (2)
<com.android.phone.PhoneUtils: java.lang.Boolean restoreMuteState()> (2)
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> (2)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.media.AudioManager: void setParameters(java.lang.String)> (7)
<com.android.bluetooth.hfp.HeadsetStateMachine: void configAudioParameters()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processLocalVrEvent(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processNoiceReductionEvent(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processVrEvent(int)> (1)
<com.android.phone.PhoneGlobals: void handleQueryTTYModeResponse(android.os.Message)> (1)
<com.android.phone.PhoneUtils: void turnOnNoiseSuppression(android.content.Context,boolean,boolean)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$2400(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4300(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5400(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4800(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.phone.PhoneGlobals: void access$800(com.android.phone.PhoneGlobals,android.os.Message)> (1)
<com.android.phone.PhoneUtils: void restoreNoiseSuppression(android.content.Context)> ()
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<android.server.BluetoothA2dpService: boolean checkSinkSuspendState(int)> ()
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> ()
<android.server.BluetoothA2dpService: void onBluetoothEnable()> ()
<android.server.BluetoothA2dpService: void onBluetoothDisable()> ()
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
Permission:android.permission.READ_EXTERNAL_STORAGE
25 Callers:
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFileAndEnforcePathPermissionsHelper(android.net.Uri,java.lang.String)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String)> ()
<android.content.pm.IPackageManager$Stub: int[] getPackageGids(java.lang.String)> (2)
<android.content.pm.IPackageManager: int[] getPackageGids(java.lang.String)> (1)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.DevelopmentSettings$ConfirmEnforceFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DevelopmentSettings: void updateAllOptions()> (3)
<com.android.settings.DevelopmentSettings: void access$100(com.android.settings.DevelopmentSettings)> (2)
<com.android.settings.DevelopmentSettings: void resetDangerousOptions()> (1)
<com.android.settings.DevelopmentSettings: void setPrefsEnabledState(boolean)> (3)
<com.android.settings.DevelopmentSettings$ConfirmEnforceFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DevelopmentSettings: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DevelopmentSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DevelopmentSettings: void onResume()> (2)
<com.android.settings.DevelopmentSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.DevelopmentSettings: void setPermissionEnforced(android.content.Context,java.lang.String,boolean)> (2)
<com.android.settings.DevelopmentSettings: void access$000(android.content.Context,java.lang.String,boolean)> (1)
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor makeThumbInternal(com.android.providers.media.MediaProvider$ThumbData)> (2)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor access$1200(com.android.providers.media.MediaProvider,com.android.providers.media.MediaProvider$ThumbData)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor getThumb(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,long,android.net.Uri)> (1)
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
345 Callers:
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.browser.provider.BrowserProvider2: int updateBookmarksInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (3)
<com.android.browser.provider.BrowserProvider2: int deleteBookmarks(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.provider.BrowserProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[],boolean)> (2)
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (3)
<com.android.browser.provider.BrowserProvider2: int updateHistoryInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.browser.provider.BrowserProvider2: java.lang.String[] getAccountNameAndType(long)> (2)
<com.android.browser.provider.BrowserProvider2: boolean isValidParent(java.lang.String,java.lang.String,long)> (1)
<com.android.browser.provider.BrowserProvider2: boolean setParentValues(long,android.content.ContentValues)> (1)
<com.android.browser.provider.BrowserProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)> (2)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> (2)
<com.android.browser.Controller$10: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.Controller$10: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> (2)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.DataController$DataControllerHandler: void doLoadThumbnail(com.android.browser.Tab)> (1)
<android.webkit.WebIconDatabaseClassic$EventHandler: void bulkRequestIcons(android.os.Message)> (1)
<android.webkit.WebIconDatabaseClassic$EventHandler: void access$500(android.webkit.WebIconDatabaseClassic$EventHandler,android.os.Message)> (2)
<android.webkit.WebIconDatabaseClassic$EventHandler: void postMessage(android.os.Message)> (1)
<android.webkit.WebIconDatabaseClassic$EventHandler: void access$900(android.webkit.WebIconDatabaseClassic$EventHandler,android.os.Message)> (7)
<android.webkit.WebIconDatabaseClassic: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<android.webkit.WebIconDatabaseClassic: void close()> (1)
<android.webkit.WebIconDatabaseClassic: void open(java.lang.String)> (1)
<android.webkit.WebIconDatabaseClassic: void releaseIconForPageUrl(java.lang.String)> (1)
<android.webkit.WebIconDatabaseClassic: void removeAllIcons()> (1)
<android.webkit.WebIconDatabaseClassic: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<android.webkit.WebIconDatabaseClassic: void retainIconForPageUrl(java.lang.String)> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage: boolean handleContextItem(int,int,int)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$2: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.provider.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run()> (2)
<com.android.browser.BrowserSettings: void clearHistory()> (1)
<com.android.browser.BrowserHistoryPage$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> ()
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: void loadBookmarks()> (1)
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> (1)
<com.android.browser.Controller$5: java.lang.String[] doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$5: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (2)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.view.BookmarkExpandableView: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (1)
<com.android.browser.BreadCrumbView: void popView()> (1)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void setupTopCrumb()> (2)
<com.android.browser.AddBookmarkPage: void onRootFolderFound(long)> (2)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.AddBookmarkPage: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.AddBookmarkPage: void setAccount(java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.browser.SnapshotTab$LoadData: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.SnapshotTab$LoadData: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.provider.BrowserProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> ()
<com.android.browser.homepages.RequestHandler: void writeTemplatedIndex()> (1)
<com.android.browser.homepages.RequestHandler: void doHandleRequest()> (1)
<com.android.browser.homepages.RequestHandler: void run()> (3)
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.browser.homepages.HomeProvider: android.webkit.WebResourceResponse shouldInterceptRequest(android.content.Context,java.lang.String)> (1)
<com.android.browser.SuggestionsAdapter$CombinedCursor: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$CursorSource: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SuggestFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader: com.android.browser.AddBookmarkPage$EditBookmarkInfo loadInBackground()> (1)
<com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader: java.lang.Object loadInBackground()> (1)
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<android.provider.BrowserContract$Settings: boolean isSyncEnabled(android.content.Context)> ()
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete(android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<com.android.browser.Controller$PruneThumbnails: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail(com.android.browser.Tab)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.DataController$DataControllerHandler: void handleMessage(com.android.browser.DataController$DCMessage)> (1)
<com.android.browser.DataController$DataControllerHandler: void run()> (2)
<com.android.browser.DataController: void <init>(android.content.Context)> (1)
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> (6)
<com.android.browser.Controller: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.Controller: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Tab: void deleteThumbnail()> (4)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (5)
<com.android.browser.Tab: void persistThumbnail()> (2)
<com.android.browser.Tab: void restoreState(android.os.Bundle)> (2)
<com.android.browser.WebViewController: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.WebViewController: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void deleteThumbnail()> (1)
<com.android.browser.TabControl: void saveState(android.os.Bundle)> (1)
<com.android.browser.Tab: void removeFromTree()> (3)
<com.android.browser.Tab: void updateShouldCaptureThumbnails()> (4)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (2)
<com.android.browser.SnapshotTab: void persistThumbnail()> (1)
<com.android.browser.Tab: void capture()> (6)
<com.android.browser.SnapshotTab: void restoreState(android.os.Bundle)> (1)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.Tab$3: void onReceivedTitle(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: android.os.Bundle createSaveState()> (2)
<com.android.browser.SnapshotTab: void removeFromTree()> (1)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void removeParentChildRelationShips()> (1)
<com.android.browser.SnapshotTab: void updateShouldCaptureThumbnails()> (1)
<com.android.browser.Tab: void setController(com.android.browser.WebViewController)> (2)
<com.android.browser.XLargeUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.TabControl: com.android.browser.SnapshotTab createSnapshotTab(long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init>(com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (1)
<com.android.browser.PhoneUi: void showNavScreen()> (2)
<com.android.browser.PieControl: void buildTabs()> (1)
<com.android.browser.SnapshotTab: void capture()> (1)
<com.android.browser.Tab: void putInBackground()> (5)
<com.android.browser.Tab: void postCapture()> (3)
<android.webkit.WebViewClientClassicExt: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.Controller: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.CrashRecoveryHandler$2: void run()> (1)
<com.android.browser.Controller: void closeCurrentTab(boolean)> (2)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (3)
<com.android.browser.Controller: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.SnapshotTab: void setController(com.android.browser.WebViewController)> (1)
<com.android.browser.TabControl: void addPreloadedTab(com.android.browser.Tab)> (1)
<com.android.browser.BaseUi: void setUseQuickControls(boolean)> (3)
<com.android.browser.XLargeUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab(boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> ()
<com.android.browser.Controller: void onPreloginFinished(android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.PhoneUi: void toggleNavScreen()> (2)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.PieControl: void access$000(com.android.browser.PieControl)> (1)
<com.android.browser.SnapshotTab: void putInBackground()> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.SnapshotTab: void postCapture()> (1)
<com.android.browser.Tab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (2)
<com.android.browser.Tab$SubWindowClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.ActivityController: void onSaveInstanceState(android.os.Bundle)> (2)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void closeOtherTabs()> (2)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.PhoneUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.UI: void setUseQuickControls(boolean)> (1)
<com.android.browser.BaseUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.UiController: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> ()
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: void cancelSearchBoxPreload(java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest(java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.NavigationBarPhone: void onClick(android.view.View)> (1)
<com.android.browser.SnapshotBar: void onClick(android.view.View)> (1)
<com.android.browser.PieControl$1: void onLayout(int,int,boolean)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (3)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.SnapshotTab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab()> (2)
<com.android.browser.UiController: void closeCurrentTab()> (3)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeOtherTabs()> ()
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.ActivityController: void onDestroy()> (1)
<com.android.browser.PhoneUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run()> (1)
<com.android.browser.PreloadRequestReceiver: void handlePreload(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onClick(android.view.View)> (3)
<com.android.browser.view.PieMenu$PieView$OnLayoutListener: void onLayout(int,int,boolean)> (1)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (8)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.NavScreen: void onCloseTab(com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(android.database.Cursor)> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarTablet: void onClick(android.view.View)> (1)
<com.android.browser.view.BasePieView: void layout(int,int,boolean,float,int)> (3)
<com.android.browser.Controller: boolean switchToTab(com.android.browser.Tab)> (8)
<com.android.browser.UiController: void setActiveTab(com.android.browser.Tab)> (2)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (1)
<com.android.browser.NavScreen: void access$000(com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.ActivityController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.NavScreen: void openNewTab()> (1)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.view.PieListView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieMenu$PieView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieStackView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.UiController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab(com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen(int,boolean)> (5)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition(int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.NavScreen: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1700(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.view.PieMenu: void layoutPieView(com.android.browser.view.PieMenu$PieView,int,int,float)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100(com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition(int)> (1)
<com.android.browser.NavigationBarPhone: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.browser.NavScreen$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb(boolean)> (3)
<android.webkit.WebViewClientClassicExt: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.NavTabScroller: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb(boolean)> (2)
<com.android.browser.XLargeUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$SubWindowClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.view.ScrollerView: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UI: boolean onBackKey()> (1)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
Permission:android.permission.BATTERY_STATS
20 Callers:
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats: byte[] getStatistics()> (1)
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void load()> (1)
<com.android.server.am.BatteryStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void refreshStats()> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void access$100(com.android.settings.fuelgauge.PowerUsageSummary)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void onResume()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()> ()
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimeBattery()> (2)
<com.android.internal.app.IBatteryStats: long getAwakeTimeBattery()> ()
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()> ()
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimePlugged()> (2)
<com.android.internal.app.IBatteryStats: long getAwakeTimePlugged()> ()
Permission:android.permission.READ_USER_DICTIONARY
314 Callers:
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: android.database.Cursor createCursor(java.lang.String)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: void onActivityCreated(android.os.Bundle)> (1)
<com.android.settings.inputmethod.UserDictionaryList: java.util.TreeSet getUserDictionaryLocalesSet(android.app.Activity)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void updateUserDictionaryPreference(android.preference.Preference)> (1)
<com.android.settings.inputmethod.UserDictionaryAddWordContents: java.util.ArrayList getLocalesList(android.app.Activity)> (1)
<com.android.settings.inputmethod.UserDictionaryList: void createUserDictSettings(android.preference.PreferenceGroup)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryAddWordFragment: void updateSpinner()> (1)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.settings.inputmethod.UserDictionaryAddWordFragment: void onResume()> (1)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void generateBinaryDictionary()> (5)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryInternal()> (6)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (5)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryIfRequired()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask: void run()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void asyncReloadDictionaryIfRequired()> (7)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean isValidWord(java.lang.String)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionary()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.Dictionary: boolean isValidWord(java.lang.String)> (7)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (4)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isValidWord(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.DictionaryCollection: boolean isValidWord(java.lang.String)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (2)
<com.android.inputmethod.research.MainLogBuffer: boolean isSafeNGram(java.util.ArrayList,int)> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: java.lang.String scrubWord(java.lang.String)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (1)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (10)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForTypingInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isInTheDictionary(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publishLogUnitsAtFrontOfBuffer()> (3)
<com.android.inputmethod.research.ResearchLogger$1: boolean isSafeNGram(java.util.ArrayList,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onUpdateSelection(int,int,int,int,int,int,int,int,boolean,boolean,com.android.inputmethod.latin.RichInputConnection)> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForBatchInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean,int)> (1)
<com.android.inputmethod.latin.LatinIME: void resetContactsDictionary(com.android.inputmethod.latin.ContactsBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void onBufferFull()> (2)
<com.android.inputmethod.research.MainLogBuffer: void shiftAndPublishAll()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publishLogUnitsAtFrontOfBuffer()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(int)> (2)
<com.android.inputmethod.latin.LatinIME: void initSuggest()> (3)
<com.android.inputmethod.latin.LatinIME: void loadSettings()> (3)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictAndKeyboard createDictAndKeyboard(java.util.Locale)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void startUsingContactsDictionaryLocked()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$1: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void onBufferFull()> (1)
<com.android.inputmethod.research.ResearchLogger$1: void onBufferFull()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void shiftAndPublishAll()> (1)
<com.android.inputmethod.research.ResearchLogger: void stop()> (3)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsOrOlderSuggestions(int)> (2)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordTouchedByCursor()> (1)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard poll(long,java.util.concurrent.TimeUnit)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsListener: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void initSuggest(com.android.inputmethod.latin.Suggest)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onFinishInputViewInternal(boolean,int,int,android.view.inputmethod.InputConnection)> ()
<com.android.inputmethod.research.ResearchLogger: void restart()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords access$900(com.android.inputmethod.latin.LatinIME,int)> (1)
<com.android.inputmethod.latin.LatinIME: void updateSuggestionStrip()> (2)
<com.android.inputmethod.latin.LatinIME: void access$200(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard pollWithDefaultTimeout()> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: java.lang.Object poll(long,java.util.concurrent.TimeUnit)> ()
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onCreate()> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.LogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.MainLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger$1: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void onUserLoggingConsent()> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsGestureLocked(com.android.inputmethod.latin.InputPointers)> (2)
<com.android.inputmethod.latin.LatinIME: void access$000(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void commitCurrentAutoCorrection(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postResumeSuggestions()> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnit()> (5)
<com.android.inputmethod.research.ResearchLogger: void sendFeedback(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: void updateBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip()> (8)
<com.android.inputmethod.latin.LatinIME: boolean handleSeparator(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartBatchInput()> (1)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void onUpdateSelection(int,int,int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onUpEvent(int,int,int,long)> (3)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnitAsWord(java.lang.String,long,boolean)> (8)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onStartInputViewInternal(android.view.inputmethod.EditorInfo,android.content.SharedPreferences)> ()
<com.android.inputmethod.research.ResearchLogger: void saveRecording()> (1)
<com.android.inputmethod.research.FeedbackFragment: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void handleBackspace(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursor(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void revertCommit()> (1)
<com.android.inputmethod.latin.LatinIME: boolean handleNonSpecialCharacter(int,int,int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onStartBatchInput()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.String)> (2)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.MoreKeysPanel: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitPartialText(java.lang.String,long,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_maybeDoubleSpacePeriod(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onTextInput(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_pickSuggestionManually(java.lang.String,int,java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_punctuationSuggestion(int,java.lang.String,boolean,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_revertCommit(java.lang.String,java.lang.String,boolean,java.lang.String)> ()
<com.android.inputmethod.research.ResearchLogger: void onWordFinished(java.lang.String,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void richInputConnection_commitText(java.lang.String,int,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void presentFeedbackDialog(com.android.inputmethod.latin.LatinIME)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void mayStartBatchInput(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int,int,long)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (4)
<com.android.inputmethod.research.ResearchLogger: void latinIme_commitCurrentAutoCorrection(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.inputmethod.latin.SuggestedWords)> ()
<com.android.inputmethod.research.ResearchLogger: void onResearchKeySelected(com.android.inputmethod.latin.LatinIME)> ()
<com.android.inputmethod.keyboard.PointerTracker: void mayEndBatchInput(long)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onEvent(com.android.inputmethod.event.Event)> (2)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onGestureMoveEvent(int,int,long,boolean,com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onPhantomUpEvent(long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onHardwareKeyEvent(android.view.KeyEvent)> ()
<com.android.inputmethod.event.EventInterpreter: boolean onSoftwareEvent()> ()
<com.android.inputmethod.keyboard.MainKeyboardView: void invokeCodeInput(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onRegisterKey(com.android.inputmethod.keyboard.Key)> (3)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element: void onPhantomUpEvent(long)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,long)> (3)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator$ProcessMotionEvent: boolean processMotionEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)> (2)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean handleSuddenJumping(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$6: void run()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onCancelEvent(int,int,long)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key)> (2)
<com.android.providers.userdictionary.DictionaryBackupAgent: byte[] getDictionary()> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.inputmethod.UserDictionaryAddWordContents: boolean hasWord(java.lang.String,android.content.Context)> (1)
<com.android.settings.inputmethod.UserDictionaryAddWordContents: int apply(android.content.Context,android.os.Bundle)> (2)
<com.android.settings.inputmethod.UserDictionaryAddWordActivity: void onClickConfirm(android.view.View)> ()
<com.android.settings.inputmethod.UserDictionaryAddWordFragment: void onPause()> (1)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.settings.UserDictionarySettings: android.database.Cursor createCursor(java.lang.String)> (1)
<com.android.settings.UserDictionarySettings: void onActivityCreated(android.os.Bundle)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: java.util.TreeSet getUserDictionaryLocalesSet(android.app.Activity)> (3)
<com.android.inputmethod.latin.SettingsFragment: void updateUserDictionaryPreference(android.preference.Preference)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: java.util.ArrayList getLocalesList(android.app.Activity)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: void createUserDictSettings(android.preference.PreferenceGroup)> (1)
<com.android.inputmethod.latin.SettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void updateSpinner()> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: void onResume()> (2)
<com.android.inputmethodcommon.InputMethodSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void onResume()> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: boolean hasWord(java.lang.String,android.content.Context)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: int apply(android.content.Context,android.os.Bundle)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void onPause()> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (2)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.inputmethod.compat.UserDictionaryCompatUtils: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (2)
<com.android.inputmethod.latin.LatinIME: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.UserDictionarySettings: void deleteWord(java.lang.String,java.lang.String,android.content.ContentResolver)> (2)
<com.android.settings.inputmethod.UserDictionaryAddWordContents: void delete(android.content.Context)> (1)
<com.android.settings.inputmethod.UserDictionaryAddWordFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: void deleteWord(java.lang.String,java.lang.String,android.content.ContentResolver)> (2)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: void delete(android.content.Context)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
Permission:android.permission.WRITE_PROFILE
5 Callers:
<com.android.providers.contacts.ProfileProvider: void enforceWritePermission()> (4)
<com.android.providers.contacts.ProfileProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> (2)
<com.android.providers.contacts.ProfileProvider: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.ProfileProvider: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ProfileProvider: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
Permission:android.permission.CAMERA
257 Callers:
<android.hardware.Camera: android.hardware.Camera open()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void startCamera()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void access$200(com.android.wallpaper.walkaround.WalkAroundWallpaper)> (2)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void onVisibilityChanged(boolean)> (1)
<android.hardware.Camera: void native_setup(java.lang.Object)> ()
<android.media.MediaRecorder: void setVideoSource(int)> (2)
<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()> (1)
<com.android.camera.VideoModule: void initializeRecorder()> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)> (2)
<com.android.camera.VideoModule: void startVideoRecording()> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> (1)
<com.android.camera.VideoModule: void onShutterButtonClick()> (1)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick()> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<com.android.camera.VideoUI: void clickShutter()> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<com.android.camera.VideoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<com.android.camera.CameraModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> (2)
Permission:android.permission.WRITE_SMS
251 Callers:
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesOlderThanDate(android.content.Context,long,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesInSameThreadAsMessage(android.content.Context,android.net.Uri)> (2)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$900(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri()> (2)
<com.android.mms.data.Conversation: void markAsRead()> (4)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery(int)> (3)
<com.android.mms.data.Conversation: void blockMarkAsRead(boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void loadMessageContent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onPause()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onResume()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void startMsgListQuery(int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$7300(com.android.mms.ui.ComposeMessageActivity,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery()> (3)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void loadMessageContent()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadMessagesAndDraft(int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onPause()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onResume()> (2)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$7300(com.android.mms.ui.ComposeMessageActivity,int)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void startMsgListQuery()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5100(com.android.mms.ui.ComposeMessageActivity)> (4)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStop()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void loadMessagesAndDraft(int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4300(com.android.mms.ui.ComposeMessageActivity,int)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.data.Conversation$ConversationQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (3)
<com.android.mms.ui.ComposeMessageActivity$24: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$42: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5100(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity$17: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$39: void onSizeChanged(int,int,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4300(com.android.mms.ui.ComposeMessageActivity,int)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.MessageListView$OnSizeChangedListener: void onSizeChanged(int,int,int,int)> (1)
<com.android.mms.ui.MessageListAdapter: void onContentChanged()> (1)
<com.android.mms.ui.MessageListView: void onSizeChanged(int,int,int,int)> (5)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> (3)
<com.android.mms.data.WorkingMessage: android.net.Uri access$1300(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri saveAsMms(boolean)> (3)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$4: void run()> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendInactiveMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$500(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (11)
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (6)
<com.android.mms.transaction.MessagingNotification: void addMmsNotificationInfos(android.content.Context,java.util.Set,java.util.SortedSet)> (1)
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,java.lang.String)> (6)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getNotificationIndDetails(android.content.Context,android.database.Cursor)> (2)
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)> (1)
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> (4)
<com.android.mms.util.PduLoaderManager$PduTask: void run()> (1)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean copyMedia(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToSDCard(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean isDrmRingtoneWithRights(long)> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean isForwardable(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean saveRingtone(long)> (2)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,long,boolean)> (5)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.util.DownloadManager: java.lang.String access$400(com.android.mms.util.DownloadManager,android.net.Uri)> (1)
<com.android.mms.ui.MessageListItem$1: void onClick(android.view.View)> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromUri(android.net.Uri)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void initSlideList()> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3700(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean copyMedia(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2900(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean haveSomethingToCopyToSDCard(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3000(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeMenuStringRsrc(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeSavedStringRsrc(long,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean isDrmRingtoneWithRights(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2800(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean isForwardable(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3800(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean saveRingtone(long)> (1)
<com.android.mms.transaction.MessageStatusService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.ui.ComposeMessageActivity: boolean showMessageDetails(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.util.DownloadManager$4: void run()> (1)
<com.android.mms.data.WorkingMessage: boolean access$300(com.android.mms.data.WorkingMessage,android.net.Uri)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage load(com.android.mms.ui.ComposeMessageActivity,android.net.Uri)> (3)
<com.android.mms.data.WorkingMessage: void readStateFromBundle(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$3700(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity$10: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$2900(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$3000(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3100(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int getDrmMimeMenuStringRsrc(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3900(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int getDrmMimeSavedStringRsrc(long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$2800(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$3800(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$700(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean showMessageDetails(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage$1: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean handleForwardedMessage()> (2)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int access$3100(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int access$3900(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean access$700(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean handleForwardedMessage()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.content.Intent createIntent(android.content.Context,long)> (5)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$NotificationInfo getNewMessageNotificationInfo(android.content.Context,boolean,java.lang.String,java.lang.String,java.lang.String,long,long,android.graphics.Bitmap,com.android.mms.data.Contact,int)> (2)
<com.android.mms.ui.ComposeMessageActivity$12: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.content.Intent createIntent(android.content.Context,long)> (1)
<com.android.mms.ui.ConversationList: void createNewMessage()> (1)
<com.android.mms.ui.ConversationList: void openThread(long)> (2)
<com.android.mms.transaction.MessagingNotification: void addSmsNotificationInfos(android.content.Context,java.util.Set,java.util.SortedSet)> (1)
<com.android.mms.ui.ConversationList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri readDraftMmsMessage(android.content.Context,com.android.mms.data.Conversation,java.lang.StringBuilder)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri access$200(android.content.Context,com.android.mms.data.Conversation,java.lang.StringBuilder)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.mms.data.Conversation: void asyncDeleteObsoleteThreads(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList$8: void run()> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.Conversation: void blockingMarkAllMmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$1000(android.content.Context)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.data.Conversation: void startDelete(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean,java.util.Collection)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener$1: void run()> (1)
<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (4)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft(boolean)> (4)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void saveDraft(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onMaxPendingMessagesReached()> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftMmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage: void saveDraft(boolean)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftSmsMessage(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$1700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$5: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()> (1)
<com.android.mms.data.Conversation: void startDeleteAll(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean)> (1)
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.WRITE_USER_DICTIONARY
21 Callers:
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.UserDictionarySettings: void deleteWord(java.lang.String,java.lang.String,android.content.ContentResolver)> (2)
<com.android.settings.inputmethod.UserDictionaryAddWordContents: int apply(android.content.Context,android.os.Bundle)> (2)
<com.android.settings.inputmethod.UserDictionaryAddWordContents: void delete(android.content.Context)> (1)
<com.android.settings.inputmethod.UserDictionaryAddWordActivity: void onClickConfirm(android.view.View)> ()
<com.android.settings.inputmethod.UserDictionaryAddWordFragment: void onPause()> (1)
<com.android.settings.inputmethod.UserDictionaryAddWordFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: void deleteWord(java.lang.String,java.lang.String,android.content.ContentResolver)> (2)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: int apply(android.content.Context,android.os.Bundle)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: void delete(android.content.Context)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void onPause()> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (2)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.inputmethod.compat.UserDictionaryCompatUtils: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (2)
<com.android.inputmethod.latin.LatinIME: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
Permission:android.permission.INTERNET
556 Callers:
<com.android.inputmethod.research.Uploader: boolean hasUploadingPermission()> (1)
<com.android.inputmethod.research.Uploader: boolean isPossibleToUpload()> (1)
<com.android.inputmethod.research.UploaderService: void onHandleIntent(android.content.Intent)> (1)
<android.webkit.WebSettingsClassic: void <init>(android.content.Context,android.webkit.WebViewClassic)> (1)
<android.webkit.WebViewCore: void <init>(android.content.Context,android.webkit.WebViewClassic,android.webkit.CallbackProxy,java.util.Map)> (1)
<android.webkit.WebViewClassic: void init(java.util.Map,boolean)> (1)
<android.webkit.WebViewProvider: void init(java.util.Map,boolean)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (3)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)> (3)
<com.android.browser.BrowserWebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (1)
<com.android.email.view.RigidWebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)> (6)
<com.android.browser.BrowserWebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)> (2)
<com.android.email.view.RigidWebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)> (6)
<com.android.browser.BrowserWebView: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.email.view.RigidWebView: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.browser.BrowserWebViewFactory: android.webkit.WebView instantiateWebView(android.util.AttributeSet,int,boolean)> (1)
<android.webkit.WebView: void <init>(android.content.Context)> (13)
<com.android.browser.BrowserWebView: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.email.view.RigidWebView: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.browser.BrowserWebViewFactory: android.webkit.WebView createWebView(boolean)> (3)
<android.webkit.WebViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.browser.BrowserWebView: void <init>(android.content.Context)> (4)
<com.android.browser.GoogleAccountLogin: void <init>(android.app.Activity,android.accounts.Account,java.lang.Runnable)> (1)
<com.android.browser.preferences.AccessibilityPreferencesFragment: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.DebugFragment: void clearWebViewCache()> (1)
<com.android.email.view.RigidWebView: void <init>(android.content.Context)> (4)
<com.android.htmlviewer.HTMLViewerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.browser.BrowserWebViewFactory: android.webkit.WebView createSubWebView(boolean)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init>(com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.WebViewFactory: android.webkit.WebView createWebView(boolean)> (4)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<com.android.email.activity.setup.DebugFragment: void onClick(android.view.View)> (1)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (25)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (38)
<com.android.browser.WebViewFactory: android.webkit.WebView createSubWebView(boolean)> ()
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.Controller: void createSubWindow(com.android.browser.Tab)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,long)> (1)
<com.android.browser.SnapshotTab: void putInForeground()> (1)
<com.android.browser.TabControl: android.webkit.WebView createNewWebView(boolean)> (2)
<com.android.browser.Controller: void doStart(android.os.Bundle,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (5)
<com.android.musicfx.ControlPanelPicker: void onCreate(android.os.Bundle)> (2)
<com.android.providers.media.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AllowBindAppWidgetActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.shell.BugreportWarningActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbDebuggingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.vpndialogs.ConfirmDialog: void onCreate(android.os.Bundle)> (2)
<com.android.vpndialogs.ManageDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.browser.Preloader: void cancelSearchBoxPreload(java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest(java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.WebViewController: void createSubWindow(com.android.browser.Tab)> (1)
<com.android.browser.TabControl: com.android.browser.SnapshotTab createSnapshotTab(long)> (1)
<com.android.browser.Tab: void putInForeground()> (2)
<com.android.browser.TabControl: android.webkit.WebView createNewWebView()> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (2)
<com.android.browser.CrashRecoveryHandler: void startRecovery(android.content.Intent)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.browser.PreloadRequestReceiver: void handlePreload(android.content.Context,android.content.Intent)> (1)
<com.android.browser.Tab: boolean createSubWindow()> (2)
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> (2)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.Controller: void start(android.content.Intent)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.SnapshotTab: boolean createSubWindow()> (1)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.Controller: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.UiController: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> ()
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (3)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab(boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> ()
<com.android.browser.Controller: void onPreloginFinished(android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.ActivityController: void start(android.content.Intent)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1700(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.Controller: void closeCurrentTab(boolean)> (2)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (8)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: boolean switchToTab(com.android.browser.Tab)> (8)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.UiController: void setActiveTab(com.android.browser.Tab)> (2)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run()> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab()> (2)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.UiController: void closeCurrentTab()> (3)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab(com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen(int,boolean)> (5)
<com.android.browser.ActivityController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void onCloseTab(com.android.browser.Tab)> (1)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100(com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb(boolean)> (1)
<com.android.browser.PhoneUi: void toggleNavScreen()> (2)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.NavScreen: void openNewTab()> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(android.database.Cursor)> (1)
<com.android.browser.NavScreen: void access$000(com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.NavScreen$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb(boolean)> (3)
<com.android.browser.NavigationBarPhone: void onClick(android.view.View)> (1)
<com.android.browser.SnapshotBar: void onClick(android.view.View)> (1)
<com.android.browser.NavigationBarPhone: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavScreen: void onClick(android.view.View)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition(int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavTabScroller: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb(boolean)> (2)
<com.android.browser.XLargeUi: void showWeb(boolean)> (1)
<com.android.browser.NavigationBarBase: void onClick(android.view.View)> (3)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition(int)> (1)
<com.android.browser.view.ScrollerView: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.NavigationBarTablet: void onClick(android.view.View)> (1)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<android.webkit.WebViewClientClassicExt: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.browser.UI: boolean onBackKey()> (1)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.Tab$SubWindowClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<android.webkit.WebSettingsClassic: void verifyNetworkAccess()> (1)
<android.webkit.WebSettingsClassic: void setBlockNetworkLoads(boolean)> (1)
<com.android.providers.downloads.DownloadProvider: void checkInsertPermissions(android.content.ContentValues)> (1)
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.server.NsdService: android.os.Messenger getMessenger()> (2)
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.nsd.INsdManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.nsd.INsdManager: android.os.Messenger getMessenger()> (1)
<android.net.nsd.INsdManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.nsd.NsdManager: android.os.Messenger getMessenger()> (1)
<com.android.server.NsdService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.nsd.NsdManager: void init()> (1)
<android.net.nsd.NsdManager: void <init>(android.content.Context,android.net.nsd.INsdManager)> (1)
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.util.ArrayList getDictionaryFiles(java.util.Locale,android.content.Context)> (1)
<com.android.inputmethod.latin.DictionaryFactory: com.android.inputmethod.latin.DictionaryCollection createMainDictionaryFromManager(android.content.Context,java.util.Locale,boolean)> (2)
<com.android.inputmethod.latin.DictionaryFactory: com.android.inputmethod.latin.DictionaryCollection createMainDictionaryFromManager(android.content.Context,java.util.Locale)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictAndKeyboard createDictAndKeyboard(java.util.Locale)> (1)
<com.android.inputmethod.latin.Suggest$1: void run()> (2)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard poll(long,java.util.concurrent.TimeUnit)> (2)
<com.android.inputmethod.latin.Suggest: void resetMainDict(android.content.Context,java.util.Locale,com.android.inputmethod.latin.Suggest$SuggestInitializationListener)> (2)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard pollWithDefaultTimeout()> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: java.lang.Object poll(long,java.util.concurrent.TimeUnit)> ()
<com.android.inputmethod.latin.LatinIME: void resetSuggestMainDict()> (1)
<com.android.inputmethod.latin.Suggest: void initAsynchronously(android.content.Context,java.util.Locale,com.android.inputmethod.latin.Suggest$SuggestInitializationListener)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.DictionaryPackInstallBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.latin.Suggest: void <init>(android.content.Context,java.util.Locale,com.android.inputmethod.latin.Suggest$SuggestInitializationListener)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (2)
<com.android.inputmethod.latin.LatinIME: void initSuggest()> (3)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (1)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> (2)
<com.android.browser.OpenDownloadReceiver: void onReceiveAsync(android.content.Context,long)> (1)
<com.android.emailcommon.utility.AttachmentUtilities: void saveAttachment(android.content.Context,java.io.InputStream,com.android.emailcommon.provider.EmailContent$Attachment)> ()
<com.android.browser.OpenDownloadReceiver: void access$000(com.android.browser.OpenDownloadReceiver,android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver$1: void run()> (1)
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> (3)
<com.android.browser.Controller$Download: void saveDataUri()> (1)
<com.android.email.activity.MessageViewFragmentBase: java.io.File performAttachmentSave(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (4)
<com.android.browser.Controller$Download: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.email.activity.MessageFileViewFragment: java.io.File performAttachmentSave(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onOpenAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.email.activity.MessageViewFragmentBase: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.email.activity.MessageViewFragment: java.io.File performAttachmentSave(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onOpenAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void onOpenAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> (4)
<com.android.browser.DownloadHandler$1: void run()> (2)
<com.android.browser.FetchUrlMimeType: void run()> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: long registerDownloadRequest(android.app.DownloadManager,android.app.DownloadManager$Request,android.database.sqlite.SQLiteDatabase,java.lang.String,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void updateClientsWithMetadataUri(android.content.Context,boolean,java.lang.String)> (1)
<com.android.browser.DownloadHandler: void onDownloadStartNoStream(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (3)
<com.android.inputmethod.dictionarypack.ActionBatch$StartDownloadAction: void execute(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void update(android.content.Context,boolean)> (3)
<com.android.browser.DownloadHandler: void onDownloadStart(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.ActionBatch$Action: void execute(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: void dispatchBroadcast(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: void updateNowIfNotUpdatedInAVeryLongTime(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$5: void run()> (2)
<com.android.inputmethod.dictionarypack.ActionBatch: void execute(android.content.Context,com.android.inputmethod.dictionarypack.ProblemReporter)> (7)
<com.android.inputmethod.dictionarypack.DictionaryService: void access$000(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void startRefresh()> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void handleMetadata(android.content.Context,java.io.InputStream,java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void installIfNeverRequested(android.content.Context,java.lang.String,java.lang.String,boolean)> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsDeleted(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsDeleting(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsUnused(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsUsed(android.content.Context,java.lang.String,java.lang.String,int,int,boolean)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void publishUpdateWordListCompleted(android.content.Context,boolean,long,android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService$1: void run()> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: boolean handleDownloadedFile(android.content.Context,com.android.inputmethod.dictionarypack.DownloadRecord,android.app.DownloadManager,long)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: java.util.Collection getDictionaryWordListsForLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void onClickAllow(android.view.View)> ()
<com.android.inputmethod.dictionarypack.DictionaryProvider: int deleteDataFile(android.net.Uri)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void deleteDict()> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void disableDict()> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void enableDict()> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void downloadFinished(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$700(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$600(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$500(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference$OnActionButtonClick: void onClick(android.view.View)> (1)
<com.android.providers.downloads.DownloadProvider: void logVerboseOpenFileInfo(android.net.Uri,java.lang.String)> (1)
<com.android.providers.downloads.DownloadProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<android.provider.Downloads: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages(android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100(com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run()> (2)
<com.android.server.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> (1)
<com.android.providers.downloads.DownloadInfo: void sendIntentIfRequested()> (1)
<com.android.providers.downloads.DownloadThread: void notifyDownloadCompleted(com.android.providers.downloads.DownloadThread$State,int,java.lang.String,int)> (1)
<com.android.providers.downloads.DownloadThread: void runInternal()> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.providers.downloads.StorageManager: void trimDatabase()> (1)
<com.android.providers.downloads.StorageManager: void access$100(com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager$1: void run()> (1)
<com.android.providers.downloads.StorageManager: long discardPurgeableFiles(int,long)> (1)
<com.android.providers.downloads.StorageManager: void findSpace(java.io.File,long,int)> (1)
<com.android.providers.downloads.StorageManager: void verifySpace(int,java.lang.String,long)> (3)
<com.android.providers.downloads.DownloadThread: void writeDataToDestination(com.android.providers.downloads.DownloadThread$State,byte[],int,java.io.OutputStream)> (1)
<com.android.providers.downloads.Helpers: java.lang.String generateSaveFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager: void verifySpaceBeforeWritingToFile(int,java.lang.String,long)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,java.io.InputStream,java.io.OutputStream)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders(com.android.providers.downloads.DownloadThread$State,java.net.HttpURLConnection)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,java.net.HttpURLConnection)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadReceiver: void hideNotification(android.content.Context,long)> (1)
<com.android.providers.downloads.DownloadReceiver: void handleNotificationBroadcast(android.content.Context,android.content.Intent)> (2)
<com.android.providers.downloads.DownloadReceiver: void access$000(com.android.providers.downloads.DownloadReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadReceiver$1: void run()> (1)
<com.android.providers.downloads.DownloadScanner: void onScanCompleted(java.lang.String,android.net.Uri)> (2)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> (9)
<com.android.providers.downloads.DownloadInfo: boolean startDownloadIfReady(java.util.concurrent.ExecutorService)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: void readRequestHeaders(com.android.providers.downloads.DownloadInfo)> (1)
<com.android.providers.downloads.DownloadInfo: void notifyPauseDueToSize(boolean)> (1)
<com.android.providers.downloads.DownloadService: boolean updateLocked()> (1)
<com.android.providers.downloads.DownloadThread: int readFromResponse(com.android.providers.downloads.DownloadThread$State,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void handleEndOfStream(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadThread: void notifyThroughDatabase(com.android.providers.downloads.DownloadThread$State,int,java.lang.String,int)> (1)
<com.android.providers.downloads.DownloadThread: void reportProgress(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadThread: void updateDatabaseFromHeaders(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade,com.android.providers.downloads.StorageManager,com.android.providers.downloads.DownloadNotifier)> (1)
<com.android.providers.downloads.DownloadThread: void checkConnectivity()> (3)
<com.android.providers.downloads.DownloadService: boolean access$200(com.android.providers.downloads.DownloadService)> (1)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo insertDownloadLocked(com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadThread: void checkPausedOrCanceled(com.android.providers.downloads.DownloadThread$State)> (1)
<java.net.DatagramSocket: void <init>(int)> ()
<java.net.HttpURLConnection: void <init>(int)> ()
<java.net.HttpURLConnection: void connect()> (2)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String get(java.lang.String,java.util.Map)> (2)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String post(java.lang.String,java.util.Map,java.lang.String)> (2)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String get(java.lang.String,java.util.Map)> ()
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String get(com.android.quicksearchbox.util.HttpHelper$GetRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String post(java.lang.String,java.util.Map,java.lang.String)> ()
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String post(com.android.quicksearchbox.util.HttpHelper$PostRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String get(com.android.quicksearchbox.util.HttpHelper$GetRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String post(com.android.quicksearchbox.util.HttpHelper$PostRequest)> ()
<com.android.quicksearchbox.google.SearchBaseUrlHelper$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.quicksearchbox.google.SearchBaseUrlHelper$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<java.net.MulticastSocket: void <init>(int)> ()
<java.net.NetworkInterface: void <init>(int)> ()
<java.net.ServerSocket: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpSessionNotifier: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpServer: void run()> (1)
<java.net.ServerSocket: void bind(java.net.SocketAddress)> (1)
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.net.InetSocketAddress)> ()
<java.net.Socket: void <init>(int)> ()
<java.net.URL: java.lang.Object getContent()> ()
<java.net.URL: java.net.URLConnection openConnection()> (4)
<android.net.CaptivePortalTracker: boolean isCaptivePortal(java.net.InetAddress)> (1)
<com.android.inputmethod.research.Uploader: void uploadFile(java.io.File)> (1)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.net.HttpURLConnection createConnection(java.lang.String,java.util.Map)> (2)
<android.net.CaptivePortalTracker: boolean access$2600(android.net.CaptivePortalTracker,java.net.InetAddress)> (1)
<com.android.inputmethod.research.Uploader: void doUpload()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<java.net.URL: java.io.InputStream openStream()> (4)
<com.android.browser.WallpaperHandler: java.io.InputStream openStream()> (1)
<com.android.gallery3d.data.DownloadUtils: boolean download(com.android.gallery3d.util.ThreadPool$JobContext,java.net.URL,java.io.OutputStream)> (1)
<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])> (5)
<com.google.common.io.Resources$1: java.io.InputStream getInput()> (1)
<com.android.browser.WallpaperHandler: void run()> (2)
<com.android.gallery3d.data.DownloadUtils: boolean requestDownload(com.android.gallery3d.util.ThreadPool$JobContext,java.net.URL,java.io.File)> (1)
<com.coremedia.iso.IsoFile: com.coremedia.iso.BoxParser createBoxParser()> (2)
<com.coremedia.iso.IsoFile: void <init>(java.io.File)> ()
<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel,com.coremedia.iso.BoxParser)> ()
<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)> (1)
<com.coremedia.iso.IsoFile: void <init>()> (2)
<com.google.common.io.Resources$1: java.lang.Object getInput()> (1)
<com.android.browser.WallpaperHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.gallery3d.data.DownloadCache$DownloadTask: java.io.File run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)> (2)
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> (3)
<com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> (2)
<com.google.common.io.InputSupplier: java.lang.Object getInput()> (16)
<com.android.gallery3d.data.DownloadCache$DownloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.VideoUtils: void startMuteUsingMp4Parser(java.lang.String,com.android.gallery3d.util.SaveVideoFileInfo)> (1)
<com.android.gallery3d.app.VideoUtils: void trimUsingMp4Parser(java.io.File,java.io.File,int,int)> (1)
<com.android.gallery3d.app.VideoUtils: void writeMovieIntoFile(java.io.File,com.googlecode.mp4parser.authoring.Movie)> (2)
<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: void write(com.googlecode.mp4parser.authoring.Movie)> (1)
<com.googlecode.mp4parser.authoring.builder.Mp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> ()
<com.google.common.io.ByteStreams$4: java.io.InputStream getInput()> (1)
<com.google.common.io.ByteStreams: boolean equal(com.google.common.io.InputSupplier,com.google.common.io.InputSupplier)> (1)
<com.google.common.io.ByteStreams: byte[] toByteArray(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)> (3)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,java.io.OutputStream)> (2)
<com.google.common.io.ByteStreams: long length(com.google.common.io.InputSupplier)> ()
<com.google.common.io.CharStreams$2: java.io.InputStreamReader getInput()> (1)
<com.google.common.io.CharStreams: java.lang.Object readLines(com.google.common.io.InputSupplier,com.google.common.io.LineProcessor)> (2)
<com.google.common.io.CharStreams: java.lang.StringBuilder toStringBuilder(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.lang.String readFirstLine(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.util.List readLines(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,java.lang.Appendable)> (1)
<com.google.common.io.MultiInputStream: void advance()> (3)
<com.google.common.io.MultiReader: void advance()> (3)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.app.VideoUtils: void startMute(java.lang.String,com.android.gallery3d.util.SaveVideoFileInfo)> (1)
<com.android.gallery3d.app.VideoUtils: void startTrim(java.io.File,java.io.File,int,int)> (1)
<com.googlecode.mp4parser.authoring.adaptivestreaming.PackageWriter: void write(com.googlecode.mp4parser.authoring.Movie)> ()
<com.google.common.io.ByteStreams$4: java.lang.Object getInput()> (1)
<com.google.common.io.Files: boolean equal(java.io.File,java.io.File)> ()
<com.google.common.io.Files: byte[] toByteArray(java.io.File)> (1)
<com.google.common.io.Resources: byte[] toByteArray(java.net.URL)> ()
<com.google.common.io.ByteStreams: byte[] getDigest(com.google.common.io.InputSupplier,java.security.MessageDigest)> (1)
<com.google.common.io.ByteStreams: long getChecksum(com.google.common.io.InputSupplier,java.util.zip.Checksum)> (1)
<com.google.common.io.Files: java.lang.Object readBytes(java.io.File,com.google.common.io.ByteProcessor)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File)> (1)
<com.google.common.io.Files: void copy(java.io.File,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.OutputStream)> ()
<com.google.common.io.Resources: void copy(java.net.URL,java.io.OutputStream)> ()
<com.google.common.io.CharStreams$2: java.lang.Object getInput()> (1)
<com.google.common.io.Files: java.lang.Object readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.Resources: java.lang.Object readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.CharStreams: java.lang.String toString(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.Files: java.lang.String readFirstLine(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: java.util.List readLines(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Resources: java.util.List readLines(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)> ()
<com.google.common.io.MultiInputStream: int read(byte[],int,int)> (2)
<com.google.common.io.MultiInputStream: int read()> (3)
<com.google.common.io.MultiInputStream: void <init>(java.util.Iterator)> (1)
<com.google.common.io.MultiReader: int read(char[],int,int)> (2)
<com.google.common.io.MultiReader: long skip(long)> (1)
<com.google.common.io.MultiReader: void <init>(java.util.Iterator)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.MuteVideo$1: void run()> (1)
<com.android.gallery3d.app.TrimVideo$3: void run()> (1)
<com.google.common.io.Files: java.lang.String toString(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: byte[] getDigest(java.io.File,java.security.MessageDigest)> ()
<com.google.common.io.Files: long getChecksum(java.io.File,java.util.zip.Checksum)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.File)> (1)
<com.google.common.io.Resources: java.lang.String toString(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.MultiInputStream: long skip(long)> (1)
<com.google.common.io.ByteStreams$5: java.io.InputStream getInput()> (1)
<com.google.common.io.CharStreams$4: java.io.Reader getInput()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.google.common.io.Files: void move(java.io.File,java.io.File)> ()
<com.google.common.io.ByteStreams$5: java.lang.Object getInput()> (1)
<com.google.common.io.CharStreams$4: java.lang.Object getInput()> (1)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<java.net.URLConnection: void connect()> ()
<java.net.URLConnection: java.io.InputStream getInputStream()> ()
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)> ()
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> ()
Permission:android.permission.SET_WALLPAPER
40 Callers:
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> ()
<android.app.IWallpaperManager$Stub: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (3)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> (3)
<android.app.WallpaperManager: void setResource(int)> (3)
<android.app.WallpaperManager: void setStream(java.io.InputStream)> (2)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)> (1)
<com.android.browser.WallpaperHandler: void run()> (2)
<com.android.gallery3d.filtershow.FilterShowActivity$6: android.graphics.Bitmap onExecute(com.android.gallery3d.filtershow.FilterShowActivity)> (1)
<android.app.WallpaperManager: void clear()> (2)
<com.android.launcher2.UserInitializeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.launcher2.WallpaperChooserDialogFragment: void selectWallpaper(int)> (2)
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)> (1)
<com.android.gallery3d.filtershow.crop.CropActivity$BitmapIOTask: java.lang.Boolean doInBackground(android.graphics.Bitmap[])> (1)
<android.content.Context: void setWallpaper(android.graphics.Bitmap)> (1)
<com.android.browser.WallpaperHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.gallery3d.filtershow.FilterShowActivity$6: android.graphics.Bitmap onExecute(java.lang.Object)> (1)
<android.app.ContextImpl: void clearWallpaper()> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void updateWallpaperLocked()> (1)
<com.android.launcher2.WallpaperChooserDialogFragment: void access$000(com.android.launcher2.WallpaperChooserDialogFragment,int)> (1)
<com.android.launcher2.WallpaperChooserDialogFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.content.Context: void setWallpaper(java.io.InputStream)> (1)
<com.android.gallery3d.filtershow.crop.CropActivity$BitmapIOTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> (566)
<com.android.gallery3d.filtershow.tools.BitmapTask$Callbacks: android.graphics.Bitmap onExecute(java.lang.Object)> (1)
<android.content.Context: void clearWallpaper()> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void drawFrame()> (5)
<com.android.launcher2.WallpaperChooserDialogFragment$1: void onClick(android.view.View)> (1)
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> (566)
<com.android.gallery3d.filtershow.tools.BitmapTask: android.graphics.Bitmap doInBackground(java.lang.Object[])> (1)
<android.content.ContextWrapper: void clearWallpaper()> (566)
<com.android.systemui.ImageWallpaper$DrawableEngine: void onOffsetsChanged(float,float,float,float,int,int)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void onSurfaceRedrawNeeded(android.view.SurfaceHolder)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void onVisibilityChanged(boolean)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine$WallpaperObserver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.gallery3d.filtershow.tools.BitmapTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
294 Callers:
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (2)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.view.BookmarkExpandableView: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (1)
<com.android.browser.BreadCrumbView: void popView()> (1)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void setupTopCrumb()> (2)
<com.android.browser.AddBookmarkPage: void onRootFolderFound(long)> (2)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.AddBookmarkPage: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.AddBookmarkPage: void setAccount(java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.BrowserSettings: void clearHistory()> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete(android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> (2)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.Controller$10: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$10: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage: boolean handleContextItem(int,int,int)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$2: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.DataController$DataControllerHandler: void handleMessage(com.android.browser.DataController$DCMessage)> (1)
<com.android.browser.DataController$DataControllerHandler: void run()> (2)
<com.android.browser.DataController: void <init>(android.content.Context)> (1)
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> (6)
<com.android.browser.Controller: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.Controller: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Tab: void deleteThumbnail()> (4)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (5)
<com.android.browser.Tab: void persistThumbnail()> (2)
<com.android.browser.Tab: void restoreState(android.os.Bundle)> (2)
<com.android.browser.WebViewController: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.WebViewController: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void deleteThumbnail()> (1)
<com.android.browser.TabControl: void saveState(android.os.Bundle)> (1)
<com.android.browser.Tab: void removeFromTree()> (3)
<com.android.browser.Tab: void updateShouldCaptureThumbnails()> (4)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (2)
<com.android.browser.SnapshotTab: void persistThumbnail()> (1)
<com.android.browser.Tab: void capture()> (6)
<com.android.browser.SnapshotTab: void restoreState(android.os.Bundle)> (1)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.Tab$3: void onReceivedTitle(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: android.os.Bundle createSaveState()> (2)
<com.android.browser.SnapshotTab: void removeFromTree()> (1)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void removeParentChildRelationShips()> (1)
<com.android.browser.SnapshotTab: void updateShouldCaptureThumbnails()> (1)
<com.android.browser.Tab: void setController(com.android.browser.WebViewController)> (2)
<com.android.browser.XLargeUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.TabControl: com.android.browser.SnapshotTab createSnapshotTab(long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init>(com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (1)
<com.android.browser.PhoneUi: void showNavScreen()> (2)
<com.android.browser.PieControl: void buildTabs()> (1)
<com.android.browser.SnapshotTab: void capture()> (1)
<com.android.browser.Tab: void putInBackground()> (5)
<com.android.browser.Tab: void postCapture()> (3)
<android.webkit.WebViewClientClassicExt: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.Controller: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.CrashRecoveryHandler$2: void run()> (1)
<com.android.browser.Controller: void closeCurrentTab(boolean)> (2)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (3)
<com.android.browser.Controller: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.SnapshotTab: void setController(com.android.browser.WebViewController)> (1)
<com.android.browser.TabControl: void addPreloadedTab(com.android.browser.Tab)> (1)
<com.android.browser.BaseUi: void setUseQuickControls(boolean)> (3)
<com.android.browser.XLargeUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab(boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> ()
<com.android.browser.Controller: void onPreloginFinished(android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.PhoneUi: void toggleNavScreen()> (2)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.PieControl: void access$000(com.android.browser.PieControl)> (1)
<com.android.browser.SnapshotTab: void putInBackground()> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.SnapshotTab: void postCapture()> (1)
<com.android.browser.Tab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (2)
<com.android.browser.Tab$SubWindowClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.ActivityController: void onSaveInstanceState(android.os.Bundle)> (2)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void closeOtherTabs()> (2)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.PhoneUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.UI: void setUseQuickControls(boolean)> (1)
<com.android.browser.BaseUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.UiController: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> ()
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: void cancelSearchBoxPreload(java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest(java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.NavigationBarPhone: void onClick(android.view.View)> (1)
<com.android.browser.SnapshotBar: void onClick(android.view.View)> (1)
<com.android.browser.PieControl$1: void onLayout(int,int,boolean)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (3)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.SnapshotTab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab()> (2)
<com.android.browser.UiController: void closeCurrentTab()> (3)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeOtherTabs()> ()
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.ActivityController: void onDestroy()> (1)
<com.android.browser.PhoneUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run()> (1)
<com.android.browser.PreloadRequestReceiver: void handlePreload(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onClick(android.view.View)> (3)
<com.android.browser.view.PieMenu$PieView$OnLayoutListener: void onLayout(int,int,boolean)> (1)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (8)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.NavScreen: void onCloseTab(com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(android.database.Cursor)> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarTablet: void onClick(android.view.View)> (1)
<com.android.browser.view.BasePieView: void layout(int,int,boolean,float,int)> (3)
<com.android.browser.Controller: boolean switchToTab(com.android.browser.Tab)> (8)
<com.android.browser.UiController: void setActiveTab(com.android.browser.Tab)> (2)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (1)
<com.android.browser.NavScreen: void access$000(com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.ActivityController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.NavScreen: void openNewTab()> (1)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.view.PieListView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieMenu$PieView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieStackView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.UiController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab(com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen(int,boolean)> (5)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition(int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.NavScreen: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1700(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.view.PieMenu: void layoutPieView(com.android.browser.view.PieMenu$PieView,int,int,float)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100(com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition(int)> (1)
<com.android.browser.NavigationBarPhone: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.browser.NavScreen$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb(boolean)> (3)
<android.webkit.WebViewClientClassicExt: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.NavTabScroller: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb(boolean)> (2)
<com.android.browser.XLargeUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$SubWindowClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.view.ScrollerView: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UI: boolean onBackKey()> (1)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<com.android.browser.Controller$PruneThumbnails: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run()> (2)
<com.android.browser.BrowserHistoryPage$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail(com.android.browser.Tab)> (1)
Permission:android.permission.WRITE_SOCIAL_STREAM
920 Callers:
<com.android.providers.contacts.ContactsProvider2: void enforceSocialStreamWritePermission(android.net.Uri)> (3)
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (3)
<com.android.providers.contacts.ContactsProvider2: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.providers.contacts.ContactsProvider2: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (3)
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$100()> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (22)
<com.android.email.activity.MailboxFinder$FindMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$6: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageList$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.vcard.VCardEntry$PhoneData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$EntryElement: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$InsertOperationConstrutor: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (1)
<com.android.vcard.VCardEntry$EntryElementIterator: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (2)
<com.android.vcard.VCardEntry: void iterateAllData(com.android.vcard.VCardEntry$EntryElementIterator)> (3)
<com.android.vcard.VCardEntry: void iterateOneList(java.util.List,com.android.vcard.VCardEntry$EntryElementIterator)> (1)
<com.android.vcard.VCardEntry: boolean isIgnorable()> (2)
<com.android.vcard.VCardEntry: java.lang.String toString()> ()
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.ImportProcessor: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void onEntryEnded()> (1)
<com.android.vcard.VCardInterpreter: void onEntryEnded()> (2)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard()> (4)
<com.android.vcard.VCardParserImpl_V21: void handleNest()> (3)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseOne(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseItem()> (3)
<com.android.vcard.VCardParserImpl_V30: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V40: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V30: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V21: void parseItems()> (4)
<com.android.vcard.VCardParserImpl_V30: boolean parseItem()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseItem()> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParser_V30: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parseOne(java.io.InputStream)> ()
<com.android.vcard.VCardParserImpl_V30: void parseItems()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseItems()> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.common.vcard.ImportRequest constructImportRequest(byte[],android.net.Uri,java.lang.String)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity: com.android.contacts.common.vcard.ImportRequest createImportRequest()> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (4)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.common.vcard.ImportRequest doInBackground(com.android.contacts.common.vcard.VCardService[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: boolean readOneVCard(java.io.InputStream,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.common.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.common.vcard.ProcessorBase: void run()> ()
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (9)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> (1)
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (14)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (13)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.vcard.VCardEntry$EmailData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.common.database.ContactUpdateUtils: void setSuperPrimary(android.content.Context,long)> (2)
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<com.android.dialer.contact.ContactUpdateService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onClick(android.view.View)> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void removeMembersFromGroup(android.content.ContentResolver,long[],long)> (1)
<com.android.contacts.ContactSaveService: void updateGroup(android.content.Intent)> (1)
<com.android.contacts.util.ContactLoaderUtils: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (2)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.vcard.VCardEntry$PhotoData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$ImData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (19)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (7)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (10)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (3)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean handleItemClickEvent()> (1)
<com.android.contacts.group.GroupEditorFragment$Member: void <init>(long,java.lang.String,long,java.lang.String,java.lang.String)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupContactFromUri(android.net.Uri)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.ArrayList getContactMatches()> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (9)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int)> (5)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (3)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.editor.ContactEditorFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForPhoneNumber(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForSipAddress(java.lang.String)> (1)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.List doInBackground(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (3)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor addSearchSuggestionsBasedOnFilter(android.database.MatrixCursor,android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean queryContactInfo(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.email.NotificationController$MessageContentObserver: void onChange(boolean)> (1)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.common.list.IndexerListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails access$300(com.android.dialer.CallDetailActivity,android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean access$300(com.android.dialer.calllog.CallLogAdapter,java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> (5)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: com.android.dialer.PhoneCallDetails[] doInBackground(java.lang.Void[])> (1)
<com.android.dialer.calllog.CallLogAdapter$QueryThread: void run()> (2)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (2)
<com.android.providers.contacts.ContactsProvider2: long insertSettings(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogAdapter: void startRequestProcessing()> (2)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (5)
<com.android.providers.contacts.ContactsProvider2: void cleanupPhotoStore()> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (7)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void access$100(com.android.dialer.calllog.CallLogAdapter)> (1)
<com.android.dialer.calllog.CallLogAdapter: void enqueueRequest(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (2)
<com.android.dialer.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest()> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (5)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void setQueryString(java.lang.String,boolean)> (8)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.PeopleActivity: void configureFragments(boolean)> (3)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragment()> (1)
<com.android.contacts.activities.PeopleActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void onAction(int)> (1)
<com.android.contacts.activities.PeopleActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.PeopleActivity: void onStart()> (3)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (2)
<com.android.dialer.DialtactsActivity$7: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction(int)> (2)
<com.android.contacts.common.activity.TransactionSafeActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: void onStart()> (12)
<com.android.contacts.ContactsActivity: void onStart()> (3)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.activities.PeopleActivity: void setQueryTextToFragment(java.lang.String)> (2)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void update()> (2)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (11)
<com.android.contacts.activities.AttachPhotoActivity: void onStart()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onStart()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onStart()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onStart()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onStart()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onStart()> (3)
<com.android.contacts.activities.JoinContactActivity: void onStart()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onStart()> (3)
<com.android.contacts.NonPhoneActivity: void onStart()> (3)
<com.android.dialer.DialtactsActivity: void onStart()> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean,boolean)> (2)
<com.android.contacts.activities.ActionBarAdapter: void initialize(android.os.Bundle,com.android.contacts.list.ContactsRequest)> (2)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (6)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void createViewsAndFragments(android.os.Bundle)> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested()> (4)
<com.android.contacts.activities.PeopleActivity: void onBackPressed()> (5)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterController: void checkFilterValidity(boolean)> (4)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void selectCustomFilter()> (1)
<com.android.contacts.common.list.ContactListFilterController: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (4)
<com.android.contacts.activities.PeopleActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.PeopleActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onSearchRequested()> (1)
<com.android.contacts.ContactsActivity: boolean onSearchRequested()> (2)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onBackPressed()> (2)
<com.android.contacts.ContactsActivity: void onBackPressed()> (4)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (7)
<com.android.contacts.common.model.AccountTypeManagerImpl$1: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.common.util.AccountFilterUtil: void handleAccountFilterResult(com.android.contacts.common.list.ContactListFilterController,int,android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (12)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.dialer.DialtactsActivity: void onBackPressed()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed()> (3)
<com.android.contacts.common.list.ContactListFilterControllerImpl: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.DialtactsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.NonPhoneActivity: void onCreate(android.os.Bundle)> (3)
<com.android.dialer.DialtactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.GroupDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void finish()> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void finish()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.model.RawContactDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.model.RawContactDeltaList[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.common.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.vcard.VCardEntry$AnniversaryData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment$2: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getGroupUriFromId(long)> (3)
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void setCursor(android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void requestSelectionToScreen()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void bindGroupList()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void access$400(com.android.contacts.group.GroupBrowseListFragment)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.vcard.VCardEntry$NameData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void addMembersToGroup(android.content.ContentResolver,long[],long)> (2)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForEmail(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForEmail(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$10: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void doSaveAction()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (5)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (3)
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: int getEstimate(java.lang.String)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void getAutomaticLookback()> (1)
<com.android.contacts.detail.ContactLoaderFragment: android.net.Uri getPreAuthorizedUri(android.net.Uri)> (1)
<com.android.contacts.detail.ContactLoaderFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<com.android.contacts.model.RawContactDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.vcard.VCardEntry$SipData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean update(java.util.Collection,java.util.Collection,java.lang.String)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithRfc822Address(java.util.Collection)> (1)
<com.android.mail.providers.UIProvider: void incrementRecipientsTimesContacted(android.content.Context,java.lang.String)> ()
<com.android.mms.data.WorkingMessage: void updateSendStats(com.android.mms.data.Conversation)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.mms.data.WorkingMessage: void access$800(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (2)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.vcard.VCardEntry$NicknameData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$OrganizationData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<com.android.contacts.GroupMetaDataLoader: android.net.Uri ensureIsGroupUri(android.net.Uri)> (1)
<com.android.contacts.GroupMetaDataLoader: void <init>(android.content.Context,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.vcard.VCardEntry$AndroidCustomData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.debug.DataExporter: android.net.Uri exportData(android.content.Context)> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.vcard.VCardEntry$WebsiteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$BirthdayData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.vcard.VCardEntry$PostalData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (7)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.MessageListItem: void updateAvatarView(java.lang.String,boolean)> (2)
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(boolean)> (2)
<com.android.mms.ui.MessageListItem: void bindNotifInd()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.MessageListItem: void access$500(com.android.mms.ui.MessageListItem,boolean)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageItem,boolean,int)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.mms.ui.MessageListItem$2: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageItem$PduLoadedCallback: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.util.ItemLoadedCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (5)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(com.android.mms.util.ThumbnailManager$ImageLoaded,java.lang.Throwable)> (1)
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.PduLoaderManager$PduTask$1: void run()> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.util.ThumbnailManager$ThumbnailTask$1: void run()> (1)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.data.WorkingMessage: int setAttachment(int,android.net.Uri,boolean)> (4)
<com.android.mms.ui.MmsThumbnailPresenter: void presentImageThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.ImageModel)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAudio(android.net.Uri)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addImage(android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void addVideo(android.net.Uri,boolean)> (3)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAudio(android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addImage(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(java.lang.String,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addVideo(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$33: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAttachment(java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity$34: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.Presenter: void present(com.android.mms.util.ItemLoadedCallback)> (3)
<com.android.mms.ui.ComposeMessageActivity$35: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$36: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel(boolean)> (6)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void drawTopPanel(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivity$21: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$41: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.vcard.VCardEntry$NoteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.ContactsProvider2$PipeMonitor: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<com.android.contacts.GroupMemberLoader: android.net.Uri createUri()> (1)
<com.android.contacts.GroupMemberLoader: void <init>(android.content.Context,long,java.lang.String[])> (2)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupDetailQuery(android.content.Context,long)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupEditorQuery(android.content.Context,long)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(android.content.Context,com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$300(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.RawContactEditorView)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (4)
<com.android.contacts.editor.ContactEditorFragment$2: void onRequest(int)> (1)
<com.android.contacts.editor.ContactEditorFragment: void access$2100(com.android.contacts.editor.ContactEditorFragment)> (3)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(java.lang.String,boolean,com.google.common.collect.ImmutableList)> (2)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType)> (2)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment: void rebindEditorsForNewContact(com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.LabeledEditorView: void notifyEditorListener()> (5)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen()> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen()> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$500(com.android.contacts.editor.ContactEditorFragment,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void createContact(com.android.contacts.common.model.account.AccountWithDataSet)> (4)
<com.android.contacts.editor.EventFieldEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener()> (2)
<com.android.contacts.editor.TextFieldsEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onRemovePictureChosen()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$3$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.ContactEditorFragment: void createContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (2)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.editor.PhotoActionPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void clearAllFields()> ()
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
Permission:android.permission.WRITE_EXTERNAL_STORAGE
116 Callers:
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFileAndEnforcePathPermissionsHelper(android.net.Uri,java.lang.String)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils$2: void run()> (1)
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor makeThumbInternal(com.android.providers.media.MediaProvider$ThumbData)> (2)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor access$1200(com.android.providers.media.MediaProvider,com.android.providers.media.MediaProvider$ThumbData)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor getThumb(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,long,android.net.Uri)> (1)
<com.android.providers.downloads.StorageManager: void trimDatabase()> (1)
<com.android.providers.downloads.StorageManager: void access$100(com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager$1: void run()> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> (2)
<com.android.browser.OpenDownloadReceiver: void onReceiveAsync(android.content.Context,long)> (1)
<com.android.emailcommon.utility.AttachmentUtilities: void saveAttachment(android.content.Context,java.io.InputStream,com.android.emailcommon.provider.EmailContent$Attachment)> ()
<com.android.browser.OpenDownloadReceiver: void access$000(com.android.browser.OpenDownloadReceiver,android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver$1: void run()> (1)
<com.android.providers.downloads.StorageManager: long discardPurgeableFiles(int,long)> (1)
<com.android.providers.downloads.StorageManager: void findSpace(java.io.File,long,int)> (1)
<com.android.providers.downloads.StorageManager: void verifySpace(int,java.lang.String,long)> (3)
<com.android.providers.downloads.DownloadThread: void writeDataToDestination(com.android.providers.downloads.DownloadThread$State,byte[],int,java.io.OutputStream)> (1)
<com.android.providers.downloads.Helpers: java.lang.String generateSaveFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager: void verifySpaceBeforeWritingToFile(int,java.lang.String,long)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,java.io.InputStream,java.io.OutputStream)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders(com.android.providers.downloads.DownloadThread$State,java.net.HttpURLConnection)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,java.net.HttpURLConnection)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadThread: void runInternal()> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> (1)
<com.android.providers.downloads.DownloadInfo: void sendIntentIfRequested()> (1)
<com.android.providers.downloads.DownloadThread: void notifyDownloadCompleted(com.android.providers.downloads.DownloadThread$State,int,java.lang.String,int)> (1)
<com.android.providers.downloads.DownloadReceiver: void hideNotification(android.content.Context,long)> (1)
<com.android.providers.downloads.DownloadReceiver: void handleNotificationBroadcast(android.content.Context,android.content.Intent)> (2)
<com.android.providers.downloads.DownloadReceiver: void access$000(com.android.providers.downloads.DownloadReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadReceiver$1: void run()> (1)
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> (3)
<com.android.browser.Controller$Download: void saveDataUri()> (1)
<com.android.email.activity.MessageViewFragmentBase: java.io.File performAttachmentSave(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (4)
<com.android.browser.Controller$Download: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.email.activity.MessageFileViewFragment: java.io.File performAttachmentSave(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onOpenAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.email.activity.MessageViewFragmentBase: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.email.activity.MessageViewFragment: java.io.File performAttachmentSave(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onOpenAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void onOpenAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> (4)
<com.android.browser.DownloadHandler$1: void run()> (2)
<com.android.browser.FetchUrlMimeType: void run()> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: long registerDownloadRequest(android.app.DownloadManager,android.app.DownloadManager$Request,android.database.sqlite.SQLiteDatabase,java.lang.String,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void updateClientsWithMetadataUri(android.content.Context,boolean,java.lang.String)> (1)
<com.android.browser.DownloadHandler: void onDownloadStartNoStream(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (3)
<com.android.inputmethod.dictionarypack.ActionBatch$StartDownloadAction: void execute(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void update(android.content.Context,boolean)> (3)
<com.android.browser.DownloadHandler: void onDownloadStart(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.ActionBatch$Action: void execute(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: void dispatchBroadcast(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: void updateNowIfNotUpdatedInAVeryLongTime(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$5: void run()> (2)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.inputmethod.dictionarypack.ActionBatch: void execute(android.content.Context,com.android.inputmethod.dictionarypack.ProblemReporter)> (7)
<com.android.inputmethod.dictionarypack.DictionaryService: void access$000(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void startRefresh()> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: void handleMetadata(android.content.Context,java.io.InputStream,java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void installIfNeverRequested(android.content.Context,java.lang.String,java.lang.String,boolean)> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsDeleted(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsDeleting(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsUnused(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsUsed(android.content.Context,java.lang.String,java.lang.String,int,int,boolean)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void publishUpdateWordListCompleted(android.content.Context,boolean,long,android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService$1: void run()> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: boolean handleDownloadedFile(android.content.Context,com.android.inputmethod.dictionarypack.DownloadRecord,android.app.DownloadManager,long)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: java.util.Collection getDictionaryWordListsForLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void onClickAllow(android.view.View)> ()
<com.android.inputmethod.dictionarypack.DictionaryProvider: int deleteDataFile(android.net.Uri)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void deleteDict()> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void disableDict()> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void enableDict()> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void downloadFinished(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$700(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$600(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$500(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference$OnActionButtonClick: void onClick(android.view.View)> (1)
<android.provider.Downloads: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages(android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100(com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run()> (2)
<com.android.server.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadScanner: void onScanCompleted(java.lang.String,android.net.Uri)> (2)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> (9)
<com.android.providers.downloads.DownloadInfo: boolean startDownloadIfReady(java.util.concurrent.ExecutorService)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: void readRequestHeaders(com.android.providers.downloads.DownloadInfo)> (1)
<com.android.providers.downloads.DownloadInfo: void notifyPauseDueToSize(boolean)> (1)
<com.android.providers.downloads.DownloadService: boolean updateLocked()> (1)
<com.android.providers.downloads.DownloadThread: int readFromResponse(com.android.providers.downloads.DownloadThread$State,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void handleEndOfStream(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadThread: void notifyThroughDatabase(com.android.providers.downloads.DownloadThread$State,int,java.lang.String,int)> (1)
<com.android.providers.downloads.DownloadThread: void reportProgress(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadThread: void updateDatabaseFromHeaders(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade,com.android.providers.downloads.StorageManager,com.android.providers.downloads.DownloadNotifier)> (1)
<com.android.providers.downloads.DownloadThread: void checkConnectivity()> (3)
<com.android.providers.downloads.DownloadService: boolean access$200(com.android.providers.downloads.DownloadService)> (1)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo insertDownloadLocked(com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadThread: void checkPausedOrCanceled(com.android.providers.downloads.DownloadThread$State)> (1)
Permission:android.permission.REORDER_TASKS
36 Callers:
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)> (1)
<android.app.ActivityManagerNative: void moveTaskToFront(int,int,android.os.Bundle)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void moveTaskToFront(int,int,android.os.Bundle)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)> (2)
<com.android.internal.app.HeavyWeightSwitcherActivity$1: void onClick(android.view.View)> (1)
<android.app.ActivityManager: void moveTaskToFront(int,int)> (1)
<com.android.systemui.recent.RecentsPanelView: void handleOnClick(android.view.View)> (3)
<com.android.internal.policy.impl.RecentApplicationsDialog: void switchTo(com.android.internal.policy.impl.RecentApplicationsDialog$RecentTag)> (2)
<com.android.systemui.recent.RecentsCallback: void handleOnClick(android.view.View)> (2)
<com.android.systemui.recent.RecentsPanelView: boolean simulateClick(int)> (1)
<com.android.systemui.recent.RecentsPanelView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void dismissAndSwitch()> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void onClick(android.view.View)> (1)
<com.android.systemui.recent.RecentsHorizontalScrollView$3: void onClick(android.view.View)> (1)
<com.android.systemui.recent.RecentsVerticalScrollView$3: void onClick(android.view.View)> (1)
<com.android.systemui.recent.RecentsActivity: void dismissAndGoBack()> (3)
<com.android.internal.policy.impl.PhoneWindowManager$5: void run()> (1)
<com.android.systemui.recent.RecentsActivity: void handleIntent(android.content.Intent,boolean)> (2)
<com.android.systemui.recent.RecentsActivity: void onBackPressed()> (1)
<com.android.systemui.recent.RecentsPanelView: void dismissAndGoBack()> (1)
<com.android.systemui.recent.RecentsActivity: void onCreate(android.os.Bundle)> (1)
<com.android.systemui.recent.RecentsActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.systemui.recent.RecentsPanelView: void handleSwipe(android.view.View)> (1)
<com.android.systemui.recent.RecentsCallback: void handleSwipe(android.view.View)> (2)
<com.android.systemui.recent.RecentsHorizontalScrollView: void onChildDismissed(android.view.View)> (1)
<com.android.systemui.recent.RecentsVerticalScrollView: void onChildDismissed(android.view.View)> (1)
<com.android.systemui.SwipeHelper$Callback: void onChildDismissed(android.view.View)> (1)
<com.android.systemui.SwipeHelper$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)> (1)
<android.app.ActivityManagerNative: void moveTaskToBack(int)> (2)
<android.app.IActivityManager: void moveTaskToBack(int)> ()
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> (1)
<android.app.ActivityManagerNative: void moveTaskBackwards(int)> (2)
<android.app.IActivityManager: void moveTaskBackwards(int)> ()
Permission:android.permission.ACCESS_FINE_LOCATION
1305 Callers:
<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)> (2)
<com.android.server.LocationManagerService: int access$400(com.android.server.LocationManagerService,int,int)> (1)
<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()> (9)
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)> (2)
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<com.android.server.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String)> (1)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> ()
<android.location.ILocationManager$Stub: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)> (2)
<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (1)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (3)
<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (1)
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.Location getLastLocation()> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> ()
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (4)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: void removeAllGeofences(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)> ()
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)> (11)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.TwilightService$LocationHandler: void retrieveLocation()> (3)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.android.server.location.GeofenceManager: android.location.Location getFreshLocationLocked()> (1)
<com.android.location.fused.FusionEngine: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.server.TwilightService$LocationHandler: void enableLocationUpdates()> (2)
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)> (1)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> (2)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (7)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.android.server.location.GeofenceManager: void updateFences()> (2)
<com.android.location.fused.FusedLocationProvider: void <init>(android.content.Context)> (1)
<com.android.server.TwilightService: void registerListener(com.android.server.TwilightService$TwilightListener,android.os.Handler)> (2)
<com.android.server.TwilightService: void systemReady()> (1)
<com.android.server.TwilightService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.location.fused.FusionEngine: void enableProvider(java.lang.String,long)> (1)
<com.android.server.location.GpsLocationProvider$3: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.LocationManager: void startReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)> (1)
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> (8)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<com.android.server.location.GeofenceManager: void access$000(com.android.server.location.GeofenceManager)> (2)
<com.android.server.location.GeofenceManager: void onLocationChanged(android.location.Location)> (1)
<com.android.location.fused.FusedLocationService: android.os.IBinder onBind(android.content.Intent)> (1)
<com.android.server.power.DisplayPowerController: void <init>(android.os.Looper,android.content.Context,com.android.server.power.Notifier,com.android.server.LightsService,com.android.server.TwilightService,android.hardware.SensorManager,com.android.server.display.DisplayManagerService,com.android.server.power.DisplayBlanker,com.android.server.power.DisplayPowerController$Callbacks,android.os.Handler)> (1)
<com.android.server.UiModeManagerService: void <init>(android.content.Context,com.android.server.TwilightService)> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.location.fused.FusionEngine: void updateRequirements()> (3)
<android.webkit.GeolocationService: boolean start()> ()
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<com.android.camera.LocationManager: void recordLocation(boolean)> (9)
<android.webkit.GeolocationService: void unregisterFromLocationUpdates()> (2)
<com.android.camera.LocationManager: void stopReceivingLocationUpdates()> (1)
<com.android.location.fused.FusionEngine: void disableProvider(java.lang.String)> (1)
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)> (1)
<com.android.wallpaper.grass.GrassRS: void stop()> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<android.renderscript.RSSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (8)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.server.location.GeofenceManager: void scheduleUpdateFencesLocked()> (3)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.location.fused.FusionEngine: void disable()> (1)
<com.android.location.fused.FusionEngine: void enable()> ()
<com.android.location.fused.FusionEngine: void setRequest(com.android.location.provider.ProviderRequestUnbundled,android.os.WorkSource)> (1)
<com.android.camera.PanoramaModule: void onPauseBeforeSuper()> (1)
<com.android.camera.PanoramaModule: void onResumeAfterSuper()> (1)
<com.android.camera.PhotoModule: void initializeFirstTime()> (1)
<com.android.camera.PhotoModule: void initializeSecondTime()> (1)
<com.android.camera.PhotoModule: void onPauseAfterSuper()> (1)
<com.android.camera.PhotoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.camera.VideoModule: void onSharedPreferenceChanged()> (2)
<android.webkit.GeolocationService: void stop()> ()
<com.android.server.location.LocationBasedCountryDetector: void stop()> (3)
<com.android.wallpaper.RenderScriptScene: void stop()> (6)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.galaxy4.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.noisefield.NoiseFieldView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.phasebeam.PhaseBeamView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.holospiral.HoloSpiralView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)> (2)
<com.android.server.location.GeofenceManager: void removeFence(java.lang.String)> ()
<com.android.location.fused.FusionEngine: void deinit()> (2)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> (2)
<com.android.camera.CameraModule: void onResumeAfterSuper()> (2)
<com.android.camera.PhotoModule: void access$1800(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onResumeAfterSuper()> (1)
<com.android.camera.CameraModule: void onPauseAfterSuper()> (2)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.PhotoModule: void setLocationPreference(java.lang.String)> (1)
<com.android.camera.VideoModule: void onCancelBgTraining(android.view.View)> ()
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.server.location.LocationBasedCountryDetector$1: void onLocationChanged(android.location.Location)> (1)
<com.android.wallpaper.fall.FallRS: void stop()> (1)
<com.android.wallpaper.galaxy.GalaxyRS: void stop()> (1)
<com.android.wallpaper.nexus.NexusRS: void stop()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void destroyRenderer()> (2)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.location.GeofenceManager: void sendIntent(android.app.PendingIntent,android.content.Intent)> (2)
<com.android.location.fused.FusedLocationProvider: void onDisable()> (2)
<com.android.camera.CameraActivity: void closeModule(com.android.camera.CameraModule)> (2)
<com.android.camera.CameraActivity: void onPause()> (4)
<com.android.camera.CameraActivity: void onResume()> (4)
<com.android.camera.CameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (2)
<com.android.camera.PieController: void onSettingChanged(com.android.camera.ListPreference)> (5)
<com.android.camera.PhotoModule: void access$3000(com.android.camera.PhotoModule,java.lang.String)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onDestroy()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceDestroyed(android.view.SurfaceHolder)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (18)
<com.android.server.location.GeofenceManager: void sendIntentEnter(android.app.PendingIntent)> (1)
<com.android.server.location.GeofenceManager: void sendIntentExit(android.app.PendingIntent)> (1)
<com.android.location.fused.FusedLocationService: boolean onUnbind(android.content.Intent)> (1)
<com.android.location.provider.LocationProviderBase: void onDisable()> (1)
<com.android.camera.CameraActivity: void doChangeCamera(int)> (3)
<com.android.camera.SecureCameraActivity: void closeModule(com.android.camera.CameraModule)> (1)
<com.android.camera.ActivityBase: void onPause()> (3)
<com.android.camera.SecureCameraActivity: void onPause()> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (6)
<com.android.camera.ActivityBase: void onResume()> (3)
<com.android.camera.SecureCameraActivity: void onResume()> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (6)
<com.android.camera.SecureCameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (1)
<com.android.camera.PhotoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PieController$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.PieController$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PhotoModule$4: void onCancel(android.content.DialogInterface)> (1)
<com.android.camera.PhotoModule$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (2)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void reload()> (1)
<com.android.photos.shims.MediaItemsLoader: android.database.Cursor loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: android.database.Cursor loadInBackground()> (1)
<com.android.location.provider.LocationProviderBase$Service: void disable()> (2)
<com.android.camera.CameraActivity: void access$200(com.android.camera.CameraActivity,int)> (2)
<com.android.camera.CameraActivity: void onCameraSelected(int)> (2)
<com.android.camera.SecureCameraActivity: void doChangeCamera(int)> (1)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (3)
<com.android.gallery3d.app.DialogPicker: void onPause()> (3)
<com.android.gallery3d.app.Gallery: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (3)
<com.android.gallery3d.app.DialogPicker: void onResume()> (3)
<com.android.gallery3d.app.Gallery: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.camera.PhotoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.ui.PieItem$OnClickListener: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.ui.ListPrefSettingPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.TimeIntervalPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.MoreSettingPopup$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void <init>(com.android.gallery3d.data.Path,java.util.Comparator,com.android.gallery3d.data.MediaSet[],int)> (2)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (2)
<com.android.photos.shims.MediaItemsLoader: java.lang.Object loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: java.lang.Object loadInBackground()> (1)
<com.android.internal.location.ILocationProvider$Stub$Proxy: void disable()> ()
<com.android.internal.location.ILocationProvider$Stub: void disable()> (2)
<com.android.camera.CameraActivity$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.camera.SecureCameraActivity: void access$200(com.android.camera.CameraActivity,int)> (1)
<com.android.camera.SecureCameraActivity: void onCameraSelected(int)> (1)
<com.android.camera.ui.CameraSwitcher$CameraSwitchListener: void onCameraSelected(int)> (1)
<com.android.camera.ui.CountdownTimerPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.PieItem: void performClick()> (1)
<com.android.camera.ui.ListPrefSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.TimeIntervalPopup: void updateInputState()> (1)
<com.android.camera.ui.MoreSettingPopup: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getLocalAlbum(com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (2)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.internal.location.ILocationProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.location.ILocationProvider: void disable()> (1)
<com.android.camera.ui.CameraSwitcher: void onCameraSelected(int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void updateInputState()> (1)
<com.android.camera.ui.PieRenderer$3: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.camera.ui.TimeIntervalPopup: void access$000(com.android.camera.ui.TimeIntervalPopup)> (1)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (3)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet access$400(com.android.gallery3d.data.LocalAlbumSet,com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (1)
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (2)
<com.android.location.provider.LocationProviderBase$Service: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.LocationProviderProxy: void disable()> (1)
<com.android.camera.ui.CameraSwitcher: void access$000(com.android.camera.ui.CameraSwitcher,int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void access$000(com.android.camera.ui.CountdownTimerPopup)> (1)
<com.android.camera.ui.TimeIntervalPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (2)
<com.android.gallery3d.app.ActivityState: void resume()> (12)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.FilmstripPage: void onResume()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onResume()> (2)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.util.ArrayList run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> (24)
<com.android.gallery3d.data.MediaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (8)
<com.android.server.location.LocationProviderInterface: void disable()> (2)
<com.android.camera.ui.CameraSwitcher$1: void onClick(android.view.View)> (1)
<com.android.camera.ui.CountdownTimerPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean changeIndex(int)> (2)
<com.android.camera.ui.InLineSettingMenu: boolean changeIndex(int)> (1)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.FilmstripPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState,boolean)> (1)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (10)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (6)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.Gallery: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (3)
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> (3)
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void delete(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void getPanoramaSupport(com.android.gallery3d.data.Path,com.android.gallery3d.data.MediaObject$PanoramaSupportCallback)> ()
<com.android.gallery3d.data.DataManager: void onStitchingResult(android.net.Uri)> (1)
<com.android.gallery3d.data.DataManager: void rotate(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void resolveAlbumPath()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void setChoosenAlbum(android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgetsInternal(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList getSelectedMediaObjects(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean execute(com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.MediaItemsLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.photos.shims.MediaSetLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.gallery3d.data.ClusterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.DataManager: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (5)
<com.android.gallery3d.data.FilterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.UriSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)> (2)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)> (2)
<com.android.camera.ui.InLineSettingCheckBox$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (8)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (2)
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (2)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.Gallery: void startDefaultPage()> (2)
<com.android.gallery3d.app.Gallery: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (3)
<com.android.gallery3d.app.PhotoPage: void switchToGrid()> (3)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (5)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.app.Gallery: void initializeByIntent()> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (9)
<com.android.gallery3d.app.FilmstripPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onGetContent(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computePanoramaSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computeSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: android.content.Intent getIntentBySingleSelectedPath(java.lang.String)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> (10)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void <init>(com.android.gallery3d.data.DataManager,java.lang.String)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void monitorRootPath()> (1)
<com.android.gallery3d.app.AlbumPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean,int)> (3)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingResult(android.net.Uri)> ()
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (8)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.gallery3d.gadget.MediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgets(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList access$100(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean access$700(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.LoaderCompatShim: void deleteItemWithPath(java.lang.Object)> (3)
<com.android.gallery3d.data.ClusterAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> (2)
<com.android.gallery3d.data.ClusterAlbum: void delete()> (2)
<com.android.gallery3d.data.FilterTypeSet: void delete()> (2)
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.server.LocationManagerService: void switchUser(int)> (1)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (7)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (9)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$6: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.PhotoPage: void onSingleTapUp(int,int)> (3)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumPage: void switchToFilmstrip()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1100(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.SinglePhotoPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.camera.CameraActivity: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (4)
<com.android.camera.SecureCameraActivity: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (1)
<com.android.camera.CameraActivity: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (4)
<com.android.camera.SecureCameraActivity: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onStateResult(int,int,android.content.Intent)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.FilmstripPage: void switchToGrid()> (1)
<com.android.gallery3d.app.PhotoPage: void onAlbumModeSelected(int)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void switchToGrid()> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.Gallery: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumSetPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$600(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$700(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> (3)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context)> (3)
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context,java.lang.String)> ()
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context)> (3)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onCreate()> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> (6)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.UriSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.data.ContentListener: void onContentDirty()> (4)
<com.android.gallery3d.gadget.PhotoAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.photos.AlbumFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.AlbumSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.PhotoSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.gallery3d.data.MediaSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (15)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.MediaObject: void delete()> (22)
<com.android.gallery3d.data.MediaSet: void delete()> (2)
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> (21)
<com.android.server.LocationManagerService: void access$300(com.android.server.LocationManagerService,int)> (1)
<com.android.server.LocationManagerService: void access$200(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void systemReady()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.AlbumPage: void access$1700(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1700(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished(boolean)> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.FilmstripPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumPage: void onAlbumModeSelected(int)> (1)
<com.android.camera.PanoramaModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.PhotoModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.VideoModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.ActivityBase: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.ActivityState: void onStateResult(int,int,android.content.Intent)> (4)
<com.android.gallery3d.app.FilmstripPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.FilmstripPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.GalleryActionBar$OnAlbumModeSelectedListener: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onBackPressed()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onBackPressed()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.photos.AlbumFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.PhotoSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.AlbumSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.MenuExecutor: com.android.gallery3d.data.Path getSingleSelectedPath()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.data.MediaSet: void notifyContentChanged()> (15)
<com.android.gallery3d.gadget.LocalPhotoSource$1: void onChange(boolean)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (16)
<com.android.gallery3d.data.MediaSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (16)
<com.android.gallery3d.data.SecureAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ActionImage: void delete()> (2)
<com.android.gallery3d.data.CameraShortcutImage: void delete()> (3)
<com.android.gallery3d.data.ClusterAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbum: void delete()> (2)
<com.android.gallery3d.data.EmptyAlbumImage: void delete()> (3)
<com.android.gallery3d.data.FilterDeleteSet: void delete()> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: void delete()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMediaItem: void delete()> (2)
<com.android.gallery3d.data.MediaItem: void delete()> (3)
<com.android.gallery3d.data.SecureAlbum: void delete()> (2)
<com.android.gallery3d.data.SingleItemAlbum: void delete()> (2)
<com.android.gallery3d.data.SnailAlbum: void delete()> (3)
<com.android.gallery3d.data.SnailItem: void delete()> (2)
<com.android.gallery3d.data.UnlockImage: void delete()> (3)
<com.android.gallery3d.data.UriImage: void delete()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMergeAlbum: void delete()> (2)
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> (7)
<com.android.gallery3d.app.AlbumSetPage: boolean albumShouldOpenInFilmstrip(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem findMediaItem(com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> (1)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (17)
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (16)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.ui.SelectionManager: boolean expandMediaSet(java.util.ArrayList,com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.server.LocationManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.LocationManagerService$2: void onChange(boolean)> (1)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (6)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (6)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.camera.CameraModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (2)
<com.android.camera.CameraActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.ManageCachePage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.SlideshowPage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.ui.PopupList$OnPopupItemClickListener: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$500(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(android.view.MenuItem,java.lang.String,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: int setIndex()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.data.ChangeNotifier: void onChange(boolean)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ClusterAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void notifyContentChanged()> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterTypeSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.SecureAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SingleItemAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void notifyContentChanged()> (1)
<com.android.gallery3d.data.ClusterAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (21)
<com.android.gallery3d.data.SecureAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(android.database.Cursor)> (1)
<com.android.gallery3d.data.ClusterAlbum$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.data.FilterTypeSet$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.AlbumPage$1: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumPage: void prepareAnimationBackToFilmstrip(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void prepareSlotContent(int)> (3)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.data.MediaSet,int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterDeleteSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SecureAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SnailAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: int findIndexOfTarget(com.android.gallery3d.app.PhotoDataAdapter$UpdateInfo)> (1)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SecureAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (9)
<com.android.camera.ActivityBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.camera.CameraActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.SecureCameraActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.gallery3d.app.Gallery: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.camera.ActivityBase: void onBackPressed()> (3)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.Gallery: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (3)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1800(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onSingleTapUp(float,float)> (1)
<com.android.camera.SecureCameraActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.ui.PopupList$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.ui.DialogDetailsView: void reloadDetails()> (2)
<com.android.gallery3d.data.ChangeNotifier: void fakeChange()> (2)
<com.android.gallery3d.data.DataManager$NotifyBroker: void onChange(boolean)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ClusterAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void sendRequest(int,com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterTypeSet: void onContentDirty()> (1)
<com.android.gallery3d.data.LocalAlbumSet$1: void run()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyChange()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClustersContents()> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FaceClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SizeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.TagClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.MediaSet$ItemConsumer: void consume(int,com.android.gallery3d.data.MediaItem)> (3)
<com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage$4: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1200(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setContentWindow(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (16)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.CameraActivity: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onPause()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onPause()> (2)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void reloadDetails()> (1)
<com.android.gallery3d.ui.DialogDetailsView: void show()> (1)
<com.android.gallery3d.data.LocalAlbumSet: void fakeChange()> ()
<com.android.gallery3d.data.SecureAlbum: void addMediaItem(boolean,int)> (2)
<com.android.gallery3d.data.FilterDeleteSet: void addDeletion(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void clearDeletion()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void removeDeletion(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.PhotoPage: void notifyScreenNailChanged()> (3)
<com.android.photos.shims.LoaderCompatShim: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.LocalSource: void processMapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,boolean)> (1)
<com.android.gallery3d.ui.PhotoFallbackEffect: void setPositionProvider(com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onLongTap(int)> (2)
<com.android.gallery3d.app.AlbumPage$4: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$DataListener: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setActiveWindow(int,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (13)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (14)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.SecureCameraActivity: void onBackPressed()> (3)
<com.android.gallery3d.ui.DetailsHelper: void reloadDetails()> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void show()> (1)
<com.android.gallery3d.app.PhotoPage: void addSecureAlbumItem(boolean,int)> (3)
<com.android.gallery3d.data.SecureAlbum: void onStitchingQueued(android.net.Uri)> (1)
<com.android.gallery3d.app.PhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.app.PhotoPage: void onUndoDeleteImage()> (3)
<com.android.gallery3d.app.AppBridge$Server: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.FilmstripPage: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void notifyScreenNailChanged()> (1)
<com.android.photos.AlbumSetFragment: java.util.ArrayList getSubItemUrisForItem(java.lang.Object)> ()
<com.android.gallery3d.data.LocalSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.app.ManageCachePage$4: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void onVisibleRangeChanged(int,int)> ()
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (12)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (12)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage: void updateUIForCurrentPhoto()> (4)
<com.android.gallery3d.ui.DetailsHelper: void show()> (3)
<com.android.gallery3d.app.AppBridge$Server: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingQueued(android.net.Uri)> ()
<com.android.gallery3d.app.FilmstripPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onUndoDeleteImage()> (1)
<com.android.camera.ActivityBase$MyAppBridge: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (7)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.gallery3d.app.FilmstripPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (9)
<com.android.gallery3d.app.PhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (5)
<com.android.gallery3d.app.SinglePhotoPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.AlbumPage: void showDetails()> (1)
<com.android.gallery3d.app.AlbumSetPage: void showDetails()> (1)
<com.android.gallery3d.app.PhotoPage: void showDetails()> (3)
<com.android.camera.ActivityBase$MyAppBridge: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.ui.PhotoView$1: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void access$500(com.android.camera.ActivityBase$MyAppBridge)> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: void onPictureCenter(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void requestDeferredUpdate()> (3)
<com.android.gallery3d.app.PhotoPage: void refreshHidingMessage()> (6)
<com.android.gallery3d.app.PhotoPage: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void onActionBarWanted()> (3)
<com.android.gallery3d.app.FilmstripPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (11)
<com.android.gallery3d.app.SinglePhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void showDetails()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void showDetails()> (1)
<com.android.camera.ActivityBase: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (2)
<com.android.gallery3d.ui.GLView$OnClickListener: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.camera.ActivityBase: void notifyScreenNailChanged()> (3)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.gallery3d.app.FilmstripPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.FilmstripPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.PhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (5)
<com.android.gallery3d.app.PhotoPage: void onFilmModeChanged(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void showBars()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.FilmstripPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.FilmstripPage: void onActionBarWanted()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarWanted()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarWanted()> (2)
<com.android.gallery3d.app.FilmstripPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage$6: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.camera.CameraActivity: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (4)
<com.android.camera.SecureCameraActivity: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.camera.ActivityBase: void onLayoutChange(android.view.View,int,int,int,int)> (3)
<com.android.camera.CameraActivity: void notifyScreenNailChanged()> (6)
<com.android.camera.SecureCameraActivity: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.ui.PhotoView$FullPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.app.FilmstripPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$8: void onConfirmDialogDismissed(boolean)> (1)
<com.android.gallery3d.app.PhotoPage$MyMenuVisibilityListener: void onMenuVisibilityChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void showBars()> (1)
<com.android.gallery3d.app.PhotoPage: void toggleBars()> (3)
<com.android.gallery3d.app.PhotoPage: void wantBars()> (3)
<com.android.gallery3d.app.SinglePhotoPage: void showBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimationLocked(int)> (1)
<com.android.gallery3d.ui.PhotoView: void captureAnimationDone(int)> (1)
<com.android.gallery3d.ui.PhotoView: void updateActionBar()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (2)
<com.android.camera.PanoramaModule$9: void run()> (1)
<com.android.camera.PhotoModule$3: void onMediaSaved(android.net.Uri)> (1)
<com.android.camera.VideoModule$1: void onMediaSaved(android.net.Uri)> (1)
<com.android.camera.CameraActivity: void onLayoutChange(android.view.View,int,int,int,int)> (2)
<com.android.camera.SecureCameraActivity: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.ui.LayoutChangeNotifier$Listener: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.PanoramaModule: void configMosaicPreview(int,int)> (3)
<com.android.camera.PhotoModule: void onScreenSizeChanged(int,int,int,int)> (1)
<com.android.camera.PhotoModule: void startPreview()> (2)
<com.android.camera.PhotoModule: void updatePreviewSize(com.android.camera.CameraScreenNail)> (1)
<com.android.camera.VideoModule: void updateCameraScreenNailSize(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Picture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onConfirmDialogDismissed(boolean)> (2)
<com.android.gallery3d.ui.PhotoView: void setFilmMode(boolean)> (16)
<com.android.gallery3d.app.FilmstripPage: void toggleBars()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void toggleBars()> (1)
<com.android.gallery3d.app.FilmstripPage: void wantBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (6)
<com.android.gallery3d.app.SinglePhotoPage: void wantBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$900(com.android.gallery3d.ui.PhotoView,int)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void updateCurrentIndex(int)> (1)
<com.android.camera.MediaSaveService$OnMediaSavedListener: void onMediaSaved(android.net.Uri)> (2)
<com.android.camera.PanoramaModule: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.ui.LayoutChangeHelper: void onLayout(boolean,int,int,int,int)> (2)
<com.android.camera.PanoramaModule: void access$1700(com.android.camera.PanoramaModule,int,int)> (2)
<com.android.camera.PhotoController: void onScreenSizeChanged(int,int,int,int)> (1)
<com.android.camera.PhotoModule: void access$1500(com.android.camera.PhotoModule)> (1)
<com.android.camera.PhotoModule: void setupPreview()> (5)
<com.android.camera.VideoModule: void setCameraParameters()> (3)
<com.android.gallery3d.ui.PhotoView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.gallery3d.app.PhotoPage: void transitionFromAlbumPageIfNeeded()> (3)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void resetToFirstPicture()> (1)
<com.android.gallery3d.app.FilmstripPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: boolean switchWithCaptureAnimation(int)> (4)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void moveTo(int)> (2)
<com.android.camera.MediaSaveService$ImageSaveTask: void onPostExecute(android.net.Uri)> (1)
<com.android.camera.MediaSaveService$VideoSaveTask: void onPostExecute(android.net.Uri)> (1)
<com.android.camera.PreviewFrameLayout: void onLayout(boolean,int,int,int,int)> (3)
<com.android.camera.ui.LayoutNotifyView: void onLayout(boolean,int,int,int,int)> (1)
<com.android.camera.PanoramaModule$WaitProcessorTask: void onPostExecute(java.lang.Void)> (1)
<com.android.camera.PhotoUI$1: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)> (1)
<com.android.camera.PhotoModule$CameraStartUpThread: void run()> (3)
<com.android.camera.PhotoModule: void access$1700(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onCaptureRetake()> (1)
<com.android.camera.PhotoModule: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void switchCamera()> (2)
<com.android.camera.PhotoModule: void updateCameraParametersPreference()> (1)
<com.android.camera.VideoModule: void startPreview()> (5)
<com.android.camera.VideoModule: void updateCameraAppView()> (1)
<com.android.gallery3d.ui.GLView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (12)
<com.android.gallery3d.app.FilmstripPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.app.AppBridge$Server: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.PhotoPage$Model: void moveTo(int)> (2)
<com.android.gallery3d.ui.PhotoView$Model: void moveTo(int)> (5)
<com.android.camera.MediaSaveService$ImageSaveTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.MediaSaveService$VideoSaveTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.PanoramaModule$WaitProcessorTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.PhotoModule$JpegPictureCallback: void onPictureTaken(byte[],android.hardware.Camera)> (1)
<com.android.camera.PhotoController: void onCaptureRetake()> (1)
<com.android.camera.PhotoController: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void access$2300(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onCameraPickerClicked(int)> (1)
<com.android.camera.PhotoModule: void setCameraParameters(int)> (5)
<com.android.camera.VideoModule: boolean stopVideoRecording()> (4)
<com.android.camera.VideoModule: void access$800(com.android.camera.VideoModule)> (7)
<com.android.camera.VideoModule: void checkQualityAndStartPreview()> (2)
<com.android.camera.VideoModule: void switchCamera()> (2)
<com.android.camera.CameraModule: void updateCameraAppView()> (1)
<com.android.gallery3d.app.AlbumPage$2: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.PhotoPage$4: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.EdgeView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GLRootView: void onDrawFrameLocked(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.ui.GLView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (13)
<com.android.gallery3d.ui.PreparePageFadeoutTexture: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.SlotView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.UndoBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyScaleListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToFirstImage()> (1)
<com.android.gallery3d.ui.PhotoView: void switchToImage(int)> (7)
<com.android.gallery3d.ui.PhotoView: void switchToNextImage()> (3)
<com.android.gallery3d.ui.PhotoView: void switchToPrevImage()> (2)
<com.android.camera.PhotoUI$6: void onClick(android.view.View)> (1)
<com.android.camera.PhotoUI: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void onPreviewTextureCopied()> (1)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onCameraPickerClicked(int)> (2)
<com.android.camera.PhotoModule: void access$1300(com.android.camera.PhotoModule,int)> (1)
<com.android.camera.PhotoModule: void cancelAutoFocus()> (2)
<com.android.camera.PhotoModule: void setCameraParametersWhenIdle(int)> (2)
<com.android.camera.PhotoModule: void setFocusParameters()> (1)
<com.android.camera.VideoModule: boolean access$1300(com.android.camera.VideoModule)> (1)
<com.android.camera.VideoModule: void onError(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoModule: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: void onStopVideoRecording()> (4)
<com.android.camera.VideoModule$4: void run()> (1)
<com.android.camera.VideoModule$5: void run()> (1)
<com.android.camera.VideoModule: void onShutterButtonClick()> (1)
<com.android.camera.VideoModule: void keepScreenOnAwhile()> (3)
<com.android.camera.VideoModule: void updateRecordingTime()> (2)
<com.android.camera.VideoModule: boolean updateEffectSelection()> (1)
<com.android.camera.VideoModule: void onEffectsUpdate(int,int)> (1)
<com.android.camera.VideoModule: void access$1200(com.android.camera.VideoModule)> (7)
<com.android.camera.VideoModule: void onCameraPickerClicked(int)> (1)
<com.android.camera.CameraActivity: void updateCameraAppView()> (2)
<com.android.gallery3d.ui.GLRootView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.app.AlbumPage$2: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.ui.ScrollBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLRoot$OnGLIdleListener: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void access$200(com.android.camera.ActivityBase$MyAppBridge,int)> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToNextPicture()> (3)
<com.android.gallery3d.ui.PhotoView: void switchFocus()> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToPrevPicture()> (3)
<com.android.camera.CameraModule: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoMenu$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.FocusOverlayManager$Listener: void cancelAutoFocus()> (1)
<com.android.camera.PhotoController: void cancelAutoFocus()> (1)
<com.android.camera.PhotoModule: void access$1900(com.android.camera.PhotoModule,int)> (2)
<com.android.camera.FocusOverlayManager$Listener: void setFocusParameters()> (3)
<com.android.camera.VideoModule$MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.VideoController: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: boolean onBackPressed()> (1)
<com.android.camera.VideoModule: void onInfo(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick()> (1)
<com.android.camera.VideoModule: void onUserInteraction()> (1)
<com.android.camera.VideoModule: void access$400(com.android.camera.VideoModule)> (4)
<com.android.camera.VideoModule: void startVideoRecording()> (1)
<com.android.camera.EffectsRecorder$EffectsListener: void onEffectsUpdate(int,int)> (1)
<com.android.camera.VideoModule: void onPreviewTextureCopied()> (1)
<com.android.camera.VideoModule: void initializeVideoSnapshot()> (2)
<com.android.camera.ActivityBase: void updateCameraAppView()> (2)
<com.android.camera.SecureCameraActivity: void updateCameraAppView()> (2)
<com.android.gallery3d.ui.PhotoView$FullPicture: void drawTileView(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.GLRootView$IdleRunner: void run()> (1)
<com.android.camera.ActivityBase: void gotoGallery()> (2)
<com.android.gallery3d.ui.PhotoView: boolean snapToNeighborImage()> (2)
<com.android.gallery3d.ui.PhotoView: boolean swipeImages(float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToHitPicture(int,int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$800(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.camera.CameraActivity: void onPreviewTextureCopied()> (2)
<com.android.camera.FocusOverlayManager: void cancelAutoFocus()> (3)
<com.android.camera.PhotoUI: void openMenu()> (2)
<com.android.camera.FocusOverlayManager: void lockAeAwbIfNeeded()> (2)
<com.android.camera.FocusOverlayManager: void onSingleTapUp(int,int)> (1)
<com.android.camera.FocusOverlayManager: void unlockAeAwbIfNeeded()> (1)
<com.android.camera.VideoUI$3: void onClick(android.view.View)> (1)
<com.android.camera.CameraModule: boolean onBackPressed()> (1)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.camera.CameraModule: void onUserInteraction()> (1)
<com.android.camera.EffectsRecorder$1: void run()> (1)
<com.android.camera.ActivityBase: void onFullScreenChanged(boolean)> (2)
<com.android.camera.CameraActivity: void gotoGallery()> (3)
<com.android.camera.SecureCameraActivity: void gotoGallery()> (1)
<com.android.gallery3d.ui.PhotoView: boolean access$3700(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: void snapback()> (2)
<com.android.gallery3d.ui.PhotoView: boolean access$3500(com.android.gallery3d.ui.PhotoView,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void access$3200(com.android.gallery3d.ui.PhotoView,int,int)> (1)
<com.android.camera.ActivityBase: void onPreviewTextureCopied()> (1)
<com.android.camera.SecureCameraActivity: void onPreviewTextureCopied()> (2)
<com.android.camera.FocusOverlayManager: void access$000(com.android.camera.FocusOverlayManager)> (3)
<com.android.camera.FocusOverlayManager: void onShutterUp()> (2)
<com.android.camera.PhotoUI: void access$400(com.android.camera.PhotoUI)> (1)
<com.android.camera.PhotoUI: void onSwipe(int)> (1)
<com.android.camera.FocusOverlayManager: void onAutoFocus(boolean,boolean)> (1)
<com.android.camera.FocusOverlayManager: void onShutterDown()> (1)
<com.android.camera.PhotoModule: void onSingleTapUp(android.view.View,int,int)> (2)
<com.android.camera.VideoUI: void clickShutter()> (1)
<com.android.camera.CameraActivity: void onUserInteraction()> (3)
<com.android.camera.ActivityBase$MyAppBridge: void onFullScreenChanged(boolean)> (1)
<com.android.camera.CameraActivity: void onFullScreenChanged(boolean)> (2)
<com.android.camera.PhotoUI$2: void onClick(android.view.View)> (1)
<com.android.camera.VideoUI$5: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: void onUp()> (1)
<com.android.gallery3d.ui.PhotoView: void access$1500(com.android.gallery3d.ui.PhotoView)> (2)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoModule: void onCountDownFinished()> (2)
<com.android.camera.PhotoModule: void onShutterButtonFocus(boolean)> (3)
<com.android.camera.PhotoUI$3: void onClick(android.view.View)> (1)
<com.android.camera.PreviewGestures$SwipeListener: void onSwipe(int)> (1)
<com.android.camera.PhotoModule$AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)> (1)
<com.android.camera.CameraModule: void onSingleTapUp(android.view.View,int,int)> ()
<com.android.camera.PhotoController: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.camera.VideoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.SecureCameraActivity: void onUserInteraction()> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void onUserInteraction()> (1)
<com.android.gallery3d.app.AppBridge: void onFullScreenChanged(boolean)> (2)
<com.android.camera.SecureCameraActivity: void onFullScreenChanged(boolean)> (2)
<com.android.gallery3d.ui.GestureRecognizer$Listener: void onUp()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.CameraScreenNail$Listener: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoController: void onCountDownFinished()> ()
<com.android.camera.ui.CountDownView$OnCountDownFinishedListener: void onCountDownFinished()> (1)
<com.android.camera.PhotoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.PhotoModule: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonFocus(boolean)> (1)
<com.android.camera.PreviewGestures: boolean dispatchTouch(android.view.MotionEvent)> (2)
<com.android.camera.PhotoUI: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.camera.CameraModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.CameraScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.camera.ui.CountDownView: void remainingSecondsChanged(int)> (2)
<com.android.camera.CameraModule: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ShutterButton: void callShutterButtonFocus(boolean)> (2)
<com.android.camera.PhotoUI: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.VideoUI: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.PreviewGestures$SingleTapListener: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.gallery3d.ui.DownUpDetector$DownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SurfaceTextureScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (2)
<com.android.camera.ui.CountDownView: void access$200(com.android.camera.ui.CountDownView,int)> (1)
<com.android.camera.ui.CountDownView: void startCountDown(int,boolean)> (1)
<com.android.camera.CameraActivity: boolean onKeyUp(int,android.view.KeyEvent)> (4)
<com.android.camera.ShutterButton: void access$000(com.android.camera.ShutterButton,boolean)> (1)
<com.android.camera.ShutterButton: void drawableStateChanged()> (2)
<com.android.camera.PhotoModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.VideoModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void setState(boolean,android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail: void access$001(com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.gallery3d.ui.ScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (3)
<com.android.camera.PhotoUI: void startCountDown(int,boolean)> (1)
<com.android.camera.ActivityBase: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<com.android.camera.SecureCameraActivity: boolean onKeyUp(int,android.view.KeyEvent)> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.camera.ShutterButton$1: void run()> (1)
<com.android.camera.CameraModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail$1: void onDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.gallery3d.ui.PhotoView: com.android.gallery3d.ui.PhotoFallbackEffect buildFallbackEffect(com.android.gallery3d.ui.GLView,com.android.gallery3d.glrenderer.GLCanvas)> ()
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.TileImageView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.camera.PhotoModule: void onShutterButtonClick()> (4)
<com.android.camera.CameraActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.ui.GestureRecognizer: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail$DrawClient: void onDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.camera.PhotoModule$1: void run()> (1)
<com.android.camera.SecureCameraActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail: void directDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (3)
<com.android.camera.CaptureAnimManager: boolean drawAnimation(com.android.gallery3d.glrenderer.GLCanvas,com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.RawTexture,int,int,int,int)> (1)
<com.android.camera.SwitchAnimManager: boolean drawAnimation(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int,com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.RawTexture)> (1)
<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void checkPermission(int,int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void access$200(android.hardware.location.GeofenceHardwareService,int,int,int)> (6)
<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean removeGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean pauseGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean removeGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean removeGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (1)
<android.hardware.location.IGeofenceHardware$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)> ()
<android.hardware.location.GeofenceHardwareService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.GpsLocationProvider: void requestRefLocation(int)> ()
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo(java.lang.String)> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getAllCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> (2)
<com.android.settings.RadioInfo: void onCreate(android.os.Bundle)> (1)
<com.android.settings.RadioInfo: void updateCellInfoListRate()> (2)
<com.android.settings.RadioInfo: void access$3400(com.android.settings.RadioInfo)> (1)
<com.android.settings.RadioInfo$CellInfoListRateHandler: void onClick(android.view.View)> (1)
Permission:android.permission.USE_CREDENTIALS
102 Callers:
<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$5: void doWork()> (1)
<android.accounts.AccountManager$6: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (8)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.calendar.AllInOneActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.util.AccountPromptUtils: void launchAccountPrompt(android.app.Activity)> (1)
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (1)
<com.android.settings.accounts.AddAccountSettings: void addAccount(java.lang.String)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.AutologinBar: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> ()
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void onResume()> (1)
<com.android.contacts.activities.PeopleActivity: void updateViewConfiguration(boolean)> (2)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.settings.accounts.AddAccountSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void start()> (1)
<com.android.browser.Controller: void doStart(android.os.Bundle,android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onProviderStatusChange()> (1)
<com.android.contacts.activities.PeopleActivity: void onResume()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void maybeEnableFallback(android.content.Context)> (1)
<com.android.browser.CrashRecoveryHandler: void startRecovery(android.content.Intent)> (1)
<com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener: void onProviderStatusChange()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onResume()> (12)
<com.android.contacts.ContactsActivity: void onResume()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onFinishInflate()> (3)
<com.android.browser.Controller: void start(android.content.Intent)> (1)
<com.android.contacts.list.ProviderStatusWatcher: void notifyListeners()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onResume()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onResume()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onResume()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onResume()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onResume()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onResume()> (3)
<com.android.contacts.activities.JoinContactActivity: void onResume()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onResume()> (3)
<com.android.contacts.NonPhoneActivity: void onResume()> (3)
<com.android.dialer.DialtactsActivity: void onResume()> (2)
<com.android.browser.ActivityController: void start(android.content.Intent)> (1)
<com.android.contacts.list.ProviderStatusWatcher: void access$600(com.android.contacts.list.ProviderStatusWatcher)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Object)> (1)
<com.android.server.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (3)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
Permission:android.permission.READ_CONTACTS
1641 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: android.database.MatrixCursor loadFromEf(int)> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$100()> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (22)
<com.android.email.activity.MailboxFinder$FindMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$6: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageList$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> (1)
<com.android.mms.data.WorkingMessage: void updateSendStats(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void access$800(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.ex.chips.BaseRecipientAdapter$DefaultFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment: void doShareVisibleContacts()> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment: void access$100(com.android.contacts.common.interactions.ImportExportDialogFragment)> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<com.android.providers.contacts.LegacyApiSupport: long findFirstDataId(long,java.lang.String)> (2)
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (13)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> (1)
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (14)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (9)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForPhoneNumber(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfo(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void access$600(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.widget.QuickContactBadge: void onClick(android.view.View)> (5)
<com.android.calendar.selectcalendars.CalendarColorSquare: void onClick(android.view.View)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void onClick(android.view.View)> (1)
<com.android.mms.ui.QuickContactDivot: void onClick(android.view.View)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void onClick(android.view.View)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForSelf()> (1)
<com.android.settings.Utils: java.lang.String getLocalProfileGivenName(android.content.Context)> (1)
<com.android.settings.Utils: java.lang.String getShorterNameIfPossible(android.content.Context)> (1)
<com.android.settings.Utils: java.lang.String getMeProfileName(android.content.Context,boolean)> (2)
<com.android.settings.users.ProfileUpdateReceiver: void copyProfileName(android.content.Context)> (1)
<com.android.settings.users.UserSettings: java.lang.String getProfileName()> (1)
<com.android.settings.users.ProfileUpdateReceiver$1: void run()> (2)
<com.android.settings.users.UserSettings: java.lang.String access$900(com.android.settings.users.UserSettings)> (1)
<com.android.settings.users.ProfileUpdateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.users.UserSettings$3: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.settings.users.UserSettings$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcardFromProfile(boolean,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])> (2)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> (5)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (2)
<com.android.providers.contacts.ContactsProvider2: long insertSettings(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (5)
<com.android.providers.contacts.ContactsProvider2: void cleanupPhotoStore()> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (2)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.contacts.activities.ConfirmAddDetailActivity: void startExtraInfoQuery()> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$1200(com.android.contacts.activities.ConfirmAddDetailActivity)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.util.NameConverter: java.util.Map displayNameToStructuredName(android.content.Context,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void rebuildStructuredName(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromFullNameToStructuredName()> (1)
<com.android.contacts.util.NameConverter: android.content.ContentValues displayNameToStructuredName(android.content.Context,java.lang.String,android.content.ContentValues)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.model.RawContactModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.dataitem.DataKind)> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.model.RawContactModifier: void migrateStateForNewContact(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType)> (2)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void clearAllFields()> ()
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment: void rebindEditorsForNewContact(com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.editor.ContactEditorFragment: void createContact(com.android.contacts.common.model.account.AccountWithDataSet)> (4)
<com.android.contacts.editor.ContactEditorFragment: void access$500(com.android.contacts.editor.ContactEditorFragment,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.ContactEditorFragment: void createContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (2)
<com.android.contacts.editor.ContactEditorFragment$3$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.vcard.VCardComposer: boolean init(java.lang.String,java.lang.String[])> (1)
<com.android.vcard.VCardComposer: boolean init()> ()
<com.android.dialer.calllog.CallLogAdapter: java.lang.String getBetterNumberFromContacts(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.CallLogFragment: void callSelectedEntry()> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.settings.users.AppRestrictionsFragment$EditUserPhotoController: int getPhotoSize(android.content.Context)> (1)
<com.android.settings.users.AppRestrictionsFragment$EditUserPhotoController: void <init>(android.app.Fragment,android.widget.ImageView,android.graphics.Bitmap,android.graphics.drawable.Drawable)> (1)
<com.android.settings.users.AppRestrictionsFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SettingsPreferenceFragment: android.app.Dialog onCreateDialog(int)> (34)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.AccountPreferenceBase: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.ManageAccountsSettings: android.app.Dialog onCreateDialog(int)> (2)
<com.android.settings.accounts.SyncSettings: android.app.Dialog onCreateDialog(int)> (3)
<com.android.settings.ApplicationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DeviceInfoSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.deviceinfo.UsbSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DialogCreatable: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DreamSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.SpellCheckersSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.UserDictionaryList: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.LocationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.net.DataUsageMeteredSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.NotificationStation: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.PrivacySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SecuritySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TextToSpeechSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.vpn2.VpnSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WallpaperTypeSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wfd.WifiDisplaySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.AdvancedWifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.WifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WirelessSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SettingsPreferenceFragment$SettingsDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int createList(int,int,java.lang.String,java.lang.StringBuilder,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: com.android.contacts.model.RawContactDeltaList doInBackground(android.content.Intent[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFileInner(android.net.Uri,java.lang.String)> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onClick(android.view.View)> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (5)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (6)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.QuickContactDivot: void assignContactFromPhone(java.lang.String,boolean)> (2)
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.MessageListItem: void updateAvatarView(java.lang.String,boolean)> (2)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(boolean)> (2)
<com.android.mms.ui.MessageListItem: void bindNotifInd()> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.mms.ui.MessageListItem: void access$500(com.android.mms.ui.MessageListItem,boolean)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageItem,boolean,int)> (1)
<com.android.mms.ui.MessageListItem$2: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageItem$PduLoadedCallback: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.util.ItemLoadedCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (5)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(com.android.mms.util.ThumbnailManager$ImageLoaded,java.lang.Throwable)> (1)
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.PduLoaderManager$PduTask$1: void run()> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.util.ThumbnailManager$ThumbnailTask$1: void run()> (1)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.ComposeMessageActivity$10: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.data.WorkingMessage: int setAttachment(int,android.net.Uri,boolean)> (4)
<com.android.mms.ui.MmsThumbnailPresenter: void presentImageThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.ImageModel)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAudio(android.net.Uri)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addImage(android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void addVideo(android.net.Uri,boolean)> (3)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAudio(android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addImage(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(java.lang.String,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addVideo(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$33: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAttachment(java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity$34: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.Presenter: void present(com.android.mms.util.ItemLoadedCallback)> (3)
<com.android.mms.ui.ComposeMessageActivity$35: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$36: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel(boolean)> (6)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void drawTopPanel(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivity$21: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$41: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)> (1)
<com.android.contacts.model.ContactLoader: void loadDirectoryMetaData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> (1)
<com.android.contacts.model.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: boolean isProfileSet(android.content.Context)> ()
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.contacts.util.ContactLoaderUtils: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (2)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.voicedialer.VoiceContact: java.util.List getVoiceContacts(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (5)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (3)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: int getEstimate(java.lang.String)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void getAutomaticLookback()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.browser.AutofillHandler$LoadFromDb: void run()> (2)
<com.android.browser.AutofillHandler: void asyncLoadFromDb()> (1)
<com.android.browser.BrowserSettings: void <init>(android.content.Context)> (1)
<com.android.browser.BrowserSettings: void initialize(android.content.Context)> (1)
<com.android.browser.Browser: void onCreate()> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List queryContacts(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List access$700(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (2)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)> (1)
<com.android.email.NotificationController$MessageContentObserver: void onChange(boolean)> (1)
<com.android.contacts.common.vcard.ExportProcessor: void runInternal()> (1)
<com.android.contacts.common.vcard.ExportProcessor: void run()> (1)
<com.android.contacts.common.vcard.ProcessorBase: void run()> ()
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> (2)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void handleAccessPermissionResult(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.common.activity.TransactionSafeActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (12)
<com.android.dialer.DialtactsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.PeopleActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.NonPhoneActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ConfirmAddDetailActivity: void startPhotoQuery(long,android.net.Uri)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$900(com.android.contacts.activities.ConfirmAddDetailActivity,long,android.net.Uri)> (1)
<com.android.phone.CallerInfoCache: void refreshCacheEntry()> (1)
<com.android.phone.CallerInfoCache: void access$400(com.android.phone.CallerInfoCache)> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForPhoneNumber(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> (2)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean queryContactInfo(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails access$300(com.android.dialer.CallDetailActivity,android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean access$300(com.android.dialer.calllog.CallLogAdapter,java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: com.android.dialer.PhoneCallDetails[] doInBackground(java.lang.Void[])> (1)
<com.android.dialer.calllog.CallLogAdapter$QueryThread: void run()> (2)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogAdapter: void startRequestProcessing()> (2)
<com.android.dialer.calllog.CallLogAdapter: void access$100(com.android.dialer.calllog.CallLogAdapter)> (1)
<com.android.dialer.calllog.CallLogAdapter: void enqueueRequest(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.vcard.VCardComposer: boolean initWithRawContactsEntityUri(android.net.Uri)> ()
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.MatrixCursor loadProfile()> (1)
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> (2)
<com.android.contacts.common.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()> (2)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (19)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (7)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (10)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (3)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean handleItemClickEvent()> (1)
<com.android.contacts.group.GroupEditorFragment$Member: void <init>(long,java.lang.String,long,java.lang.String,java.lang.String)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupContactFromUri(android.net.Uri)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.ArrayList getContactMatches()> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)> ()
<com.android.contacts.common.vcard.NfcImportVCardActivity: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (9)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int)> (5)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (3)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForSipAddress(java.lang.String)> (1)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.List doInBackground(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (3)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor addSearchSuggestionsBasedOnFilter(android.database.MatrixCursor,android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.contacts.common.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.contacts.common.vcard.ImportProcessor: void run()> (1)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.common.list.IndexerListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (7)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.dialer.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (5)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void setQueryString(java.lang.String,boolean)> (8)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.PeopleActivity: void configureFragments(boolean)> (3)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragment()> (1)
<com.android.contacts.activities.PeopleActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void onAction(int)> (1)
<com.android.contacts.activities.PeopleActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.PeopleActivity: void onStart()> (3)
<com.android.contacts.common.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (2)
<com.android.dialer.DialtactsActivity$7: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction(int)> (2)
<com.android.contacts.common.activity.TransactionSafeActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: void onStart()> (12)
<com.android.contacts.ContactsActivity: void onStart()> (3)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.activities.PeopleActivity: void setQueryTextToFragment(java.lang.String)> (2)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void update()> (2)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (11)
<com.android.contacts.activities.AttachPhotoActivity: void onStart()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onStart()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onStart()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onStart()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onStart()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onStart()> (3)
<com.android.contacts.activities.JoinContactActivity: void onStart()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onStart()> (3)
<com.android.contacts.NonPhoneActivity: void onStart()> (3)
<com.android.dialer.DialtactsActivity: void onStart()> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean,boolean)> (2)
<com.android.contacts.activities.ActionBarAdapter: void initialize(android.os.Bundle,com.android.contacts.list.ContactsRequest)> (2)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (6)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void createViewsAndFragments(android.os.Bundle)> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested()> (4)
<com.android.contacts.activities.PeopleActivity: void onBackPressed()> (5)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterController: void checkFilterValidity(boolean)> (4)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void selectCustomFilter()> (1)
<com.android.contacts.common.list.ContactListFilterController: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (4)
<com.android.contacts.activities.PeopleActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onSearchRequested()> (1)
<com.android.contacts.ContactsActivity: boolean onSearchRequested()> (2)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onBackPressed()> (2)
<com.android.contacts.ContactsActivity: void onBackPressed()> (4)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (7)
<com.android.contacts.common.model.AccountTypeManagerImpl$1: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.common.util.AccountFilterUtil: void handleAccountFilterResult(com.android.contacts.common.list.ContactListFilterController,int,android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.dialer.DialtactsActivity: void onBackPressed()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed()> (3)
<com.android.contacts.common.list.ContactListFilterControllerImpl: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.list.PhoneFavoriteFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.DialtactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.GroupDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void finish()> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void finish()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,java.util.Map)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void rebuildFullName(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromStructuredNameToFullName()> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean hasContentChanged()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryInternal()> (6)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (5)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryIfRequired()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask: void run()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void asyncReloadDictionaryIfRequired()> (7)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean isValidWord(java.lang.String)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionary()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.Dictionary: boolean isValidWord(java.lang.String)> (7)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (4)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isValidWord(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.DictionaryCollection: boolean isValidWord(java.lang.String)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (2)
<com.android.inputmethod.research.MainLogBuffer: boolean isSafeNGram(java.util.ArrayList,int)> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: java.lang.String scrubWord(java.lang.String)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (1)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (10)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForTypingInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isInTheDictionary(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publishLogUnitsAtFrontOfBuffer()> (3)
<com.android.inputmethod.research.ResearchLogger$1: boolean isSafeNGram(java.util.ArrayList,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onUpdateSelection(int,int,int,int,int,int,int,int,boolean,boolean,com.android.inputmethod.latin.RichInputConnection)> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForBatchInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean,int)> (1)
<com.android.inputmethod.latin.LatinIME: void resetContactsDictionary(com.android.inputmethod.latin.ContactsBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void onBufferFull()> (2)
<com.android.inputmethod.research.MainLogBuffer: void shiftAndPublishAll()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publishLogUnitsAtFrontOfBuffer()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(int)> (2)
<com.android.inputmethod.latin.LatinIME: void initSuggest()> (3)
<com.android.inputmethod.latin.LatinIME: void loadSettings()> (3)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictAndKeyboard createDictAndKeyboard(java.util.Locale)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void startUsingContactsDictionaryLocked()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$1: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void onBufferFull()> (1)
<com.android.inputmethod.research.ResearchLogger$1: void onBufferFull()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void shiftAndPublishAll()> (1)
<com.android.inputmethod.research.ResearchLogger: void stop()> (3)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsOrOlderSuggestions(int)> (2)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordTouchedByCursor()> (1)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard poll(long,java.util.concurrent.TimeUnit)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsListener: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void initSuggest(com.android.inputmethod.latin.Suggest)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onFinishInputViewInternal(boolean,int,int,android.view.inputmethod.InputConnection)> ()
<com.android.inputmethod.research.ResearchLogger: void restart()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords access$900(com.android.inputmethod.latin.LatinIME,int)> (1)
<com.android.inputmethod.latin.LatinIME: void updateSuggestionStrip()> (2)
<com.android.inputmethod.latin.LatinIME: void access$200(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard pollWithDefaultTimeout()> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: java.lang.Object poll(long,java.util.concurrent.TimeUnit)> ()
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onCreate()> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.LogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.MainLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger$1: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void onUserLoggingConsent()> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsGestureLocked(com.android.inputmethod.latin.InputPointers)> (2)
<com.android.inputmethod.latin.LatinIME: void access$000(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void commitCurrentAutoCorrection(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postResumeSuggestions()> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnit()> (5)
<com.android.inputmethod.research.ResearchLogger: void sendFeedback(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: void updateBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip()> (8)
<com.android.inputmethod.latin.LatinIME: boolean handleSeparator(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartBatchInput()> (1)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void onUpdateSelection(int,int,int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onUpEvent(int,int,int,long)> (3)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnitAsWord(java.lang.String,long,boolean)> (8)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onStartInputViewInternal(android.view.inputmethod.EditorInfo,android.content.SharedPreferences)> ()
<com.android.inputmethod.research.ResearchLogger: void saveRecording()> (1)
<com.android.inputmethod.research.FeedbackFragment: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void handleBackspace(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursor(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void revertCommit()> (1)
<com.android.inputmethod.latin.LatinIME: boolean handleNonSpecialCharacter(int,int,int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onStartBatchInput()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.String)> (2)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.MoreKeysPanel: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitPartialText(java.lang.String,long,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_maybeDoubleSpacePeriod(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onTextInput(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_pickSuggestionManually(java.lang.String,int,java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_punctuationSuggestion(int,java.lang.String,boolean,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_revertCommit(java.lang.String,java.lang.String,boolean,java.lang.String)> ()
<com.android.inputmethod.research.ResearchLogger: void onWordFinished(java.lang.String,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void richInputConnection_commitText(java.lang.String,int,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void presentFeedbackDialog(com.android.inputmethod.latin.LatinIME)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void mayStartBatchInput(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int,int,long)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (4)
<com.android.inputmethod.research.ResearchLogger: void latinIme_commitCurrentAutoCorrection(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.inputmethod.latin.SuggestedWords)> ()
<com.android.inputmethod.research.ResearchLogger: void onResearchKeySelected(com.android.inputmethod.latin.LatinIME)> ()
<com.android.inputmethod.keyboard.PointerTracker: void mayEndBatchInput(long)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onEvent(com.android.inputmethod.event.Event)> (2)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onGestureMoveEvent(int,int,long,boolean,com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onPhantomUpEvent(long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onHardwareKeyEvent(android.view.KeyEvent)> ()
<com.android.inputmethod.event.EventInterpreter: boolean onSoftwareEvent()> ()
<com.android.inputmethod.keyboard.MainKeyboardView: void invokeCodeInput(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onRegisterKey(com.android.inputmethod.keyboard.Key)> (3)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element: void onPhantomUpEvent(long)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,long)> (3)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator$ProcessMotionEvent: boolean processMotionEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)> (2)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean handleSuddenJumping(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$6: void run()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onCancelEvent(int,int,long)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key)> (2)
<com.android.contacts.common.model.account.AccountTypeWithDataSet: boolean hasData(android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map findUsableInvitableAccountTypes(android.content.Context)> (2)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map access$400(com.android.contacts.common.model.AccountTypeManagerImpl,android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.util.Map doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.model.AccountTypeManager: java.util.Map getUsableInvitableAccountTypes()> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.ContactLoader: void loadInvitableAccountTypes(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void loadAggregationSuggestions(android.net.Uri)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$2: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.systemui.statusbar.phone.QuickSettings$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.event.AttendeesView: void addOneAttendee(com.android.calendar.CalendarEventModel$Attendee)> (3)
<com.android.calendar.event.AttendeesView: void addAttendees(java.lang.String)> ()
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.ArrayList)> (1)
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.HashMap)> ()
<com.android.calendar.EventInfoFragment: void updateAttendees(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void initAttendeesCursor(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$2900(com.android.calendar.EventInfoFragment,android.view.View)> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(android.net.Uri,java.io.OutputStream,java.lang.String,java.lang.String[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displaySecondaryCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateAlreadyDisconnected(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification(boolean)> (2)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallUiState$InCallScreenMode)> (12)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (8)
<com.android.phone.NotificationMgr: void updateNotificationAndLaunchIncomingCallUi()> (1)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void internalResolveIntent(android.content.Intent)> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.phone.BluetoothPhoneService$3: boolean hangupCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void hangupRingingCall()> (2)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (2)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneGlobals: void clearInCallScreenMode()> (2)
<com.android.phone.NotificationMgr: com.android.phone.NotificationMgr init(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (2)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean hangupCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: void internalHangup()> (1)
<com.android.phone.PhoneGlobals$NotificationBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.CallNotifier: boolean ignoreAllIncomingCalls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<android.bluetooth.IBluetoothHeadsetPhone: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processHangupCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5000(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.common.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment$2: void onClick(android.view.View)> (1)
<com.android.contacts.model.RawContactModifier: void parseStructuredNameExtra(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> (1)
<com.android.contacts.model.RawContactModifier: void parseExtras(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> (3)
<com.android.contacts.activities.ConfirmAddDetailActivity: void setEntityDeltaList(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$300(com.android.contacts.activities.ConfirmAddDetailActivity,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(java.lang.String,boolean,com.google.common.collect.ImmutableList)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getGroupUriFromId(long)> (3)
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void setCursor(android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void requestSelectionToScreen()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void bindGroupList()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void access$400(com.android.contacts.group.GroupBrowseListFragment)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> (1)
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void saveContact(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.PhotoEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void access$000(com.android.contacts.activities.AttachPhotoActivity,com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.BaseRawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (5)
<com.android.contacts.activities.AttachPhotoActivity$1: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (4)
<com.android.contacts.editor.ContactEditorFragment: void setPhoto(long,android.graphics.Bitmap,java.lang.String)> (1)
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.RawContactReadOnlyEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.activities.AttachPhotoActivity$Listener: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen()> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$2100(com.android.contacts.editor.ContactEditorFragment)> (3)
<com.android.contacts.editor.ContactEditorFragment: void access$2300(com.android.contacts.editor.ContactEditorFragment,long,android.graphics.Bitmap,java.lang.String)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.PhotoActionPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen()> (2)
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.common.list.DirectoryListLoader: android.database.Cursor loadInBackground()> (1)
<com.android.contacts.common.list.DirectoryListLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void queryPhotosForPreload()> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void preloadPhotosInBackground()> (1)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,java.util.ArrayList,int,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (1)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,java.util.ArrayList,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (2)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Void doInBackground(java.util.ArrayList[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> (1)
<com.android.bluetooth.hfp.AtPhonebook: com.android.bluetooth.hfp.AtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (3)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbsCommand(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbs(java.lang.String,int)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (4)
<com.android.phone.PhoneUtils$3: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void startDisambiguationQuery(java.lang.String)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$800(com.android.contacts.activities.ConfirmAddDetailActivity,java.lang.String)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void generateBinaryDictionary()> (5)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.settings.Utils: java.lang.String getProfileDisplayName(android.content.Context)> (2)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,android.content.ContentValues)> (1)
<com.android.contacts.ContactSaveService: void addMembersToGroup(android.content.ContentResolver,long[],long)> (2)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void updateGroup(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForEmail(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForEmail(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.contacts.detail.ContactLoaderFragment: android.net.Uri getPreAuthorizedUri(android.net.Uri)> (1)
<com.android.contacts.detail.ContactLoaderFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.model.ContactLoader: void loadGroupMetaData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: int getPhotoPickSize()> (3)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: int getPhotoPickSize()> (1)
<com.android.contacts.detail.PhotoSelectionHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (4)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: int getPhotoPickSize()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(com.android.contacts.activities.PhotoSelectionActivity,android.content.Context,android.view.View,int,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void <init>(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.BaseRawContactEditorView,int,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(com.android.contacts.activities.PhotoSelectionActivity,android.content.Context,android.view.View,int,com.android.contacts.model.RawContactDeltaList,com.android.contacts.activities.PhotoSelectionActivity$1)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindPhotoHandler(com.android.contacts.editor.BaseRawContactEditorView,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void attachPhotoHandler()> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void displayPhoto()> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void access$000(com.android.contacts.activities.PhotoSelectionActivity)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$2: void run()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (5)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (5)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.event.AttendeesView: android.view.View updateAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (3)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String,boolean)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.calendar.event.AttendeesView: android.view.View access$100(com.android.calendar.event.AttendeesView,com.android.calendar.event.EditEventHelper$AttendeeItem)> (2)
<com.android.calendar.event.AttendeesView: android.view.View constructAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler$1: void run()> (1)
<com.android.mms.ui.Divot: void assignContactFromEmail(java.lang.String)> ()
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithRfc822Address(java.util.Collection)> (1)
<com.android.mail.providers.UIProvider: void incrementRecipientsTimesContacted(android.content.Context,java.lang.String)> ()
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: long queryForContactId(android.content.ContentResolver,long)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList blockingGetByUris(android.os.Parcelable[])> (1)
<com.android.mms.ui.ComposeMessageActivity$30: void run()> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<com.android.settings.Utils: boolean copyMeProfilePhoto(android.content.Context,android.content.pm.UserInfo)> (2)
<com.android.settings.users.UserSettings: void assignProfilePhoto(android.content.pm.UserInfo)> (1)
<com.android.settings.users.UserSettings: void access$800(com.android.settings.users.UserSettings,android.content.pm.UserInfo)> (1)
<com.android.contacts.GroupMetaDataLoader: android.net.Uri ensureIsGroupUri(android.net.Uri)> (1)
<com.android.contacts.GroupMetaDataLoader: void <init>(android.content.Context,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (3)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.contacts.common.model.account.AccountWithDataSet: boolean hasData(android.content.Context)> (2)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List loadAccountFilters(android.content.Context)> (1)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground()> (1)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.providers.contacts.debug.DataExporter: android.net.Uri exportData(android.content.Context)> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: int getContactCount()> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: int getContactCount()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (1)
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadThumbnails(boolean)> (2)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (7)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.dialer.calllog.DefaultVoicemailNotifier$DefaultNameLookupQuery: java.lang.String query(java.lang.String)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$NameLookupQuery: java.lang.String query(java.lang.String)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier: void updateNotification(android.net.Uri)> (2)
<com.android.dialer.calllog.CallLogNotificationsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.dialer.calllog.VoicemailNotifier: void updateNotification(android.net.Uri)> ()
<com.android.contacts.model.ContactLoader: void loadStreamItems(com.android.contacts.model.Contact)> (1)
<com.android.dialer.dialpad.SmartDialCache: void cacheContacts(android.content.Context)> (2)
<com.android.dialer.dialpad.SmartDialCache: com.android.dialer.dialpad.SmartDialTrie getContacts()> (1)
<com.android.dialer.dialpad.SmartDialCache: void access$100(com.android.dialer.dialpad.SmartDialCache,android.content.Context)> (1)
<com.android.dialer.dialpad.SmartDialCache$1: void run()> (1)
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: void loadPhoto()> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.GroupMemberLoader: android.net.Uri createUri()> (1)
<com.android.contacts.GroupMemberLoader: void <init>(android.content.Context,long,java.lang.String[])> (2)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupDetailQuery(android.content.Context,long)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupEditorQuery(android.content.Context,long)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(android.content.Context,com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$300(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.RawContactEditorView)> (1)
<com.android.contacts.editor.ContactEditorFragment$2: void onRequest(int)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.editor.LabeledEditorView: void notifyEditorListener()> (5)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.EventFieldEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener()> (2)
<com.android.contacts.editor.TextFieldsEditorView: void notifyEditorListener()> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendInactiveMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$500(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.vcard.VCardEntry$EmailData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$EntryElement: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$InsertOperationConstrutor: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (1)
<com.android.vcard.VCardEntry$EntryElementIterator: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (2)
<com.android.vcard.VCardEntry: void iterateAllData(com.android.vcard.VCardEntry$EntryElementIterator)> (3)
<com.android.vcard.VCardEntry: void iterateOneList(java.util.List,com.android.vcard.VCardEntry$EntryElementIterator)> (1)
<com.android.vcard.VCardEntry: boolean isIgnorable()> (2)
<com.android.vcard.VCardEntry: java.lang.String toString()> ()
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.ImportProcessor: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void onEntryEnded()> (1)
<com.android.vcard.VCardInterpreter: void onEntryEnded()> (2)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard()> (4)
<com.android.vcard.VCardParserImpl_V21: void handleNest()> (3)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseOne(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseItem()> (3)
<com.android.vcard.VCardParserImpl_V30: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V40: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V30: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V21: void parseItems()> (4)
<com.android.vcard.VCardParserImpl_V30: boolean parseItem()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseItem()> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParser_V30: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parseOne(java.io.InputStream)> ()
<com.android.vcard.VCardParserImpl_V30: void parseItems()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseItems()> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.common.vcard.ImportRequest constructImportRequest(byte[],android.net.Uri,java.lang.String)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity: com.android.contacts.common.vcard.ImportRequest createImportRequest()> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (4)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.common.vcard.ImportRequest doInBackground(com.android.contacts.common.vcard.VCardService[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: boolean readOneVCard(java.io.InputStream,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)> (1)
<com.android.mms.transaction.MessageStatusService: void onHandleIntent(android.content.Intent)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.vcard.VCardEntry$NameData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.model.RawContactDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.model.RawContactDeltaList[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.vcard.VCardEntry$NicknameData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$900(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (4)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft(boolean)> (4)
<com.android.mms.data.WorkingMessage$1: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.mms.data.Conversation$ConversationQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void saveDraft(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (2)
<com.android.mms.data.WorkingMessage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStop()> (2)
<com.android.vcard.VCardEntry$AndroidCustomData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$WebsiteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$PostalData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$NoteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.vcard.VCardEntry$PhoneData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<com.android.contacts.common.database.ContactUpdateUtils: void setSuperPrimary(android.content.Context,long)> (2)
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<com.android.dialer.contact.ContactUpdateService: void onHandleIntent(android.content.Intent)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<com.android.contacts.ContactSaveService: void removeMembersFromGroup(android.content.ContentResolver,long[],long)> (1)
<com.android.vcard.VCardEntry$PhotoData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$ImData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.contacts.model.RawContactDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.vcard.VCardEntry$AnniversaryData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void doSaveAction()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.vcard.VCardEntry$SipData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean update(java.util.Collection,java.util.Collection,java.lang.String)> (2)
<com.android.vcard.VCardEntry$OrganizationData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.vcard.VCardEntry$BirthdayData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<com.android.providers.contacts.ContactsProvider2$PipeMonitor: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.MANAGE_ACCOUNTS
175 Callers:
<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()> (6)
<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService: void clearPassword(android.accounts.Account)> (2)
<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> (2)
<com.android.server.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<com.android.server.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void clearPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> ()
<android.accounts.IAccountManager$Stub: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> ()
<android.accounts.IAccountManager$Stub: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (1)
<android.accounts.IAccountManager: void clearPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> (1)
<android.accounts.IAccountManager: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (1)
<android.accounts.IAccountManager: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (1)
<android.accounts.IAccountManager: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$7: void doWork()> (1)
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)> (2)
<android.accounts.AccountManager$8: void doWork()> (1)
<android.accounts.AccountManager$10: void doWork()> (1)
<android.accounts.AccountManager$4: void doWork()> (1)
<android.accounts.AccountManager$9: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.test.IsolatedContext$MockAccountManager: void clearPassword(android.accounts.Account)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (5)
<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$4: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (8)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.calendar.AllInOneActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.util.AccountPromptUtils: void launchAccountPrompt(android.app.Activity)> (1)
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (1)
<com.android.settings.accounts.AddAccountSettings: void addAccount(java.lang.String)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManager$Future2Task start()> (2)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.AutologinBar: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> ()
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void onResume()> (1)
<com.android.contacts.activities.PeopleActivity: void updateViewConfiguration(boolean)> (2)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.settings.accounts.AddAccountSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void start()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<com.android.browser.Controller: void doStart(android.os.Bundle,android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onProviderStatusChange()> (1)
<com.android.contacts.activities.PeopleActivity: void onResume()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void maybeEnableFallback(android.content.Context)> (1)
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context,boolean)> (2)
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.settings.accounts.AccountSyncSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.CrashRecoveryHandler: void startRecovery(android.content.Intent)> (1)
<com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener: void onProviderStatusChange()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onResume()> (12)
<com.android.contacts.ContactsActivity: void onResume()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onFinishInflate()> (3)
<com.android.email.provider.AccountReconciler: boolean accountsNeedReconciling(android.content.Context,java.util.List,android.accounts.Account[])> (1)
<com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (2)
<com.android.browser.Controller: void start(android.content.Intent)> (1)
<com.android.contacts.list.ProviderStatusWatcher: void notifyListeners()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onResume()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onResume()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onResume()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onResume()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onResume()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onResume()> (3)
<com.android.contacts.activities.JoinContactActivity: void onResume()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onResume()> (3)
<com.android.contacts.NonPhoneActivity: void onResume()> (3)
<com.android.dialer.DialtactsActivity: void onResume()> (2)
<com.android.email.service.MailService: boolean hasMismatchInPopImapAccounts(android.content.Context)> (1)
<com.android.email.service.AccountService$1: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (1)
<com.android.browser.ActivityController: void start(android.content.Intent)> (1)
<com.android.contacts.list.ProviderStatusWatcher: void access$600(com.android.contacts.list.ProviderStatusWatcher)> (1)
<com.android.email.activity.Welcome$1: void run()> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IAccountService$Stub: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal(android.content.Context)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void reconcileAccounts(java.lang.String,java.lang.String)> (1)
<com.android.email.service.MailService$6: void runInternal(java.lang.Object)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$3: void run()> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.service.MailService$6: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$1: void run()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.server.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (3)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
Permission:android.permission.WRITE_SYNC_SETTINGS
69 Callers:
<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> ()
<android.content.IContentService$Stub: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<com.android.server.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (10)
<android.app.ContextImpl$ApplicationContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.mock.MockContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void enableSync(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.email.activity.setup.AccountSettingsFragment: void saveSettings()> (1)
<com.android.email.provider.DBHelper: void createAccountManagerAccount(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.provider.DBHelper: void upgradeFromVersion21ToVersion22(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternalForTest()> (1)
<com.android.settings.accounts.AccountSyncSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onPause()> (2)
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> ()
<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> ()
<android.content.IContentService$Stub: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.app.ContextImpl$ApplicationContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.test.mock.MockContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.content.IContentService$Stub: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.app.ContextImpl$ApplicationContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.test.mock.MockContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> ()
<android.content.IContentService$Stub: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (9)
<android.app.ContextImpl$ApplicationContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> ()
<android.content.IContentService$Stub: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService: void setMasterSyncAutomatically(boolean)> (1)
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> (6)
<android.app.ContextImpl$ApplicationContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()> ()
<com.android.settings.accounts.SyncSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.DataUsageSummary$ConfirmAutoSyncChangeFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:android.permission.BROADCAST_STICKY
534 Callers:
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String,int)> (6)
<com.android.internal.telephony.cdma.CDMAPhone: void sendEmergencyCallbackModeChange()> (3)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: void broadcastStickyIntent(android.content.Intent,java.lang.String,int)> (1)
<com.android.server.BatteryService$7: void run()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendEmergencyCallbackModeChange()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void handleExitEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void setExternalState(com.android.internal.telephony.IccCardConstants$State,boolean)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void updateQuietMode()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleExitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void setExternalState(com.android.internal.telephony.IccCardConstants$State)> (5)
<com.android.internal.telephony.uicc.IccCardProxy: void setVoiceRadioTech(int)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void processLockedState()> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void updateExternalState()> (1)
<com.android.internal.telephony.PhoneProxy: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void updateIccAvailability()> (2)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void sendStickyBroadcast(android.content.Intent)> (1)
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> (566)
<android.app.ContextImpl: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (1)
<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (37)
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (566)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pConnectionChangedBroadcast()> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pDiscoveryChangedBroadcast(boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pPersistentGroupsChangedBroadcast()> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pStateChangedBroadcast(boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendThisDeviceChangedBroadcast()> (3)
<android.net.wifi.SupplicantStateTracker: void sendSupplicantStateChangedBroadcast(android.net.wifi.SupplicantState,boolean)> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void sendNetworkStateChangeBroadcast(java.lang.String)> (2)
<android.net.wifi.WifiStateMachine: void sendRssiChangeBroadcast(int)> (1)
<android.net.wifi.WifiStateMachine: void setWifiApState(int)> (1)
<android.net.wifi.WifiStateMachine: void setWifiState(int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void setHdmiPlugged(boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updateSpnDisplay()> (6)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updateSpnDisplay()> (5)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<com.android.server.DeviceStorageMonitorService: void sendFullNotification()> (1)
<com.android.server.DeviceStorageMonitorService: void sendNotification()> (1)
<com.android.server.DockObserver: void handleDockStateChange()> (1)
<com.android.server.NsdService: void sendNsdStateChangeBroadcast(boolean)> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionStateChanged(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,boolean)> (1)
<com.android.server.TelephonyRegistry: void broadcastServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.server.TelephonyRegistry: void broadcastSignalStrengthChanged(android.telephony.SignalStrength)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateAudioSourceFunction()> (3)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbState()> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (4)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void handleGroupCreationFailure()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void updatePersistentNetworks(boolean)> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,boolean)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean setAndPersistDeviceName(java.lang.String)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean setWfdInfo(android.net.wifi.p2p.WifiP2pWfdInfo)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void updateThisDevice(int)> (2)
<android.net.wifi.SupplicantStateTracker: void access$200(android.net.wifi.SupplicantStateTracker,android.net.wifi.SupplicantState,boolean)> (3)
<com.android.internal.util.State: void enter()> (29)
<com.android.internal.util.State: void exit()> (101)
<com.android.server.wifi.WifiService: void <init>(android.content.Context)> (1)
<android.net.wifi.WifiStateMachine: void access$14900(android.net.wifi.WifiStateMachine,java.lang.String)> (5)
<android.net.wifi.WifiStateMachine: void handleNetworkDisconnect()> (1)
<android.net.wifi.WifiStateMachine: void fetchRssiAndLinkSpeedNative()> (1)
<android.net.wifi.WifiStateMachine: void access$3700(android.net.wifi.WifiStateMachine,int)> (5)
<android.net.wifi.WifiStateMachine: void access$3100(android.net.wifi.WifiStateMachine,int)> (6)
<android.net.wifi.WifiStateMachine: void handleSupplicantConnectionLoss()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void initializeHdmiState()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTime()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTimeZone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updateSpnDisplay()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.ServiceStateTracker: void updateSpnDisplay()> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTime()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.DockObserver: void access$000(com.android.server.DockObserver)> (2)
<com.android.server.NsdService: void access$700(com.android.server.NsdService,boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.usb.UsbDeviceManager: void systemReady()> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateState(java.lang.String)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$6600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (4)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$1: void onDeleteGroup(int)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean reinvokePersistentGroup(android.net.wifi.p2p.WifiP2pConfig)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$8300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void initializeP2pSettings()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$3400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$3600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pWfdInfo)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$10200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,int)> (2)
<android.net.wifi.SupplicantStateTracker$CompletedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.server.ServerThread: void run()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void enter()> (1)
<android.net.wifi.WifiStateMachine: void access$7300(android.net.wifi.WifiStateMachine)> (6)
<android.net.wifi.WifiStateMachine: void access$16800(android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine: void access$7200(android.net.wifi.WifiStateMachine)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTime()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$000(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$100(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.DockObserver: void updateLocked()> (2)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$EnabledState: void enter()> (1)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.usb.UsbService: void systemReady()> (1)
<com.android.server.usb.UsbDeviceManager$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$FrequencyConflictState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$5200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pConfig)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$WpsRunningState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$1: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$3: void onChange(boolean)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (1)
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInviteRequestState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void doNotifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (1)
<com.android.server.usb.UsbService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (7)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (3)
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (8)
<com.android.internal.telephony.PhoneBase: void notifySignalStrength()> (6)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: boolean trySetupData(com.android.internal.telephony.dataconnection.ApnContext)> (4)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyNoData(com.android.internal.telephony.dataconnection.DcFailCause,com.android.internal.telephony.dataconnection.ApnContext)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (8)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> (15)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifySignalStrength()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.ServiceStateTracker: boolean notifySignalStrength()> (4)
<com.android.internal.telephony.sip.SipPhoneBase: void notifySignalStrength()> (1)
<com.android.internal.telephony.sip.SipPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: boolean onTrySetupData(com.android.internal.telephony.dataconnection.ApnContext)> (3)
<com.android.internal.telephony.dataconnection.DcTracker: boolean trySetupData(java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.dataconnection.DcTracker: void applyNewState(com.android.internal.telephony.dataconnection.ApnContext,boolean,boolean)> (3)
<com.android.internal.telephony.dataconnection.DcTracker: void setupDataOnConnectableApns(java.lang.String)> (7)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyApnIdDisconnected(java.lang.String,int)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyApnIdUpToCurrent(java.lang.String,int)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyOffApnsOfAvailability(java.lang.String)> (9)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcController$DccDefaultState: void onDataStateChanged(java.util.ArrayList)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyDataConnection(java.lang.String)> ()
<com.android.internal.telephony.dataconnection.DcTracker: boolean setupData(com.android.internal.telephony.dataconnection.ApnContext)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void cleanUpConnection(boolean,com.android.internal.telephony.dataconnection.ApnContext)> (7)
<com.android.internal.telephony.dataconnection.DcTracker: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyDataConnection(java.lang.String)> (9)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataSetupCompleteError(android.os.AsyncResult)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onDisconnectDcRetrying(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean notifySignalStrength()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean notifySignalStrength()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean notifySignalStrength()> (1)
<com.android.internal.telephony.ServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (5)
<com.android.internal.telephony.dataconnection.DcTracker: void onPollPdp()> (2)
<com.android.internal.telephony.dataconnection.DcTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: boolean onTrySetupData(java.lang.String)> (4)
<com.android.internal.telephony.dataconnection.DcTracker: void onApnChanged()> (3)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyOffApnsOfAvailability(java.lang.String)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyApnIdDisconnected(java.lang.String,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyApnIdUpToCurrent(java.lang.String,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcController$DccDefaultState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void cleanUpAllConnections(boolean,java.lang.String)> (9)
<com.android.internal.telephony.dataconnection.DcTracker: void onCleanUpConnection(boolean,int,java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataConnectionDetached()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataSetupCompleteError(android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDisconnectDcRetrying(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: boolean onTrySetupData(java.lang.String)> (4)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRoamingOff()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRoamingOn()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetUserDataEnabled(boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRadioAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void dispose()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onCleanUpAllConnections(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void restartRadio()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onCleanUpConnection(boolean,int,java.lang.String)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void gotoIdleAndNotifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetInternalDataEnabled(boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetPolicyDataEnabled(boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetUserDataEnabled(boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void dispose()> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onCleanUpAllConnections(java.lang.String)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void restartRadio()> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onResetDone(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetPolicyDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void dispose()> (2)
<com.android.internal.telephony.PhoneBase: void dispose()> (5)
<com.android.internal.telephony.dataconnection.DcTracker: void doRecovery()> (2)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.Phone: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhone: void dispose()> (1)
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (566)
<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (566)
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> (1)
<android.app.ActivityManagerNative: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void removeStickyBroadcast(android.content.Intent)> (1)
<android.app.ContextImpl: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (1)
<android.content.Context: void removeStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> (566)
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (566)
<com.android.server.DeviceStorageMonitorService: void cancelFullNotification()> (1)
<com.android.server.DeviceStorageMonitorService: void cancelNotification()> (1)
Permission:android.permission.READ_SOCIAL_STREAM
1549 Callers:
<com.android.providers.contacts.ContactsProvider2: void enforceSocialStreamReadPermission(android.net.Uri)> (2)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.ContactsProvider2: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (5)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$100()> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (22)
<com.android.email.activity.MailboxFinder$FindMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$6: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageList$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.ex.chips.BaseRecipientAdapter$DefaultFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.providers.contacts.LegacyApiSupport: long findFirstDataId(long,java.lang.String)> (2)
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (13)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> (1)
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (14)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.widget.QuickContactBadge: void onClick(android.view.View)> (5)
<com.android.calendar.selectcalendars.CalendarColorSquare: void onClick(android.view.View)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void onClick(android.view.View)> (1)
<com.android.mms.ui.QuickContactDivot: void onClick(android.view.View)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void onClick(android.view.View)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.contacts.util.NameConverter: java.util.Map displayNameToStructuredName(android.content.Context,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void rebuildStructuredName(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromFullNameToStructuredName()> (1)
<com.android.contacts.util.NameConverter: android.content.ContentValues displayNameToStructuredName(android.content.Context,java.lang.String,android.content.ContentValues)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.model.RawContactModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.dataitem.DataKind)> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.model.RawContactModifier: void migrateStateForNewContact(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType)> (2)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void clearAllFields()> ()
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment: void rebindEditorsForNewContact(com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.editor.ContactEditorFragment: void createContact(com.android.contacts.common.model.account.AccountWithDataSet)> (4)
<com.android.contacts.editor.ContactEditorFragment: void access$500(com.android.contacts.editor.ContactEditorFragment,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.ContactEditorFragment: void createContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (2)
<com.android.contacts.editor.ContactEditorFragment$3$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.vcard.VCardComposer: boolean init(java.lang.String,java.lang.String[])> (1)
<com.android.vcard.VCardComposer: boolean init()> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.vcard.VCardEntry$EmailData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$EntryElement: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$InsertOperationConstrutor: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (1)
<com.android.vcard.VCardEntry$EntryElementIterator: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (2)
<com.android.vcard.VCardEntry: void iterateAllData(com.android.vcard.VCardEntry$EntryElementIterator)> (3)
<com.android.vcard.VCardEntry: void iterateOneList(java.util.List,com.android.vcard.VCardEntry$EntryElementIterator)> (1)
<com.android.vcard.VCardEntry: boolean isIgnorable()> (2)
<com.android.vcard.VCardEntry: java.lang.String toString()> ()
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.ImportProcessor: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void onEntryEnded()> (1)
<com.android.vcard.VCardInterpreter: void onEntryEnded()> (2)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard()> (4)
<com.android.vcard.VCardParserImpl_V21: void handleNest()> (3)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseOne(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseItem()> (3)
<com.android.vcard.VCardParserImpl_V30: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V40: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V30: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V21: void parseItems()> (4)
<com.android.vcard.VCardParserImpl_V30: boolean parseItem()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseItem()> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParser_V30: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parseOne(java.io.InputStream)> ()
<com.android.vcard.VCardParserImpl_V30: void parseItems()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseItems()> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.common.vcard.ImportRequest constructImportRequest(byte[],android.net.Uri,java.lang.String)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity: com.android.contacts.common.vcard.ImportRequest createImportRequest()> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (4)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.common.vcard.ImportRequest doInBackground(com.android.contacts.common.vcard.VCardService[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: boolean readOneVCard(java.io.InputStream,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.common.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.common.vcard.ProcessorBase: void run()> ()
<com.android.settings.users.AppRestrictionsFragment$EditUserPhotoController: int getPhotoSize(android.content.Context)> (1)
<com.android.settings.users.AppRestrictionsFragment$EditUserPhotoController: void <init>(android.app.Fragment,android.widget.ImageView,android.graphics.Bitmap,android.graphics.drawable.Drawable)> (1)
<com.android.settings.users.AppRestrictionsFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SettingsPreferenceFragment: android.app.Dialog onCreateDialog(int)> (34)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.AccountPreferenceBase: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.ManageAccountsSettings: android.app.Dialog onCreateDialog(int)> (2)
<com.android.settings.accounts.SyncSettings: android.app.Dialog onCreateDialog(int)> (3)
<com.android.settings.ApplicationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DeviceInfoSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.deviceinfo.UsbSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DialogCreatable: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DreamSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.SpellCheckersSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.UserDictionaryList: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.LocationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.net.DataUsageMeteredSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.NotificationStation: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.PrivacySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SecuritySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TextToSpeechSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.vpn2.VpnSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WallpaperTypeSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wfd.WifiDisplaySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.AdvancedWifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.WifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WirelessSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SettingsPreferenceFragment$SettingsDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (5)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (6)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.QuickContactDivot: void assignContactFromPhone(java.lang.String,boolean)> (2)
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.MessageListItem: void updateAvatarView(java.lang.String,boolean)> (2)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(boolean)> (2)
<com.android.mms.ui.MessageListItem: void bindNotifInd()> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.mms.ui.MessageListItem: void access$500(com.android.mms.ui.MessageListItem,boolean)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageItem,boolean,int)> (1)
<com.android.mms.ui.MessageListItem$2: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageItem$PduLoadedCallback: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.util.ItemLoadedCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (5)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(com.android.mms.util.ThumbnailManager$ImageLoaded,java.lang.Throwable)> (1)
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.PduLoaderManager$PduTask$1: void run()> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.util.ThumbnailManager$ThumbnailTask$1: void run()> (1)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.ComposeMessageActivity$10: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.data.WorkingMessage: int setAttachment(int,android.net.Uri,boolean)> (4)
<com.android.mms.ui.MmsThumbnailPresenter: void presentImageThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.ImageModel)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAudio(android.net.Uri)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addImage(android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void addVideo(android.net.Uri,boolean)> (3)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAudio(android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addImage(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(java.lang.String,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addVideo(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$33: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAttachment(java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity$34: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.Presenter: void present(com.android.mms.util.ItemLoadedCallback)> (3)
<com.android.mms.ui.ComposeMessageActivity$35: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$36: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel(boolean)> (6)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void drawTopPanel(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivity$21: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$41: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.ContactLoader: void loadDirectoryMetaData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> (1)
<com.android.contacts.model.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.util.ContactLoaderUtils: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (2)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (5)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (3)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: int getEstimate(java.lang.String)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void getAutomaticLookback()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (2)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)> (1)
<com.android.email.NotificationController$MessageContentObserver: void onChange(boolean)> (1)
<com.android.contacts.common.vcard.ExportProcessor: void runInternal()> (1)
<com.android.contacts.common.vcard.ExportProcessor: void run()> (1)
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> (2)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void handleAccessPermissionResult(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void startPhotoQuery(long,android.net.Uri)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$900(com.android.contacts.activities.ConfirmAddDetailActivity,long,android.net.Uri)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallerInfoCache: void refreshCacheEntry()> (1)
<com.android.phone.CallerInfoCache: void access$400(com.android.phone.CallerInfoCache)> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForPhoneNumber(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> (2)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean queryContactInfo(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails access$300(com.android.dialer.CallDetailActivity,android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean access$300(com.android.dialer.calllog.CallLogAdapter,java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: com.android.dialer.PhoneCallDetails[] doInBackground(java.lang.Void[])> (1)
<com.android.dialer.calllog.CallLogAdapter$QueryThread: void run()> (2)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogAdapter: void startRequestProcessing()> (2)
<com.android.dialer.calllog.CallLogAdapter: void access$100(com.android.dialer.calllog.CallLogAdapter)> (1)
<com.android.dialer.calllog.CallLogAdapter: void enqueueRequest(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.MatrixCursor loadProfile()> (1)
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> (2)
<com.android.contacts.common.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()> (2)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,java.util.Map)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void rebuildFullName(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromStructuredNameToFullName()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<com.android.contacts.common.model.account.AccountTypeWithDataSet: boolean hasData(android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map findUsableInvitableAccountTypes(android.content.Context)> (2)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map access$400(com.android.contacts.common.model.AccountTypeManagerImpl,android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.util.Map doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.model.AccountTypeManager: java.util.Map getUsableInvitableAccountTypes()> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.ContactLoader: void loadInvitableAccountTypes(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void loadAggregationSuggestions(android.net.Uri)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(android.net.Uri,java.io.OutputStream,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFileInner(android.net.Uri,java.lang.String)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.common.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment$2: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getGroupUriFromId(long)> (3)
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void setCursor(android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void requestSelectionToScreen()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void bindGroupList()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void access$400(com.android.contacts.group.GroupBrowseListFragment)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.DirectoryListLoader: android.database.Cursor loadInBackground()> (1)
<com.android.contacts.common.list.DirectoryListLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void queryPhotosForPreload()> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void preloadPhotosInBackground()> (1)
<com.android.vcard.VCardEntry$NameData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (4)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.PhoneUtils$3: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: void startDisambiguationQuery(java.lang.String)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$800(com.android.contacts.activities.ConfirmAddDetailActivity,java.lang.String)> (1)
<com.android.settings.Utils: java.lang.String getProfileDisplayName(android.content.Context)> (2)
<com.android.settings.Utils: java.lang.String getMeProfileName(android.content.Context,boolean)> (2)
<com.android.settings.Utils: java.lang.String getShorterNameIfPossible(android.content.Context)> (1)
<com.android.settings.users.ProfileUpdateReceiver: void copyProfileName(android.content.Context)> (1)
<com.android.settings.users.UserSettings: java.lang.String getProfileName()> (1)
<com.android.settings.users.ProfileUpdateReceiver$1: void run()> (2)
<com.android.settings.users.UserSettings: java.lang.String access$900(com.android.settings.users.UserSettings)> (1)
<com.android.settings.users.ProfileUpdateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.users.UserSettings$3: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.settings.users.UserSettings$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,android.content.ContentValues)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: long insertSettings(android.net.Uri,android.content.ContentValues)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForSipAddress(java.lang.String)> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.contacts.model.ContactLoader: void loadGroupMetaData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.model.RawContactDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.model.RawContactDeltaList[])> (1)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithRfc822Address(java.util.Collection)> (1)
<com.android.mail.providers.UIProvider: void incrementRecipientsTimesContacted(android.content.Context,java.lang.String)> ()
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.vcard.VCardEntry$NicknameData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (9)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList blockingGetByUris(android.os.Parcelable[])> (1)
<com.android.mms.ui.ComposeMessageActivity$30: void run()> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.GroupMetaDataLoader: android.net.Uri ensureIsGroupUri(android.net.Uri)> (1)
<com.android.contacts.GroupMetaDataLoader: void <init>(android.content.Context,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.vcard.VCardEntry$AndroidCustomData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.common.model.account.AccountWithDataSet: boolean hasData(android.content.Context)> (2)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List loadAccountFilters(android.content.Context)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground()> (1)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.vcard.VCardEntry$WebsiteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.providers.contacts.debug.DataExporter: android.net.Uri exportData(android.content.Context)> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadThumbnails(boolean)> (2)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()> (1)
<com.android.vcard.VCardEntry$PostalData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$NoteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (7)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.contacts.model.ContactLoader: void loadStreamItems(com.android.contacts.model.Contact)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$DefaultNameLookupQuery: java.lang.String query(java.lang.String)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$NameLookupQuery: java.lang.String query(java.lang.String)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier: void updateNotification(android.net.Uri)> (2)
<com.android.dialer.calllog.CallLogNotificationsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.dialer.calllog.VoicemailNotifier: void updateNotification(android.net.Uri)> ()
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: void loadPhoto()> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.GroupMemberLoader: android.net.Uri createUri()> (1)
<com.android.contacts.GroupMemberLoader: void <init>(android.content.Context,long,java.lang.String[])> (2)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupDetailQuery(android.content.Context,long)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupEditorQuery(android.content.Context,long)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> (1)
<com.android.mms.data.WorkingMessage: void updateSendStats(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void access$800(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.vcard.VCardEntry$PhoneData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment: void doShareVisibleContacts()> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment: void access$100(com.android.contacts.common.interactions.ImportExportDialogFragment)> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForPhoneNumber(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfo(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void access$600(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.settings.Utils: java.lang.String getLocalProfileGivenName(android.content.Context)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForSelf()> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcardFromProfile(boolean,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])> (2)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> (5)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (2)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: void cleanupPhotoStore()> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (2)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.contacts.activities.ConfirmAddDetailActivity: void startExtraInfoQuery()> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$1200(com.android.contacts.activities.ConfirmAddDetailActivity)> (1)
<com.android.dialer.calllog.CallLogAdapter: java.lang.String getBetterNumberFromContacts(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.CallLogFragment: void callSelectedEntry()> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int createList(int,int,java.lang.String,java.lang.StringBuilder,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: com.android.contacts.model.RawContactDeltaList doInBackground(android.content.Intent[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onClick(android.view.View)> (1)
<com.android.contacts.common.database.ContactUpdateUtils: void setSuperPrimary(android.content.Context,long)> (2)
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<com.android.dialer.contact.ContactUpdateService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: boolean isProfileSet(android.content.Context)> ()
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.contacts.ContactSaveService: void removeMembersFromGroup(android.content.ContentResolver,long[],long)> (1)
<com.android.contacts.ContactSaveService: void updateGroup(android.content.Intent)> (1)
<com.android.voicedialer.VoiceContact: java.util.List getVoiceContacts(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.browser.AutofillHandler$LoadFromDb: void run()> (2)
<com.android.browser.AutofillHandler: void asyncLoadFromDb()> (1)
<com.android.browser.BrowserSettings: void <init>(android.content.Context)> (1)
<com.android.browser.BrowserSettings: void initialize(android.content.Context)> (1)
<com.android.browser.Browser: void onCreate()> (1)
<com.android.vcard.VCardEntry$PhotoData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List queryContacts(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List access$700(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.vcard.VCardEntry$ImData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.common.activity.TransactionSafeActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (12)
<com.android.dialer.DialtactsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.PeopleActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.NonPhoneActivity: void onCreate(android.os.Bundle)> (3)
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.vcard.VCardComposer: boolean initWithRawContactsEntityUri(android.net.Uri)> ()
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (19)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (7)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (10)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (3)
<com.android.contacts.editor.AggregationSuggestionView: boolean handleItemClickEvent()> (1)
<com.android.contacts.group.GroupEditorFragment$Member: void <init>(long,java.lang.String,long,java.lang.String,java.lang.String)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupContactFromUri(android.net.Uri)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.ArrayList getContactMatches()> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)> ()
<com.android.contacts.common.vcard.NfcImportVCardActivity: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (9)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int)> (5)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (3)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.editor.ContactEditorFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.List doInBackground(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (3)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor addSearchSuggestionsBasedOnFilter(android.database.MatrixCursor,android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.common.list.IndexerListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (7)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.dialer.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (5)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void setQueryString(java.lang.String,boolean)> (8)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.PeopleActivity: void configureFragments(boolean)> (3)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragment()> (1)
<com.android.contacts.activities.PeopleActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void onAction(int)> (1)
<com.android.contacts.activities.PeopleActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.PeopleActivity: void onStart()> (3)
<com.android.contacts.common.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (2)
<com.android.dialer.DialtactsActivity$7: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction(int)> (2)
<com.android.contacts.common.activity.TransactionSafeActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: void onStart()> (12)
<com.android.contacts.ContactsActivity: void onStart()> (3)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.activities.PeopleActivity: void setQueryTextToFragment(java.lang.String)> (2)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void update()> (2)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (11)
<com.android.contacts.activities.AttachPhotoActivity: void onStart()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onStart()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onStart()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onStart()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onStart()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onStart()> (3)
<com.android.contacts.activities.JoinContactActivity: void onStart()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onStart()> (3)
<com.android.contacts.NonPhoneActivity: void onStart()> (3)
<com.android.dialer.DialtactsActivity: void onStart()> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean,boolean)> (2)
<com.android.contacts.activities.ActionBarAdapter: void initialize(android.os.Bundle,com.android.contacts.list.ContactsRequest)> (2)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (6)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void createViewsAndFragments(android.os.Bundle)> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested()> (4)
<com.android.contacts.activities.PeopleActivity: void onBackPressed()> (5)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterController: void checkFilterValidity(boolean)> (4)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void selectCustomFilter()> (1)
<com.android.contacts.common.list.ContactListFilterController: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (4)
<com.android.contacts.activities.PeopleActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onSearchRequested()> (1)
<com.android.contacts.ContactsActivity: boolean onSearchRequested()> (2)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onBackPressed()> (2)
<com.android.contacts.ContactsActivity: void onBackPressed()> (4)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (7)
<com.android.contacts.common.model.AccountTypeManagerImpl$1: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.common.util.AccountFilterUtil: void handleAccountFilterResult(com.android.contacts.common.list.ContactListFilterController,int,android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.dialer.DialtactsActivity: void onBackPressed()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed()> (3)
<com.android.contacts.common.list.ContactListFilterControllerImpl: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.list.PhoneFavoriteFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.DialtactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.GroupDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void finish()> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void finish()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean hasContentChanged()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryInternal()> (6)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (5)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryIfRequired()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask: void run()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void asyncReloadDictionaryIfRequired()> (7)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean isValidWord(java.lang.String)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionary()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.Dictionary: boolean isValidWord(java.lang.String)> (7)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (4)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isValidWord(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.DictionaryCollection: boolean isValidWord(java.lang.String)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (2)
<com.android.inputmethod.research.MainLogBuffer: boolean isSafeNGram(java.util.ArrayList,int)> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: java.lang.String scrubWord(java.lang.String)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (1)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (10)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForTypingInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isInTheDictionary(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publishLogUnitsAtFrontOfBuffer()> (3)
<com.android.inputmethod.research.ResearchLogger$1: boolean isSafeNGram(java.util.ArrayList,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onUpdateSelection(int,int,int,int,int,int,int,int,boolean,boolean,com.android.inputmethod.latin.RichInputConnection)> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForBatchInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean,int)> (1)
<com.android.inputmethod.latin.LatinIME: void resetContactsDictionary(com.android.inputmethod.latin.ContactsBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void onBufferFull()> (2)
<com.android.inputmethod.research.MainLogBuffer: void shiftAndPublishAll()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publishLogUnitsAtFrontOfBuffer()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(int)> (2)
<com.android.inputmethod.latin.LatinIME: void initSuggest()> (3)
<com.android.inputmethod.latin.LatinIME: void loadSettings()> (3)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictAndKeyboard createDictAndKeyboard(java.util.Locale)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void startUsingContactsDictionaryLocked()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$1: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void onBufferFull()> (1)
<com.android.inputmethod.research.ResearchLogger$1: void onBufferFull()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void shiftAndPublishAll()> (1)
<com.android.inputmethod.research.ResearchLogger: void stop()> (3)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsOrOlderSuggestions(int)> (2)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordTouchedByCursor()> (1)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard poll(long,java.util.concurrent.TimeUnit)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsListener: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void initSuggest(com.android.inputmethod.latin.Suggest)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onFinishInputViewInternal(boolean,int,int,android.view.inputmethod.InputConnection)> ()
<com.android.inputmethod.research.ResearchLogger: void restart()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords access$900(com.android.inputmethod.latin.LatinIME,int)> (1)
<com.android.inputmethod.latin.LatinIME: void updateSuggestionStrip()> (2)
<com.android.inputmethod.latin.LatinIME: void access$200(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard pollWithDefaultTimeout()> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: java.lang.Object poll(long,java.util.concurrent.TimeUnit)> ()
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onCreate()> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.LogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.MainLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger$1: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void onUserLoggingConsent()> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsGestureLocked(com.android.inputmethod.latin.InputPointers)> (2)
<com.android.inputmethod.latin.LatinIME: void access$000(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void commitCurrentAutoCorrection(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postResumeSuggestions()> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnit()> (5)
<com.android.inputmethod.research.ResearchLogger: void sendFeedback(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: void updateBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip()> (8)
<com.android.inputmethod.latin.LatinIME: boolean handleSeparator(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartBatchInput()> (1)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void onUpdateSelection(int,int,int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onUpEvent(int,int,int,long)> (3)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnitAsWord(java.lang.String,long,boolean)> (8)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onStartInputViewInternal(android.view.inputmethod.EditorInfo,android.content.SharedPreferences)> ()
<com.android.inputmethod.research.ResearchLogger: void saveRecording()> (1)
<com.android.inputmethod.research.FeedbackFragment: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void handleBackspace(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursor(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void revertCommit()> (1)
<com.android.inputmethod.latin.LatinIME: boolean handleNonSpecialCharacter(int,int,int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onStartBatchInput()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.String)> (2)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.MoreKeysPanel: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitPartialText(java.lang.String,long,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_maybeDoubleSpacePeriod(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onTextInput(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_pickSuggestionManually(java.lang.String,int,java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_punctuationSuggestion(int,java.lang.String,boolean,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_revertCommit(java.lang.String,java.lang.String,boolean,java.lang.String)> ()
<com.android.inputmethod.research.ResearchLogger: void onWordFinished(java.lang.String,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void richInputConnection_commitText(java.lang.String,int,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void presentFeedbackDialog(com.android.inputmethod.latin.LatinIME)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void mayStartBatchInput(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int,int,long)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (4)
<com.android.inputmethod.research.ResearchLogger: void latinIme_commitCurrentAutoCorrection(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.inputmethod.latin.SuggestedWords)> ()
<com.android.inputmethod.research.ResearchLogger: void onResearchKeySelected(com.android.inputmethod.latin.LatinIME)> ()
<com.android.inputmethod.keyboard.PointerTracker: void mayEndBatchInput(long)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onEvent(com.android.inputmethod.event.Event)> (2)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onGestureMoveEvent(int,int,long,boolean,com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onPhantomUpEvent(long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onHardwareKeyEvent(android.view.KeyEvent)> ()
<com.android.inputmethod.event.EventInterpreter: boolean onSoftwareEvent()> ()
<com.android.inputmethod.keyboard.MainKeyboardView: void invokeCodeInput(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onRegisterKey(com.android.inputmethod.keyboard.Key)> (3)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element: void onPhantomUpEvent(long)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,long)> (3)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator$ProcessMotionEvent: boolean processMotionEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)> (2)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean handleSuddenJumping(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$6: void run()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onCancelEvent(int,int,long)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key)> (2)
<com.android.systemui.statusbar.phone.QuickSettings$2: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.systemui.statusbar.phone.QuickSettings$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.RawContactDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.calendar.event.AttendeesView: void addOneAttendee(com.android.calendar.CalendarEventModel$Attendee)> (3)
<com.android.calendar.event.AttendeesView: void addAttendees(java.lang.String)> ()
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.ArrayList)> (1)
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.HashMap)> ()
<com.android.calendar.EventInfoFragment: void updateAttendees(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void initAttendeesCursor(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$2900(com.android.calendar.EventInfoFragment,android.view.View)> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.phone.CallCard: void displaySecondaryCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.CallCard: void updateAlreadyDisconnected(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification(boolean)> (2)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallUiState$InCallScreenMode)> (12)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (8)
<com.android.phone.NotificationMgr: void updateNotificationAndLaunchIncomingCallUi()> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.phone.InCallScreen: void internalResolveIntent(android.content.Intent)> (2)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.BluetoothPhoneService$3: boolean hangupCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void hangupRingingCall()> (2)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (2)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void clearInCallScreenMode()> (2)
<com.android.phone.NotificationMgr: com.android.phone.NotificationMgr init(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean hangupCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: void internalHangup()> (1)
<com.android.phone.PhoneGlobals$NotificationBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.CallNotifier: boolean ignoreAllIncomingCalls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<android.bluetooth.IBluetoothHeadsetPhone: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processHangupCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5000(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.vcard.VCardEntry$AnniversaryData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.model.RawContactModifier: void parseStructuredNameExtra(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> (1)
<com.android.contacts.model.RawContactModifier: void parseExtras(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> (3)
<com.android.contacts.activities.ConfirmAddDetailActivity: void setEntityDeltaList(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$300(com.android.contacts.activities.ConfirmAddDetailActivity,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(java.lang.String,boolean,com.google.common.collect.ImmutableList)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (1)
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> (1)
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void saveContact(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.PhotoEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void access$000(com.android.contacts.activities.AttachPhotoActivity,com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.BaseRawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (5)
<com.android.contacts.activities.AttachPhotoActivity$1: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (4)
<com.android.contacts.editor.ContactEditorFragment: void setPhoto(long,android.graphics.Bitmap,java.lang.String)> (1)
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.RawContactReadOnlyEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.activities.AttachPhotoActivity$Listener: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen()> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$2100(com.android.contacts.editor.ContactEditorFragment)> (3)
<com.android.contacts.editor.ContactEditorFragment: void access$2300(com.android.contacts.editor.ContactEditorFragment,long,android.graphics.Bitmap,java.lang.String)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.PhotoActionPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen()> (2)
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,java.util.ArrayList,int,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (1)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,java.util.ArrayList,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (2)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Void doInBackground(java.util.ArrayList[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> (1)
<com.android.bluetooth.hfp.AtPhonebook: com.android.bluetooth.hfp.AtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (3)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbsCommand(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbs(java.lang.String,int)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void generateBinaryDictionary()> (5)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void addMembersToGroup(android.content.ContentResolver,long[],long)> (2)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForEmail(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForEmail(java.lang.String)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void doSaveAction()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.contacts.detail.ContactLoaderFragment: android.net.Uri getPreAuthorizedUri(android.net.Uri)> (1)
<com.android.contacts.detail.ContactLoaderFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: int getPhotoPickSize()> (3)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: int getPhotoPickSize()> (1)
<com.android.contacts.detail.PhotoSelectionHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (4)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: int getPhotoPickSize()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(com.android.contacts.activities.PhotoSelectionActivity,android.content.Context,android.view.View,int,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void <init>(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.BaseRawContactEditorView,int,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(com.android.contacts.activities.PhotoSelectionActivity,android.content.Context,android.view.View,int,com.android.contacts.model.RawContactDeltaList,com.android.contacts.activities.PhotoSelectionActivity$1)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindPhotoHandler(com.android.contacts.editor.BaseRawContactEditorView,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void attachPhotoHandler()> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void displayPhoto()> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void access$000(com.android.contacts.activities.PhotoSelectionActivity)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$2: void run()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (5)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (5)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.event.AttendeesView: android.view.View updateAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (3)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String,boolean)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.calendar.event.AttendeesView: android.view.View access$100(com.android.calendar.event.AttendeesView,com.android.calendar.event.EditEventHelper$AttendeeItem)> (2)
<com.android.calendar.event.AttendeesView: android.view.View constructAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler$1: void run()> (1)
<com.android.mms.ui.Divot: void assignContactFromEmail(java.lang.String)> ()
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.vcard.VCardEntry$SipData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean update(java.util.Collection,java.util.Collection,java.lang.String)> (2)
<com.android.vcard.VCardEntry$OrganizationData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: long queryForContactId(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (3)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.settings.Utils: boolean copyMeProfilePhoto(android.content.Context,android.content.pm.UserInfo)> (2)
<com.android.settings.users.UserSettings: void assignProfilePhoto(android.content.pm.UserInfo)> (1)
<com.android.settings.users.UserSettings: void access$800(com.android.settings.users.UserSettings,android.content.pm.UserInfo)> (1)
<com.android.vcard.VCardEntry$BirthdayData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: int getContactCount()> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: int getContactCount()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (1)
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<com.android.providers.contacts.ContactsProvider2$PipeMonitor: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.dialpad.SmartDialCache: void cacheContacts(android.content.Context)> (2)
<com.android.dialer.dialpad.SmartDialCache: com.android.dialer.dialpad.SmartDialTrie getContacts()> (1)
<com.android.dialer.dialpad.SmartDialCache: void access$100(com.android.dialer.dialpad.SmartDialCache,android.content.Context)> (1)
<com.android.dialer.dialpad.SmartDialCache$1: void run()> (1)
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(android.content.Context,com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$300(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.RawContactEditorView)> (1)
<com.android.contacts.editor.ContactEditorFragment$2: void onRequest(int)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.editor.LabeledEditorView: void notifyEditorListener()> (5)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.EventFieldEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener()> (2)
<com.android.contacts.editor.TextFieldsEditorView: void notifyEditorListener()> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
Permission:android.permission.RECEIVE_BOOT_COMPLETED
307 Callers:
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.server.wifi.WifiService: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.AppWidgetService: void systemReady(boolean)> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.server.WiredAccessoryManager: void <init>(android.content.Context,com.android.server.input.InputManagerService)> (1)
<com.android.server.RecognitionManagerService: void <init>(android.content.Context)> (1)
<com.android.server.search.SearchManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityManagerService: void finishUserSwitch(com.android.server.am.UserStartedState)> (1)
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord activityIdleInternal(android.os.IBinder,boolean,android.content.res.Configuration)> (5)
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void scheduleIdleLocked()> (4)
<com.android.server.am.ActivityRecord: void windowsVisible()> (1)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked(java.lang.String,int,boolean,boolean,boolean,boolean,int)> (7)
<com.android.server.am.ActivityStack: void checkReadyForSleepLocked()> (7)
<com.android.server.am.ActivityStack: void completePauseLocked()> (1)
<com.android.server.am.ActivityRecord$Token: void windowsVisible()> (2)
<com.android.server.am.ActivityManagerService: boolean access$400(com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean,boolean,int)> (3)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (13)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked(com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void forceStopUserLocked(int)> (1)
<com.android.server.am.ActivityStack: void activitySleptLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void stopIfSleepingLocked()> (2)
<com.android.server.am.ActivityStack: void activityPaused(android.os.IBinder,boolean)> (3)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible()> ()
<android.view.IApplicationToken$Stub: void windowsVisible()> (2)
<com.android.server.am.ActivityManagerService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithAppId(java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<com.android.server.am.ActivityManagerService: int access$200(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (3)
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void finishBooting()> (2)
<com.android.server.am.ActivityManagerService: boolean inputDispatchingTimedOut(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean)> (2)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)> (4)
<com.android.server.am.ActivityManagerService: void finishUserStop(com.android.server.am.UserStartedState)> (1)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (1)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<com.android.server.am.ActivityStack: void startPausingLocked(boolean,boolean)> (3)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible()> (1)
<android.app.ActivityManagerNative: void killApplicationWithAppId(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<com.android.server.am.ActivityManagerService$22: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted()> (5)
<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean)> (1)
<com.android.server.am.ActivityRecord: boolean keyDispatchingTimedOut()> (1)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int)> (1)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean)> (5)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (4)
<com.android.server.am.ActivityManagerService$21: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<android.app.ActivityManagerNative: void goingToSleep()> (2)
<com.android.server.am.ActivityRecord$Token: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killApplicationWithAppId(java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> ()
<android.content.IIntentReceiver$Stub: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActiveServices: void serviceTimeout(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService$8: void run()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run()> (1)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.ActivityManagerNative: long inputDispatchingTimedOut(int,boolean)> (2)
<com.android.server.am.ActivityRecord$Token: boolean keyDispatchingTimedOut()> (2)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked(java.lang.String,int,int,int,boolean,boolean,boolean,boolean,java.lang.String)> (3)
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.BroadcastQueue: void processNextBroadcast(boolean)> (4)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied()> (1)
<android.app.IActivityManager: boolean shutdown(int)> (1)
<android.app.IActivityManager: void goingToSleep()> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int)> (3)
<com.android.server.am.ActivityManagerService$10$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (13)
<android.content.IIntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (3)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrashInner(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.IActivityManager: long inputDispatchingTimedOut(int,boolean)> (1)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut()> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut()> (2)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest(com.android.server.am.ProcessRecord,android.app.Dialog)> (4)
<com.android.server.am.ActivityManagerService: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,int)> (2)
<com.android.server.am.ActiveServices: void performServiceRestartLocked(com.android.server.am.ServiceRecord)> (1)
<android.app.ActivityManagerNative: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.BroadcastQueue: void scheduleBroadcastsLocked()> (7)
<com.android.server.power.ShutdownThread: void run()> (2)
<com.android.server.power.Notifier: void sendGoToSleepBroadcast(int)> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)> (4)
<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (5)
<com.android.server.pm.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.PendingIntent$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IntentSender$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am$IntentReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$10: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$11: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$17: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$18: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$21: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$22: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService$11: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (1)
<com.android.server.am.BroadcastQueue: void performReceiveLocked(com.android.server.am.ProcessRecord,android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener$NativeCrashReporter: void run()> (2)
<com.android.server.wm.InputMonitor: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> (1)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut()> (1)
<android.app.ActivityManagerNative: void killUid(int,java.lang.String)> (2)
<com.android.server.am.ActiveServices$ServiceRestarter: void run()> (1)
<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (1)
<com.android.server.am.BroadcastQueue: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void broadcastTimeoutLocked(boolean)> (3)
<com.android.server.am.BroadcastQueue: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipPendingBroadcastLocked(int)> (1)
<com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.power.Notifier: void sendNextBroadcast()> (3)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)> (5)
<com.android.server.pm.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void unloadMediaPackages(java.util.HashMap,int[],boolean)> (1)
<com.android.server.pm.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.IActivityManager: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.app.ApplicationThreadNative: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.BroadcastQueue: void deliverToRegisteredReceiverLocked(com.android.server.am.BroadcastRecord,com.android.server.am.BroadcastFilter,boolean)> (1)
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.NativeCrashListener: void consumeNativeCrashData(java.io.FileDescriptor)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> (1)
<android.app.IActivityManager: void killUid(int,java.lang.String)> (1)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (4)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void setBroadcastTimeoutLocked(long)> (2)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void skipPendingBroadcastLocked(int)> (1)
<com.android.server.power.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)> (3)
<com.android.server.power.Notifier: void access$500(com.android.server.power.Notifier)> (4)
<com.android.server.power.Notifier: void sendWakeUpBroadcast()> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package access$1600(com.android.server.pm.PackageManagerService,java.io.File,int,int,long,android.os.UserHandle)> (1)
<com.android.server.pm.PackageManagerService: boolean deleteSystemPackageLI(com.android.server.pm.PackageSetting,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (1)
<com.android.server.pm.PackageManagerService: void loadMediaPackages(java.util.HashMap,int[],java.util.HashSet)> (1)
<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)> (1)
<com.android.server.pm.PackageManagerService: void installPackageLI(com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int access$3600(com.android.server.pm.PackageManagerService,java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean,boolean)> (2)
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (1)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener: void run()> (2)
<com.android.server.input.InputManagerService: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> ()
<com.android.server.BackupManagerService$PerformBackupTask: void invokeNextAgent()> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask: void backupOnePackage(android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void restoreNextAgent()> (1)
<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.power.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)> (1)
<com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)> (2)
<com.android.server.power.Notifier$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier: void updatePendingBroadcastLocked()> (2)
<com.android.server.pm.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: void <init>(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void access$1800(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService$7: void run()> (1)
<com.android.server.pm.PackageManagerService: void access$4100(com.android.server.pm.PackageManagerService,boolean,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void scanAvailableAsecs()> (1)
<android.app.ActivityThread$ApplicationThread: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> (1)
<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void execute()> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask: void run()> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: void run()> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void execute()> (1)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register(android.app.IActivityManager)> (1)
<com.android.server.am.ActivityManagerService: void trimApplications()> (5)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void access$300(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.server.power.PowerManagerService$2: void run()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: void shutdown(boolean)> (1)
<com.android.server.power.Notifier: void onGoToSleepFinished()> (1)
<com.android.server.power.Notifier: void onWakeUpStarted()> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.IPackageManager main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService$5: void run()> (1)
<com.android.server.pm.PackageManagerService$10: void run()> (1)
<com.android.server.MountService$4: void run()> (2)
<com.android.server.BackupManagerService$BackupRestoreTask: void execute()> (1)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces()> (1)
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> (1)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (5)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)> (2)
<com.android.server.power.PowerManagerService: void sendPendingNotificationsLocked()> (3)
<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)> (4)
<com.android.server.MountService: void onDaemonConnected()> (1)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<android.app.ActivityManagerNative: void setProcessLimit(int)> (2)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,boolean)> (4)
<com.android.internal.policy.impl.GlobalActions$2: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int)> (3)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (21)
<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void handleDreamFinishedLocked()> (1)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.server.power.PowerManagerService: void wakeUpInternal(long)> (2)
<com.android.server.INativeDaemonConnectorCallbacks: void onDaemonConnected()> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
<android.app.IActivityManager: void setProcessLimit(int)> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: boolean onLongPress()> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.power.PowerManagerService: boolean updateWakefulnessLocked(int)> (1)
<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)> (2)
<com.android.server.power.PowerManagerService: void access$900(com.android.server.power.PowerManagerService)> (4)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,android.os.WorkSource,int,int)> (1)
<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleBootCompletedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.power.PowerManagerService: void handleScreenOnBlockerReleased()> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()> (1)
<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void napInternal(long)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)> (2)
<com.android.server.power.PowerManagerService: void wakeUpFromNative(long)> ()
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.DevelopmentSettings: void writeAppProcessLimitOptions(java.lang.Object)> (2)
<com.android.internal.policy.impl.GlobalActions$5: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.power.PowerManagerService: void goToSleepFromNative(long,int)> ()
<com.android.server.power.PowerManagerService$1: void onProximityNegative()> (1)
<com.android.server.power.PowerManagerService$1: void onProximityPositive()> (1)
<com.android.server.power.PowerManagerService$1: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$DockReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$1300(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void checkIfBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$1900(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2000(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1600(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1800(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2300(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void userActivityFromNative(long,int,int)> ()
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.DevelopmentSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.DevelopmentSettings: void resetDangerousOptions()> (1)
<com.android.internal.policy.impl.GlobalActions$4: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityNegative()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityPositive()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$BatteryReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$2100(com.android.server.power.PowerManagerService)> (3)
<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()> (2)
<com.android.server.power.PowerManagerService$ScreenOnBlockerImpl: void release()> (1)
<com.android.server.power.PowerManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)> (1)
<com.android.server.power.PowerManagerService$WakeLock: void binderDied()> (1)
<com.android.settings.DevelopmentSettings: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.server.power.DisplayPowerController$5: void run()> (1)
<com.android.server.power.DisplayPowerController$4: void run()> (1)
<com.android.server.power.DisplayPowerController$3: void run()> (1)
<com.android.server.power.PowerManagerService: void startWatchingForBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$1500(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void updateDreamLocked(int)> (1)
<com.android.server.power.ScreenOnBlocker: void release()> (1)
<com.android.server.power.PowerManagerService: void access$1400(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService$DreamReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$1: void onScreenOn()> (1)
<com.android.server.power.PowerManagerService$BootCompletedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.server.content.ContentService: com.android.server.content.SyncManager getSyncManager()> (20)
<com.android.server.content.ContentService: void systemReady()> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbService: void <init>(android.content.Context)> (1)
Permission:android.permission.KILL_BACKGROUND_PROCESSES
23 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (3)
<com.android.commands.am.Am: void runKill()> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<com.android.settings.applications.RunningServiceDetails$ActiveDetail: void onClick(android.view.View)> (1)
<com.android.commands.am.Am: void onRun()> (1)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<com.android.internal.os.BaseCommand: void run(java.lang.String[])> (3)
<com.android.commands.am.Am: void run(java.lang.String[])> (2)
<com.android.commands.media.Media: void run(java.lang.String[])> (2)
<com.android.commands.wm.Wm: void run(java.lang.String[])> (2)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.commands.media.Media: void main(java.lang.String[])> ()
<com.android.commands.wm.Wm: void main(java.lang.String[])> ()
<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()> (1)
<android.app.ActivityManagerNative: void killAllBackgroundProcesses()> (2)
<android.app.IActivityManager: void killAllBackgroundProcesses()> (1)
<com.android.commands.am.Am: void runKillAll()> (1)
Permission:android.permission.READ_PHONE_STATE
945 Callers:
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (20)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.bluetooth.hfp.HeadsetPhoneState: void listenForPhoneState(boolean)> (4)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.deskclock.TimerRingService: void onCreate()> (1)
<com.android.deskclock.TimerRingService: void onDestroy()> (1)
<com.android.dialer.calllog.CallLogFragment: void registerPhoneCallReceiver()> (1)
<com.android.dialer.calllog.CallLogFragment: void unregisterPhoneCallReceiver()> (2)
<com.android.dialer.dialpad.DialpadFragment: void onPause()> (1)
<com.android.dialer.dialpad.DialpadFragment: void onResume()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneGlobals,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.CallLogger)> (1)
<com.android.phone.OtaStartupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void addPhoneStateListener()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void removePhoneStateListener()> (2)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.RadioInfo: void onPause()> (1)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (2)
<com.android.server.ServerThread: void run()> (1)
<com.android.bluetooth.hfp.HeadsetPhoneState: void cleanup()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processSlcConnected()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void enter()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void cleanup()> (1)
<com.android.dialer.calllog.CallLogFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.dialer.calllog.CallLogFragment: void onDestroy()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.phone.CallNotifier: com.android.phone.CallNotifier init(com.android.phone.PhoneGlobals,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.CallLogger)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.util.State: void enter()> (29)
<com.android.bluetooth.hfp.HeadsetService: boolean cleanup()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addStatusBarWindow()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (7)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> (2)
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()> ()
<android.net.INetworkPolicyManager$Stub: android.net.NetworkPolicy[] getNetworkPolicies()> (2)
<android.net.INetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> (1)
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> (1)
<com.android.server.net.NetworkPolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.net.NetworkPolicyEditor: void read()> (2)
<com.android.settings.DataUsageSummary: void onCreate(android.os.Bundle)> (1)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (38)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceId()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> (4)
<com.android.internal.telephony.PhoneSubInfo: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.dialer.SpecialCharSequenceMgr: void showIMEIPanel(android.content.Context,boolean,android.telephony.TelephonyManager)> (1)
<com.android.dialer.SpecialCharSequenceMgr: void showMEIDPanel(android.content.Context,boolean,android.telephony.TelephonyManager)> (1)
<com.android.emailcommon.Device: java.lang.String getConsistentDeviceId(android.content.Context)> (1)
<com.android.server.ConnectivityService: java.lang.String getMobileProvisioningUrl()> (4)
<com.android.dialer.SpecialCharSequenceMgr: boolean handleIMEIDisplay(android.content.Context,java.lang.String,boolean)> (1)
<com.android.emailcommon.Device: java.lang.String getDeviceIdInternal(android.content.Context)> (1)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getMobileProvisioningUrl()> ()
<android.net.IConnectivityManager$Stub: java.lang.String getMobileProvisioningUrl()> (2)
<com.android.server.ConnectivityService$4: void onComplete(java.lang.Integer)> (1)
<com.android.dialer.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,boolean,android.widget.EditText)> (2)
<com.android.emailcommon.Device: java.lang.String getDeviceId(android.content.Context)> (5)
<android.net.IConnectivityManager: java.lang.String getMobileProvisioningUrl()> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp$CallBack: void onComplete(java.lang.Integer)> (1)
<com.android.dialer.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,android.widget.EditText)> (1)
<com.android.dialer.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String)> ()
<com.android.email.activity.setup.AccountSetupExchangeFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.emailcommon.service.EmailServiceProxy: void <init>(android.content.Context,android.content.Intent,com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.EmailServiceProxy: void <init>(android.content.Context,java.lang.String,com.android.emailcommon.service.IEmailServiceCallback)> (2)
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()> (2)
<com.android.email.service.AccountService: android.os.IBinder onBind(android.content.Intent)> (1)
<android.net.ConnectivityManager: java.lang.String getMobileProvisioningUrl()> (1)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: void onPostExecute(java.lang.Integer)> (1)
<com.android.dialer.dialpad.DialpadFragment: void afterTextChanged(android.text.Editable)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void startDownload(android.content.Intent,com.android.email.service.AttachmentDownloadService$DownloadRequest)> (1)
<com.android.email.service.EmailServiceUtils: boolean isServiceAvailable(android.content.Context,java.lang.String)> (1)
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getService(android.content.Context,java.lang.String,com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.emailcommon.service.IAccountService$Stub: java.lang.String getDeviceId()> (2)
<com.android.settings.WirelessSettings: void onManageMobilePlanClick()> (1)
<com.android.server.ConnectivityService$CheckMp: void onPostExecute(java.lang.Object)> (1)
<com.android.dialer.dialpad.DialpadFragment: void setFormattedDigits(java.lang.String,java.lang.String)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: boolean tryStartDownload(com.android.email.service.AttachmentDownloadService$DownloadRequest)> (1)
<com.android.email.service.EmailServiceUtils: boolean isExchangeAvailable(android.content.Context)> (2)
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getExchangeService(android.content.Context,com.android.emailcommon.service.IEmailServiceCallback)> (4)
<com.android.emailcommon.service.IAccountService: java.lang.String getDeviceId()> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.WirelessSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.dialer.dialpad.DialpadFragment: boolean fillDigitsIfNecessary(android.content.Intent)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.email.activity.setup.AccountSetupAccountType: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.DebugFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.email.activity.setup.AccountSetupExchangeFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService getExchangeEmailService()> (1)
<com.android.email.Controller: void serviceLogging(int)> (1)
<com.android.email.mail.store.ExchangeStore: com.android.emailcommon.service.IEmailService getService()> (1)
<com.android.emailcommon.service.AccountServiceProxy$6: void run()> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.dialer.dialpad.DialpadFragment: void configureScreenFromIntent(android.content.Intent)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.email.activity.setup.AccountSetupActivity: void onCreate(android.os.Bundle)> (7)
<com.android.email.activity.setup.AccountServerBaseFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService getServiceForAccount(long)> (7)
<com.android.email.Email: void updateLoggingFlags(android.content.Context)> (3)
<com.android.email.mail.store.ServiceStore: com.android.emailcommon.service.IEmailService getService()> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.dialer.dialpad.DialpadFragment: void onStart()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.email.activity.setup.AccountSetupBasics: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupExchange: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupIncoming: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupNames: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupOptions: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountServerBaseFragment$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService access$100(com.android.email.Controller,long)> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService getServiceForMessage(long)> (2)
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)> (2)
<com.android.email.Controller: void deleteSyncedDataSync(long)> (2)
<com.android.email.Controller: void sendPendingMessages(long)> (3)
<com.android.email.Controller: void serviceCheckMail(long,long,long)> (1)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (2)
<com.android.email.activity.setup.DebugFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.email.Email: void onCreate()> (1)
<com.android.email.service.AccountService$1$1: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (2)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.activity.setup.AccountServerBaseFragment$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.Controller$1: void run()> (1)
<com.android.email.Controller: void loadMessageForView(long)> (1)
<com.android.email.Controller: void sendMeetingResponse(long,int)> (1)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.Controller: void searchMore(long)> (1)
<com.android.email.Controller: void deleteAccountSync(long,android.content.Context)> (4)
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> (1)
<com.android.email.Controller: void sendMessage(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> (2)
<com.android.email.service.MailService$4: void run()> (1)
<com.android.email.service.MailService: boolean syncOneAccount(com.android.email.Controller,long,int)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (3)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (2)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle checkSettings()> (2)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.email.activity.MessageViewFragmentBase: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (3)
<com.android.email.activity.MessageViewFragment: void onRespondToInvite(int,int)> (1)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: java.lang.Object loadInBackground()> (3)
<com.android.email.Controller$7: void run()> (1)
<com.android.email.Controller$14: void run()> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context,boolean)> (2)
<com.android.email.SecurityPolicy: void deleteSecuredAccounts(android.content.Context)> (1)
<com.android.email.service.MailService$3: void run()> (1)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageListFragment: void onSendPendingMessages()> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void performAction(long)> (1)
<com.android.email.service.MailService: boolean access$200(com.android.email.service.MailService,com.android.email.Controller,long,int)> (1)
<com.android.email.RefreshManager: boolean loadMoreMessages(long,long)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean)> (4)
<com.android.email.service.PopImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.email.mail.store.ImapStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.Pop3Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageFileViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onSuccess(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.MessageViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: java.lang.Object loadInBackground()> (2)
<com.android.email.provider.AccountReconciler: boolean accountsNeedReconciling(android.content.Context,java.util.List,android.accounts.Account[])> (1)
<com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (2)
<com.android.email.SecurityPolicy: void onAdminEnabled(boolean)> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void performAction(long)> (1)
<com.android.email.service.MailService$2: void run()> (1)
<com.android.email.activity.MessageListFragment: void onLoadMoreMessages()> (1)
<com.android.email.activity.MessageListFragment: void onRefresh(boolean)> (1)
<com.android.email.activity.setup.MailboxSettings$2: void onSuccess(java.lang.Void)> (1)
<com.android.email.activity.UIControllerOnePane: void onRefresh()> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void onSuccess(java.lang.Boolean)> (1)
<com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onSuccess(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.service.MailService: boolean hasMismatchInPopImapAccounts(android.content.Context)> (1)
<com.android.email.service.AccountService$1: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Long[])> (2)
<com.android.email.activity.MessageListFragment: void doFooterClick()> (1)
<com.android.email.activity.MessageListFragment: void autoRefreshStaleMailbox()> (1)
<com.android.email.activity.setup.MailboxSettings$2: void onSuccess(java.lang.Object)> (1)
<com.android.email.activity.UIControllerBase: void onRefresh()> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void onSuccess(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: void onSuccess(java.lang.Object)> (2)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.Welcome$1: void run()> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IAccountService$Stub: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal(android.content.Context)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Object)> (2)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.activity.MessageListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment: void access$2200(com.android.email.activity.MessageListFragment)> (1)
<com.android.email.activity.UIControllerBase: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.emailcommon.utility.EmailAsyncTask$1: void onSuccess(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: void onPostExecute(java.lang.Object)> (2)
<com.android.emailcommon.service.IAccountService: void reconcileAccounts(java.lang.String,java.lang.String)> (1)
<com.android.email.service.MailService$6: void runInternal(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (22)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Object)> (2)
<com.android.email.activity.MessageListFragment$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.email.activity.EmailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.UIControllerOnePane: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.UIControllerTwoPane: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.emailcommon.utility.EmailAsyncTask: void callOnPostExecuteForTest(java.lang.Object)> (22)
<com.android.emailcommon.service.AccountServiceProxy$3: void run()> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$6: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageList$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.email.activity.UIControllerSearchTwoPane: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$6: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageList$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSetupNames$2: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$2: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.email.service.MailService$6: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$1: void run()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceSvn()> (1)
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> (1)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberId()> (1)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> (8)
<android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)> (4)
<com.android.phone.MobileNetworkSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.server.location.GpsLocationProvider: void requestSetID(int)> ()
<com.android.server.net.NetworkPolicyManagerService: boolean isTemplateRelevant(android.net.NetworkTemplate)> (1)
<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)> (1)
<com.android.settings.DataUsageSummary: java.lang.String getActiveSubscriberId(android.content.Context)> (4)
<com.android.settings.net.DataUsageMeteredSettings: android.preference.Preference buildMobilePref(android.content.Context)> ()
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)> (1)
<com.android.server.net.NetworkPolicyManagerService: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()> (5)
<com.android.server.net.NetworkStatsService: void updateIfacesLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()> (7)
<com.android.server.net.NetworkPolicyManagerService: void access$1500(com.android.server.net.NetworkPolicyManagerService)> (1)
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()> (5)
<com.android.settings.DataUsageSummary: boolean isMobilePolicySplit()> (3)
<com.android.settings.DataUsageSummary: java.util.List buildLimitedNetworksList()> (2)
<com.android.settings.DataUsageSummary: void setMobilePolicySplit(boolean)> (1)
<com.android.settings.DataUsageSummary: void updateBody()> (2)
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isNetworkMetered(android.net.NetworkState)> ()
<android.net.INetworkPolicyManager$Stub: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void access$1300(com.android.server.net.NetworkPolicyManagerService)> (2)
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)> (2)
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$900(com.android.server.net.NetworkPolicyManagerService)> (3)
<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)> (3)
<com.android.server.net.NetworkPolicyManagerService: void systemReady()> (1)
<com.android.server.net.NetworkPolicyManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$800(com.android.server.net.NetworkPolicyManagerService)> (3)
<com.android.settings.DataUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.settings.DataUsageSummary: void onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.settings.DataUsageSummary: void updateTabs()> (2)
<com.android.settings.DataUsageSummary: boolean hasLimitedNetworks()> ()
<com.android.settings.DataUsageSummary: java.lang.CharSequence buildLimitedNetworksString()> ()
<com.android.settings.DataUsageSummary: void access$100(com.android.settings.DataUsageSummary)> (4)
<android.net.INetworkPolicyManager: boolean isNetworkMetered(android.net.NetworkState)> (1)
<com.android.server.net.NetworkPolicyManagerService$10: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1200(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkPolicy)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1000(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkTemplate,int)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.INetworkPolicyManager$Stub: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<com.android.server.net.NetworkPolicyManagerService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> ()
<android.net.INetworkPolicyManager$Stub: void setRestrictBackground(boolean)> (2)
<com.android.server.net.NetworkPolicyManagerService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.settings.DataUsageSummary: void onResume()> (1)
<com.android.settings.DataUsageSummary$1: void onPostExecute(java.lang.Void)> (1)
<com.android.settings.DataUsageSummary$3: void onTabChanged(java.lang.String)> (1)
<com.android.settings.DataUsageSummary$AppDetailsFragment: void onStart()> (1)
<com.android.settings.DataUsageSummary$AppDetailsFragment: void onStop()> (1)
<com.android.server.ConnectivityService: boolean isNetworkMeteredUnchecked(int)> (2)
<com.android.server.net.NetworkPolicyManagerService$8: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager: void setRestrictBackground(boolean)> (1)
<com.android.settings.DataUsageSummary$1: void onPostExecute(java.lang.Object)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)> (1)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<com.android.settings.net.NetworkPolicyEditor: void write(android.net.NetworkPolicy[])> (1)
<com.android.settings.DataUsageSummary: void setRestrictBackground(boolean)> (2)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<com.android.settings.net.NetworkPolicyEditor$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.DataUsageSummary$ConfirmRestrictFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.net.NetworkPolicyEditor$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (5)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.development.Connectivity: void access$3600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getGroupIdLevel1()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getGroupIdLevel1()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getGroupIdLevel1()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getGroupIdLevel1()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getGroupIdLevel1()> (1)
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()> (1)
<com.android.settings.ApnEditor: java.lang.String mvnoDescription(java.lang.String)> (2)
<com.android.settings.ApnEditor: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.ApnEditor: void fillUi()> (1)
<com.android.settings.ApnEditor: void onCreate(android.os.Bundle)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIccSerialNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1Number()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> (6)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.mms.transaction.HttpUtils: byte[] httpConnection(android.content.Context,long,java.lang.String,byte[],int,boolean,java.lang.String,int)> (2)
<com.android.mms.ui.MessageUtils: java.lang.String getLocalNumber()> (6)
<com.google.android.mms.pdu.PduPersister: void loadRecipients(int,java.util.HashSet,java.util.HashMap,boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> (7)
<com.android.mms.transaction.RetrieveTransaction: void sendAcknowledgeInd(com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.ui.MessageUtils: boolean isLocalNumber(java.lang.String)> ()
<com.android.mms.ui.MessagingPreferenceActivity: boolean getIsGroupMmsEnabled(android.content.Context)> (8)
<com.android.mms.ui.MessagingPreferenceActivity: void setMessagePreferences()> (1)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)> (7)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (4)
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> (3)
<com.android.mms.data.WorkingMessage: void setHasMultipleRecipients(boolean,boolean)> (3)
<com.android.mms.transaction.MmsMessageSender: void sendReadRec(android.content.Context,java.lang.String,java.lang.String,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,com.google.android.mms.pdu.NotificationInd)> (6)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])> (1)
<com.android.mms.ui.ComposeMessageActivity$11: void run()> (1)
<com.android.mms.ui.MessagingPreferenceActivity: void loadPrefs()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[])> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])> (2)
<com.android.mms.data.WorkingMessage: android.net.Uri access$1300(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri saveAsMms(boolean)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void setConversation(com.android.mms.data.Conversation)> (6)
<com.android.mms.data.WorkingMessage: void syncWorkingRecipients()> (3)
<com.android.mms.ui.ComposeMessageActivity$8: void afterTextChanged(android.text.Editable)> (1)
<com.android.mms.data.Conversation: void sendReadReport(android.content.Context,long,int)> (1)
<com.android.mms.ui.MessageUtils$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.MessagingPreferenceActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.MessagingPreferenceActivity: void restoreDefaultPreferences()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.mms.transaction.NotificationTransaction: void sendNotifyRespInd(int)> (1)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$4: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean loadDraft()> (2)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity: void resetMessage()> (2)
<com.android.mms.data.WorkingMessage: void prepareForSave(boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onStart()> (2)
<com.android.mms.data.Conversation: void access$300(com.android.mms.data.Conversation,android.content.Context,long,int)> (1)
<com.android.mms.ui.MessagingPreferenceActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean loadDraft()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadMessagesAndDraft(int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void resetMessage()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5000(com.android.mms.ui.ComposeMessageActivity)> (2)
<com.android.mms.data.WorkingMessage: void saveDraft(boolean)> (1)
<com.android.mms.data.WorkingMessage: void send(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStart()> (2)
<com.android.mms.data.Conversation$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void loadMessagesAndDraft(int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4300(com.android.mms.ui.ComposeMessageActivity,int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity$23: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5000(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft(boolean)> (4)
<com.android.mms.ui.ComposeMessageActivity: void sendMessage(boolean)> (4)
<com.android.mms.data.Conversation$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ComposeMessageActivity$17: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$39: void onSizeChanged(int,int,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4300(com.android.mms.ui.ComposeMessageActivity,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void saveDraft(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void sendMessage(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$1400(com.android.mms.ui.ComposeMessageActivity,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivity: void confirmSendMessageIfNeeded()> (6)
<com.android.mms.ui.MessageListView$OnSizeChangedListener: void onSizeChanged(int,int,int,int)> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStop()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$1400(com.android.mms.ui.ComposeMessageActivity,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$SendIgnoreInvalidRecipientListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void confirmSendMessageIfNeeded()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$400(com.android.mms.ui.ComposeMessageActivity)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (2)
<com.android.mms.ui.MessageListView: void onSizeChanged(int,int,int,int)> (5)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$400(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onClick(android.view.View)> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1AlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getMsisdn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getMsisdn()> (1)
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> (2)
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)> (3)
<com.android.dialer.dialpad.DialpadFragment: boolean isVoicemailAvailable()> (1)
<com.android.dialer.calllog.PhoneNumberHelper: boolean isVoicemailNumber(java.lang.CharSequence)> (6)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.dialer.dialpad.DialpadFragment: boolean onLongClick(android.view.View)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: void onPostExecute(com.android.dialer.PhoneCallDetails[])> (1)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.dialer.calllog.PhoneNumberHelper: boolean canSendSmsTo(java.lang.CharSequence)> (1)
<com.android.dialer.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)> (6)
<com.android.dialer.PhoneCallDetailsHelper: void setPhoneCallDetails(com.android.dialer.PhoneCallDetailsViews,com.android.dialer.PhoneCallDetails,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (4)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: void onPostExecute(java.lang.Object)> (1)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails access$300(com.android.dialer.CallDetailActivity,android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogListItemHelper: java.lang.CharSequence getCallActionDescription(com.android.dialer.PhoneCallDetails)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier: void updateNotification(android.net.Uri)> (2)
<com.android.dialer.PhoneCallDetailsHelper: void setCallDetailsHeader(android.widget.TextView,com.android.dialer.PhoneCallDetails)> (1)
<com.android.dialer.calllog.CallLogListItemHelper: void setPhoneCallDetails(com.android.dialer.calllog.CallLogListItemViews,com.android.dialer.PhoneCallDetails,boolean)> (1)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displaySecondaryCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.PhoneUtils$3: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: com.android.dialer.PhoneCallDetails[] doInBackground(java.lang.Void[])> (1)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogListItemHelper: void configureCallSecondaryAction(com.android.dialer.calllog.CallLogListItemViews,com.android.dialer.PhoneCallDetails)> (1)
<com.android.dialer.calllog.CallLogNotificationsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.dialer.calllog.VoicemailNotifier: void updateNotification(android.net.Uri)> ()
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateAlreadyDisconnected(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification(boolean)> (2)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallUiState$InCallScreenMode)> (12)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (8)
<com.android.phone.NotificationMgr: void updateNotificationAndLaunchIncomingCallUi()> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void internalResolveIntent(android.content.Intent)> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.phone.BluetoothPhoneService$3: boolean hangupCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void hangupRingingCall()> (2)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (2)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneGlobals: void clearInCallScreenMode()> (2)
<com.android.phone.NotificationMgr: com.android.phone.NotificationMgr init(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean hangupCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: void internalHangup()> (1)
<com.android.phone.PhoneGlobals$NotificationBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.CallNotifier: boolean ignoreAllIncomingCalls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<android.bluetooth.IBluetoothHeadsetPhone: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processHangupCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5000(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()> (2)
<com.android.phone.PhoneInterfaceManager: void enforceReadPermission()> (1)
<com.android.phone.PhoneInterfaceManager: boolean isSimPinEnabled()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isSimPinEnabled()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean isSimPinEnabled()> (2)
<com.android.internal.telephony.ITelephony: boolean isSimPinEnabled()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.WRITE_CONTACTS
1652 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: boolean addIccRecordToEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean deleteIccRecordFromEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean updateIccRecordInEf(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (2)
<com.android.internal.telephony.IccProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$100()> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (22)
<com.android.email.activity.MailboxFinder$FindMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$6: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageList$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.vcard.VCardEntry$PhoneData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$EntryElement: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$InsertOperationConstrutor: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (1)
<com.android.vcard.VCardEntry$EntryElementIterator: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (2)
<com.android.vcard.VCardEntry: void iterateAllData(com.android.vcard.VCardEntry$EntryElementIterator)> (3)
<com.android.vcard.VCardEntry: void iterateOneList(java.util.List,com.android.vcard.VCardEntry$EntryElementIterator)> (1)
<com.android.vcard.VCardEntry: boolean isIgnorable()> (2)
<com.android.vcard.VCardEntry: java.lang.String toString()> ()
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.ImportProcessor: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void onEntryEnded()> (1)
<com.android.vcard.VCardInterpreter: void onEntryEnded()> (2)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard()> (4)
<com.android.vcard.VCardParserImpl_V21: void handleNest()> (3)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseOne(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseItem()> (3)
<com.android.vcard.VCardParserImpl_V30: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V40: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V30: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V21: void parseItems()> (4)
<com.android.vcard.VCardParserImpl_V30: boolean parseItem()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseItem()> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParser_V30: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parseOne(java.io.InputStream)> ()
<com.android.vcard.VCardParserImpl_V30: void parseItems()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseItems()> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.common.vcard.ImportRequest constructImportRequest(byte[],android.net.Uri,java.lang.String)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity: com.android.contacts.common.vcard.ImportRequest createImportRequest()> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (4)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.common.vcard.ImportRequest doInBackground(com.android.contacts.common.vcard.VCardService[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: boolean readOneVCard(java.io.InputStream,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.common.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.common.vcard.ProcessorBase: void run()> ()
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (9)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> (1)
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (14)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (13)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.vcard.VCardEntry$EmailData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.common.database.ContactUpdateUtils: void setSuperPrimary(android.content.Context,long)> (2)
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<com.android.dialer.contact.ContactUpdateService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onClick(android.view.View)> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void removeMembersFromGroup(android.content.ContentResolver,long[],long)> (1)
<com.android.contacts.ContactSaveService: void updateGroup(android.content.Intent)> (1)
<com.android.contacts.util.ContactLoaderUtils: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (2)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.vcard.VCardEntry$PhotoData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$ImData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (19)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (7)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (10)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (3)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean handleItemClickEvent()> (1)
<com.android.contacts.group.GroupEditorFragment$Member: void <init>(long,java.lang.String,long,java.lang.String,java.lang.String)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupContactFromUri(android.net.Uri)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.ArrayList getContactMatches()> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (9)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int)> (5)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (3)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.editor.ContactEditorFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForPhoneNumber(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForSipAddress(java.lang.String)> (1)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.List doInBackground(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (3)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor addSearchSuggestionsBasedOnFilter(android.database.MatrixCursor,android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean queryContactInfo(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.email.NotificationController$MessageContentObserver: void onChange(boolean)> (1)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.common.list.IndexerListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails access$300(com.android.dialer.CallDetailActivity,android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean access$300(com.android.dialer.calllog.CallLogAdapter,java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> (5)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: com.android.dialer.PhoneCallDetails[] doInBackground(java.lang.Void[])> (1)
<com.android.dialer.calllog.CallLogAdapter$QueryThread: void run()> (2)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (2)
<com.android.providers.contacts.ContactsProvider2: long insertSettings(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogAdapter: void startRequestProcessing()> (2)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (5)
<com.android.providers.contacts.ContactsProvider2: void cleanupPhotoStore()> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (7)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void access$100(com.android.dialer.calllog.CallLogAdapter)> (1)
<com.android.dialer.calllog.CallLogAdapter: void enqueueRequest(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (2)
<com.android.dialer.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest()> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (5)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void setQueryString(java.lang.String,boolean)> (8)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.PeopleActivity: void configureFragments(boolean)> (3)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragment()> (1)
<com.android.contacts.activities.PeopleActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void onAction(int)> (1)
<com.android.contacts.activities.PeopleActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.PeopleActivity: void onStart()> (3)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (2)
<com.android.dialer.DialtactsActivity$7: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction(int)> (2)
<com.android.contacts.common.activity.TransactionSafeActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: void onStart()> (12)
<com.android.contacts.ContactsActivity: void onStart()> (3)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.activities.PeopleActivity: void setQueryTextToFragment(java.lang.String)> (2)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void update()> (2)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (11)
<com.android.contacts.activities.AttachPhotoActivity: void onStart()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onStart()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onStart()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onStart()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onStart()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onStart()> (3)
<com.android.contacts.activities.JoinContactActivity: void onStart()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onStart()> (3)
<com.android.contacts.NonPhoneActivity: void onStart()> (3)
<com.android.dialer.DialtactsActivity: void onStart()> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean,boolean)> (2)
<com.android.contacts.activities.ActionBarAdapter: void initialize(android.os.Bundle,com.android.contacts.list.ContactsRequest)> (2)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (6)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void createViewsAndFragments(android.os.Bundle)> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested()> (4)
<com.android.contacts.activities.PeopleActivity: void onBackPressed()> (5)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterController: void checkFilterValidity(boolean)> (4)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void selectCustomFilter()> (1)
<com.android.contacts.common.list.ContactListFilterController: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (4)
<com.android.contacts.activities.PeopleActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.PeopleActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onSearchRequested()> (1)
<com.android.contacts.ContactsActivity: boolean onSearchRequested()> (2)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onBackPressed()> (2)
<com.android.contacts.ContactsActivity: void onBackPressed()> (4)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (7)
<com.android.contacts.common.model.AccountTypeManagerImpl$1: void run()> (1)
<com.android.contacts.common.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.common.util.AccountFilterUtil: void handleAccountFilterResult(com.android.contacts.common.list.ContactListFilterController,int,android.content.Intent)> (5)
<com.android.contacts.common.activity.TransactionSafeActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (12)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.dialer.DialtactsActivity: void onBackPressed()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed()> (3)
<com.android.contacts.common.list.ContactListFilterControllerImpl: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.DialtactsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.NonPhoneActivity: void onCreate(android.os.Bundle)> (3)
<com.android.dialer.DialtactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.GroupDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void finish()> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void finish()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.model.RawContactDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.model.RawContactDeltaList[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.common.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.vcard.VCardEntry$AnniversaryData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment$2: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getGroupUriFromId(long)> (3)
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void setCursor(android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void requestSelectionToScreen()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void bindGroupList()> (1)
<com.android.contacts.group.GroupBrowseListFragment: void access$400(com.android.contacts.group.GroupBrowseListFragment)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.vcard.VCardEntry$NameData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void addMembersToGroup(android.content.ContentResolver,long[],long)> (2)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForEmail(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForEmail(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$10: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void doSaveAction()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (5)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (3)
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: int getEstimate(java.lang.String)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void getAutomaticLookback()> (1)
<com.android.contacts.detail.ContactLoaderFragment: android.net.Uri getPreAuthorizedUri(android.net.Uri)> (1)
<com.android.contacts.detail.ContactLoaderFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<com.android.contacts.model.RawContactDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.vcard.VCardEntry$SipData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean update(java.util.Collection,java.util.Collection,java.lang.String)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithRfc822Address(java.util.Collection)> (1)
<com.android.mail.providers.UIProvider: void incrementRecipientsTimesContacted(android.content.Context,java.lang.String)> ()
<com.android.mms.data.WorkingMessage: void updateSendStats(com.android.mms.data.Conversation)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.mms.data.WorkingMessage: void access$800(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (2)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.vcard.VCardEntry$NicknameData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$OrganizationData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<com.android.contacts.GroupMetaDataLoader: android.net.Uri ensureIsGroupUri(android.net.Uri)> (1)
<com.android.contacts.GroupMetaDataLoader: void <init>(android.content.Context,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.vcard.VCardEntry$AndroidCustomData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.debug.DataExporter: android.net.Uri exportData(android.content.Context)> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.vcard.VCardEntry$WebsiteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$BirthdayData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.vcard.VCardEntry$PostalData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (7)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.MessageListItem: void updateAvatarView(java.lang.String,boolean)> (2)
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(boolean)> (2)
<com.android.mms.ui.MessageListItem: void bindNotifInd()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.MessageListItem: void access$500(com.android.mms.ui.MessageListItem,boolean)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageItem,boolean,int)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.mms.ui.MessageListItem$2: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageItem$PduLoadedCallback: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.util.ItemLoadedCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (5)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(com.android.mms.util.ThumbnailManager$ImageLoaded,java.lang.Throwable)> (1)
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.PduLoaderManager$PduTask$1: void run()> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.util.ThumbnailManager$ThumbnailTask$1: void run()> (1)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.data.WorkingMessage: int setAttachment(int,android.net.Uri,boolean)> (4)
<com.android.mms.ui.MmsThumbnailPresenter: void presentImageThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.ImageModel)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAudio(android.net.Uri)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addImage(android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void addVideo(android.net.Uri,boolean)> (3)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAudio(android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addImage(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(java.lang.String,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addVideo(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$33: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAttachment(java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity$34: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.Presenter: void present(com.android.mms.util.ItemLoadedCallback)> (3)
<com.android.mms.ui.ComposeMessageActivity$35: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$36: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel(boolean)> (6)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void drawTopPanel(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivity$21: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$41: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.vcard.VCardEntry$NoteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.ContactsProvider2$PipeMonitor: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<com.android.contacts.GroupMemberLoader: android.net.Uri createUri()> (1)
<com.android.contacts.GroupMemberLoader: void <init>(android.content.Context,long,java.lang.String[])> (2)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupDetailQuery(android.content.Context,long)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupEditorQuery(android.content.Context,long)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(android.content.Context,com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$300(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.RawContactEditorView)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (4)
<com.android.contacts.editor.ContactEditorFragment$2: void onRequest(int)> (1)
<com.android.contacts.editor.ContactEditorFragment: void access$2100(com.android.contacts.editor.ContactEditorFragment)> (3)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(java.lang.String,boolean,com.google.common.collect.ImmutableList)> (2)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType)> (2)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment: void rebindEditorsForNewContact(com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.LabeledEditorView: void notifyEditorListener()> (5)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen()> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen()> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$500(com.android.contacts.editor.ContactEditorFragment,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void createContact(com.android.contacts.common.model.account.AccountWithDataSet)> (4)
<com.android.contacts.editor.EventFieldEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener()> (2)
<com.android.contacts.editor.TextFieldsEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onRemovePictureChosen()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$3$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.ContactEditorFragment: void createContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (2)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.editor.PhotoActionPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void clearAllFields()> ()
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
<com.android.ex.chips.BaseRecipientAdapter$DefaultFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.providers.contacts.LegacyApiSupport: long findFirstDataId(long,java.lang.String)> (2)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendInactiveMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$500(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.widget.QuickContactBadge: void onClick(android.view.View)> (5)
<com.android.calendar.selectcalendars.CalendarColorSquare: void onClick(android.view.View)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void onClick(android.view.View)> (1)
<com.android.mms.ui.QuickContactDivot: void onClick(android.view.View)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void onClick(android.view.View)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.contacts.util.NameConverter: java.util.Map displayNameToStructuredName(android.content.Context,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void rebuildStructuredName(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromFullNameToStructuredName()> (1)
<com.android.contacts.util.NameConverter: android.content.ContentValues displayNameToStructuredName(android.content.Context,java.lang.String,android.content.ContentValues)> (1)
<com.android.contacts.model.RawContactModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.dataitem.DataKind)> (1)
<com.android.contacts.model.RawContactModifier: void migrateStateForNewContact(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.vcard.VCardComposer: boolean init(java.lang.String,java.lang.String[])> (1)
<com.android.vcard.VCardComposer: boolean init()> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.settings.users.AppRestrictionsFragment$EditUserPhotoController: int getPhotoSize(android.content.Context)> (1)
<com.android.settings.users.AppRestrictionsFragment$EditUserPhotoController: void <init>(android.app.Fragment,android.widget.ImageView,android.graphics.Bitmap,android.graphics.drawable.Drawable)> (1)
<com.android.settings.users.AppRestrictionsFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SettingsPreferenceFragment: android.app.Dialog onCreateDialog(int)> (34)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.AccountPreferenceBase: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.accounts.ManageAccountsSettings: android.app.Dialog onCreateDialog(int)> (2)
<com.android.settings.accounts.SyncSettings: android.app.Dialog onCreateDialog(int)> (3)
<com.android.settings.ApplicationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DeviceInfoSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.deviceinfo.UsbSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DialogCreatable: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DreamSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.SpellCheckersSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.UserDictionaryList: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.LocationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.net.DataUsageMeteredSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.NotificationStation: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.PrivacySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SecuritySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TextToSpeechSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.vpn2.VpnSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WallpaperTypeSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wfd.WifiDisplaySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.AdvancedWifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.WifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WirelessSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SettingsPreferenceFragment$SettingsDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (5)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (6)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromPhone(java.lang.String,boolean)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.contacts.model.ContactLoader: void loadDirectoryMetaData(com.android.contacts.model.Contact)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.contacts.common.vcard.ExportProcessor: void runInternal()> (1)
<com.android.contacts.common.vcard.ExportProcessor: void run()> (1)
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> (2)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void handleAccessPermissionResult(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void startPhotoQuery(long,android.net.Uri)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$900(com.android.contacts.activities.ConfirmAddDetailActivity,long,android.net.Uri)> (1)
<com.android.phone.CallerInfoCache: void refreshCacheEntry()> (1)
<com.android.phone.CallerInfoCache: void access$400(com.android.phone.CallerInfoCache)> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)> (1)
<com.android.mms.transaction.MessageStatusService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.MatrixCursor loadProfile()> (1)
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> (2)
<com.android.contacts.common.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()> (2)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,java.util.Map)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void rebuildFullName(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromStructuredNameToFullName()> (1)
<com.android.contacts.common.model.account.AccountTypeWithDataSet: boolean hasData(android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map findUsableInvitableAccountTypes(android.content.Context)> (2)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map access$400(com.android.contacts.common.model.AccountTypeManagerImpl,android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.util.Map doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.model.AccountTypeManager: java.util.Map getUsableInvitableAccountTypes()> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.ContactLoader: void loadInvitableAccountTypes(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void loadAggregationSuggestions(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(android.net.Uri,java.io.OutputStream,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFileInner(android.net.Uri,java.lang.String)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.contacts.common.list.DirectoryListLoader: android.database.Cursor loadInBackground()> (1)
<com.android.contacts.common.list.DirectoryListLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void queryPhotosForPreload()> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void preloadPhotosInBackground()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (4)
<com.android.phone.PhoneUtils$3: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void startDisambiguationQuery(java.lang.String)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$800(com.android.contacts.activities.ConfirmAddDetailActivity,java.lang.String)> (1)
<com.android.settings.Utils: java.lang.String getProfileDisplayName(android.content.Context)> (2)
<com.android.settings.Utils: java.lang.String getMeProfileName(android.content.Context,boolean)> (2)
<com.android.settings.Utils: java.lang.String getShorterNameIfPossible(android.content.Context)> (1)
<com.android.settings.users.ProfileUpdateReceiver: void copyProfileName(android.content.Context)> (1)
<com.android.settings.users.UserSettings: java.lang.String getProfileName()> (1)
<com.android.settings.users.ProfileUpdateReceiver$1: void run()> (2)
<com.android.settings.users.UserSettings: java.lang.String access$900(com.android.settings.users.UserSettings)> (1)
<com.android.settings.users.ProfileUpdateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.users.UserSettings$3: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.settings.users.UserSettings$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,android.content.ContentValues)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.model.ContactLoader: void loadGroupMetaData(com.android.contacts.model.Contact)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$900(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList blockingGetByUris(android.os.Parcelable[])> (1)
<com.android.mms.ui.ComposeMessageActivity$30: void run()> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (4)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft(boolean)> (4)
<com.android.mms.data.WorkingMessage$1: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.mms.data.Conversation$ConversationQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void saveDraft(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (2)
<com.android.mms.data.WorkingMessage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStop()> (2)
<com.android.contacts.common.model.account.AccountWithDataSet: boolean hasData(android.content.Context)> (2)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List loadAccountFilters(android.content.Context)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground()> (1)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadThumbnails(boolean)> (2)
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()> (1)
<com.android.contacts.model.ContactLoader: void loadStreamItems(com.android.contacts.model.Contact)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$DefaultNameLookupQuery: java.lang.String query(java.lang.String)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$NameLookupQuery: java.lang.String query(java.lang.String)> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier: void updateNotification(android.net.Uri)> (2)
<com.android.dialer.calllog.CallLogNotificationsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.dialer.calllog.VoicemailNotifier: void updateNotification(android.net.Uri)> ()
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: void loadPhoto()> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (3)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.common.interactions.ImportExportDialogFragment: void doShareVisibleContacts()> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment: void access$100(com.android.contacts.common.interactions.ImportExportDialogFragment)> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForPhoneNumber(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfo(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void access$600(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.settings.Utils: java.lang.String getLocalProfileGivenName(android.content.Context)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForSelf()> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcardFromProfile(boolean,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])> (2)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.contacts.activities.ConfirmAddDetailActivity: void startExtraInfoQuery()> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$1200(com.android.contacts.activities.ConfirmAddDetailActivity)> (1)
<com.android.dialer.calllog.CallLogAdapter: java.lang.String getBetterNumberFromContacts(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.CallLogFragment: void callSelectedEntry()> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int createList(int,int,java.lang.String,java.lang.StringBuilder,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: com.android.contacts.model.RawContactDeltaList doInBackground(android.content.Intent[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: boolean isProfileSet(android.content.Context)> ()
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.voicedialer.VoiceContact: java.util.List getVoiceContacts(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.browser.AutofillHandler$LoadFromDb: void run()> (2)
<com.android.browser.AutofillHandler: void asyncLoadFromDb()> (1)
<com.android.browser.BrowserSettings: void <init>(android.content.Context)> (1)
<com.android.browser.BrowserSettings: void initialize(android.content.Context)> (1)
<com.android.browser.Browser: void onCreate()> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List queryContacts(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List access$700(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.vcard.VCardComposer: boolean initWithRawContactsEntityUri(android.net.Uri)> ()
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean hasContentChanged()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryInternal()> (6)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (5)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryIfRequired()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask: void run()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void asyncReloadDictionaryIfRequired()> (7)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean isValidWord(java.lang.String)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionary()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.Dictionary: boolean isValidWord(java.lang.String)> (7)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (4)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isValidWord(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.DictionaryCollection: boolean isValidWord(java.lang.String)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (2)
<com.android.inputmethod.research.MainLogBuffer: boolean isSafeNGram(java.util.ArrayList,int)> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: java.lang.String scrubWord(java.lang.String)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (1)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (10)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForTypingInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isInTheDictionary(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publishLogUnitsAtFrontOfBuffer()> (3)
<com.android.inputmethod.research.ResearchLogger$1: boolean isSafeNGram(java.util.ArrayList,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onUpdateSelection(int,int,int,int,int,int,int,int,boolean,boolean,com.android.inputmethod.latin.RichInputConnection)> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForBatchInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean,int)> (1)
<com.android.inputmethod.latin.LatinIME: void resetContactsDictionary(com.android.inputmethod.latin.ContactsBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void onBufferFull()> (2)
<com.android.inputmethod.research.MainLogBuffer: void shiftAndPublishAll()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publishLogUnitsAtFrontOfBuffer()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(int)> (2)
<com.android.inputmethod.latin.LatinIME: void initSuggest()> (3)
<com.android.inputmethod.latin.LatinIME: void loadSettings()> (3)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictAndKeyboard createDictAndKeyboard(java.util.Locale)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void startUsingContactsDictionaryLocked()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$1: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void onBufferFull()> (1)
<com.android.inputmethod.research.ResearchLogger$1: void onBufferFull()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void shiftAndPublishAll()> (1)
<com.android.inputmethod.research.ResearchLogger: void stop()> (3)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsOrOlderSuggestions(int)> (2)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordTouchedByCursor()> (1)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard poll(long,java.util.concurrent.TimeUnit)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsListener: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void initSuggest(com.android.inputmethod.latin.Suggest)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onFinishInputViewInternal(boolean,int,int,android.view.inputmethod.InputConnection)> ()
<com.android.inputmethod.research.ResearchLogger: void restart()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords access$900(com.android.inputmethod.latin.LatinIME,int)> (1)
<com.android.inputmethod.latin.LatinIME: void updateSuggestionStrip()> (2)
<com.android.inputmethod.latin.LatinIME: void access$200(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard pollWithDefaultTimeout()> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: java.lang.Object poll(long,java.util.concurrent.TimeUnit)> ()
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onCreate()> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.LogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.MainLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger$1: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void onUserLoggingConsent()> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsGestureLocked(com.android.inputmethod.latin.InputPointers)> (2)
<com.android.inputmethod.latin.LatinIME: void access$000(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void commitCurrentAutoCorrection(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postResumeSuggestions()> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnit()> (5)
<com.android.inputmethod.research.ResearchLogger: void sendFeedback(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: void updateBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip()> (8)
<com.android.inputmethod.latin.LatinIME: boolean handleSeparator(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartBatchInput()> (1)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void onUpdateSelection(int,int,int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onUpEvent(int,int,int,long)> (3)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnitAsWord(java.lang.String,long,boolean)> (8)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onStartInputViewInternal(android.view.inputmethod.EditorInfo,android.content.SharedPreferences)> ()
<com.android.inputmethod.research.ResearchLogger: void saveRecording()> (1)
<com.android.inputmethod.research.FeedbackFragment: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void handleBackspace(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursor(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void revertCommit()> (1)
<com.android.inputmethod.latin.LatinIME: boolean handleNonSpecialCharacter(int,int,int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onStartBatchInput()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.String)> (2)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.MoreKeysPanel: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitPartialText(java.lang.String,long,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_maybeDoubleSpacePeriod(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onTextInput(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_pickSuggestionManually(java.lang.String,int,java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_punctuationSuggestion(int,java.lang.String,boolean,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_revertCommit(java.lang.String,java.lang.String,boolean,java.lang.String)> ()
<com.android.inputmethod.research.ResearchLogger: void onWordFinished(java.lang.String,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void richInputConnection_commitText(java.lang.String,int,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void presentFeedbackDialog(com.android.inputmethod.latin.LatinIME)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void mayStartBatchInput(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int,int,long)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (4)
<com.android.inputmethod.research.ResearchLogger: void latinIme_commitCurrentAutoCorrection(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.inputmethod.latin.SuggestedWords)> ()
<com.android.inputmethod.research.ResearchLogger: void onResearchKeySelected(com.android.inputmethod.latin.LatinIME)> ()
<com.android.inputmethod.keyboard.PointerTracker: void mayEndBatchInput(long)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onEvent(com.android.inputmethod.event.Event)> (2)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onGestureMoveEvent(int,int,long,boolean,com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onPhantomUpEvent(long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onHardwareKeyEvent(android.view.KeyEvent)> ()
<com.android.inputmethod.event.EventInterpreter: boolean onSoftwareEvent()> ()
<com.android.inputmethod.keyboard.MainKeyboardView: void invokeCodeInput(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onRegisterKey(com.android.inputmethod.keyboard.Key)> (3)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element: void onPhantomUpEvent(long)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,long)> (3)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator$ProcessMotionEvent: boolean processMotionEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)> (2)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean handleSuddenJumping(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$6: void run()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onCancelEvent(int,int,long)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key)> (2)
<com.android.systemui.statusbar.phone.QuickSettings$2: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.systemui.statusbar.phone.QuickSettings$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.event.AttendeesView: void addOneAttendee(com.android.calendar.CalendarEventModel$Attendee)> (3)
<com.android.calendar.event.AttendeesView: void addAttendees(java.lang.String)> ()
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.ArrayList)> (1)
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.HashMap)> ()
<com.android.calendar.EventInfoFragment: void updateAttendees(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void initAttendeesCursor(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$2900(com.android.calendar.EventInfoFragment,android.view.View)> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.phone.CallCard: void displaySecondaryCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.CallCard: void updateAlreadyDisconnected(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification(boolean)> (2)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallUiState$InCallScreenMode)> (12)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (8)
<com.android.phone.NotificationMgr: void updateNotificationAndLaunchIncomingCallUi()> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.phone.InCallScreen: void internalResolveIntent(android.content.Intent)> (2)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.BluetoothPhoneService$3: boolean hangupCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void hangupRingingCall()> (2)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (2)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void clearInCallScreenMode()> (2)
<com.android.phone.NotificationMgr: com.android.phone.NotificationMgr init(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean hangupCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: void internalHangup()> (1)
<com.android.phone.PhoneGlobals$NotificationBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.CallNotifier: boolean ignoreAllIncomingCalls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<android.bluetooth.IBluetoothHeadsetPhone: boolean hangupCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processHangupCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5000(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.contacts.model.RawContactModifier: void parseStructuredNameExtra(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> (1)
<com.android.contacts.model.RawContactModifier: void parseExtras(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> (3)
<com.android.contacts.activities.ConfirmAddDetailActivity: void setEntityDeltaList(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$300(com.android.contacts.activities.ConfirmAddDetailActivity,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (1)
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> (1)
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void saveContact(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.PhotoEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void access$000(com.android.contacts.activities.AttachPhotoActivity,com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.BaseRawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (5)
<com.android.contacts.activities.AttachPhotoActivity$1: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setPhoto(long,android.graphics.Bitmap,java.lang.String)> (1)
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.RawContactReadOnlyEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (1)
<com.android.contacts.activities.AttachPhotoActivity$Listener: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void access$2300(com.android.contacts.editor.ContactEditorFragment,long,android.graphics.Bitmap,java.lang.String)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,java.util.ArrayList,int,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (1)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,java.util.ArrayList,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (2)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Void doInBackground(java.util.ArrayList[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> (1)
<com.android.bluetooth.hfp.AtPhonebook: com.android.bluetooth.hfp.AtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (3)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbsCommand(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbs(java.lang.String,int)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void generateBinaryDictionary()> (5)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.contacts.detail.PhotoSelectionHandler: int getPhotoPickSize()> (3)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: int getPhotoPickSize()> (1)
<com.android.contacts.detail.PhotoSelectionHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (4)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: int getPhotoPickSize()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(com.android.contacts.activities.PhotoSelectionActivity,android.content.Context,android.view.View,int,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void <init>(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.BaseRawContactEditorView,int,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void <init>(com.android.contacts.activities.PhotoSelectionActivity,android.content.Context,android.view.View,int,com.android.contacts.model.RawContactDeltaList,com.android.contacts.activities.PhotoSelectionActivity$1)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindPhotoHandler(com.android.contacts.editor.BaseRawContactEditorView,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void attachPhotoHandler()> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void displayPhoto()> (1)
<com.android.contacts.activities.PhotoSelectionActivity: void access$000(com.android.contacts.activities.PhotoSelectionActivity)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$2: void run()> (1)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (5)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (5)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.event.AttendeesView: android.view.View updateAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (3)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String,boolean)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.calendar.event.AttendeesView: android.view.View access$100(com.android.calendar.event.AttendeesView,com.android.calendar.event.EditEventHelper$AttendeeItem)> (2)
<com.android.calendar.event.AttendeesView: android.view.View constructAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> (1)
<com.android.mms.ui.QuickContactDivot: void assignContactFromEmail(java.lang.String)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler$1: void run()> (1)
<com.android.mms.ui.Divot: void assignContactFromEmail(java.lang.String)> ()
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: long queryForContactId(android.content.ContentResolver,long)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (3)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.settings.Utils: boolean copyMeProfilePhoto(android.content.Context,android.content.pm.UserInfo)> (2)
<com.android.settings.users.UserSettings: void assignProfilePhoto(android.content.pm.UserInfo)> (1)
<com.android.settings.users.UserSettings: void access$800(com.android.settings.users.UserSettings,android.content.pm.UserInfo)> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: int getContactCount()> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: int getContactCount()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (1)
<com.android.dialer.dialpad.SmartDialCache: void cacheContacts(android.content.Context)> (2)
<com.android.dialer.dialpad.SmartDialCache: com.android.dialer.dialpad.SmartDialTrie getContacts()> (1)
<com.android.dialer.dialpad.SmartDialCache: void access$100(com.android.dialer.dialpad.SmartDialCache,android.content.Context)> (1)
<com.android.dialer.dialpad.SmartDialCache$1: void run()> (1)
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.SEND_SMS
158 Callers:
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (4)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (2)
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> (3)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (5)
<com.android.mms.ui.NoConfirmationSendService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendInactiveMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$500(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$900(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)> (1)
<com.android.mms.transaction.MessageStatusService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (4)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft(boolean)> (4)
<com.android.mms.data.WorkingMessage$1: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.mms.data.Conversation$ConversationQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void saveDraft(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (2)
<com.android.mms.data.WorkingMessage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStop()> (2)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
Permission:com.android.voicemail.permission.ADD_VOICEMAIL
172 Callers:
<com.android.providers.contacts.VoicemailPermissions: boolean packageHasOwnVoicemailAccess(java.lang.String)> (1)
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()> (3)
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getPackageRestrictionClause()> (3)
<com.android.providers.contacts.VoicemailContentProvider: void checkAndAddSourcePackageIntoValues(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> (1)
<com.android.providers.contacts.VoicemailContentProvider: void checkPackagePermission(com.android.providers.contacts.VoicemailContentProvider$UriData)> (1)
<com.android.providers.contacts.VoicemailContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.providers.contacts.VoicemailContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.VoicemailContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.VoicemailContentProvider$UriData checkPermissionsAndCreateUriData(android.net.Uri)> (4)
<com.android.providers.contacts.VoicemailContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.VoicemailContentProvider$UriData checkPermissionsAndCreateUriData(android.net.Uri,android.content.ContentValues[])> (2)
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.VoicemailContentProvider$UriData checkPermissionsAndCreateUriDataForReadOperation(android.net.Uri)> (2)
<com.android.providers.contacts.VoicemailContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.VoicemailPermissions: boolean packageHasFullAccess(java.lang.String)> (2)
<com.android.providers.contacts.DbModifierWithNotification: void notifyVoicemailChange(android.net.Uri,java.util.Set,java.lang.String[])> (3)
<com.android.providers.contacts.DbModifierWithNotification: int delete(java.lang.String,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.DbModifierWithNotification: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.DbModifierWithNotification: void notifyVoicemailChangeOnInsert(android.net.Uri,java.util.Set)> (2)
<com.android.providers.contacts.DatabaseModifier: int delete(java.lang.String,java.lang.String,java.lang.String[])> (3)
<com.android.providers.contacts.DatabaseModifier: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> (3)
<com.android.providers.contacts.DbModifierWithNotification: long insert(android.content.ContentValues)> (1)
<com.android.providers.contacts.DbModifierWithNotification: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> (1)
<com.android.providers.contacts.CallLogProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.VoicemailContentTable: int delete(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.VoicemailStatusTable: int delete(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.CallLogProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.VoicemailContentTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.VoicemailStatusTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.DatabaseModifier: long insert(android.content.ContentValues)> (1)
<com.android.providers.contacts.DatabaseModifier: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> (2)
<com.android.providers.contacts.VoicemailTable$Delegate: int delete(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.VoicemailTable$Delegate: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.CallLogProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.VoicemailContentTable: android.net.Uri insert(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> (1)
<com.android.providers.contacts.VoicemailStatusTable: android.net.Uri insert(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> (1)
<com.android.providers.contacts.VoicemailTable$Delegate: android.net.Uri insert(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> (1)
<com.android.providers.contacts.VoicemailPermissions: boolean callerHasOwnVoicemailAccess()> (1)
<com.android.providers.contacts.VoicemailPermissions: void checkCallerHasOwnVoicemailAccess()> (1)
<com.android.providers.contacts.VoicemailPermissions: boolean callerHasFullAccess()> (4)
<com.android.providers.contacts.VoicemailPermissions: void checkCallerHasFullAccess()> (2)
<com.android.providers.contacts.CallLogProvider: void checkVoicemailPermissionAndAddRestriction(android.net.Uri,com.android.providers.contacts.util.SelectionBuilder)> (3)
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)> (2)
<com.android.dialer.CallDetailActivityQueryHandler: void onNotNullableQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.providers.contacts.VoicemailCleanupService: void handleIntentInternal(android.content.Intent,android.content.ContentResolver)> (1)
<com.android.contacts.common.database.NoNullCursorAsyncQueryHandler: void onNotNullableQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.providers.contacts.VoicemailCleanupService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.common.database.NoNullCursorAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (4)
<com.android.dialer.CallDetailActivityQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (2)
<com.android.dialer.calllog.CallLogQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (2)
<com.android.dialer.SpecialCharSequenceMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (2)
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void fetchVoicemailStatus()> (1)
<com.android.dialer.calllog.CallLogFragment: void startVoicemailStatusQuery()> (1)
<com.android.dialer.calllog.CallLogFragment: void refreshData()> (2)
<com.android.dialer.calllog.CallLogFragment: void onResume()> (1)
<com.android.dialer.calllog.CallLogFragment: void setMenuVisibility(boolean)> (1)
<com.android.voicedialer.VoiceContact: java.lang.String redialNumber(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.RecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.common.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void fetchCalls(int,int,boolean,int)> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void fetchCalls(int)> (3)
<com.android.dialer.calllog.CallLogFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.dialer.calllog.CallLogFragment: void fetchCalls()> (1)
<com.android.dialer.calllog.CallLogFragment: void startCallsQuery()> (1)
<com.android.dialer.calllog.CallLogAdapter$CallFetcher: void fetchCalls()> (1)
<com.android.dialer.calllog.CallLogAdapter: void onContentChanged()> (1)
<com.android.common.widget.GroupingListAdapter: void onContentChanged()> (1)
<com.android.common.widget.GroupingListAdapter$1: void onChange(boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.dialer.CallDetailActivity$6: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.dialer.CallDetailActivity$6: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void markNewCallsAsOld()> (1)
<com.android.dialer.calllog.CallLogFragment: void updateOnTransition(boolean)> (2)
<com.android.dialer.calllog.CallLogFragment: void updateOnEntry()> (1)
<com.android.dialer.calllog.CallLogFragment: void updateOnExit()> (2)
<com.android.dialer.calllog.CallLogFragment: void onStop()> (1)
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> (1)
<com.android.phone.common.CallLogAsync$GetLastOutgoingCallTask: java.lang.String doInBackground(com.android.phone.common.CallLogAsync$GetLastOutgoingCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$GetLastOutgoingCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$DefaultNewCallsQuery: com.android.dialer.calllog.DefaultVoicemailNotifier$NewCall[] query()> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$NewCallsQuery: com.android.dialer.calllog.DefaultVoicemailNotifier$NewCall[] query()> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier: void updateNotification(android.net.Uri)> (2)
<com.android.dialer.calllog.CallLogNotificationsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.dialer.calllog.VoicemailNotifier: void updateNotification(android.net.Uri)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.phone.ClearMissedCallsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.NotificationMgr: com.android.phone.NotificationMgr init(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.dialer.calllog.CallLogAdapter: void updateCallLogContactInfoCache(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean queryContactInfo(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean access$300(com.android.dialer.calllog.CallLogAdapter,java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.calllog.CallLogAdapter$QueryThread: void run()> (2)
<com.android.dialer.calllog.CallLogAdapter: void startRequestProcessing()> (2)
<com.android.dialer.calllog.CallLogAdapter: void access$100(com.android.dialer.calllog.CallLogAdapter)> (1)
<com.android.dialer.calllog.CallLogAdapter: void enqueueRequest(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> (1)
<com.android.bluetooth.hfp.AtPhonebook: com.android.bluetooth.hfp.AtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (3)
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> (2)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbsCommand(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void handleAccessPermissionResult(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbs(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void markNewVoicemailsAsOld()> (1)
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processDialCall(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5200(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<android.provider.CallLog$Calls: void removeExpiredEntries(android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void markMissedCallsAsRead()> (1)
<com.android.dialer.calllog.ClearCallLogDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.dialer.calllog.ClearCallLogDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:android.permission.WRITE_CALL_LOG
36 Callers:
<com.android.dialer.calllog.CallLogQueryHandler: void markNewVoicemailsAsOld()> (1)
<com.android.dialer.calllog.CallLogNotificationsService: void onHandleIntent(android.content.Intent)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.common.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.CallDetailActivity$6: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.dialer.CallDetailActivity$6: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.CallLog$Calls: void removeExpiredEntries(android.content.Context)> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void markNewCallsAsOld()> (1)
<com.android.dialer.calllog.CallLogFragment: void updateOnTransition(boolean)> (2)
<com.android.dialer.calllog.CallLogFragment: void updateOnEntry()> (1)
<com.android.dialer.calllog.CallLogFragment: void updateOnExit()> (2)
<com.android.dialer.calllog.CallLogFragment: void refreshData()> (2)
<com.android.dialer.calllog.CallLogFragment: void onStop()> (1)
<com.android.dialer.calllog.CallLogFragment: void setMenuVisibility(boolean)> (1)
<com.android.dialer.calllog.CallLogFragment: void onResume()> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void markMissedCallsAsRead()> (1)
<com.android.phone.ClearMissedCallsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.dialer.calllog.ClearCallLogDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.dialer.calllog.ClearCallLogDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogAdapter: void updateCallLogContactInfoCache(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean queryContactInfo(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean access$300(com.android.dialer.calllog.CallLogAdapter,java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.dialer.calllog.CallLogAdapter$QueryThread: void run()> (2)
<com.android.dialer.calllog.CallLogAdapter: void startRequestProcessing()> (2)
<com.android.dialer.calllog.CallLogAdapter: void access$100(com.android.dialer.calllog.CallLogAdapter)> (1)
<com.android.dialer.calllog.CallLogAdapter: void enqueueRequest(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
Permission:android.permission.SYSTEM_ALERT_WINDOW
107 Callers:
<com.android.internal.policy.impl.PhoneWindowManager: int checkAddPermission(android.view.WindowManager$LayoutParams,int[])> (1)
<android.view.WindowManagerPolicy: int checkAddPermission(android.view.WindowManager$LayoutParams,int[])> (1)
<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.Session: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (3)
<com.android.server.wm.Session: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (3)
<android.view.IWindowSession$Stub$Proxy: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.IWindowSession$Stub: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.Session: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub$Proxy: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (2)
<com.android.server.wm.Session: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession$Stub$Proxy: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.IWindowSession$Stub: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (1)
<android.view.IWindowSession$Stub$Proxy: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)> (16)
<android.view.ViewRootImpl: void setView(android.view.View,android.view.WindowManager$LayoutParams,android.view.View)> (1)
<com.android.server.wm.Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.SurfaceView: void updateWindow(boolean,boolean)> (21)
<android.view.IWindowSession: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<android.service.wallpaper.WallpaperService$Engine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (12)
<android.service.wallpaper.WallpaperService$Engine: void reportVisibility()> (13)
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)> (11)
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)> (11)
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void executeMessage(android.os.Message)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void updateSurface(boolean,boolean,boolean)> (1)
<android.view.WindowManagerGlobal: void addView(android.view.View,android.view.ViewGroup$LayoutParams,android.view.Display,android.view.Window)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<android.service.wallpaper.WallpaperService$Engine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.service.wallpaper.WallpaperService$Engine: void doVisibilityChanged(boolean)> (12)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void reportVisibility()> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void reportVisibility()> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void reportVisibility()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void reportVisibility()> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void setOffsetNotificationsEnabled(boolean)> (2)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void setTouchEventsEnabled(boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.systemui.ImageWallpaper$DrawableEngine: void setTouchEventsEnabled(boolean)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void setTouchEventsEnabled(boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void setTouchEventsEnabled(boolean)> (1)
<android.view.WindowManagerImpl: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> (2)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void doVisibilityChanged(boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void doVisibilityChanged(boolean)> (1)
<com.android.systemui.ImageWallpaper$DrawableEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
Permission:android.permission.RESTART_PACKAGES
19 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (3)
<com.android.commands.am.Am: void runKill()> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<com.android.settings.applications.RunningServiceDetails$ActiveDetail: void onClick(android.view.View)> (1)
<com.android.commands.am.Am: void onRun()> (1)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<com.android.internal.os.BaseCommand: void run(java.lang.String[])> (3)
<com.android.commands.am.Am: void run(java.lang.String[])> (2)
<com.android.commands.media.Media: void run(java.lang.String[])> (2)
<com.android.commands.wm.Wm: void run(java.lang.String[])> (2)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.commands.media.Media: void main(java.lang.String[])> ()
<com.android.commands.wm.Wm: void main(java.lang.String[])> ()
Permission:android.permission.ACCESS_COARSE_LOCATION
1411 Callers:
<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)> (2)
<com.android.server.LocationManagerService: int access$400(com.android.server.LocationManagerService,int,int)> (1)
<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()> (9)
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)> (2)
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<com.android.server.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String)> (1)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> ()
<android.location.ILocationManager$Stub: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)> (2)
<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (1)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (3)
<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (1)
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.Location getLastLocation()> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> ()
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (4)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: void removeAllGeofences(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)> ()
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)> (11)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.TwilightService$LocationHandler: void retrieveLocation()> (3)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.android.server.location.GeofenceManager: android.location.Location getFreshLocationLocked()> (1)
<com.android.location.fused.FusionEngine: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.server.TwilightService$LocationHandler: void enableLocationUpdates()> (2)
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)> (1)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> (2)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (7)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.android.server.location.GeofenceManager: void updateFences()> (2)
<com.android.location.fused.FusedLocationProvider: void <init>(android.content.Context)> (1)
<com.android.server.TwilightService: void registerListener(com.android.server.TwilightService$TwilightListener,android.os.Handler)> (2)
<com.android.server.TwilightService: void systemReady()> (1)
<com.android.server.TwilightService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.location.fused.FusionEngine: void enableProvider(java.lang.String,long)> (1)
<com.android.server.location.GpsLocationProvider$3: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.LocationManager: void startReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)> (1)
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> (8)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<com.android.server.location.GeofenceManager: void access$000(com.android.server.location.GeofenceManager)> (2)
<com.android.server.location.GeofenceManager: void onLocationChanged(android.location.Location)> (1)
<com.android.location.fused.FusedLocationService: android.os.IBinder onBind(android.content.Intent)> (1)
<com.android.server.power.DisplayPowerController: void <init>(android.os.Looper,android.content.Context,com.android.server.power.Notifier,com.android.server.LightsService,com.android.server.TwilightService,android.hardware.SensorManager,com.android.server.display.DisplayManagerService,com.android.server.power.DisplayBlanker,com.android.server.power.DisplayPowerController$Callbacks,android.os.Handler)> (1)
<com.android.server.UiModeManagerService: void <init>(android.content.Context,com.android.server.TwilightService)> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.location.fused.FusionEngine: void updateRequirements()> (3)
<android.webkit.GeolocationService: boolean start()> ()
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<com.android.camera.LocationManager: void recordLocation(boolean)> (9)
<android.webkit.GeolocationService: void unregisterFromLocationUpdates()> (2)
<com.android.camera.LocationManager: void stopReceivingLocationUpdates()> (1)
<com.android.location.fused.FusionEngine: void disableProvider(java.lang.String)> (1)
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)> (1)
<com.android.wallpaper.grass.GrassRS: void stop()> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<android.renderscript.RSSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (8)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.server.location.GeofenceManager: void scheduleUpdateFencesLocked()> (3)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.location.fused.FusionEngine: void disable()> (1)
<com.android.location.fused.FusionEngine: void enable()> ()
<com.android.location.fused.FusionEngine: void setRequest(com.android.location.provider.ProviderRequestUnbundled,android.os.WorkSource)> (1)
<com.android.camera.PanoramaModule: void onPauseBeforeSuper()> (1)
<com.android.camera.PanoramaModule: void onResumeAfterSuper()> (1)
<com.android.camera.PhotoModule: void initializeFirstTime()> (1)
<com.android.camera.PhotoModule: void initializeSecondTime()> (1)
<com.android.camera.PhotoModule: void onPauseAfterSuper()> (1)
<com.android.camera.PhotoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.camera.VideoModule: void onSharedPreferenceChanged()> (2)
<android.webkit.GeolocationService: void stop()> ()
<com.android.server.location.LocationBasedCountryDetector: void stop()> (3)
<com.android.wallpaper.RenderScriptScene: void stop()> (6)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.galaxy4.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.noisefield.NoiseFieldView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.phasebeam.PhaseBeamView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.holospiral.HoloSpiralView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)> (2)
<com.android.server.location.GeofenceManager: void removeFence(java.lang.String)> ()
<com.android.location.fused.FusionEngine: void deinit()> (2)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> (2)
<com.android.camera.CameraModule: void onResumeAfterSuper()> (2)
<com.android.camera.PhotoModule: void access$1800(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onResumeAfterSuper()> (1)
<com.android.camera.CameraModule: void onPauseAfterSuper()> (2)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.PhotoModule: void setLocationPreference(java.lang.String)> (1)
<com.android.camera.VideoModule: void onCancelBgTraining(android.view.View)> ()
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.server.location.LocationBasedCountryDetector$1: void onLocationChanged(android.location.Location)> (1)
<com.android.wallpaper.fall.FallRS: void stop()> (1)
<com.android.wallpaper.galaxy.GalaxyRS: void stop()> (1)
<com.android.wallpaper.nexus.NexusRS: void stop()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void destroyRenderer()> (2)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.location.GeofenceManager: void sendIntent(android.app.PendingIntent,android.content.Intent)> (2)
<com.android.location.fused.FusedLocationProvider: void onDisable()> (2)
<com.android.camera.CameraActivity: void closeModule(com.android.camera.CameraModule)> (2)
<com.android.camera.CameraActivity: void onPause()> (4)
<com.android.camera.CameraActivity: void onResume()> (4)
<com.android.camera.CameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (2)
<com.android.camera.PieController: void onSettingChanged(com.android.camera.ListPreference)> (5)
<com.android.camera.PhotoModule: void access$3000(com.android.camera.PhotoModule,java.lang.String)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onDestroy()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceDestroyed(android.view.SurfaceHolder)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (18)
<com.android.server.location.GeofenceManager: void sendIntentEnter(android.app.PendingIntent)> (1)
<com.android.server.location.GeofenceManager: void sendIntentExit(android.app.PendingIntent)> (1)
<com.android.location.fused.FusedLocationService: boolean onUnbind(android.content.Intent)> (1)
<com.android.location.provider.LocationProviderBase: void onDisable()> (1)
<com.android.camera.CameraActivity: void doChangeCamera(int)> (3)
<com.android.camera.SecureCameraActivity: void closeModule(com.android.camera.CameraModule)> (1)
<com.android.camera.ActivityBase: void onPause()> (3)
<com.android.camera.SecureCameraActivity: void onPause()> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (6)
<com.android.camera.ActivityBase: void onResume()> (3)
<com.android.camera.SecureCameraActivity: void onResume()> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (6)
<com.android.camera.SecureCameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (1)
<com.android.camera.PhotoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PieController$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.PieController$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PhotoModule$4: void onCancel(android.content.DialogInterface)> (1)
<com.android.camera.PhotoModule$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (2)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void reload()> (1)
<com.android.photos.shims.MediaItemsLoader: android.database.Cursor loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: android.database.Cursor loadInBackground()> (1)
<com.android.location.provider.LocationProviderBase$Service: void disable()> (2)
<com.android.camera.CameraActivity: void access$200(com.android.camera.CameraActivity,int)> (2)
<com.android.camera.CameraActivity: void onCameraSelected(int)> (2)
<com.android.camera.SecureCameraActivity: void doChangeCamera(int)> (1)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (3)
<com.android.gallery3d.app.DialogPicker: void onPause()> (3)
<com.android.gallery3d.app.Gallery: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (3)
<com.android.gallery3d.app.DialogPicker: void onResume()> (3)
<com.android.gallery3d.app.Gallery: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.camera.PhotoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.ui.PieItem$OnClickListener: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.ui.ListPrefSettingPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.TimeIntervalPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.MoreSettingPopup$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void <init>(com.android.gallery3d.data.Path,java.util.Comparator,com.android.gallery3d.data.MediaSet[],int)> (2)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (2)
<com.android.photos.shims.MediaItemsLoader: java.lang.Object loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: java.lang.Object loadInBackground()> (1)
<com.android.internal.location.ILocationProvider$Stub$Proxy: void disable()> ()
<com.android.internal.location.ILocationProvider$Stub: void disable()> (2)
<com.android.camera.CameraActivity$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.camera.SecureCameraActivity: void access$200(com.android.camera.CameraActivity,int)> (1)
<com.android.camera.SecureCameraActivity: void onCameraSelected(int)> (1)
<com.android.camera.ui.CameraSwitcher$CameraSwitchListener: void onCameraSelected(int)> (1)
<com.android.camera.ui.CountdownTimerPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.PieItem: void performClick()> (1)
<com.android.camera.ui.ListPrefSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.TimeIntervalPopup: void updateInputState()> (1)
<com.android.camera.ui.MoreSettingPopup: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getLocalAlbum(com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (2)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.internal.location.ILocationProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.location.ILocationProvider: void disable()> (1)
<com.android.camera.ui.CameraSwitcher: void onCameraSelected(int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void updateInputState()> (1)
<com.android.camera.ui.PieRenderer$3: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.camera.ui.TimeIntervalPopup: void access$000(com.android.camera.ui.TimeIntervalPopup)> (1)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (3)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet access$400(com.android.gallery3d.data.LocalAlbumSet,com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (1)
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (2)
<com.android.location.provider.LocationProviderBase$Service: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.LocationProviderProxy: void disable()> (1)
<com.android.camera.ui.CameraSwitcher: void access$000(com.android.camera.ui.CameraSwitcher,int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void access$000(com.android.camera.ui.CountdownTimerPopup)> (1)
<com.android.camera.ui.TimeIntervalPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (2)
<com.android.gallery3d.app.ActivityState: void resume()> (12)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.FilmstripPage: void onResume()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onResume()> (2)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.util.ArrayList run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> (24)
<com.android.gallery3d.data.MediaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (8)
<com.android.server.location.LocationProviderInterface: void disable()> (2)
<com.android.camera.ui.CameraSwitcher$1: void onClick(android.view.View)> (1)
<com.android.camera.ui.CountdownTimerPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean changeIndex(int)> (2)
<com.android.camera.ui.InLineSettingMenu: boolean changeIndex(int)> (1)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.FilmstripPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState,boolean)> (1)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (10)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (6)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.Gallery: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (3)
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> (3)
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void delete(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void getPanoramaSupport(com.android.gallery3d.data.Path,com.android.gallery3d.data.MediaObject$PanoramaSupportCallback)> ()
<com.android.gallery3d.data.DataManager: void onStitchingResult(android.net.Uri)> (1)
<com.android.gallery3d.data.DataManager: void rotate(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void resolveAlbumPath()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void setChoosenAlbum(android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgetsInternal(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList getSelectedMediaObjects(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean execute(com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.MediaItemsLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.photos.shims.MediaSetLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.gallery3d.data.ClusterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.DataManager: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (5)
<com.android.gallery3d.data.FilterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.UriSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)> (2)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)> (2)
<com.android.camera.ui.InLineSettingCheckBox$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (8)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (2)
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (2)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.Gallery: void startDefaultPage()> (2)
<com.android.gallery3d.app.Gallery: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (3)
<com.android.gallery3d.app.PhotoPage: void switchToGrid()> (3)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (5)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.app.Gallery: void initializeByIntent()> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (9)
<com.android.gallery3d.app.FilmstripPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onGetContent(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computePanoramaSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computeSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: android.content.Intent getIntentBySingleSelectedPath(java.lang.String)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> (10)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void <init>(com.android.gallery3d.data.DataManager,java.lang.String)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void monitorRootPath()> (1)
<com.android.gallery3d.app.AlbumPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean,int)> (3)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingResult(android.net.Uri)> ()
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (8)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.gallery3d.gadget.MediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgets(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList access$100(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean access$700(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.LoaderCompatShim: void deleteItemWithPath(java.lang.Object)> (3)
<com.android.gallery3d.data.ClusterAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> (2)
<com.android.gallery3d.data.ClusterAlbum: void delete()> (2)
<com.android.gallery3d.data.FilterTypeSet: void delete()> (2)
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.server.LocationManagerService: void switchUser(int)> (1)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (7)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (9)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$6: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.PhotoPage: void onSingleTapUp(int,int)> (3)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumPage: void switchToFilmstrip()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1100(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.SinglePhotoPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.camera.CameraActivity: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (4)
<com.android.camera.SecureCameraActivity: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (1)
<com.android.camera.CameraActivity: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (4)
<com.android.camera.SecureCameraActivity: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onStateResult(int,int,android.content.Intent)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.FilmstripPage: void switchToGrid()> (1)
<com.android.gallery3d.app.PhotoPage: void onAlbumModeSelected(int)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void switchToGrid()> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.Gallery: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumSetPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$600(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$700(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> (3)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context)> (3)
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context,java.lang.String)> ()
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context)> (3)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onCreate()> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> (6)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.UriSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.data.ContentListener: void onContentDirty()> (4)
<com.android.gallery3d.gadget.PhotoAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.photos.AlbumFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.AlbumSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.PhotoSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.gallery3d.data.MediaSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (15)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.MediaObject: void delete()> (22)
<com.android.gallery3d.data.MediaSet: void delete()> (2)
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> (21)
<com.android.server.LocationManagerService: void access$300(com.android.server.LocationManagerService,int)> (1)
<com.android.server.LocationManagerService: void access$200(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void systemReady()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.AlbumPage: void access$1700(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1700(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished(boolean)> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.FilmstripPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumPage: void onAlbumModeSelected(int)> (1)
<com.android.camera.PanoramaModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.PhotoModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.VideoModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.ActivityBase: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.ActivityState: void onStateResult(int,int,android.content.Intent)> (4)
<com.android.gallery3d.app.FilmstripPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.FilmstripPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.GalleryActionBar$OnAlbumModeSelectedListener: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onBackPressed()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onBackPressed()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.photos.AlbumFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.PhotoSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.AlbumSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.MenuExecutor: com.android.gallery3d.data.Path getSingleSelectedPath()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.data.MediaSet: void notifyContentChanged()> (15)
<com.android.gallery3d.gadget.LocalPhotoSource$1: void onChange(boolean)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (16)
<com.android.gallery3d.data.MediaSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (16)
<com.android.gallery3d.data.SecureAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ActionImage: void delete()> (2)
<com.android.gallery3d.data.CameraShortcutImage: void delete()> (3)
<com.android.gallery3d.data.ClusterAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbum: void delete()> (2)
<com.android.gallery3d.data.EmptyAlbumImage: void delete()> (3)
<com.android.gallery3d.data.FilterDeleteSet: void delete()> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: void delete()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMediaItem: void delete()> (2)
<com.android.gallery3d.data.MediaItem: void delete()> (3)
<com.android.gallery3d.data.SecureAlbum: void delete()> (2)
<com.android.gallery3d.data.SingleItemAlbum: void delete()> (2)
<com.android.gallery3d.data.SnailAlbum: void delete()> (3)
<com.android.gallery3d.data.SnailItem: void delete()> (2)
<com.android.gallery3d.data.UnlockImage: void delete()> (3)
<com.android.gallery3d.data.UriImage: void delete()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMergeAlbum: void delete()> (2)
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> (7)
<com.android.gallery3d.app.AlbumSetPage: boolean albumShouldOpenInFilmstrip(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem findMediaItem(com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> (1)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (17)
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (16)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.ui.SelectionManager: boolean expandMediaSet(java.util.ArrayList,com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.server.LocationManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.LocationManagerService$2: void onChange(boolean)> (1)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (6)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (6)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.camera.CameraModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (2)
<com.android.camera.CameraActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.ManageCachePage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.SlideshowPage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.ui.PopupList$OnPopupItemClickListener: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$500(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(android.view.MenuItem,java.lang.String,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: int setIndex()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.data.ChangeNotifier: void onChange(boolean)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ClusterAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void notifyContentChanged()> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterTypeSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.SecureAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SingleItemAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void notifyContentChanged()> (1)
<com.android.gallery3d.data.ClusterAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (21)
<com.android.gallery3d.data.SecureAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(android.database.Cursor)> (1)
<com.android.gallery3d.data.ClusterAlbum$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.data.FilterTypeSet$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.AlbumPage$1: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumPage: void prepareAnimationBackToFilmstrip(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void prepareSlotContent(int)> (3)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.data.MediaSet,int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterDeleteSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SecureAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SnailAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: int findIndexOfTarget(com.android.gallery3d.app.PhotoDataAdapter$UpdateInfo)> (1)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SecureAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (9)
<com.android.camera.ActivityBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.camera.CameraActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.SecureCameraActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.gallery3d.app.Gallery: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.camera.ActivityBase: void onBackPressed()> (3)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.Gallery: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (3)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1800(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onSingleTapUp(float,float)> (1)
<com.android.camera.SecureCameraActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.ui.PopupList$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.ui.DialogDetailsView: void reloadDetails()> (2)
<com.android.gallery3d.data.ChangeNotifier: void fakeChange()> (2)
<com.android.gallery3d.data.DataManager$NotifyBroker: void onChange(boolean)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ClusterAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void sendRequest(int,com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterTypeSet: void onContentDirty()> (1)
<com.android.gallery3d.data.LocalAlbumSet$1: void run()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyChange()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClustersContents()> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FaceClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SizeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.TagClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.MediaSet$ItemConsumer: void consume(int,com.android.gallery3d.data.MediaItem)> (3)
<com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage$4: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1200(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setContentWindow(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (16)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.CameraActivity: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onPause()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onPause()> (2)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void reloadDetails()> (1)
<com.android.gallery3d.ui.DialogDetailsView: void show()> (1)
<com.android.gallery3d.data.LocalAlbumSet: void fakeChange()> ()
<com.android.gallery3d.data.SecureAlbum: void addMediaItem(boolean,int)> (2)
<com.android.gallery3d.data.FilterDeleteSet: void addDeletion(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void clearDeletion()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void removeDeletion(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.PhotoPage: void notifyScreenNailChanged()> (3)
<com.android.photos.shims.LoaderCompatShim: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.LocalSource: void processMapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,boolean)> (1)
<com.android.gallery3d.ui.PhotoFallbackEffect: void setPositionProvider(com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onLongTap(int)> (2)
<com.android.gallery3d.app.AlbumPage$4: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$DataListener: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setActiveWindow(int,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (13)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (14)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.SecureCameraActivity: void onBackPressed()> (3)
<com.android.gallery3d.ui.DetailsHelper: void reloadDetails()> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void show()> (1)
<com.android.gallery3d.app.PhotoPage: void addSecureAlbumItem(boolean,int)> (3)
<com.android.gallery3d.data.SecureAlbum: void onStitchingQueued(android.net.Uri)> (1)
<com.android.gallery3d.app.PhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.app.PhotoPage: void onUndoDeleteImage()> (3)
<com.android.gallery3d.app.AppBridge$Server: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.FilmstripPage: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void notifyScreenNailChanged()> (1)
<com.android.photos.AlbumSetFragment: java.util.ArrayList getSubItemUrisForItem(java.lang.Object)> ()
<com.android.gallery3d.data.LocalSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.app.ManageCachePage$4: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void onVisibleRangeChanged(int,int)> ()
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (12)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (12)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage: void updateUIForCurrentPhoto()> (4)
<com.android.gallery3d.ui.DetailsHelper: void show()> (3)
<com.android.gallery3d.app.AppBridge$Server: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingQueued(android.net.Uri)> ()
<com.android.gallery3d.app.FilmstripPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onUndoDeleteImage()> (1)
<com.android.camera.ActivityBase$MyAppBridge: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (7)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.gallery3d.app.FilmstripPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (9)
<com.android.gallery3d.app.PhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (5)
<com.android.gallery3d.app.SinglePhotoPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.AlbumPage: void showDetails()> (1)
<com.android.gallery3d.app.AlbumSetPage: void showDetails()> (1)
<com.android.gallery3d.app.PhotoPage: void showDetails()> (3)
<com.android.camera.ActivityBase$MyAppBridge: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.ui.PhotoView$1: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void access$500(com.android.camera.ActivityBase$MyAppBridge)> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: void onPictureCenter(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void requestDeferredUpdate()> (3)
<com.android.gallery3d.app.PhotoPage: void refreshHidingMessage()> (6)
<com.android.gallery3d.app.PhotoPage: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void onActionBarWanted()> (3)
<com.android.gallery3d.app.FilmstripPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (11)
<com.android.gallery3d.app.SinglePhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void showDetails()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void showDetails()> (1)
<com.android.camera.ActivityBase: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (2)
<com.android.gallery3d.ui.GLView$OnClickListener: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.camera.ActivityBase: void notifyScreenNailChanged()> (3)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.gallery3d.app.FilmstripPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.FilmstripPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.PhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (5)
<com.android.gallery3d.app.PhotoPage: void onFilmModeChanged(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void showBars()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.FilmstripPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.FilmstripPage: void onActionBarWanted()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarWanted()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarWanted()> (2)
<com.android.gallery3d.app.FilmstripPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage$6: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.camera.CameraActivity: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (4)
<com.android.camera.SecureCameraActivity: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.camera.ActivityBase: void onLayoutChange(android.view.View,int,int,int,int)> (3)
<com.android.camera.CameraActivity: void notifyScreenNailChanged()> (6)
<com.android.camera.SecureCameraActivity: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.ui.PhotoView$FullPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.app.FilmstripPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$8: void onConfirmDialogDismissed(boolean)> (1)
<com.android.gallery3d.app.PhotoPage$MyMenuVisibilityListener: void onMenuVisibilityChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void showBars()> (1)
<com.android.gallery3d.app.PhotoPage: void toggleBars()> (3)
<com.android.gallery3d.app.PhotoPage: void wantBars()> (3)
<com.android.gallery3d.app.SinglePhotoPage: void showBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimationLocked(int)> (1)
<com.android.gallery3d.ui.PhotoView: void captureAnimationDone(int)> (1)
<com.android.gallery3d.ui.PhotoView: void updateActionBar()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (2)
<com.android.camera.PanoramaModule$9: void run()> (1)
<com.android.camera.PhotoModule$3: void onMediaSaved(android.net.Uri)> (1)
<com.android.camera.VideoModule$1: void onMediaSaved(android.net.Uri)> (1)
<com.android.camera.CameraActivity: void onLayoutChange(android.view.View,int,int,int,int)> (2)
<com.android.camera.SecureCameraActivity: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.ui.LayoutChangeNotifier$Listener: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.PanoramaModule: void configMosaicPreview(int,int)> (3)
<com.android.camera.PhotoModule: void onScreenSizeChanged(int,int,int,int)> (1)
<com.android.camera.PhotoModule: void startPreview()> (2)
<com.android.camera.PhotoModule: void updatePreviewSize(com.android.camera.CameraScreenNail)> (1)
<com.android.camera.VideoModule: void updateCameraScreenNailSize(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Picture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onConfirmDialogDismissed(boolean)> (2)
<com.android.gallery3d.ui.PhotoView: void setFilmMode(boolean)> (16)
<com.android.gallery3d.app.FilmstripPage: void toggleBars()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void toggleBars()> (1)
<com.android.gallery3d.app.FilmstripPage: void wantBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (6)
<com.android.gallery3d.app.SinglePhotoPage: void wantBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$900(com.android.gallery3d.ui.PhotoView,int)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void updateCurrentIndex(int)> (1)
<com.android.camera.MediaSaveService$OnMediaSavedListener: void onMediaSaved(android.net.Uri)> (2)
<com.android.camera.PanoramaModule: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.ui.LayoutChangeHelper: void onLayout(boolean,int,int,int,int)> (2)
<com.android.camera.PanoramaModule: void access$1700(com.android.camera.PanoramaModule,int,int)> (2)
<com.android.camera.PhotoController: void onScreenSizeChanged(int,int,int,int)> (1)
<com.android.camera.PhotoModule: void access$1500(com.android.camera.PhotoModule)> (1)
<com.android.camera.PhotoModule: void setupPreview()> (5)
<com.android.camera.VideoModule: void setCameraParameters()> (3)
<com.android.gallery3d.ui.PhotoView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.gallery3d.app.PhotoPage: void transitionFromAlbumPageIfNeeded()> (3)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void resetToFirstPicture()> (1)
<com.android.gallery3d.app.FilmstripPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: boolean switchWithCaptureAnimation(int)> (4)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void moveTo(int)> (2)
<com.android.camera.MediaSaveService$ImageSaveTask: void onPostExecute(android.net.Uri)> (1)
<com.android.camera.MediaSaveService$VideoSaveTask: void onPostExecute(android.net.Uri)> (1)
<com.android.camera.PreviewFrameLayout: void onLayout(boolean,int,int,int,int)> (3)
<com.android.camera.ui.LayoutNotifyView: void onLayout(boolean,int,int,int,int)> (1)
<com.android.camera.PanoramaModule$WaitProcessorTask: void onPostExecute(java.lang.Void)> (1)
<com.android.camera.PhotoUI$1: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)> (1)
<com.android.camera.PhotoModule$CameraStartUpThread: void run()> (3)
<com.android.camera.PhotoModule: void access$1700(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onCaptureRetake()> (1)
<com.android.camera.PhotoModule: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void switchCamera()> (2)
<com.android.camera.PhotoModule: void updateCameraParametersPreference()> (1)
<com.android.camera.VideoModule: void startPreview()> (5)
<com.android.camera.VideoModule: void updateCameraAppView()> (1)
<com.android.gallery3d.ui.GLView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (12)
<com.android.gallery3d.app.FilmstripPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.app.AppBridge$Server: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.PhotoPage$Model: void moveTo(int)> (2)
<com.android.gallery3d.ui.PhotoView$Model: void moveTo(int)> (5)
<com.android.camera.MediaSaveService$ImageSaveTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.MediaSaveService$VideoSaveTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.PanoramaModule$WaitProcessorTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.PhotoModule$JpegPictureCallback: void onPictureTaken(byte[],android.hardware.Camera)> (1)
<com.android.camera.PhotoController: void onCaptureRetake()> (1)
<com.android.camera.PhotoController: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void access$2300(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onCameraPickerClicked(int)> (1)
<com.android.camera.PhotoModule: void setCameraParameters(int)> (5)
<com.android.camera.VideoModule: boolean stopVideoRecording()> (4)
<com.android.camera.VideoModule: void access$800(com.android.camera.VideoModule)> (7)
<com.android.camera.VideoModule: void checkQualityAndStartPreview()> (2)
<com.android.camera.VideoModule: void switchCamera()> (2)
<com.android.camera.CameraModule: void updateCameraAppView()> (1)
<com.android.gallery3d.app.AlbumPage$2: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.PhotoPage$4: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.EdgeView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GLRootView: void onDrawFrameLocked(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.ui.GLView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (13)
<com.android.gallery3d.ui.PreparePageFadeoutTexture: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.SlotView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.UndoBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyScaleListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToFirstImage()> (1)
<com.android.gallery3d.ui.PhotoView: void switchToImage(int)> (7)
<com.android.gallery3d.ui.PhotoView: void switchToNextImage()> (3)
<com.android.gallery3d.ui.PhotoView: void switchToPrevImage()> (2)
<com.android.camera.PhotoUI$6: void onClick(android.view.View)> (1)
<com.android.camera.PhotoUI: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void onPreviewTextureCopied()> (1)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onCameraPickerClicked(int)> (2)
<com.android.camera.PhotoModule: void access$1300(com.android.camera.PhotoModule,int)> (1)
<com.android.camera.PhotoModule: void cancelAutoFocus()> (2)
<com.android.camera.PhotoModule: void setCameraParametersWhenIdle(int)> (2)
<com.android.camera.PhotoModule: void setFocusParameters()> (1)
<com.android.camera.VideoModule: boolean access$1300(com.android.camera.VideoModule)> (1)
<com.android.camera.VideoModule: void onError(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoModule: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: void onStopVideoRecording()> (4)
<com.android.camera.VideoModule$4: void run()> (1)
<com.android.camera.VideoModule$5: void run()> (1)
<com.android.camera.VideoModule: void onShutterButtonClick()> (1)
<com.android.camera.VideoModule: void keepScreenOnAwhile()> (3)
<com.android.camera.VideoModule: void updateRecordingTime()> (2)
<com.android.camera.VideoModule: boolean updateEffectSelection()> (1)
<com.android.camera.VideoModule: void onEffectsUpdate(int,int)> (1)
<com.android.camera.VideoModule: void access$1200(com.android.camera.VideoModule)> (7)
<com.android.camera.VideoModule: void onCameraPickerClicked(int)> (1)
<com.android.camera.CameraActivity: void updateCameraAppView()> (2)
<com.android.gallery3d.ui.GLRootView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.app.AlbumPage$2: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.ui.ScrollBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLRoot$OnGLIdleListener: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void access$200(com.android.camera.ActivityBase$MyAppBridge,int)> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToNextPicture()> (3)
<com.android.gallery3d.ui.PhotoView: void switchFocus()> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToPrevPicture()> (3)
<com.android.camera.CameraModule: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoMenu$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.FocusOverlayManager$Listener: void cancelAutoFocus()> (1)
<com.android.camera.PhotoController: void cancelAutoFocus()> (1)
<com.android.camera.PhotoModule: void access$1900(com.android.camera.PhotoModule,int)> (2)
<com.android.camera.FocusOverlayManager$Listener: void setFocusParameters()> (3)
<com.android.camera.VideoModule$MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.VideoController: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: boolean onBackPressed()> (1)
<com.android.camera.VideoModule: void onInfo(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick()> (1)
<com.android.camera.VideoModule: void onUserInteraction()> (1)
<com.android.camera.VideoModule: void access$400(com.android.camera.VideoModule)> (4)
<com.android.camera.VideoModule: void startVideoRecording()> (1)
<com.android.camera.EffectsRecorder$EffectsListener: void onEffectsUpdate(int,int)> (1)
<com.android.camera.VideoModule: void onPreviewTextureCopied()> (1)
<com.android.camera.VideoModule: void initializeVideoSnapshot()> (2)
<com.android.camera.ActivityBase: void updateCameraAppView()> (2)
<com.android.camera.SecureCameraActivity: void updateCameraAppView()> (2)
<com.android.gallery3d.ui.PhotoView$FullPicture: void drawTileView(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.GLRootView$IdleRunner: void run()> (1)
<com.android.camera.ActivityBase: void gotoGallery()> (2)
<com.android.gallery3d.ui.PhotoView: boolean snapToNeighborImage()> (2)
<com.android.gallery3d.ui.PhotoView: boolean swipeImages(float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToHitPicture(int,int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$800(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.camera.CameraActivity: void onPreviewTextureCopied()> (2)
<com.android.camera.FocusOverlayManager: void cancelAutoFocus()> (3)
<com.android.camera.PhotoUI: void openMenu()> (2)
<com.android.camera.FocusOverlayManager: void lockAeAwbIfNeeded()> (2)
<com.android.camera.FocusOverlayManager: void onSingleTapUp(int,int)> (1)
<com.android.camera.FocusOverlayManager: void unlockAeAwbIfNeeded()> (1)
<com.android.camera.VideoUI$3: void onClick(android.view.View)> (1)
<com.android.camera.CameraModule: boolean onBackPressed()> (1)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.camera.CameraModule: void onUserInteraction()> (1)
<com.android.camera.EffectsRecorder$1: void run()> (1)
<com.android.camera.ActivityBase: void onFullScreenChanged(boolean)> (2)
<com.android.camera.CameraActivity: void gotoGallery()> (3)
<com.android.camera.SecureCameraActivity: void gotoGallery()> (1)
<com.android.gallery3d.ui.PhotoView: boolean access$3700(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: void snapback()> (2)
<com.android.gallery3d.ui.PhotoView: boolean access$3500(com.android.gallery3d.ui.PhotoView,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void access$3200(com.android.gallery3d.ui.PhotoView,int,int)> (1)
<com.android.camera.ActivityBase: void onPreviewTextureCopied()> (1)
<com.android.camera.SecureCameraActivity: void onPreviewTextureCopied()> (2)
<com.android.camera.FocusOverlayManager: void access$000(com.android.camera.FocusOverlayManager)> (3)
<com.android.camera.FocusOverlayManager: void onShutterUp()> (2)
<com.android.camera.PhotoUI: void access$400(com.android.camera.PhotoUI)> (1)
<com.android.camera.PhotoUI: void onSwipe(int)> (1)
<com.android.camera.FocusOverlayManager: void onAutoFocus(boolean,boolean)> (1)
<com.android.camera.FocusOverlayManager: void onShutterDown()> (1)
<com.android.camera.PhotoModule: void onSingleTapUp(android.view.View,int,int)> (2)
<com.android.camera.VideoUI: void clickShutter()> (1)
<com.android.camera.CameraActivity: void onUserInteraction()> (3)
<com.android.camera.ActivityBase$MyAppBridge: void onFullScreenChanged(boolean)> (1)
<com.android.camera.CameraActivity: void onFullScreenChanged(boolean)> (2)
<com.android.camera.PhotoUI$2: void onClick(android.view.View)> (1)
<com.android.camera.VideoUI$5: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: void onUp()> (1)
<com.android.gallery3d.ui.PhotoView: void access$1500(com.android.gallery3d.ui.PhotoView)> (2)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoModule: void onCountDownFinished()> (2)
<com.android.camera.PhotoModule: void onShutterButtonFocus(boolean)> (3)
<com.android.camera.PhotoUI$3: void onClick(android.view.View)> (1)
<com.android.camera.PreviewGestures$SwipeListener: void onSwipe(int)> (1)
<com.android.camera.PhotoModule$AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)> (1)
<com.android.camera.CameraModule: void onSingleTapUp(android.view.View,int,int)> ()
<com.android.camera.PhotoController: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.camera.VideoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.SecureCameraActivity: void onUserInteraction()> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void onUserInteraction()> (1)
<com.android.gallery3d.app.AppBridge: void onFullScreenChanged(boolean)> (2)
<com.android.camera.SecureCameraActivity: void onFullScreenChanged(boolean)> (2)
<com.android.gallery3d.ui.GestureRecognizer$Listener: void onUp()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.CameraScreenNail$Listener: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoController: void onCountDownFinished()> ()
<com.android.camera.ui.CountDownView$OnCountDownFinishedListener: void onCountDownFinished()> (1)
<com.android.camera.PhotoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.PhotoModule: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonFocus(boolean)> (1)
<com.android.camera.PreviewGestures: boolean dispatchTouch(android.view.MotionEvent)> (2)
<com.android.camera.PhotoUI: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.camera.CameraModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.CameraScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.camera.ui.CountDownView: void remainingSecondsChanged(int)> (2)
<com.android.camera.CameraModule: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ShutterButton: void callShutterButtonFocus(boolean)> (2)
<com.android.camera.PhotoUI: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.VideoUI: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.PreviewGestures$SingleTapListener: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.gallery3d.ui.DownUpDetector$DownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SurfaceTextureScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (2)
<com.android.camera.ui.CountDownView: void access$200(com.android.camera.ui.CountDownView,int)> (1)
<com.android.camera.ui.CountDownView: void startCountDown(int,boolean)> (1)
<com.android.camera.CameraActivity: boolean onKeyUp(int,android.view.KeyEvent)> (4)
<com.android.camera.ShutterButton: void access$000(com.android.camera.ShutterButton,boolean)> (1)
<com.android.camera.ShutterButton: void drawableStateChanged()> (2)
<com.android.camera.PhotoModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.VideoModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void setState(boolean,android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail: void access$001(com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.gallery3d.ui.ScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (3)
<com.android.camera.PhotoUI: void startCountDown(int,boolean)> (1)
<com.android.camera.ActivityBase: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<com.android.camera.SecureCameraActivity: boolean onKeyUp(int,android.view.KeyEvent)> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.camera.ShutterButton$1: void run()> (1)
<com.android.camera.CameraModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail$1: void onDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.gallery3d.ui.PhotoView: com.android.gallery3d.ui.PhotoFallbackEffect buildFallbackEffect(com.android.gallery3d.ui.GLView,com.android.gallery3d.glrenderer.GLCanvas)> ()
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.TileImageView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.camera.PhotoModule: void onShutterButtonClick()> (4)
<com.android.camera.CameraActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.ui.GestureRecognizer: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail$DrawClient: void onDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.camera.PhotoModule$1: void run()> (1)
<com.android.camera.SecureCameraActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail: void directDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (3)
<com.android.camera.CaptureAnimManager: boolean drawAnimation(com.android.gallery3d.glrenderer.GLCanvas,com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.RawTexture,int,int,int,int)> (1)
<com.android.camera.SwitchAnimManager: boolean drawAnimation(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int,com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.RawTexture)> (1)
<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void checkPermission(int,int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void access$200(android.hardware.location.GeofenceHardwareService,int,int,int)> (6)
<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean removeGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean pauseGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean removeGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean removeGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (1)
<android.hardware.location.IGeofenceHardware$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)> ()
<android.hardware.location.GeofenceHardwareService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (20)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.bluetooth.hfp.HeadsetPhoneState: void listenForPhoneState(boolean)> (4)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.deskclock.TimerRingService: void onCreate()> (1)
<com.android.deskclock.TimerRingService: void onDestroy()> (1)
<com.android.dialer.calllog.CallLogFragment: void registerPhoneCallReceiver()> (1)
<com.android.dialer.calllog.CallLogFragment: void unregisterPhoneCallReceiver()> (2)
<com.android.dialer.dialpad.DialpadFragment: void onPause()> (1)
<com.android.dialer.dialpad.DialpadFragment: void onResume()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneGlobals,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.CallLogger)> (1)
<com.android.phone.OtaStartupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void addPhoneStateListener()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void removePhoneStateListener()> (2)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.RadioInfo: void onPause()> (1)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (2)
<com.android.bluetooth.hfp.HeadsetPhoneState: void cleanup()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processSlcConnected()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void enter()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void cleanup()> (1)
<com.android.dialer.calllog.CallLogFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.dialer.calllog.CallLogFragment: void onDestroy()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.phone.CallNotifier: com.android.phone.CallNotifier init(com.android.phone.PhoneGlobals,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.CallLogger)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.util.State: void enter()> (29)
<com.android.bluetooth.hfp.HeadsetService: boolean cleanup()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addStatusBarWindow()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (7)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.GpsLocationProvider: void requestRefLocation(int)> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo(java.lang.String)> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getAllCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> (2)
<com.android.settings.RadioInfo: void onCreate(android.os.Bundle)> (1)
<com.android.settings.RadioInfo: void updateCellInfoListRate()> (2)
<com.android.settings.RadioInfo: void access$3400(com.android.settings.RadioInfo)> (1)
<com.android.settings.RadioInfo$CellInfoListRateHandler: void onClick(android.view.View)> (1)
Permission:android.permission.CHANGE_NETWORK_STATE
420 Callers:
<com.android.server.ConnectivityService: void enforceChangePermission()> (7)
<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[])> (4)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> ()
<android.net.IConnectivityManager$Stub: boolean requestRouteToHostAddress(int,byte[])> (2)
<com.android.server.ConnectivityService: boolean requestRouteToHost(int,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> ()
<android.net.IConnectivityManager$Stub: void setMobileDataEnabled(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[])> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> ()
<android.net.IConnectivityManager$Stub: boolean requestRouteToHost(int,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean requestRouteToHost(int,int)> ()
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (4)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> (5)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)> (2)
<com.android.development.Connectivity: void onRoutedRequest(int)> (2)
<com.android.mms.transaction.Transaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (6)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (5)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (8)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<com.android.phone.MobileNetworkSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()> (2)
<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()> (2)
<com.android.settings.DataUsageSummary: void setMobileDataEnabled(boolean)> (1)
<com.android.settings.RadioInfo$12: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.server.location.GpsLocationProvider: void handleUpdateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.development.Connectivity: void onRoutedHttpRequest()> (1)
<com.android.development.Connectivity: void onRoutedSocketRequest()> (1)
<com.android.mms.transaction.NotificationTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.ReadRecTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.RetrieveTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.SendTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> (7)
<com.android.development.Connectivity: void access$3600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean disableDataConnectivity()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean disableDataConnectivity()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean enableDataConnectivity()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean enableDataConnectivity()> (2)
<com.android.settings.DataUsageSummary: void access$500(com.android.settings.DataUsageSummary,boolean)> (2)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.server.location.GpsLocationProvider: void access$2500(com.android.server.location.GpsLocationProvider,int,android.net.NetworkInfo)> (1)
<com.android.development.Connectivity: void access$3100(com.android.development.Connectivity)> (1)
<com.android.development.Connectivity: void access$3000(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (4)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.internal.util.State: void exit()> (101)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.internal.telephony.ITelephony: boolean disableDataConnectivity()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephony: boolean enableDataConnectivity()> (1)
<com.android.settings.DataUsageSummary$4: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DataUsageSummary$ConfirmDataDisableFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[])> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])> (2)
<com.android.internal.util.State: void enter()> (29)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void sendNotifyRespInd(int)> (1)
<com.android.mms.transaction.RetrieveTransaction: void sendAcknowledgeInd(com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.server.ConnectivityService: void enforceTetherChangePermission()> (3)
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> ()
<android.net.IConnectivityManager$Stub: int setUsbTethering(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager: int setUsbTethering(boolean)> (1)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<android.net.ConnectivityManager: int setUsbTethering(boolean)> (1)
<android.net.ConnectivityManager: int tether(java.lang.String)> (2)
<android.net.ConnectivityManager: int untether(java.lang.String)> (2)
<com.android.settings.TetherSettings: void setUsbTethering(boolean)> (2)
<android.net.wifi.WifiStateMachine: boolean startTethering(java.util.ArrayList)> (1)
<com.android.bluetooth.pan.PanService: java.lang.String enableTethering(java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void stopTethering()> (1)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.TetherSettings: void startTethering()> (2)
<android.net.wifi.WifiStateMachine: boolean access$22000(android.net.wifi.WifiStateMachine,java.util.ArrayList)> (1)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<android.net.wifi.WifiStateMachine: void access$23200(android.net.wifi.WifiStateMachine)> (1)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void startProvisioningIfNecessary(int)> (2)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<com.android.settings.TetherSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (7)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (3)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleCaptivePortalTrackerCheck(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$400(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile,android.preference.CheckBoxPreference)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$1200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$1500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.server.ConnectivityService: void access$2400(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (3)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
Permission:android.permission.CALL_PHONE
26 Callers:
<com.android.phone.PhoneInterfaceManager: void enforceCallPermission()> (2)
<com.android.phone.PhoneInterfaceManager: boolean endCall()> (2)
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean endCall()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean endCall()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: void call(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.ITelephony: boolean endCall()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephony: void call(java.lang.String,java.lang.String)> ()
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.mms.ui.ComposeMessageActivity: void dialRecipient()> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void dialRecipient()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
Permission:android.permission.WRITE_SETTINGS
1139 Callers:
<com.android.providers.settings.SettingsProvider: android.os.Bundle callFromPackage(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)> (1)
<com.android.server.power.PowerManagerService: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> ()
<android.os.IPowerManager$Stub: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void setStayOnSetting(int)> (1)
<com.android.server.power.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.svc.PowerCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> (1)
<android.app.ActivityManagerNative: void updatePersistentConfiguration(android.content.res.Configuration)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void updatePersistentConfiguration(android.content.res.Configuration)> (3)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.AccessibilitySettings: void handleToggleLargeTextPreferenceClick()> (1)
<com.android.settings.DisplaySettings: void writeFontSizePreference(java.lang.Object)> (1)
<com.android.settings.Display: void onClick(android.view.View)> (1)
<com.android.settings.AccessibilitySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DisplaySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void updateShortcut(char,android.content.Intent)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> (17)
<com.android.browser.SystemAllowGeolocationOrigins: void start()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()> (1)
<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)> (1)
<com.android.server.am.CoreSettingsObserver: void beginObserveCoreSettings()> (1)
<com.android.server.CertBlacklister: void registerObservers(android.content.ContentResolver)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void <init>(com.android.server.InputMethodManagerService,android.os.Handler)> (1)
<com.android.server.location.LocationBlacklist: void init()> (1)
<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)> (1)
<com.android.server.LocationManagerService: void systemReady()> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void <init>(com.android.server.NotificationManagerService,android.os.Handler)> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.search.SearchManagerService$GlobalSearchProviderObserver: void <init>(com.android.server.search.SearchManagerService,android.content.ContentResolver)> ()
<com.android.settings.AccessibilitySettings$SettingsContentObserver: void register(android.content.ContentResolver)> (4)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings$SettingsObserver: void resume()> (1)
<com.android.settings.NotificationAccessSettings: void <init>()> (2)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void resetUserSetupObserver()> (2)
<com.android.browser.Controller: void <init>(android.app.Activity)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.CoreSettingsObserver: void <init>(com.android.server.am.ActivityManagerService)> (1)
<com.android.server.CertBlacklister: void <init>(android.content.Context)> (1)
<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.StatusBarManagerService,com.android.server.LightsService)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.settings.AccessibilitySettings$2: void register(android.content.ContentResolver)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment$1: void register(android.content.ContentResolver)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onResume()> (3)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void userSwitched(int)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.am.ActivityManagerService: void installSystemProviders()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void userSwitched(int)> (3)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.BaseStatusBar$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.tv.TvStatusBar: void userSwitched(int)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> (29)
<android.media.AudioService$SettingsObserver: void <init>(android.media.AudioService)> (1)
<android.net.CaptivePortalTracker$ProvisioningObserver: void <init>(android.net.CaptivePortalTracker)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WifiWatchdogStateMachine: void registerForSettingsChanges()> (1)
<android.net.wifi.WifiWatchdogStateMachine: void registerForWatchdogToggle()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void watchForDeviceProvisioning()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone,android.telephony.CellInfo)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase$DataRoamingSettingObserver: void register()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.SMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)> (3)
<com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler: void <init>(android.content.Context,java.util.concurrent.atomic.AtomicBoolean)> (1)
<com.android.server.BackupManagerService: void <init>(android.content.Context)> (1)
<com.android.server.ConnectivityService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.display.OverlayDisplayAdapter$1: void run()> (1)
<com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)> (1)
<com.android.server.NetworkTimeUpdateService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.NsdService$NsdStateMachine: void registerForNsdSetting()> (1)
<com.android.server.SamplingProfilerService: void registerSettingObserver(android.content.Context)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.server.wifi.WifiController: void registerForStayAwakeModeChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiController: void registerForWifiIdleTimeChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiController: void registerForWifiSleepPolicyChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiNotificationController$NotificationEnabledSettingObserver: void register()> (1)
<com.android.server.wifi.WifiService: void registerForScanModeChange()> (1)
<com.android.settings.AirplaneModeEnabler: void resume()> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel$BugreportObserver: void startObserving()> (1)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.net.CaptivePortalTracker: void <init>(android.content.Context,android.net.IConnectivityManager)> (1)
<com.android.server.wifi.WifiService: void <init>(android.content.Context)> (1)
<android.net.wifi.WifiWatchdogStateMachine: void <init>(android.content.Context)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMALTEPhone)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone,android.telephony.CellInfo)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void <init>(com.android.internal.telephony.cdma.CDMAPhone,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)> (3)
<com.android.internal.telephony.SmsUsageMonitor: void <init>(android.content.Context)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<com.android.server.display.WifiDisplayAdapter$1: void run()> (1)
<com.android.server.NetworkTimeUpdateService: void systemReady()> (1)
<com.android.server.NsdService$NsdStateMachine: void <init>(com.android.server.NsdService,java.lang.String)> (1)
<com.android.server.SamplingProfilerService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiController: void initializeAndRegisterForSettingsChange(android.os.Looper)> (1)
<com.android.server.wifi.WifiNotificationController: void <init>(android.content.Context,android.net.wifi.WifiStateMachine)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void <init>(android.content.Context)> (1)
<android.net.CaptivePortalTracker: android.net.CaptivePortalTracker makeCaptivePortalTracker(android.content.Context,android.net.IConnectivityManager)> (1)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor getInstance(android.content.Context)> (47)
<com.android.internal.telephony.cdma.CDMALTEPhone: void initSstIcc()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void initSstIcc()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.NsdService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbService: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiController: void <init>(android.content.Context,com.android.server.wifi.WifiService,android.os.Looper)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void <init>(android.content.Context,com.android.systemui.statusbar.phone.QuickSettingsContainerView)> (1)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void <init>(android.content.Context,com.android.internal.policy.impl.keyguard.CameraWidgetFrame$Callbacks,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo,android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void onDetachedFromWindow()> (4)
<com.android.internal.policy.impl.keyguard.CarrierText: com.android.internal.policy.impl.keyguard.CarrierText$StatusMode getStatusForIccState(com.android.internal.telephony.IccCardConstants$State)> (2)
<com.android.internal.policy.impl.keyguard.CarrierText: void onAttachedToWindow()> (2)
<com.android.internal.policy.impl.keyguard.CarrierText: void onDetachedFromWindow()> (2)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void onDetachedFromWindow()> (3)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void onFinishInflate()> (3)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void updateEmergencyCallButton(com.android.internal.telephony.IccCardConstants$State,int)> (2)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleCancel()> (1)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleReportFailedAttempt()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void maybeStartBiometricUnlock()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void onDetachedFromWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void onPause()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: int getFailedAttempts()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void reportFailedUnlockAttempt()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void reportSuccessfulUnlockAttempt()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void checkAppWidgetConsistency()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void cleanupAppWidgetIds()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void getInitialTransportState()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onDetachedFromWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onScreenTurnedOff()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void reportFailedUnlockAttempt()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showNextSecurityScreenOrFinish(boolean)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showPrimarySecurityScreen(boolean)> (6)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showTimeoutDialog()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void displayDefaultSecurityMessage()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void resetState()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: boolean isBiometricUnlockSuppressed()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()> (8)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void onPause()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void updateTargets()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView$4$1: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: void onDetachedFromWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: boolean isSecure()> (6)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void <init>(android.content.Context,com.android.internal.widget.LockPatternUtils)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: void onAttachedToWindow()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: void onDetachedFromWindow()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: void performAppWidgetSizeCallbacksIfNecessary()> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.server.NsdService: com.android.server.NsdService create(android.content.Context)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: com.android.internal.policy.impl.keyguard.CameraWidgetFrame create(android.content.Context,com.android.internal.policy.impl.keyguard.CameraWidgetFrame$Callbacks,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: java.lang.CharSequence getCarrierHelpTextForSimState(com.android.internal.telephony.IccCardConstants$State,java.lang.String,java.lang.String)> ()
<com.android.internal.policy.impl.keyguard.CarrierText: java.lang.CharSequence getCarrierTextForSimState(com.android.internal.telephony.IccCardConstants$State,java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onPhoneStateChanged(int)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (8)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void access$100(com.android.internal.policy.impl.keyguard.EmergencyButton,com.android.internal.telephony.IccCardConstants$State,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void access$200(com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityView: void onPause()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityView: void onResume(int)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: int getFailedAttempts()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void reportFailedUnlockAttempt()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void reportSuccessfulUnlockAttempt()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onFinishInflate()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$200(com.android.internal.policy.impl.keyguard.KeyguardHostView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void onScreenTurnedOff()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void onScreenTurnedOff()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$1500(com.android.internal.policy.impl.keyguard.KeyguardHostView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean handleMenuKey()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$900(com.android.internal.policy.impl.keyguard.KeyguardHostView,boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void dismiss()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean handleBackKey()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onScreenTurnedOn()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void show()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void <init>(android.content.Context)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void access$1100(com.android.internal.policy.impl.keyguard.KeyguardPatternView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void reset()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void resetState()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getAlternateFor(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean isSecure()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean showNextSecurityScreenIfPresent()> ()
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void verifyUnlock()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void access$700(com.android.internal.policy.impl.keyguard.KeyguardSelectorView)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void onFinishInflate()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onUserSwitching(int)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: boolean isDismissable()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void adjustStatusBarLocked()> (4)
<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecure()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int finishPostLayoutPolicyLw()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()> (3)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void onAttachedToWindow()> (4)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void performAppWidgetSizeCallbacksIfNecessary()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: void access$100(com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: void onMeasure(int,int)> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void addDefaultWidgets()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: void updateCarrierText(com.android.internal.telephony.IccCardConstants$State,java.lang.CharSequence,java.lang.CharSequence)> (2)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handlePhoneStateChanged(java.lang.String)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void sendUpdates(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$1: void onRotationChanged(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showSecurityScreen(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (7)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: void onPause()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: void onScrollStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void verifyPasswordAndUnlock()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView$1: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleUnlock(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onBootCompleted()> (9)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void <init>(android.content.Context)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleNotifyScreenOff()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewManager$ViewManagerHost: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void dismiss(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void dismiss()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void onScreenTurnedOn()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void show()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void show(android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$3: void onFinish()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onWindowFocusChanged(boolean)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityView: void reset()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView$3: void onFinish()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void reset()> (7)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void wakeWhenReadyTq(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void verifyUnlock()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showBackupSecurityScreen()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleUserSwitching(int,android.os.IRemoteCallback)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$19: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleShow(android.os.Bundle)> (1)
<android.view.WindowManagerPolicy: boolean isKeyguardSecure()> (1)
<android.view.WindowManagerPolicy: int finishPostLayoutPolicyLw()> (1)
<android.view.WindowManagerPolicy: void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (2)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void access$100(com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void onMeasure(int,int)> (4)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void registerCallback(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback)> (10)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor,com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void reportSimUnlocked()> (1)
<android.view.IRotationWatcher$Stub$Proxy: void onRotationChanged(int)> ()
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onKeyguardVisibilityChanged(boolean)> (8)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onUserSwitchComplete(int)> (8)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$OnChallengeScrolledListener: void onScrollStateChanged(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void verifyPasswordAndUnlock()> (2)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onBootCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void <init>(android.content.Context)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2000(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void dismiss(boolean)> (11)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void dismiss()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleNotifyScreenOn(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: void reset()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void onResume(int)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void onWindowFocusChanged(boolean)> (7)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void reset()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void wakeWhenReadyTq(int)> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$1700(com.android.internal.policy.impl.keyguard.KeyguardHostView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onDevicePolicyManagerStateChanged()> (10)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1700(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2500(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.server.wm.WindowManagerService: boolean isKeyguardSecure()> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<android.view.WindowManagerPolicy: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (11)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleKeyguardVisibilityChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onUserSwitchComplete(int)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void sendInitialListenerUpdates()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void setScrollState(int)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView$1: void onClick(android.view.View)> (1)
<com.android.internal.widget.LockPatternView: void notifyPatternDetected()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void resetStateLocked(android.os.Bundle)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void showLocked(android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$4: boolean onClickHandler(android.view.View,android.app.PendingIntent,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$1: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView$4$1: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$11: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2100(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (7)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void onResume(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void onWindowFocusChanged(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void onWindowFocusChanged(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: void onWindowFocusChanged(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: void onWindowFocusChanged(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1900(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void showBackupSecurity()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onDevicePolicyManagerStateChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onClockVisibilityChanged()> (11)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2300(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,boolean)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void notifyScreenOnLocked(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void wakeWhenReady(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (13)
<android.view.IWindowManager$Stub$Proxy: boolean isKeyguardSecure()> ()
<android.view.IWindowManager$Stub: boolean isKeyguardSecure()> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedLoop()> (1)
<com.android.server.power.Notifier: void sendGoToSleepBroadcast(int)> (1)
<com.android.server.power.Notifier: void sendWakeUpBroadcast()> (1)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleCarrierInfoUpdate()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onRefreshCarrierInfo(java.lang.CharSequence,java.lang.CharSequence)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$500(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor,int)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void setOnChallengeScrolledListener(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$OnChallengeScrolledListener)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void animateChallengeTo(int,int)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void completeChallengeScroll()> (3)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void onFadeEnd(boolean)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void onFadeStart(boolean)> (1)
<com.android.internal.widget.LockPatternView: void handleActionUp(android.view.MotionEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$100(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLocked(android.os.Bundle)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2200(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,int)> (8)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void showBackupSecurity()> (2)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onClockVisibilityChanged()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onWakeMotionWhenKeyguardShowingTq()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$2: void keyguardDone(boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$10: void run()> (1)
<android.view.IWindowManager: boolean isKeyguardSecure()> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (20)
<com.android.server.power.Notifier: void sendNextBroadcast()> (3)
<com.android.phone.SipCallOptionHandler: void access$300(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$200(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor)> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void showChallenge(boolean,int)> (2)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$4: void run()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void cancelTransitionsInProgress()> (2)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void access$200(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout,boolean)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void access$100(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout,boolean)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2600(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLocked()> (4)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$400(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor)> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (4)
<com.android.internal.policy.impl.PhoneWindowManager: void waitForKeyguard(android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$ViewMediatorCallback: void keyguardDone(boolean)> (2)
<android.app.KeyguardManager: boolean isKeyguardSecure()> (4)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration()> (2)
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> (3)
<com.android.server.wm.WindowManagerService: void access$300(com.android.server.wm.WindowManagerService)> (5)
<com.android.server.wm.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)> (2)
<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)> (2)
<com.android.server.wm.WindowManagerService: void reevaluateStatusBarVisibility()> (1)
<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)> (4)
<com.android.server.wm.WindowManagerService: void setCurrentUser(int)> (1)
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.wm.WindowManagerService: void setOverscan(int,int,int,int,int)> (2)
<com.android.server.wm.WindowManagerService: void setUniverseTransformLocked(com.android.server.wm.WindowState,float,float,float,float,float,float,float)> (1)
<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)> (6)
<com.android.server.power.Notifier: void access$500(com.android.server.power.Notifier)> (4)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void showChallenge(boolean)> (5)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void showChallenge(int)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void fadeChallenge(boolean)> (2)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$9: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$9: void onAnimationStart(android.animation.Animator)> (1)
<com.android.internal.widget.LockPatternView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardTimeout(android.os.Bundle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLaterLocked()> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.server.wm.KeyguardDisableHandler$KeyguardTokenWatcher: void acquired()> (1)
<com.android.server.wm.KeyguardDisableHandler$KeyguardTokenWatcher: void released()> (1)
<com.android.server.wm.WindowManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)> (1)
<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<android.media.AudioService: void startVoiceBasedInteractions(boolean)> (1)
<com.android.providers.media.MtpService: void updateDisabledStateLocked()> (2)
<com.android.server.InputMethodManagerService: boolean isScreenLocked()> (2)
<com.android.server.InputMethodManagerService: void refreshImeWindowVisibilityLocked()> (2)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (1)
<com.android.server.wm.WindowManagerService: int handleAppTransitionReadyLocked(com.android.server.wm.WindowList)> (1)
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> (8)
<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)> (5)
<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)> (2)
<com.android.server.wm.WindowManagerService: void requestTraversalLocked()> (4)
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityLocked(com.android.server.wm.DisplayContent,int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySizeLocked(com.android.server.wm.DisplayContent,int,int)> (2)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void reevaluateStatusBarVisibility()> (2)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<android.view.IWindowManager$Stub$Proxy: void setOverscan(int,int,int,int,int)> ()
<android.view.IWindowManager$Stub: void setOverscan(int,int,int,int,int)> (2)
<com.android.server.wm.WindowAnimator: void testTokenMayBeDrawnLocked()> (1)
<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,int)> (2)
<com.android.server.power.Notifier$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier: void updatePendingBroadcastLocked()> (2)
<com.android.internal.policy.impl.keyguard.ChallengeLayout: void showChallenge(boolean)> ()
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onWindowFocusChanged(boolean)> (3)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$6: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void hideBouncer()> (3)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void showBouncer()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void fadeInChallenge()> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void fadeOutChallenge()> (1)
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onDreamingStarted()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.server.wm.InputMonitor: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<android.media.AudioService: void filterVoiceInputKeyEvent(android.view.KeyEvent,boolean)> (1)
<com.android.providers.media.MtpService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.providers.media.MtpService: void onCreate()> (1)
<com.android.server.InputMethodManagerService: boolean needsToShowImeSwitchOngoingNotification()> (1)
<com.android.server.InputMethodManagerService: void showInputMethodMenuInternal(boolean)> (2)
<com.android.server.InputMethodManagerService: void access$000(com.android.server.InputMethodManagerService)> (1)
<com.android.server.InputMethodManagerService: void setInputMethodLocked(java.lang.String,int)> (4)
<android.app.ActivityManagerNative: void updateConfiguration(android.content.res.Configuration)> (2)
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> ()
<android.view.IWindowManager$Stub: void prepareAppTransition(int,boolean)> (2)
<com.android.server.am.ActivityStack: boolean moveTaskToBackLocked(int,com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.ActivityRecord,android.os.Bundle)> (3)
<com.android.server.am.ActivityStack: void updateTransitLocked(int,android.os.Bundle)> (1)
<com.android.server.wm.WindowManagerService: void resumeRotationLocked()> (1)
<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()> (4)
<com.android.server.wm.WindowManagerService: void updateResizingWindows(com.android.server.wm.WindowState)> (1)
<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl createSurfaceLocked()> (1)
<com.android.server.wm.WindowAnimator: void animateLocked()> (1)
<com.android.server.wm.WindowManagerService: void requestTraversal()> (1)
<com.android.server.wm.WindowManagerService: void clearForcedDisplayDensity(int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensity(int,int)> (2)
<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver$1: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<android.view.IWindowManager: void setNewConfiguration(android.content.res.Configuration)> ()
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<android.view.IWindowManager: void setOverscan(int,int,int,int,int)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)> (1)
<com.android.server.power.Notifier: void onGoToSleepFinished()> (1)
<com.android.server.power.Notifier: void onWakeUpStarted()> (1)
<com.android.internal.policy.impl.keyguard.ChallengeLayout: void hideBouncer()> ()
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$5: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: void requestChildFocus(android.view.View,android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.ChallengeLayout: void showBouncer()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: void onPageSwitching(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: void onPageBeginMoving()> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.wm.InputMonitor: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$15: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<android.media.AudioService: void filterMediaKeyEvent(android.view.KeyEvent,boolean)> (2)
<com.android.server.InputMethodManagerService: void showInputMethodMenu()> (1)
<com.android.server.InputMethodManagerService: void showInputMethodSubtypeMenu()> (1)
<com.android.server.InputMethodManagerService$ImmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.server.InputMethodManagerService: void updateFromSettingsLocked(boolean)> (5)
<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)> (7)
<android.view.IWindowManager: void prepareAppTransition(int,boolean)> ()
<com.android.server.am.ActivityStack: void moveHomeToFrontLocked()> (2)
<com.android.server.wm.DragState: void unregister()> (4)
<com.android.server.wm.WindowManagerService: void access$400(com.android.server.wm.WindowManagerService)> (2)
<com.android.server.wm.WindowAnimator: void access$000(com.android.server.wm.WindowAnimator)> (1)
<com.android.server.display.DisplayManagerService$WindowManagerFuncs: void requestTraversal()> (2)
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplayDensity(int)> ()
<android.view.IWindowManager$Stub: void clearForcedDisplayDensity(int)> (2)
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplayDensity(int,int)> ()
<android.view.IWindowManager$Stub: void setForcedDisplayDensity(int,int)> (2)
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplaySize(int)> ()
<android.view.IWindowManager$Stub: void clearForcedDisplaySize(int)> (2)
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize(int,int,int)> ()
<android.view.IWindowManager$Stub: void setForcedDisplaySize(int,int,int)> (2)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<com.android.commands.wm.Wm: void runDisplayOverscan()> (1)
<com.android.server.power.PowerManagerService: void sendPendingNotificationsLocked()> (3)
<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: void showBouncer(boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void onPageSwitching(android.view.View,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void onPageBeginMoving()> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService: void notifySwitch(long,int,int)> ()
<com.android.server.input.InputManagerService: int interceptMotionBeforeQueueingWhenScreenOff(int)> ()
<android.media.AudioService: void dispatchMediaKeyEvent(android.view.KeyEvent)> (2)
<android.media.AudioService: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> ()
<com.android.internal.view.IInputMethodManager$Stub: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void onChange(boolean)> (1)
<com.android.server.InputMethodManagerService: void buildInputMethodListLocked(java.util.ArrayList,java.util.HashMap,boolean)> (5)
<com.android.server.InputMethodManagerService: void resetAllInternalStateLocked(boolean,boolean)> (2)
<com.android.internal.app.LocalePicker: void updateLocale(java.util.Locale)> (2)
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String)> (3)
<com.android.providers.settings.SettingsHelper: void setLocaleData(byte[],int)> (2)
<com.android.server.UiModeManagerService: void sendConfigurationLocked()> (1)
<com.android.server.wm.WindowManagerService: void displayReady()> (1)
<com.android.server.wm.WindowManagerService: void sendNewConfiguration()> (11)
<com.android.server.am.ActivityStack: void moveHomeToFrontFromLaunchLocked(int)> (1)
<com.android.server.wm.DragState: void endDragLw()> (3)
<com.android.server.wm.Session: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.WindowManagerService: android.os.IBinder prepareDragSurface(android.view.IWindow,android.view.SurfaceSession,int,int,int,android.view.Surface)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)> (3)
<com.android.server.wm.WindowAnimator$1: void run()> (1)
<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)> (10)
<android.view.IWindowManager: void clearForcedDisplayDensity(int)> (1)
<android.view.IWindowManager: void setForcedDisplayDensity(int,int)> (1)
<android.view.IWindowManager: void clearForcedDisplaySize(int)> (1)
<android.view.IWindowManager: void setForcedDisplaySize(int,int,int)> (1)
<com.android.server.am.ActivityManagerService$10$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.commands.wm.Wm: void onRun()> (1)
<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int)> (3)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (21)
<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void handleDreamFinishedLocked()> (1)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.server.power.PowerManagerService: void wakeUpInternal(long)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void onPageSwitching(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.PagedView$PageSwitchListener: void onPageSwitching(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void onPageBeginMoving()> (2)
<com.android.internal.policy.impl.keyguard.PagedView: void onPageBeginMoving()> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> (1)
<com.android.server.input.InputManagerService: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.media.IAudioService$Stub$Proxy: void dispatchMediaKeyEvent(android.view.KeyEvent)> ()
<android.media.IAudioService$Stub: void dispatchMediaKeyEvent(android.view.KeyEvent)> (2)
<android.media.IAudioService$Stub$Proxy: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> ()
<android.media.IAudioService$Stub: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (2)
<com.android.internal.view.IInputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.internal.view.IInputMethodManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged()> (6)
<com.android.server.InputMethodManagerService: void systemReady(com.android.server.StatusBarManagerService)> (1)
<com.android.server.InputMethodManagerService: void resetStateIfCurrentLocaleChangedLocked()> (2)
<com.android.server.InputMethodManagerService: void switchUserLocked(int)> (1)
<com.android.settings.inputmethod.UserDictionaryLocalePicker: void updateLocale(java.util.Locale)> (1)
<com.android.settings.LocalePicker: void updateLocale(java.util.Locale)> (3)
<com.android.internal.telephony.MccTable: void setLocaleFromMccIfNeeded(android.content.Context,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (6)
<com.android.internal.telephony.uicc.RuimRecords: void setLocaleFromCsim()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)> (2)
<com.android.server.UiModeManagerService: void sendConfigurationAndStartDreamOrDockAppLocked(java.lang.String)> (2)
<com.android.server.wm.WindowManagerService$DragInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> ()
<android.view.IWindowSession$Stub: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.Session: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager$Stub$Proxy: void startFreezingScreen(int,int)> ()
<android.view.IWindowManager$Stub: void startFreezingScreen(int,int)> (2)
<com.android.server.display.DisplayManagerService: void access$1400(com.android.server.display.DisplayManagerService,boolean)> (1)
<com.android.server.display.DisplayManagerService: void blankAllDisplaysFromPowerManager()> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void setDisplayHasContent(int,boolean,boolean)> (1)
<com.android.server.display.DisplayManagerService: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)> (1)
<com.android.server.display.DisplayManagerService: void setInputManager(com.android.server.display.DisplayManagerService$InputManagerFuncs)> (1)
<com.android.server.display.DisplayManagerService: void setWindowManager(com.android.server.display.DisplayManagerService$WindowManagerFuncs)> (1)
<com.android.server.display.DisplayManagerService: void unblankAllDisplaysFromPowerManager()> (1)
<com.android.commands.wm.Wm: void runDisplayDensity()> (1)
<com.android.commands.wm.Wm: void runDisplaySize()> (1)
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<com.android.server.power.PowerManagerService: boolean updateWakefulnessLocked(int)> (1)
<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)> (2)
<com.android.server.power.PowerManagerService: void access$900(com.android.server.power.PowerManagerService)> (4)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,android.os.WorkSource,int,int)> (1)
<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleBootCompletedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.power.PowerManagerService: void handleScreenOnBlockerReleased()> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()> (1)
<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void napInternal(long)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)> (1)
<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)> (2)
<com.android.server.power.PowerManagerService: void wakeUpFromNative(long)> ()
<com.android.internal.policy.impl.keyguard.PagedView: void notifyPageSwitching(int)> (4)
<com.android.internal.policy.impl.keyguard.PagedView: void pageBeginMoving()> (5)
<com.android.systemui.statusbar.BaseStatusBar$NotificationClicker: void onClick(android.view.View)> (1)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void dispatchMediaKeyEvent(android.view.KeyEvent)> (3)
<android.media.IAudioService: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (1)
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> ()
<com.android.server.InputMethodManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (15)
<com.android.server.am.UsageStatsService$2: void onSomePackagesChanged()> (1)
<com.android.server.LocationManagerService$4: void onSomePackagesChanged()> (1)
<com.android.server.ServiceWatcher$2: void onSomePackagesChanged()> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService: void access$1100(com.android.server.InputMethodManagerService)> (1)
<com.android.server.InputMethodManagerService: void access$1000(com.android.server.InputMethodManagerService,int)> (1)
<com.android.settings.LocalePicker$1: void run()> (1)
<com.android.settings.LocalePicker: void onLocaleSelected(java.util.Locale)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.uicc.RuimRecords: void onAllRecordsLoaded()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.server.UiModeManagerService: void updateAfterBroadcastLocked(java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService: void updateLocked(int,int)> (7)
<android.view.IWindowSession: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (1)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> ()
<android.view.IWindowSession$Stub: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager: void startFreezingScreen(int,int)> ()
<com.android.server.display.DisplayManagerService$DisplayAdapterListener: void onTraversalRequested()> (1)
<com.android.server.power.PowerManagerService$DisplayBlankerImpl: void blankAllDisplays()> (1)
<com.android.server.display.DisplayManagerService: void access$1100(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void access$1200(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void access$1300(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayDevice)> (1)
<com.android.server.wm.WindowManagerService: boolean computeScreenConfigurationLocked(android.content.res.Configuration)> (4)
<com.android.server.power.PowerManagerService$DisplayBlankerImpl: void unblankAllDisplays()> (2)
<android.app.IActivityManager: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.os.BaseCommand: void run(java.lang.String[])> (3)
<com.android.server.power.PowerManagerService: void goToSleepFromNative(long,int)> ()
<com.android.server.power.PowerManagerService$1: void onProximityNegative()> (1)
<com.android.server.power.PowerManagerService$1: void onProximityPositive()> (1)
<com.android.server.power.PowerManagerService$1: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$DockReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$1300(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void checkIfBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$1900(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2000(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1600(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1800(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2300(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void userActivityFromNative(long,int,int)> ()
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void notifyPageSwitching(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void notifyPageSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void setCurrentPage(int)> (2)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPage(int,int,int,boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void pageBeginMoving()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void pageBeginMoving()> (1)
<com.android.internal.policy.impl.keyguard.PagedView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.policy.impl.keyguard.PagedView: void determineScrollingStart(android.view.MotionEvent,float)> (3)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.media.Media: void sendMediaKey(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void handleMediaKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: void handleMediaKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)> (2)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.app.ResolverActivity$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.accessibility.AccessibilityManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.am.UsageStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.LocationManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.ServiceWatcher$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService$3: void onUserSwitching(int,android.os.IRemoteCallback)> (2)
<com.android.internal.app.LocalePicker$LocaleSelectionListener: void onLocaleSelected(java.util.Locale)> (1)
<com.android.internal.telephony.uicc.IccRecords: void onAllRecordsLoaded()> ()
<com.android.internal.telephony.uicc.RuimRecords: void onRecordLoaded()> (2)
<com.android.server.UiModeManagerService: void access$000(com.android.server.UiModeManagerService,java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService: void access$400(com.android.server.UiModeManagerService,int,int)> (1)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<com.android.server.UiModeManagerService: void updateDockState(int)> (1)
<com.android.server.UiModeManagerService: void updateTwilight()> (1)
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (591)
<com.android.server.wm.Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (1)
<com.android.server.display.DisplayAdapter$Listener: void onTraversalRequested()> (1)
<com.android.server.power.DisplayBlanker: void blankAllDisplays()> (1)
<com.android.server.display.DisplayManagerService$DisplayAdapterListener: void onDisplayDeviceEvent(com.android.server.display.DisplayDevice,int)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()> (2)
<com.android.server.power.DisplayBlanker: void unblankAllDisplays()> (1)
<com.android.server.power.PowerManagerService: void init(android.content.Context,com.android.server.LightsService,com.android.server.am.ActivityManagerService,com.android.server.BatteryService,com.android.internal.app.IBatteryStats,com.android.server.display.DisplayManagerService)> (1)
<com.android.commands.am.Am: void run(java.lang.String[])> (2)
<com.android.commands.media.Media: void run(java.lang.String[])> (2)
<com.android.commands.wm.Wm: void run(java.lang.String[])> (2)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityNegative()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityPositive()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$BatteryReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$2100(com.android.server.power.PowerManagerService)> (3)
<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()> (2)
<com.android.server.power.PowerManagerService$ScreenOnBlockerImpl: void release()> (1)
<com.android.server.power.PowerManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)> (1)
<com.android.server.power.PowerManagerService$WakeLock: void binderDied()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void setCurrentPage(int)> (6)
<com.android.internal.policy.impl.keyguard.PagedView: void onMeasure(int,int)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToPage(int,int,int,boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToPage(int,int,int,boolean)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPage(int,int,boolean)> (4)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPage(int,int,int)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void determineScrollingStart(android.view.MotionEvent,float)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void determineScrollingStart(android.view.MotionEvent,float)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void determineScrollingStart(android.view.MotionEvent)> (4)
<com.android.commands.media.Media: void runDispatch()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void handleMediaKeyEvent(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: boolean interceptMediaKey(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyRepeatWithWakeLock(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLock(android.view.KeyEvent)> (1)
<android.app.IUserSwitchObserver$Stub$Proxy: void onUserSwitching(int,android.os.IRemoteCallback)> ()
<com.android.internal.app.LocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (3)
<com.android.internal.telephony.uicc.IccRecords: void onRecordLoaded()> (1)
<com.android.server.UiModeManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService: void access$100(com.android.server.UiModeManagerService,int)> (1)
<com.android.server.UiModeManagerService: void access$500(com.android.server.UiModeManagerService)> (1)
<com.android.server.display.DisplayAdapter$2: void run()> (1)
<com.android.server.power.DisplayPowerState$PhotonicModulator$1: void run()> (1)
<com.android.server.display.DisplayAdapter$Listener: void onDisplayDeviceEvent(com.android.server.display.DisplayDevice,int)> (1)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.commands.media.Media: void main(java.lang.String[])> ()
<com.android.commands.wm.Wm: void main(java.lang.String[])> ()
<com.android.server.power.DisplayPowerController$5: void run()> (1)
<com.android.server.power.DisplayPowerController$4: void run()> (1)
<com.android.server.power.DisplayPowerController$3: void run()> (1)
<com.android.server.power.PowerManagerService: void startWatchingForBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$1500(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void updateDreamLocked(int)> (1)
<com.android.server.power.ScreenOnBlocker: void release()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void goToUserSwitcher()> ()
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void reset()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showAppropriateWidgetPage()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void setCurrentPage(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void setAddWidgetEnabled(boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void onMeasure(int,int)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToPage(int,int,boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToPage(int,int,boolean)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPageImmediately(int)> (3)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPage(int,int)> (6)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToPage(int,int,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToPage(int,int,int)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPageWithVelocity(int,int)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void determineScrollingStart(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void determineScrollingStart(android.view.MotionEvent)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.commands.media.Media: void onRun()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean interceptMediaKey(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.settings.inputmethod.UserDictionaryLocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.settings.LocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.server.UiModeManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$4: void onTwilightStateChanged()> (1)
<com.android.server.display.DisplayAdapter$1: void run()> (1)
<com.android.server.power.PowerManagerService: void access$1400(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService$DreamReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$1: void onScreenOn()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void reset()> ()
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$2200(com.android.internal.policy.impl.keyguard.KeyguardHostView)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$2: void onAddView(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$2: void onRemoveViewAnimationCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void setAddWidgetEnabled(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void onMeasure(int,int)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToPageImmediately(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToPageImmediately(int)> (1)
<com.android.internal.policy.impl.keyguard.PagedView$9: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToPage(int,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToPage(int,int)> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void endReordering()> (3)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToDestination()> (3)
<com.android.internal.policy.impl.keyguard.PagedView: void snapToPage(int)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToPageWithVelocity(int,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToPageWithVelocity(int,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<android.view.FallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.server.TwilightService$TwilightListener: void onTwilightStateChanged()> (1)
<com.android.server.power.PowerManagerService$BootCompletedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$9: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager$Callbacks: void onAddView(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager$Callbacks: void onRemoveViewAnimationCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void endReordering()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void endReordering()> (1)
<com.android.internal.policy.impl.keyguard.PagedView: void resetTouchState()> (5)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToDestination()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToDestination()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void snapToPage(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void snapToPage(int)> (1)
<com.android.internal.policy.impl.keyguard.PagedView$1: void run()> (1)
<com.android.internal.policy.impl.keyguard.PagedView: boolean dispatchUnhandledMove(android.view.View,int)> (4)
<com.android.internal.policy.impl.keyguard.PagedView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> (3)
<com.android.internal.policy.impl.keyguard.PagedView: void requestChildFocus(android.view.View,android.view.View)> (3)
<com.android.internal.policy.impl.keyguard.PagedView: void scrollLeft()> (4)
<com.android.internal.policy.impl.keyguard.PagedView: void scrollRight()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<android.view.ViewRootImpl$ViewPostImeInputStage: int processKeyEvent(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.server.TwilightService$TwilightListenerRecord: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void onAddView(android.view.View,int)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void onRemoveViewAnimationCompleted()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void resetTouchState()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void resetTouchState()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: boolean dispatchUnhandledMove(android.view.View,int)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: boolean dispatchUnhandledMove(android.view.View,int)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void requestChildFocus(android.view.View,android.view.View)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void requestChildFocus(android.view.View,android.view.View)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void scrollLeft()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void scrollLeft()> (2)
<com.android.internal.policy.impl.keyguard.PagedView: boolean onGenericMotionEvent(android.view.MotionEvent)> (4)
<com.android.internal.policy.impl.keyguard.PagedView: boolean performAccessibilityAction(int,android.os.Bundle)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void scrollRight()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void scrollRight()> (1)
<android.view.ViewRootImpl$ViewPostImeInputStage: int onProcess(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void onAddView(android.view.View,int)> (2)
<com.android.internal.policy.impl.keyguard.PagedView: void onAddView(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: void onRemoveViewAnimationCompleted()> (2)
<com.android.internal.policy.impl.keyguard.PagedView: void onRemoveViewAnimationCompleted()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$6: void onCameraLaunchedSuccessfully()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: boolean onGenericMotionEvent(android.view.MotionEvent)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: boolean onGenericMotionEvent(android.view.MotionEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetCarousel: boolean performAccessibilityAction(int,android.os.Bundle)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: boolean performAccessibilityAction(int,android.os.Bundle)> (3)
<com.android.internal.policy.impl.keyguard.PagedView$9$1$1: void run()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$Callbacks: void onCameraLaunchedSuccessfully()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void onCameraLaunched()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void access$1200(com.android.internal.policy.impl.keyguard.CameraWidgetFrame,boolean)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onKeyguardVisibilityChanged(boolean)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void clearShortcut(char)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> (17)
<android.preference.VolumePreference$SeekBarVolumizer: void initSeekBar(android.widget.SeekBar,android.net.Uri)> (1)
<android.widget.DateTimeView: void registerReceivers()> (1)
<com.android.contacts.common.preference.ContactsPreferences: void registerChangeListener(com.android.contacts.common.preference.ContactsPreferences$ChangeListener)> (2)
<com.android.internal.view.RotationPolicy: void registerRotationPolicyListener(android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener,int)> (3)
<com.android.server.input.InputManagerService: void registerPointerSpeedSettingObserver()> (1)
<com.android.server.input.InputManagerService: void registerShowTouchesSettingObserver()> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<com.android.settings.PointerSpeedPreference: void showDialog(android.os.Bundle)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void startObserving()> (1)
<com.android.systemui.settings.BrightnessController$BrightnessObserver: void <init>(com.android.systemui.settings.BrightnessController,android.os.Handler)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel$BrightnessObserver: void startObserving()> (2)
<com.android.systemui.statusbar.phone.QuickSettingsModel$NextAlarmObserver: void startObserving()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int,android.net.Uri)> (2)
<android.widget.DateTimeView: void onAttachedToWindow()> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onStart()> (9)
<com.android.dialer.list.PhoneFavoriteFragment: void onStart()> (1)
<com.android.internal.view.RotationPolicy: void registerRotationPolicyListener(android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener)> (2)
<com.android.systemui.statusbar.phone.QuickSettings: void setup(com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.policy.LocationController)> (2)
<com.android.systemui.statusbar.policy.AutoRotateController: void <init>(android.content.Context,android.widget.CompoundButton,com.android.systemui.statusbar.policy.AutoRotateController$RotationLockCallbacks)> (2)
<com.android.server.input.InputManagerService: void start()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void checkObserver(android.content.Context)> (2)
<com.android.systemui.settings.BrightnessController: void <init>(android.content.Context,android.widget.ImageView,com.android.systemui.settings.ToggleSlider)> (2)
<com.android.systemui.statusbar.phone.QuickSettingsModel$2: void onUserSwitched(int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)> (2)
<com.android.settings.RingerVolumePreference: void onBindDialogView(android.view.View)> (3)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onStart()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onStart()> (2)
<com.android.contacts.list.ContactPickerFragment: void onStart()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onStart()> (3)
<com.android.contacts.list.EmailAddressPickerFragment: void onStart()> (2)
<com.android.contacts.list.JoinContactListFragment: void onStart()> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onStart()> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onStart()> (2)
<com.android.systemui.statusbar.phone.SettingsPanelView: void setup(com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.policy.LocationController)> ()
<com.android.systemui.statusbar.RotationToggle: void onAttachedToWindow()> (4)
<com.android.systemui.statusbar.tablet.SettingsView: void onFinishInflate()> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void onEnabled(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (4)
<com.android.systemui.settings.BrightnessDialog: void onStart()> (1)
<com.android.systemui.settings.CurrentUserTracker: void onUserSwitched(int)> (1)
<android.preference.VolumePreference: void onBindDialogView(android.view.View)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.systemui.settings.CurrentUserTracker: void onReceive(android.content.Context,android.content.Intent)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.systemui.settings.BrightnessController$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.systemui.statusbar.phone.QuickSettingsModel$2: void onReceive(android.content.Context,android.content.Intent)> (2)
Permission:android.permission.READ_CALENDAR
579 Callers:
<com.android.providers.calendar.CalendarProvider2: void updateEventAttendeeStatus(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> (2)
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: int updateEventRelatedTable(android.net.Uri,java.lang.String,boolean,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.calendar.alerts.AlarmScheduler: void queryNextReminderAndSchedule(android.database.Cursor,android.content.Context,android.content.ContentResolver,com.android.calendar.alerts.AlarmManagerInterface,int,long)> (1)
<com.android.calendar.alerts.AlarmScheduler: void scheduleNextAlarm(android.content.Context,com.android.calendar.alerts.AlarmManagerInterface,int,long)> (1)
<com.android.calendar.alerts.AlarmScheduler: void scheduleNextAlarm(android.content.Context)> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.event.CreateEventDialogFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> (2)
<com.android.calendar.month.MonthByWeekFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri access$600(com.android.calendar.month.MonthByWeekFragment)> (1)
<com.android.calendar.month.MonthByWeekFragment$3: void run()> (1)
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> (1)
<com.android.providers.calendar.CalendarAlarmManager: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase,com.android.providers.calendar.CalendarProvider2)> (1)
<com.android.providers.calendar.CalendarAlarmManager: void runScheduleNextAlarm(boolean,com.android.providers.calendar.CalendarProvider2)> (1)
<com.android.providers.calendar.CalendarProviderIntentService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,com.android.calendar.alerts.AlarmManagerInterface)> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getEventCursor(android.content.Context,long)> (2)
<com.android.calendar.alerts.AlertReceiver: android.app.PendingIntent createBroadcastMailIntent(android.content.Context,long,java.lang.String)> (1)
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)> (1)
<com.android.calendar.alerts.AlertReceiver: android.app.Notification buildBasicNotification(android.app.Notification$Builder,android.content.Context,java.lang.String,java.lang.String,long,long,long,int,boolean,int,boolean)> (2)
<com.android.calendar.alerts.QuickResponseActivity$QueryThread: void run()> (2)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeBasicNotification(android.content.Context,java.lang.String,java.lang.String,long,long,long,int,boolean,int)> (1)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeExpandingNotification(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,long,long,int,boolean,int)> (1)
<com.android.calendar.alerts.QuickResponseActivity: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> (1)
<com.android.calendar.alerts.AlertService: void postNotification(com.android.calendar.alerts.AlertService$NotificationInfo,java.lang.String,android.content.Context,boolean,com.android.calendar.alerts.AlertService$NotificationPrefs,com.android.calendar.alerts.NotificationMgr,int)> (1)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (6)
<com.android.calendar.alerts.AlertActivity: void onStop()> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Void doInBackground(android.util.Pair[])> (1)
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.alerts.AlarmScheduler: android.database.Cursor queryUpcomingEvents(android.content.Context,android.content.ContentResolver,long)> (1)
<android.provider.CalendarContract$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)> (1)
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List queryRecentLocations(android.content.ContentResolver,java.lang.String)> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List access$600(android.content.ContentResolver,java.lang.String)> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter$1: java.util.List doInBackground(java.lang.Void[])> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (3)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (2)
<com.android.calendar.CalendarUtils$TimeZoneUtils: void forceDBRequery(android.content.Context,java.lang.Runnable)> ()
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (46)
<com.android.calendar.Utils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (15)
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> (2)
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.agenda.AgendaByDayAdapter$1: void run()> (1)
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.calendar.agenda.AgendaByDayAdapter: void <init>(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaFragment$1: void run()> (1)
<com.android.calendar.agenda.AgendaFragment: void onAttach(android.app.Activity)> (1)
<com.android.calendar.agenda.AgendaListView$1: void run()> (1)
<com.android.calendar.agenda.AgendaListView: void initView(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$1: void run()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void <init>(android.content.Context,com.android.calendar.agenda.AgendaListView,boolean)> (1)
<com.android.calendar.alerts.AlertAdapter: void updateView(android.content.Context,android.view.View,java.lang.String,java.lang.String,long,long,boolean)> (1)
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)> (2)
<com.android.calendar.AllInOneActivity$2: void run()> (1)
<com.android.calendar.AllInOneActivity$3: void run()> (1)
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void updateSecondaryTitleFields(long)> (3)
<com.android.calendar.CalendarController$1: void run()> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtraWithTitleWithCalendarId(java.lang.Object,long,long,long,long,int,int,long,long,java.lang.String,long)> (2)
<com.android.calendar.CalendarEventModel: void <init>(android.content.Context)> (2)
<com.android.calendar.CalendarViewAdapter: void refresh(android.content.Context)> (3)
<com.android.calendar.DayFragment$1: void run()> (1)
<com.android.calendar.DayView$1: void run()> (1)
<com.android.calendar.DayView: void init(android.content.Context)> (1)
<com.android.calendar.DayView: void reloadEvents()> (4)
<com.android.calendar.event.EditEventFragment$Done: void run()> (6)
<com.android.calendar.event.EditEventView: void <init>(android.app.Activity,android.view.View,com.android.calendar.event.EditEventHelper$EditDoneRunnable,boolean,boolean)> (1)
<com.android.calendar.event.EditEventView: void setModel(com.android.calendar.CalendarEventModel)> (3)
<com.android.calendar.event.EditEventView: void updateHomeTime()> (4)
<com.android.calendar.EventInfoFragment: void updateEvent(android.view.View)> (1)
<com.android.calendar.GeneralPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.GeneralPreferences: void showTimezoneDialog()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void init()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void refresh()> (2)
<com.android.calendar.month.MonthByWeekFragment$2: void run()> (1)
<com.android.calendar.month.MonthListView$1: void run()> (1)
<com.android.calendar.month.MonthListView: void init(android.content.Context)> (3)
<com.android.calendar.month.MonthWeekEventsView: int drawEvent(android.graphics.Canvas,com.android.calendar.Event,int,int,int,boolean,boolean,boolean)> (1)
<com.android.calendar.SearchActivity$2: void run()> (1)
<com.android.calendar.SearchActivity: boolean onCreateOptionsMenu(android.view.Menu)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)> (2)
<com.android.calendar.widget.CalendarAppWidgetModel: void buildFromCursor(android.database.Cursor,java.lang.String)> (1)
<com.android.calendar.widget.CalendarAppWidgetProvider: void performUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[],long[])> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.AllInOneActivity: void setTitleInActionBar(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void appendEventAccessibilityString(java.lang.StringBuilder,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.calendar.DayView: void updateEventDetails()> (1)
<com.android.calendar.month.MonthWeekEventsView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.month.SimpleWeekView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.Utils: java.lang.String formatMonthYear(android.content.Context,android.text.format.Time)> (1)
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$DayInfo populateDayInfo(int,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$EventInfo populateEventInfo(long,boolean,long,long,int,int,java.lang.String,java.lang.String,int,int)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo: void <init>(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaListView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)> (1)
<com.android.calendar.AllInOneActivity: void access$700(com.android.calendar.AllInOneActivity,long)> (1)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> (7)
<com.android.calendar.event.CreateEventDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.CalendarEventModel: void <init>(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (2)
<com.android.calendar.CalendarViewAdapter$1: void run()> (1)
<com.android.calendar.CalendarViewAdapter: void <init>(android.content.Context,int,boolean)> (1)
<com.android.calendar.DayView: void <init>(android.content.Context,com.android.calendar.CalendarController,android.widget.ViewSwitcher,com.android.calendar.EventLoader,int)> (1)
<com.android.calendar.DayFragment: void eventsChanged()> (3)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.DayView: boolean initNextView(int)> (1)
<com.android.calendar.event.EditEventFragment: boolean onActionBarItemSelected(int)> (2)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventHelper$EditDoneRunnable: void run()> (3)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.event.EditEventFragment: void onDestroy()> (1)
<com.android.calendar.event.EditEventFragment: void setModelIfDone(int)> (1)
<com.android.calendar.event.EditEventView: void access$500(com.android.calendar.event.EditEventView)> (2)
<com.android.calendar.event.EditEventView: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView: void setAllDayViewsVisibility(boolean)> (3)
<com.android.calendar.event.EditEventView: void setModification(int)> (3)
<com.android.calendar.EventInfoFragment: void access$100(com.android.calendar.EventInfoFragment,android.view.View)> (2)
<com.android.calendar.GeneralPreferences: void access$000(com.android.calendar.GeneralPreferences)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void init()> (2)
<com.android.calendar.month.MonthByWeekAdapter: void setEvents(int,int,java.util.ArrayList)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void refresh()> (2)
<com.android.calendar.month.MonthListView: void <init>(android.content.Context,android.util.AttributeSet,int)> (5)
<com.android.calendar.month.MonthListView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.calendar.month.MonthListView: void <init>(android.content.Context)> (5)
<com.android.calendar.month.MonthWeekEventsView: void drawEvents(android.graphics.Canvas)> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildWeekNum()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: com.android.calendar.widget.CalendarAppWidgetModel buildAppWidgetModel(android.content.Context,android.database.Cursor,java.lang.String)> (1)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.DayView: void sendAccessibilityEventAsNeeded(boolean)> (2)
<com.android.calendar.DayView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (4)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: int processNewCursor(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec,android.database.Cursor)> (1)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void sendViewEvent(com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (2)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (4)
<com.android.calendar.DayView$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.event.EditEventFragment: void onAttach(android.app.Activity)> (1)
<com.android.calendar.AbstractCalendarActivity: void onResume()> (3)
<com.android.calendar.AllInOneActivity: void createButtonsSpinner(int,boolean)> (1)
<com.android.calendar.DayFragment: android.view.View makeView()> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayFragment: void onResume()> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.DayView: void doScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.event.EditEventFragment: boolean access$000(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.event.EditEventView: void onCancel(android.content.DialogInterface)> (1)
<com.android.calendar.event.EditEventView: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean,long)> (1)
<com.android.calendar.event.EditEventFragment: void access$800(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventView$DateListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.calendar.event.EditEventView$TimeListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (1)
<com.android.timezonepicker.TimeZonePickerDialog$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView$4: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.calendar.event.EditEventView: void setViewStates(int)> (1)
<com.android.calendar.event.EditEventFragment$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventFragment: void startQuery()> (1)
<com.android.calendar.EventInfoFragment$1: void run()> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.GeneralPreferences$1: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void <init>(android.content.Context,java.util.HashMap)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void updateParams(java.util.HashMap)> (4)
<com.android.calendar.month.MonthWeekEventsView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.DayView: boolean setSelectionFromPosition(int,int,boolean)> (4)
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: boolean goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void updateMonthHighlight(android.widget.AbsListView)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$1500(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)> (2)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.DayView$3: void run()> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.DayView: void access$4500(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void onResume()> (2)
<com.android.calendar.AllInOneActivity: void configureActionBar(int)> (1)
<com.android.calendar.DayView: void access$5000(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.DayView: void access$4900(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.event.EditEventFragment$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.date.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.datetimepicker.time.TimePickerDialog$OnTimeSetListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (2)
<com.android.timezonepicker.TimeZonePickerDialog: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView: void updateView()> (2)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void <init>(android.content.Context,java.util.HashMap,android.os.Handler)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void <init>(android.content.Context,java.util.HashMap)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void setUpAdapter()> (2)
<com.android.calendar.month.MonthByWeekFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void updateParams(java.util.HashMap)> (1)
<com.android.calendar.month.MonthByWeekFragment: void setUpAdapter()> (1)
<com.android.calendar.month.SimpleWeekView: void onDraw(android.graphics.Canvas)> (1)
<com.android.calendar.DayView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doLongPress(android.view.MotionEvent)> (1)
<com.android.calendar.month.MonthByWeekFragment: boolean goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void updateMonthHighlight(android.widget.AbsListView)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (10)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.agenda.AgendaListView: void goTo(android.text.format.Time,long,java.lang.String,boolean,boolean)> (3)
<com.android.calendar.agenda.AgendaListView: void refresh(boolean)> (3)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.datetimepicker.date.DatePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$3: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean processKeyUp(int)> (1)
<com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (2)
<com.android.calendar.DayView: void access$5100(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$4600(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.agenda.AgendaFragment$2: void run()> (1)
<com.android.calendar.AllInOneActivity: void handleSelectSyncedCalendarsClicked(android.view.View)> ()
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (5)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (16)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.agenda.AgendaFragment: void goTo(com.android.calendar.CalendarController$EventInfo,boolean)> (1)
<com.android.calendar.agenda.AgendaFragment: void onResume()> (1)
<com.android.calendar.agenda.AgendaFragment: void search(java.lang.String,android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaFragment: void eventsChanged()> (2)
<com.android.calendar.agenda.AgendaListView$2: void run()> (1)
<com.android.calendar.agenda.AgendaListView$3: void run()> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean access$800(com.android.datetimepicker.time.TimePickerDialog,int)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onAttach(android.app.Activity)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (2)
<com.android.calendar.DayView$CalendarGestureListener: boolean onDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (2)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onNavigationItemSelected(int,long)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (2)
<com.android.calendar.AllInOneActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (2)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity$1: void onChange(boolean)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.agenda.AgendaFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.datetimepicker.time.TimePickerDialog$KeyboardListener: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.month.MonthByWeekAdapter$2: void run()> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity$4: void onChange(boolean)> (1)
<com.android.calendar.AbstractCalendarActivity: void onBackPressed()> (2)
<com.android.calendar.AbstractCalendarActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.AbstractCalendarActivity: void onUserLeaveHint()> (2)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity next()> (5)
<android.content.CursorEntityIterator: java.lang.Object next()> (6)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: java.lang.Object next()> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void eventsChanged()> (2)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.providers.calendar.CalendarProvider2: long getOriginalId(java.lang.String,java.lang.String)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commit()> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<com.android.calendar.GoogleCalendarUriIntentFilter: void onCreate(android.os.Bundle)> (1)
<android.provider.CalendarContract$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)> (1)
<com.android.providers.calendar.CalendarAlarmManager: void rescheduleMissedAlarms(android.content.ContentResolver)> (1)
<com.android.providers.calendar.CalendarAlarmManager: void rescheduleMissedAlarms()> (2)
<com.android.providers.calendar.CalendarProvider2: void doUpdateTimezoneDependentFields()> (2)
<com.android.providers.calendar.CalendarProvider2: void regenerateInstancesTable()> (2)
<com.android.providers.calendar.CalendarProvider2: void doProcessEventRawTimes(java.lang.String,java.lang.String)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.adapter.AbstractSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.ExchangeService: void deleteAccountPIMData(long)> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.EmailSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.FolderSyncParser: boolean parse()> (4)
<com.android.exchange.ExchangeService$2: void deleteAccountPIMData(long)> (2)
<com.android.exchange.EasAccountService: void sync()> (1)
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.adapter.Search$SearchParser: boolean parseStore()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void deleteAccountPIMData(long)> (2)
<com.android.exchange.EasAccountService: void run()> (1)
<com.android.exchange.AbstractSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.EasAccountService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.adapter.Search$SearchParser: boolean parseResponse()> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void deleteAccountPIMData(long)> (2)
<com.android.exchange.AbstractSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.adapter.Search$SearchParser: boolean parse()> (2)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$12: void run()> (1)
<com.android.email.Controller: void deleteSyncedDataSync(long)> (2)
<com.android.exchange.EasAccountService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.ExchangeService$2: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.adapter.Search: int searchMessages(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.Controller: void deleteAccountSync(long,android.content.Context)> (4)
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.ExchangeService$2: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.Controller$14: void run()> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context,boolean)> (2)
<com.android.email.SecurityPolicy: void deleteSecuredAccounts(android.content.Context)> (1)
<com.android.email.service.MailService$3: void run()> (1)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.email.provider.AccountReconciler: boolean accountsNeedReconciling(android.content.Context,java.util.List,android.accounts.Account[])> (1)
<com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (2)
<com.android.email.SecurityPolicy: void onAdminEnabled(boolean)> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (2)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.email.service.MailService: boolean hasMismatchInPopImapAccounts(android.content.Context)> (1)
<com.android.email.service.AccountService$1: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle checkSettings()> (2)
<com.android.emailcommon.service.EmailServiceProxy$13: void run()> (1)
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)> (2)
<com.android.email.activity.Welcome$1: void run()> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IAccountService$Stub: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal(android.content.Context)> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.Controller: void searchMore(long)> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void reconcileAccounts(java.lang.String,java.lang.String)> (1)
<com.android.email.service.MailService$6: void runInternal(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: java.lang.Object loadInBackground()> (3)
<com.android.email.Controller$7: void run()> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$3: void run()> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: java.lang.Object loadInBackground()> (2)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.email.service.MailService$6: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$1: void run()> (1)
<com.android.calendar.alerts.GlobalDismissManager: java.util.Map lookupEventToCalendarMap(android.content.Context,java.util.Set)> (2)
<com.android.calendar.alerts.GlobalDismissManager: void dismissGlobally(android.content.Context,java.util.List)> (2)
<com.android.calendar.alerts.GlobalDismissManager: void processEventIds(android.content.Context,java.util.Set)> (1)
<com.android.calendar.alerts.AlertActivity$1: java.lang.Void doInBackground(java.util.List[])> (1)
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.calendar.alerts.AlertActivity$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.CalendarColorPickerDialog$QueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.CalendarColorPickerDialog: void startQuery()> (2)
<com.android.calendar.CalendarColorPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (2)
<com.android.calendar.CalendarColorPickerDialog: void setCalendarId(long)> (4)
<com.android.colorpicker.ColorPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (3)
<com.android.calendar.CalendarColorPickerDialog: com.android.calendar.CalendarColorPickerDialog newInstance(long,boolean)> (3)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$2: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter$2: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$3: void onClick(android.view.View)> (1)
<com.android.calendar.event.EventColorPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (2)
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> (1)
<com.android.calendar.EventLoader$LoadEventDaysRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoadRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoaderThread: void run()> (2)
<com.android.calendar.EventLoader: void startBackgroundThread()> (1)
<com.android.calendar.alerts.GlobalDismissManager: java.util.Map lookupCalendarToAccountMap(android.content.Context,java.util.Set)> (2)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$RefreshCalendars: void run()> (2)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void onResume()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations: void updatedExtendedProperty(java.lang.String,java.lang.String,long)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addEvent(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations,java.lang.String,boolean)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void changeParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void initLoader(java.lang.String)> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$3$1: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onCreate()> (1)
<com.android.providers.calendar.CalendarProvider2: java.lang.String getOriginalSyncId(long)> (1)
<com.android.providers.calendar.CalendarProvider2: java.lang.String getOwner(long)> (2)
<com.android.providers.calendar.CalendarProvider2: long handleInsertException(long,android.content.ContentValues,boolean)> (1)
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getLocationCursor(android.content.Context,long)> (1)
<com.android.calendar.alerts.AlertReceiver: android.text.style.URLSpan[] getURLSpans(android.content.Context,long)> (2)
<com.android.exchange.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> ()
<com.android.calendar.DayView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)> (1)
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getAttendeesCursor(android.content.Context,long)> (2)
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> ()
<com.android.calendar.selectcalendars.CalendarColorCache: void <init>(android.content.Context,com.android.calendar.selectcalendars.CalendarColorCache$OnCalendarColorsLoadedListener)> (3)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: void <init>(android.content.Context,int,android.database.Cursor,android.app.FragmentManager)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: void <init>(android.content.Context,android.database.Cursor,android.app.FragmentManager)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void <init>(android.content.Context,android.database.Cursor,com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.alerts.AlertActivity: void onResume()> (1)
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int)> (5)
<com.android.calendar.agenda.AgendaListView: void deleteSelectedEvent()> ()
<com.android.calendar.CalendarController: void launchDeleteEventAndFinish(android.app.Activity,long,long,long,int)> (1)
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int,java.lang.Runnable)> (3)
<com.android.calendar.SearchActivity: void deleteEvent(long,long,long)> (1)
<com.android.calendar.CalendarController: void launchDeleteEvent(long,long,long)> (1)
<com.android.calendar.EventInfoFragment$6: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.EventInfoFragment: void onResume()> (1)
<com.android.calendar.SearchActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onResume()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void doQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$2600(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean access$1800(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,java.lang.String,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.providers.calendar.CalendarDebug$FetchInfoTask: java.util.List doInBackground(java.lang.Void[])> (1)
<com.android.providers.calendar.CalendarDebug$FetchInfoTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (10)
<com.android.providers.calendar.CalendarProvider2: android.accounts.Account getAccount(long)> (3)
<com.android.providers.calendar.CalendarProvider2: int deleteFromEventRelatedTable(java.lang.String,android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: int deleteMatchingColors(java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: int deleteReminders(android.net.Uri,boolean,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: void modifyCalendarSubscription(long,boolean)> (2)
<com.android.providers.calendar.CalendarProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: int deleteMatchingCalendars(java.lang.String,java.lang.String[])> (1)
<com.android.calendar.EventInfoFragment: void updateCalendar(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$1600(com.android.calendar.EventInfoFragment,android.view.View)> (1)
<com.android.calendar.Event: android.database.Cursor instancesQuery(android.content.ContentResolver,java.lang.String[],int,int,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.calendar.Event: void loadEvents(android.content.Context,java.util.ArrayList,int,int,int,java.util.concurrent.atomic.AtomicInteger)> (1)
<com.android.calendar.EventLoader$LoadEventsRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.exchange.ExchangeService$CalendarObserver: void <init>(com.android.exchange.ExchangeService,android.os.Handler,com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.ExchangeService: void registerCalendarObserver(com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.ExchangeService: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (1)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.calendar.EventInfoFragment: void updateResponse(long,long,int)> (1)
<com.android.calendar.EventInfoFragment: boolean saveResponse()> (1)
<com.android.calendar.EventInfoFragment: void onStop()> (2)
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> (1)
<com.android.calendar.DeleteEventHelper$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissAlarm(long,long,long)> (1)
<com.android.calendar.alerts.AlertActivity: void access$400(com.android.calendar.alerts.AlertActivity,long,long,long)> (1)
<com.android.calendar.alerts.AlertActivity$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> (2)
<com.android.calendar.event.CreateEventDialogFragment: void createAllDayEvent()> (1)
<com.android.calendar.event.CreateEventDialogFragment: void access$500(com.android.calendar.event.CreateEventDialogFragment)> (1)
<com.android.calendar.event.CreateEventDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.CalendarColorPickerDialog$OnCalendarColorSelectedListener: void onColorSelected(int)> (1)
<com.android.colorpicker.ColorPickerSwatch$OnColorSelectedListener: void onColorSelected(int)> (2)
<com.android.colorpicker.ColorPickerDialog: void onColorSelected(int)> (3)
<com.android.colorpicker.ColorPickerSwatch: void onClick(android.view.View)> (1)
<com.android.calendar.CalendarColorPickerDialog: void onColorSelected(int)> (1)
<com.android.calendar.event.EventColorPickerDialog: void onColorSelected(int)> (2)
<com.android.calendar.event.EventColorPickerDialog$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (3)
<com.android.calendar.event.EditEventFragment: void saveReminders()> (1)
<com.android.calendar.EventInfoFragment: boolean saveReminders()> (1)
<com.android.calendar.alerts.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.alerts.AlertActivity: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void createExceptionResponse(long,int)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onPause()> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> (1)
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)> (2)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.GeneralPreferences: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.alerts.AlertService: void dismissOldAlerts(android.content.Context)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void doSaveAction()> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.alerts.InitAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.DeleteEventHelper: void deleteExceptionEvent()> (1)
<com.android.calendar.DeleteEventHelper: void access$900(com.android.calendar.DeleteEventHelper)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$1200(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.EventInfoFragment: boolean saveEventColor()> (1)
<com.android.providers.calendar.CalendarReceiver: void removeScheduledAlarms(android.content.ContentResolver)> (1)
<com.android.providers.calendar.CalendarReceiver: void access$000(com.android.providers.calendar.CalendarReceiver,android.content.ContentResolver)> (1)
<com.android.providers.calendar.CalendarReceiver$1: void run()> (1)
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.PROCESS_OUTGOING_CALLS
2 Callers:
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
Permission:android.permission.GET_PACKAGE_SIZE
7 Callers:
<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> ()
<android.content.pm.IPackageManager$Stub: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (1)
<com.android.server.pm.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (1)
Permission:android.permission.RECEIVE_SMS
217 Callers:
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms: boolean enableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean enableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)> ()
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (4)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> (3)
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor getAllMessagesFromIcc()> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor getSingleMessageFromIcc(java.lang.String)> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq,boolean)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$900(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (4)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.android.mms.ui.NoConfirmationSendService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (5)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendInactiveMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$500(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (4)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft(boolean)> (4)
<com.android.mms.data.WorkingMessage$1: android.util.Pair doInBackground(java.lang.Void[])> (1)
<com.android.mms.data.Conversation$ConversationQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void saveDraft(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (2)
<com.android.mms.data.WorkingMessage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onStop()> (2)
<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)> (1)
<com.android.mms.transaction.MessageStatusService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.transaction.MessagingNotification: void addSmsNotificationInfos(android.content.Context,java.util.Set,java.util.SortedSet)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,long,boolean)> (5)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()> (1)
<com.android.mms.data.Conversation: void dumpSmsTable(android.content.Context)> (1)
<com.android.mms.LogTag$1: void run()> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void handleServiceCategoryProgramData(com.android.internal.telephony.cdma.SmsMessage)> (1)
Permission:android.permission.AUTHENTICATE_ACCOUNTS
51 Callers:
<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)> (7)
<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> (2)
<com.android.server.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setPassword(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.IAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (5)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<com.android.email.provider.DBHelper: void createAccountManagerAccount(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<com.android.email.provider.DBHelper: void upgradeFromVersion21ToVersion22(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
Permission:android.permission.DISABLE_KEYGUARD
25 Callers:
<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)> ()
<android.view.IWindowManager$Stub: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void disableKeyguard(android.os.IBinder,java.lang.String)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()> ()
<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> ()
<android.view.IWindowManager$Stub: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager: void reenableKeyguard(android.os.IBinder)> (1)
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()> ()
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> (1)
<com.android.systemui.statusbar.BaseStatusBar$NotificationClicker: void onClick(android.view.View)> (1)
<com.android.server.wm.WindowManagerService: void dismissKeyguard()> (4)
<android.view.IWindowManager$Stub$Proxy: void dismissKeyguard()> ()
<android.view.IWindowManager$Stub: void dismissKeyguard()> (2)
<android.view.IWindowManager: void dismissKeyguard()> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void showBugreportDialog()> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void access$1100(com.android.systemui.statusbar.phone.QuickSettings)> (1)
<com.android.systemui.statusbar.phone.QuickSettings$24: void onClick(android.view.View)> (1)
Permission:android.permission.CLEAR_APP_CACHE
20 Callers:
<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> ()
<android.content.pm.IPackageManager$Stub: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (3)
<com.android.server.pm.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ApplicationPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (1)
<com.android.commands.pm.Pm: void runTrimCaches()> (1)
<com.android.server.DeviceStorageMonitorService: void clearCache()> (1)
<com.android.commands.pm.Pm: void run(java.lang.String[])> (1)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.commands.pm.Pm: void main(java.lang.String[])> ()
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.pm.PackageManagerService: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)> ()
<android.content.pm.IPackageManager$Stub: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
<android.app.ApplicationPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
Permission:android.permission.ACCESS_NETWORK_STATE
2309 Callers:
<com.android.server.ConnectivityService: void enforceAccessPermission()> (13)
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> (5)
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> (3)
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()> (1)
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> (4)
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> (3)
<com.android.server.ConnectivityService: android.net.NetworkInfo getProvisioningNetworkInfo()> (2)
<com.android.server.ConnectivityService: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> (2)
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()> (2)
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> (2)
<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()> (2)
<com.android.server.ConnectivityService: boolean isNetworkSupported(int)> (4)
<com.android.server.ConnectivityService: int getNetworkPreference()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)> ()
<android.net.IConnectivityManager$Stub: android.net.LinkProperties getLinkProperties(int)> (2)
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> (4)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void handleStateChangedLocked()> (4)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo[] getAllNetworkInfo()> (2)
<com.android.server.ConnectivityService$CheckMp: void printNetworkInfo()> ()
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getNetworkInfo(int)> (2)
<com.android.server.ConnectivityService: void handleMobileProvisioningAction(java.lang.String)> (1)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkState[] getAllNetworkState()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean getMobileDataEnabled()> ()
<android.net.IConnectivityManager$Stub: boolean getMobileDataEnabled()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isActiveNetworkMetered()> ()
<android.net.IConnectivityManager$Stub: boolean isActiveNetworkMetered()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)> ()
<android.net.IConnectivityManager$Stub: boolean isNetworkSupported(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()> ()
<android.net.IConnectivityManager$Stub: int getNetworkPreference()> (2)
<android.net.IConnectivityManager: android.net.LinkProperties getLinkProperties(int)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()> ()
<android.net.IConnectivityManager$Stub: android.net.LinkProperties getActiveLinkProperties()> (2)
<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: void access$1100(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void initLocked()> (2)
<com.android.server.net.LockdownVpnTracker: void onNetworkInfoChanged(android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void onVpnStateChanged(android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void reset()> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (2)
<com.android.server.ConnectivityService: void access$4800(com.android.server.ConnectivityService,java.lang.String)> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkState[] getAllNetworkState()> (2)
<android.net.IConnectivityManager: boolean getMobileDataEnabled()> (1)
<android.net.IConnectivityManager: boolean isActiveNetworkMetered()> (1)
<android.net.IConnectivityManager: boolean isNetworkSupported(int)> (1)
<android.net.IConnectivityManager: int getNetworkPreference()> (1)
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> (2)
<android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)> ()
<android.net.IConnectivityManager$Stub: void startLegacyVpn(com.android.internal.net.VpnProfile)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.net.CaptivePortalTracker: boolean isActiveNetwork(android.net.NetworkInfo)> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (27)
<com.android.server.net.LockdownVpnTracker: void init()> (1)
<com.android.server.net.LockdownVpnTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> ()
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (9)
<com.android.server.ConnectivityService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> (1)
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> ()
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()> (5)
<com.android.server.net.NetworkStatsService: void updateIfacesLocked()> (1)
<android.net.ConnectivityManager: boolean getMobileDataEnabled()> (2)
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()> (4)
<android.net.ConnectivityManager: boolean isNetworkSupported(int)> (9)
<android.net.ConnectivityManager: int getNetworkPreference()> ()
<android.net.DnsPinger: android.net.LinkProperties getCurrentLinkProperties()> (2)
<com.android.settings.Utils: java.lang.String getWifiIpAddresses(android.content.Context)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> (1)
<android.net.IConnectivityManager: void startLegacyVpn(com.android.internal.net.VpnProfile)> (1)
<android.net.CaptivePortalTracker: boolean access$1200(android.net.CaptivePortalTracker,android.net.NetworkInfo)> (2)
<android.net.http.RequestQueue: void setProxyConfig()> (2)
<android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompatGingerbread: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompatHoneycombMR2: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.browser.BrowserSettings: void updateConnectionType()> (3)
<com.android.browser.NetworkStateHandler: void <init>(android.app.Activity,com.android.browser.Controller)> (1)
<com.android.browser.PreloadRequestReceiver: boolean isOnWifi(android.content.Context)> (1)
<com.android.browser.search.OpenSearchSearchEngine: android.net.NetworkInfo getActiveNetworkInfo(android.content.Context)> (1)
<com.android.emailcommon.provider.Account: boolean isAutomaticSyncDisabledByRoaming(android.content.Context,long)> (1)
<com.android.email.EmailConnectivityManager: boolean hasConnectivity()> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.net.ConnectivityManager)> (2)
<com.android.email.EmailConnectivityManager: void waitForConnectivity()> (1)
<com.android.exchange.AbstractSyncService: boolean hasConnectivity()> (3)
<com.android.exchange.ExchangeService: void waitForConnectivity()> (1)
<com.android.gallery3d.util.ReverseGeocoder: android.location.Address lookupAddress(double,double,boolean)> (3)
<com.android.inputmethod.compat.ConnectivityManagerCompatUtils: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void refreshNetworkState()> (3)
<com.android.inputmethod.latin.SubtypeSwitcher: void initialize(android.content.Context)> (1)
<com.android.phone.SipCallOptionHandler: boolean isNetworkConnected()> (2)
<com.android.providers.downloads.DownloadReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.RealSystemFacade: boolean isNetworkRoaming()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: android.net.NetworkInfo getActiveNetworkInfo()> (1)
<com.android.server.content.SyncManager: boolean readDataConnectionState()> (1)
<com.android.server.NetworkTimeUpdateService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.sip.SipService: void onConnectivityChanged(android.net.NetworkInfo)> (1)
<com.android.settings.wifi.WifiSettings$4: void onClick(android.view.View)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void updateConnectivity(android.content.Intent)> (1)
<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)> (1)
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)> ()
<com.android.inputmethod.research.Uploader: boolean hasWifiConnection()> (1)
<com.android.mms.transaction.MmsSystemEventReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.RetryScheduler: boolean isConnected()> (1)
<com.android.mms.transaction.TransactionService: boolean isNetworkAvailable()> (1)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.GpsLocationProvider$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.deviceinfo.Status: void setWimaxStatus()> (1)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onManageMobilePlanClick()> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1300(com.android.server.net.NetworkPolicyManagerService)> (2)
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)> (2)
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<com.android.phone.MobileNetworkSettings: void onResume()> (3)
<com.android.settings.DataUsageSummary: boolean isMobileDataEnabled()> (1)
<android.support.v4.net.ConnectivityManagerCompatJellyBean: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.dreams.phototable.PicasaSource: java.io.InputStream getStream(com.android.dreams.phototable.PhotoSource$ImageData,int)> (1)
<com.android.dreams.phototable.PicasaSource: java.util.Collection findImages(int)> (1)
<com.android.providers.downloads.RealSystemFacade: boolean isActiveNetworkMetered()> (1)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.RIL: void <init>(android.content.Context,int,int)> (1)
<com.android.settings.DataUsageSummary: boolean hasEthernet(android.content.Context)> (2)
<com.android.settings.DataUsageSummary: boolean hasReadyMobileRadio(android.content.Context)> (6)
<com.android.settings.DataUsageSummary: boolean hasWifiRadio(android.content.Context)> (3)
<com.android.settings.Utils: boolean isWifiOnly(android.content.Context)> (10)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void <init>(android.content.Context)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (2)
<android.net.DnsPinger: java.util.List getDnsList()> ()
<com.android.settings.wifi.AdvancedWifiSettings: void refreshWifiInfo()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.settings.Utils: java.lang.String getDefaultIpAddresses(android.content.Context)> (1)
<com.android.settings.vpn2.VpnSettings: void connect(com.android.internal.net.VpnProfile)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: boolean processMessage(android.os.Message)> (1)
<android.net.http.RequestQueue: void access$300(android.net.http.RequestQueue)> (1)
<android.net.http.RequestQueue: void enablePlatformNotifications()> ()
<android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompat$GingerbreadConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.NetworkStateHandler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NetworkStateHandler: void onResume()> (1)
<com.android.browser.Controller: void <init>(android.app.Activity)> (1)
<com.android.browser.PreloadRequestReceiver: boolean isPreloadEnabledOnCurrentNetwork(android.content.Context)> (1)
<com.android.browser.search.OpenSearchSearchEngine: boolean isNetworkConnected(android.content.Context)> (1)
<com.android.email.Preferences: boolean shouldShowRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.content.Context)> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.exchange.EasAccountService: boolean hasConnectivity()> (2)
<com.android.exchange.EasOutboxService: boolean hasConnectivity()> (2)
<com.android.exchange.EasSyncService: boolean hasConnectivity()> (2)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.gallery3d.ui.DetailsAddressResolver$AddressLookupJob: android.location.Address run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void installIfNeverRequested(android.content.Context,java.lang.String,java.lang.String,boolean)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void access$000(com.android.inputmethod.dictionarypack.DictionarySettingsFragment)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void onResume()> (2)
<com.android.inputmethod.latin.SubtypeSwitcher: void init(android.content.Context)> (2)
<com.android.phone.SipCallOptionHandler: boolean access$100(com.android.phone.SipCallOptionHandler)> (1)
<com.android.phone.SipCallOptionHandler: void onCreate(android.os.Bundle)> (1)
<com.android.providers.downloads.SystemFacade: boolean isNetworkRoaming()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: boolean isNetworkConnected()> (1)
<com.android.server.content.SyncManager: boolean access$500(com.android.server.content.SyncManager)> (8)
<com.android.server.sip.SipService: void access$1700(com.android.server.sip.SipService,android.net.NetworkInfo)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ConnectivityService: boolean updateLockdownVpn()> (4)
<com.android.inputmethod.research.Uploader: boolean isConvenientToUpload()> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (42)
<com.android.settings.WirelessSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.server.net.NetworkPolicyManagerService$10: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1200(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkPolicy)> (1)
<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1000(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkTemplate,int)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.INetworkPolicyManager$Stub: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<com.android.settings.DataUsageSummary: void updatePolicy(boolean)> (4)
<android.support.v4.net.ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.dreams.phototable.PhotoSource: java.io.InputStream getStream(com.android.dreams.phototable.PhotoSource$ImageData,int)> (1)
<com.android.dreams.phototable.PhotoSource: java.util.Collection findImages(int)> (3)
<com.android.providers.downloads.SystemFacade: boolean isActiveNetworkMetered()> (1)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.settings.DataUsageSummary: void onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.settings.DataUsageSummary: void updateTabs()> (2)
<com.android.settings.DataUsageSummary: boolean isMobilePolicySplit()> (3)
<com.android.settings.DataUsageSummary: void onCreate(android.os.Bundle)> (1)
<com.android.settings.DataUsageSummary: void setMobilePolicySplit(boolean)> (1)
<com.android.settings.DataUsageSummary: void updateAppDetail()> (1)
<com.android.settings.net.DataUsageMeteredSettings: void updateNetworks(android.content.Context)> (1)
<com.android.settings.DateTimeSettings: void initUI()> (1)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.fuelgauge.BatteryHistoryChart: void setStats(android.os.BatteryStats)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void processMiscUsage()> (1)
<com.android.settings.wifi.AdvancedWifiSettings: void initPreferences()> (1)
<com.android.settings.wifi.AdvancedWifiSettings: void updateSleepPolicySummary(android.preference.Preference,java.lang.String)> (2)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.systemui.statusbar.phone.QuickSettings: void <init>(android.content.Context,com.android.systemui.statusbar.phone.QuickSettingsContainerView)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: void enter()> (29)
<com.android.settings.deviceinfo.Status: void setIpAddressStatus()> (1)
<com.android.settings.vpn2.VpnSettings: void onClick(android.content.DialogInterface,int)> (1)
<android.net.http.RequestQueue$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.support.v4.net.ConnectivityManagerCompat: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> ()
<com.android.browser.Controller: void onResume()> (1)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (1)
<com.android.email.activity.UIControllerBase: void showAccountSpecificWarning(long)> (5)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long,int)> (4)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.gallery3d.ui.DetailsAddressResolver$AddressLookupJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: java.util.Collection getDictionaryWordListsForLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void onClickAllow(android.view.View)> ()
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$4: void run()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.SettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.providers.downloads.DownloadInfo: com.android.providers.downloads.DownloadInfo$NetworkState checkCanUseNetwork()> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult query(java.lang.String)> (2)
<com.android.server.content.SyncManager$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<com.android.server.content.SyncManager: void sendSyncAlarmMessage()> (1)
<com.android.server.content.SyncManager: void sendCheckAlarmsMessage()> (4)
<com.android.server.content.SyncManager: void sendSyncFinishedOrCanceledMessage(com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,int,java.lang.String)> (1)
<com.android.server.sip.SipService$ConnectivityReceiver$1: void run()> (1)
<android.net.IConnectivityManager$Stub$Proxy: boolean updateLockdownVpn()> ()
<android.net.IConnectivityManager$Stub: boolean updateLockdownVpn()> (2)
<com.android.server.ConnectivityService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.inputmethod.research.UploaderService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.server.net.NetworkPolicyManagerService: void access$1500(com.android.server.net.NetworkPolicyManagerService)> (1)
<com.android.server.net.NetworkPolicyManagerService$8: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.DataUsageSummary: void access$600(com.android.settings.DataUsageSummary,boolean)> (5)
<com.android.settings.DataUsageSummary: void setMobileDataEnabled(boolean)> (1)
<com.android.settings.DataUsageSummary: void setPolicyLimitBytes(long)> (1)
<com.android.settings.DataUsageSummary: void setPolicyWarningBytes(long)> (1)
<com.android.dreams.phototable.PhotoSource$ImageData: java.io.InputStream getStream(int)> (2)
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (6)
<com.android.dreams.phototable.PhotoSourcePlexor: java.util.Collection findImages(int)> (1)
<com.android.dreams.phototable.PhotoSource: void fillQueue()> (6)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.settings.DataUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.settings.DataUsageSummary: void onResume()> (1)
<com.android.settings.DataUsageSummary: void access$1800(com.android.settings.DataUsageSummary)> (1)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (38)
<com.android.settings.fuelgauge.BatteryHistoryDetail: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.fuelgauge.BatteryHistoryPreference: void onBindView(android.view.View)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void refreshStats()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addStatusBarWindow()> (1)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.browser.ActivityController: void onResume()> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.search.SearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (2)
<com.android.email.activity.UIControllerBase: void onActivityResume()> (3)
<com.android.email.activity.UIControllerBase: void switchAccount(long,boolean)> (3)
<com.android.email.activity.UIControllerOnePane: void showAccountSpecificWarning(long)> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void showAccountSpecificWarning(long)> (2)
<com.android.email.activity.UIControllerTwoPane: void showAccountSpecificWarning(long)> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long,int)> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> (2)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> (2)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (2)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.inputmethodcommon.InputMethodSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.providers.downloads.DownloadInfo: boolean isReadyToDownload()> (1)
<com.android.providers.downloads.DownloadThread: void checkConnectivity()> (3)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (1)
<com.android.server.content.SyncManager: void access$1200(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void access$100(com.android.server.content.SyncManager)> (3)
<com.android.server.content.SyncManager: void onUserStarting(int)> (1)
<com.android.server.content.SyncManager: void scheduleSyncOperation(com.android.server.content.SyncOperation)> (6)
<com.android.server.content.SyncManager: void updateRunningAccounts()> (4)
<com.android.server.content.SyncManager: void access$1400(com.android.server.content.SyncManager,com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> (3)
<android.net.IConnectivityManager: boolean updateLockdownVpn()> (1)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.SyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.server.net.NetworkPolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<com.android.settings.DataUsageSummary$10: void onLoadFinished(android.content.Loader,com.android.settings.net.ChartData)> (1)
<com.android.settings.DataUsageSummary$4: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DataUsageSummary$CycleEditorFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DataUsageSummary$LimitEditorFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DataUsageSummary$WarningEditorFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DataUsageSummary: void access$500(com.android.settings.DataUsageSummary,boolean)> (2)
<com.android.settings.DataUsageSummary: void access$800(com.android.settings.DataUsageSummary,long)> (3)
<com.android.settings.DataUsageSummary: void access$2400(com.android.settings.DataUsageSummary,long)> (1)
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (8)
<com.android.dreams.phototable.PhotoSourcePlexor: java.io.InputStream getStream(com.android.dreams.phototable.PhotoSource$ImageData,int)> (1)
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (2)
<com.android.dreams.phototable.PhotoTable$PhotoLaunchTask: android.view.View doInBackground(java.lang.Void[])> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.CursorPhotoSource: void fillQueue()> (1)
<com.android.dreams.phototable.LocalSource: void fillQueue()> (2)
<com.android.dreams.phototable.PhotoSourcePlexor: void fillQueue()> (1)
<com.android.dreams.phototable.PicasaSource: void fillQueue()> (2)
<com.android.dreams.phototable.StockSource: void fillQueue()> (2)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void access$100(com.android.settings.fuelgauge.PowerUsageSummary)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void onResume()> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.browser.provider.BrowserProvider: android.database.Cursor doSuggestQuery(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.SuggestionsAdapter$SuggestCursor: void runQuery(java.lang.CharSequence)> (2)
<com.android.email.activity.EmailActivity: void onResume()> (1)
<com.android.email.activity.UIControllerOnePane: void onActivityResume()> (1)
<com.android.email.activity.UIControllerTwoPane: void onActivityResume()> (2)
<com.android.email.activity.UIControllerOnePane: void switchAccount(long,boolean)> (4)
<com.android.email.activity.UIControllerSearchTwoPane: void switchAccount(long,boolean)> (2)
<com.android.email.activity.UIControllerTwoPane: void switchAccount(long,boolean)> (3)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment,android.widget.ProgressBar)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.providers.downloads.DownloadInfo: boolean startDownloadIfReady(java.util.concurrent.ExecutorService)> (1)
<com.android.providers.downloads.DownloadThread: void checkPausedOrCanceled(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload(com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders(com.android.providers.downloads.DownloadThread$State,java.net.HttpURLConnection)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (2)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (2)
<com.android.server.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$10: void onStatusChanged(int)> (2)
<com.android.server.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void access$900(com.android.server.content.SyncManager,int)> (1)
<com.android.server.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<com.android.server.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.server.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,com.android.server.content.SyncManager$ActiveSyncContext)> (4)
<com.android.server.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,com.android.server.content.SyncOperation)> (1)
<com.android.server.content.SyncManager: void scheduleSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle,long,boolean)> (7)
<com.android.server.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void onUserRemoved(int)> (1)
<com.android.server.content.SyncManager: void onUserStopping(int)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<android.net.ConnectivityManager: boolean updateLockdownVpn()> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.settings.net.NetworkPolicyEditor: void write(android.net.NetworkPolicy[])> (1)
<com.android.settings.DataUsageSummary$10: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.settings.DataUsageSummary$ConfirmDataDisableFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DataUsageSummary$12: void onLimitChanged()> (1)
<com.android.settings.DataUsageSummary$5: void onClick(android.view.View)> (1)
<com.android.settings.DataUsageSummary$ConfirmLimitFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.DataUsageSummary$12: void onWarningChanged()> (1)
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (6)
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (6)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoCarousel$PhotoLoadTask: android.graphics.Bitmap doInBackground(java.lang.Void[])> (1)
<com.android.dreams.phototable.PhotoTable$PhotoLaunchTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dreams.phototable.LocalSource: void <init>(android.content.Context,android.content.SharedPreferences)> (3)
<com.android.dreams.phototable.PicasaSource: void <init>(android.content.Context,android.content.SharedPreferences)> (3)
<com.android.dreams.phototable.StockSource: void <init>(android.content.Context,android.content.SharedPreferences)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.fuelgauge.PowerUsageSummary$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.browser.provider.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.browser.SuggestionsAdapter$CursorSource: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SlowFilterTask: java.util.List doInBackground(java.lang.CharSequence[])> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void onActivityResume()> (1)
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: void onAccountSelected(long)> (1)
<com.android.email.activity.UIControllerOnePane: boolean onBackPressed(boolean)> (2)
<com.android.email.activity.UIControllerOnePane: void onAccountSelected(long)> ()
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: void onAccountSelected(long)> (1)
<com.android.email.activity.UIControllerTwoPane: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo,com.android.email.activity.MessageViewFragmentBase$1)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment,android.widget.ProgressBar,com.android.email.activity.MessageViewFragmentBase$1)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.providers.downloads.DownloadService: boolean updateLocked()> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,java.io.InputStream,java.io.OutputStream)> (1)
<com.android.providers.downloads.DownloadThread: void runInternal()> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (3)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> ()
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.server.content.SyncManager$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,int,java.lang.String)> (2)
<com.android.server.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$8: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(android.content.SyncAdapterType,int,boolean)> (1)
<com.android.server.content.SyncManager: void scheduleLocalSync(android.accounts.Account,int,int,java.lang.String)> (1)
<com.android.server.content.SyncManager: void access$800(com.android.server.content.SyncManager,int)> (2)
<com.android.server.content.SyncManager: void access$1000(com.android.server.content.SyncManager,int)> (1)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<com.android.settings.vpn2.VpnSettings$LockdownConfigFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.settings.net.NetworkPolicyEditor$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.widget.ChartDataUsageView$DataUsageChartListener: void onLimitChanged()> (1)
<com.android.settings.widget.ChartDataUsageView$DataUsageChartListener: void onWarningChanged()> (1)
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoTable$LoadNaturalSiblingTask: android.view.View doInBackground(android.view.View[])> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoCarousel$PhotoLoadTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dreams.phototable.CursorPhotoSource: void <init>(android.content.Context,android.content.SharedPreferences)> (3)
<com.android.dreams.phototable.PhotoSourcePlexor: void <init>(android.content.Context,android.content.SharedPreferences)> (4)
<com.android.dreams.phototable.PhotoSource: void <init>(android.content.Context,android.content.SharedPreferences)> (2)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.browser.SuggestionsAdapter$SuggestFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SlowFilterTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.ActionBarController$Callback: void onAccountSelected(long)> (2)
<com.android.email.activity.UIControllerBase: boolean onBackPressed(boolean)> (3)
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: void onUpPressed()> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageViewFragmentBase: void updateAttachmentTab()> (3)
<com.android.email.activity.MessageViewFragmentBase: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (3)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.providers.downloads.DownloadService: boolean access$200(com.android.providers.downloads.DownloadService)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,java.net.HttpURLConnection)> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestionProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.Source: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.server.content.SyncStorageEngine$OnSyncRequestListener: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(java.lang.Object,int,boolean)> (1)
<com.android.settings.net.NetworkPolicyEditor$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.widget.ChartDataUsageView$3: void onSweep(com.android.settings.widget.ChartSweepView,boolean)> (1)
<com.android.dreams.phototable.PhotoTable$LoadNaturalSiblingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dreams.phototable.FlipperDreamSettings: void init()> (3)
<com.android.dreams.phototable.PhotoCarousel: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.dreams.phototable.PhotoTable: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.email.activity.ActionBarController: void onAccountSpinnerItemClicked(int)> (1)
<com.android.email.activity.ActionBarController: void updateTitle()> (2)
<com.android.email.activity.EmailActivity: void onBackPressed()> (1)
<com.android.email.activity.UIControllerBase: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.email.activity.UIControllerBase: void doAutoAdvance()> (8)
<com.android.email.activity.ActionBarController$Callback: void onUpPressed()> (1)
<com.android.email.activity.MessageFileViewFragment: void updateAttachmentTab()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onResume()> (3)
<com.android.email.activity.MessageViewFragment: void updateAttachmentTab()> (1)
<com.android.email.activity.MessageFileViewFragment: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.email.activity.MessageViewFragmentBase: void access$1900(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (3)
<com.android.email.activity.MessageViewFragment: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (18)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.SuggestionCursorProvider: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.SingleSourceCorpus: com.android.quicksearchbox.CorpusResult getSuggestions(java.lang.String,int,boolean)> (2)
<com.android.server.content.SyncStorageEngine: void requestSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.widget.ChartSweepView$OnSweepListener: void onSweep(com.android.settings.widget.ChartSweepView,boolean)> (1)
<com.android.dreams.phototable.FlipperDreamSettings: void onCreate(android.os.Bundle)> (2)
<com.android.dreams.phototable.FlipperDreamSettings: void onResume()> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void init()> (2)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.email.activity.ActionBarController: void access$800(com.android.email.activity.ActionBarController,int)> (1)
<com.android.email.activity.ActionBarController: void access$500(com.android.email.activity.ActionBarController)> (2)
<com.android.email.activity.ActionBarController: void refreshInernal()> (1)
<com.android.email.activity.EmailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.UIControllerOnePane: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.UIControllerTwoPane: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.UIControllerBase$MessageOrderManagerCallback: void onMessageNotFound()> (1)
<com.android.email.activity.UIControllerBase: void onBeforeMessageGone()> (3)
<com.android.email.activity.UIControllerBase: void onMessageNotExists()> (3)
<com.android.email.activity.UIControllerBase: void onMessageSetUnread()> (3)
<com.android.email.activity.UIControllerBase: void onRespondedToInvite(int)> (3)
<com.android.email.activity.UIControllerOnePane: void doAutoAdvance()> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void doAutoAdvance()> (2)
<com.android.email.activity.UIControllerTwoPane: void doAutoAdvance()> (1)
<com.android.email.activity.ActionBarController$2: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageFileViewFragment: void onResume()> (2)
<com.android.email.activity.MessageViewFragment: void onResume()> (2)
<com.android.email.activity.MessageFileViewFragment: void access$1900(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void onSuccess(com.android.emailcommon.provider.EmailContent$Attachment[])> (1)
<com.android.email.activity.MessageViewFragment: void access$1900(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (2)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void reload()> (1)
<com.android.photos.shims.MediaItemsLoader: android.database.Cursor loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: android.database.Cursor loadInBackground()> (1)
<com.android.quicksearchbox.QueryTask: void run()> (2)
<com.android.quicksearchbox.AppsCorpus: com.android.quicksearchbox.CorpusResult getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.SingleSourceCorpus: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.server.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (2)
<com.android.server.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (2)
<com.android.server.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (1)
<com.android.settings.widget.ChartSweepView: void dispatchOnSweep(boolean)> (1)
<com.android.dreams.phototable.PhotoTableDreamSettings: void onCreate(android.os.Bundle)> (2)
<com.android.dreams.phototable.PhotoTableDreamSettings: void onResume()> (3)
<com.android.email.activity.ActionBarController$AccountDropdownPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.ActionBarController$4: void onLoaderReset(android.content.Loader)> (1)
<com.android.email.activity.ActionBarController$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.email.activity.ActionBarController: void access$200(com.android.email.activity.ActionBarController)> (1)
<com.android.email.activity.UIControllerSearchTwoPane: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageOrderManager$Callback: void onMessageNotFound()> (2)
<com.android.email.activity.MessageViewFragment$Callback: void onBeforeMessageGone()> (2)
<com.android.email.activity.UIControllerOnePane: void onBeforeMessageGone()> (1)
<com.android.email.activity.UIControllerTwoPane: void onBeforeMessageGone()> (2)
<com.android.email.activity.MessageViewFragmentBase$Callback: void onMessageNotExists()> (2)
<com.android.email.activity.UIControllerOnePane: void onMessageNotExists()> (1)
<com.android.email.activity.UIControllerTwoPane: void onMessageNotExists()> (2)
<com.android.email.activity.MessageViewFragment$Callback: void onMessageSetUnread()> (1)
<com.android.email.activity.UIControllerOnePane: void onMessageSetUnread()> (1)
<com.android.email.activity.UIControllerTwoPane: void onMessageSetUnread()> (2)
<com.android.email.activity.MessageViewFragment$Callback: void onRespondedToInvite(int)> (1)
<com.android.email.activity.UIControllerOnePane: void onRespondedToInvite(int)> (1)
<com.android.email.activity.UIControllerTwoPane: void onRespondedToInvite(int)> (2)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void onSuccess(java.lang.Object)> (1)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void <init>(com.android.gallery3d.data.Path,java.util.Comparator,com.android.gallery3d.data.MediaSet[],int)> (2)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (2)
<com.android.photos.shims.MediaItemsLoader: java.lang.Object loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: java.lang.Object loadInBackground()> (1)
<com.android.quicksearchbox.util.NamedTask: void run()> (1)
<com.android.quicksearchbox.AppsCorpus: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.server.content.SyncStorageEngine: void readAndDeleteLegacyAccountInfoLocked()> (2)
<com.android.settings.widget.ChartSweepView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.email.activity.ActionBarController$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.email.activity.ActionBarController$3: void run()> (1)
<com.android.email.activity.MessageOrderManager$PostingCallback$2: void run()> (1)
<com.android.email.activity.MessageOrderManager: void adjustCursorPosition()> (2)
<com.android.email.activity.MessageViewFragment: void onDelete()> (1)
<com.android.email.activity.MessageViewFragment: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void onBeforeMessageGone()> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onSuccess(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: void onSuccess(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void onMessageNotExists()> (1)
<com.android.email.activity.MessageViewFragment: void onMarkMessageAsRead(boolean)> (2)
<com.android.email.activity.UIControllerSearchTwoPane: void onMessageSetUnread()> (1)
<com.android.email.activity.MessageViewFragment: void onRespondToInvite(int,int)> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void onRespondedToInvite(int)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: void onSuccess(java.lang.Object)> (2)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getLocalAlbum(com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (2)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker: void loop()> (1)
<com.android.server.content.SyncStorageEngine: void clearAndReadState()> ()
<com.android.server.content.SyncStorageEngine: void <init>(android.content.Context,java.io.File)> (2)
<com.android.email.activity.MessageOrderManager: void moveTo(long)> (1)
<com.android.email.activity.MessageOrderManager: void onCursorOpenDone(android.database.Cursor)> (2)
<com.android.email.activity.MessageViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MoveMessageToDialog$Callback: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onSuccess(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: void onSuccess(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragment: void onMarkAsUnread()> (1)
<com.android.email.activity.MessageViewFragment: void onPostLoadBody()> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: void onSuccess(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: void onPostExecute(java.lang.Object)> (2)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (3)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet access$400(com.android.gallery3d.data.LocalAlbumSet,com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (1)
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (2)
<com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker: void run()> (1)
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine newTestInstance(android.content.Context)> ()
<com.android.server.content.SyncStorageEngine: void init(android.content.Context)> (1)
<com.android.email.activity.UIControllerBase: void updateMessageOrderManager()> (5)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void onCancelled(android.database.Cursor)> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void onSuccess(android.database.Cursor)> (1)
<com.android.email.activity.MessageViewFragmentBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MoveMessageToDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onPostLoadBody()> (2)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.emailcommon.utility.EmailAsyncTask: void callOnPostExecuteForTest(java.lang.Object)> (22)
<com.android.gallery3d.app.ActivityState: void resume()> (12)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.FilmstripPage: void onResume()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onResume()> (2)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.util.ArrayList run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> (24)
<com.android.gallery3d.data.MediaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (8)
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.email.activity.UIControllerBase: void installMessageViewFragment(com.android.email.activity.MessageViewFragment)> (3)
<com.android.email.activity.UIControllerBase: void onActivityStart()> (3)
<com.android.email.activity.UIControllerOnePane: void updateMessageOrderManager()> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void updateMessageOrderManager()> (2)
<com.android.email.activity.UIControllerTwoPane: void updateMessageOrderManager()> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void onSuccess(java.lang.Object)> (1)
<com.android.email.activity.MessageFileViewFragment: void onPostLoadBody()> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onSuccess(java.lang.String[])> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$6: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageList$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSetupNames$2: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$2: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.FilmstripPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState,boolean)> (1)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (10)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (6)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.Gallery: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (3)
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> (3)
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void delete(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void getPanoramaSupport(com.android.gallery3d.data.Path,com.android.gallery3d.data.MediaObject$PanoramaSupportCallback)> ()
<com.android.gallery3d.data.DataManager: void onStitchingResult(android.net.Uri)> (1)
<com.android.gallery3d.data.DataManager: void rotate(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void resolveAlbumPath()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void setChoosenAlbum(android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgetsInternal(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList getSelectedMediaObjects(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean execute(com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.MediaItemsLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.photos.shims.MediaSetLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.gallery3d.data.ClusterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.DataManager: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (5)
<com.android.gallery3d.data.FilterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.UriSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.server.content.ContentService: com.android.server.content.SyncManager getSyncManager()> (20)
<com.android.email.activity.UIControllerBase: void onInstallFragment(android.app.Fragment)> (4)
<com.android.email.activity.UIControllerOnePane: void installMessageViewFragment(com.android.email.activity.MessageViewFragment)> (1)
<com.android.email.activity.UIControllerTwoPane: void installMessageViewFragment(com.android.email.activity.MessageViewFragment)> (2)
<com.android.email.activity.EmailActivity: void onStart()> (1)
<com.android.email.activity.UIControllerOnePane: void onActivityStart()> (1)
<com.android.email.activity.UIControllerTwoPane: void onActivityStart()> (2)
<com.android.emailcommon.utility.EmailAsyncTask: void onCancelled(java.lang.Object)> (23)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onSuccess(java.lang.Object)> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (8)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (6)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (2)
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (2)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.Gallery: void startDefaultPage()> (2)
<com.android.gallery3d.app.Gallery: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (3)
<com.android.gallery3d.app.PhotoPage: void switchToGrid()> (3)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (5)
<com.android.gallery3d.app.Gallery: void initializeByIntent()> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (9)
<com.android.gallery3d.app.FilmstripPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onGetContent(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computePanoramaSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computeSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: android.content.Intent getIntentBySingleSelectedPath(java.lang.String)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> (10)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void <init>(com.android.gallery3d.data.DataManager,java.lang.String)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void monitorRootPath()> (1)
<com.android.gallery3d.app.AlbumPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean,int)> (3)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingResult(android.net.Uri)> ()
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (8)
<com.android.gallery3d.gadget.MediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgets(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList access$100(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean access$700(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.LoaderCompatShim: void deleteItemWithPath(java.lang.Object)> (3)
<com.android.gallery3d.data.ClusterAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> (2)
<com.android.gallery3d.data.ClusterAlbum: void delete()> (2)
<com.android.gallery3d.data.FilterTypeSet: void delete()> (2)
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.server.content.ContentService: void systemReady()> (1)
<com.android.email.activity.EmailActivity: void onInstallFragment(android.app.Fragment)> (1)
<com.android.email.activity.UIControllerOnePane: void onInstallFragment(android.app.Fragment)> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void onInstallFragment(android.app.Fragment)> (2)
<com.android.email.activity.UIControllerTwoPane: void onInstallFragment(android.app.Fragment)> (1)
<com.android.email.activity.UIControllerSearchTwoPane: void installMessageViewFragment(com.android.email.activity.MessageViewFragment)> (2)
<com.android.email.activity.UIControllerSearchTwoPane: void onActivityStart()> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$6: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageList$1: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$1: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSetupNames$2: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$2: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: void onCancelled(java.lang.Object)> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void onCancelled(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: void onCancelled(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: void onCancelled(java.lang.Object)> (2)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (9)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$6: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.PhotoPage: void onSingleTapUp(int,int)> (3)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.camera.ActivityBase: void onResume()> (3)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (3)
<com.android.gallery3d.app.DialogPicker: void onResume()> (3)
<com.android.gallery3d.app.Gallery: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumPage: void switchToFilmstrip()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1100(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.SinglePhotoPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.camera.CameraActivity: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (4)
<com.android.camera.SecureCameraActivity: com.android.gallery3d.ui.ScreenNail createCameraScreenNail(boolean)> (1)
<com.android.camera.CameraActivity: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (4)
<com.android.camera.SecureCameraActivity: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onStateResult(int,int,android.content.Intent)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.FilmstripPage: void switchToGrid()> (1)
<com.android.gallery3d.app.PhotoPage: void onAlbumModeSelected(int)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void switchToGrid()> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void onUpPressed()> (1)
<com.android.gallery3d.app.Gallery: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumSetPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$600(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$700(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> (3)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context)> (3)
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context,java.lang.String)> ()
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context)> (3)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onCreate()> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> (6)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.UriSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ContentListener: void onContentDirty()> (4)
<com.android.gallery3d.gadget.PhotoAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.photos.AlbumFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.AlbumSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.PhotoSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.gallery3d.data.MediaSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (15)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.MediaObject: void delete()> (22)
<com.android.gallery3d.data.MediaSet: void delete()> (2)
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> (21)
<com.android.email.activity.FragmentInstallable: void onInstallFragment(android.app.Fragment)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: void callOnCancelledForTest(java.lang.Object)> (22)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.AlbumPage: void access$1700(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1700(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished(boolean)> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.FilmstripPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.camera.CameraActivity: void onResume()> (4)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumPage: void onAlbumModeSelected(int)> (1)
<com.android.camera.PanoramaModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.PhotoModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.VideoModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (1)
<com.android.camera.ActivityBase: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.ActivityState: void onStateResult(int,int,android.content.Intent)> (4)
<com.android.gallery3d.app.FilmstripPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.FilmstripPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.GalleryActionBar$OnAlbumModeSelectedListener: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onBackPressed()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onBackPressed()> (2)
<com.android.gallery3d.ui.ActionModeHandler: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.photos.AlbumFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.PhotoSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.AlbumSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.MenuExecutor: com.android.gallery3d.data.Path getSingleSelectedPath()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.data.MediaSet: void notifyContentChanged()> (15)
<com.android.gallery3d.gadget.LocalPhotoSource$1: void onChange(boolean)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (16)
<com.android.gallery3d.data.MediaSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (16)
<com.android.gallery3d.data.SecureAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ActionImage: void delete()> (2)
<com.android.gallery3d.data.CameraShortcutImage: void delete()> (3)
<com.android.gallery3d.data.ClusterAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbum: void delete()> (2)
<com.android.gallery3d.data.EmptyAlbumImage: void delete()> (3)
<com.android.gallery3d.data.FilterDeleteSet: void delete()> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: void delete()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMediaItem: void delete()> (2)
<com.android.gallery3d.data.MediaItem: void delete()> (3)
<com.android.gallery3d.data.SecureAlbum: void delete()> (2)
<com.android.gallery3d.data.SingleItemAlbum: void delete()> (2)
<com.android.gallery3d.data.SnailAlbum: void delete()> (3)
<com.android.gallery3d.data.SnailItem: void delete()> (2)
<com.android.gallery3d.data.UnlockImage: void delete()> (3)
<com.android.gallery3d.data.UriImage: void delete()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMergeAlbum: void delete()> (2)
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> (7)
<com.android.gallery3d.app.AlbumSetPage: boolean albumShouldOpenInFilmstrip(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem findMediaItem(com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> (1)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (17)
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (16)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.ui.SelectionManager: boolean expandMediaSet(java.util.ArrayList,com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.email.activity.UiUtilities: void installFragment(android.app.Fragment)> (3)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$6: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageList$1: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$1: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSetupNames$2: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$2: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: void callOnCancelledForTest(java.lang.Object)> (1)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (6)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (6)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onSingleTapUp(float,float)> (1)
<com.android.camera.SecureCameraActivity: void onResume()> (4)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.camera.CameraModule: void init(com.android.camera.CameraActivity,android.view.View,boolean)> (2)
<com.android.camera.CameraActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.ManageCachePage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.SlideshowPage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.ui.PopupList$OnPopupItemClickListener: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$500(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(android.view.MenuItem,java.lang.String,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: int setIndex()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.data.ChangeNotifier: void onChange(boolean)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ClusterAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void notifyContentChanged()> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterTypeSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.SecureAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SingleItemAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void notifyContentChanged()> (1)
<com.android.gallery3d.data.ClusterAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (21)
<com.android.gallery3d.data.SecureAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(android.database.Cursor)> (1)
<com.android.gallery3d.data.ClusterAlbum$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.data.FilterTypeSet$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.AlbumPage$1: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumPage: void prepareAnimationBackToFilmstrip(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void prepareSlotContent(int)> (3)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.data.MediaSet,int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterDeleteSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SecureAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SnailAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: int findIndexOfTarget(com.android.gallery3d.app.PhotoDataAdapter$UpdateInfo)> (1)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SecureAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.email.activity.MailboxListFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.email.activity.MessageListFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onActivityCreated(android.os.Bundle)> (3)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (9)
<com.android.camera.ActivityBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.camera.CameraActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.SecureCameraActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.gallery3d.app.Gallery: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.camera.ActivityBase: void onBackPressed()> (3)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.Gallery: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (3)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1800(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onSingleTapUp(float,float)> (1)
<com.android.camera.CameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (2)
<com.android.camera.SecureCameraActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.ui.PopupList$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.ui.DialogDetailsView: void reloadDetails()> (2)
<com.android.gallery3d.data.ChangeNotifier: void fakeChange()> (2)
<com.android.gallery3d.data.DataManager$NotifyBroker: void onChange(boolean)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ClusterAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void sendRequest(int,com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterTypeSet: void onContentDirty()> (1)
<com.android.gallery3d.data.LocalAlbumSet$1: void run()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyChange()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClustersContents()> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FaceClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SizeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.TagClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.MediaSet$ItemConsumer: void consume(int,com.android.gallery3d.data.MediaItem)> (3)
<com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage$4: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1200(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setContentWindow(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.email.activity.MessageFileViewFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.email.activity.MessageViewFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (16)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.CameraActivity: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onPause()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onPause()> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (6)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.camera.CameraActivity: void doChangeCamera(int)> (3)
<com.android.camera.SecureCameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void reloadDetails()> (1)
<com.android.gallery3d.ui.DialogDetailsView: void show()> (1)
<com.android.gallery3d.data.LocalAlbumSet: void fakeChange()> ()
<com.android.gallery3d.data.SecureAlbum: void addMediaItem(boolean,int)> (2)
<com.android.gallery3d.data.FilterDeleteSet: void addDeletion(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void clearDeletion()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void removeDeletion(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.PhotoPage: void notifyScreenNailChanged()> (3)
<com.android.photos.shims.LoaderCompatShim: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.LocalSource: void processMapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,boolean)> (1)
<com.android.gallery3d.ui.PhotoFallbackEffect: void setPositionProvider(com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onLongTap(int)> (2)
<com.android.gallery3d.app.AlbumPage$4: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$DataListener: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setActiveWindow(int,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (13)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (14)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.SecureCameraActivity: void onBackPressed()> (3)
<com.android.camera.ActivityBase: void onPause()> (3)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (3)
<com.android.gallery3d.app.DialogPicker: void onPause()> (3)
<com.android.gallery3d.app.Gallery: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.camera.CameraActivity: void access$200(com.android.camera.CameraActivity,int)> (2)
<com.android.camera.CameraActivity: void onCameraSelected(int)> (2)
<com.android.camera.SecureCameraActivity: void doChangeCamera(int)> (1)
<com.android.gallery3d.ui.DetailsHelper: void reloadDetails()> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void show()> (1)
<com.android.gallery3d.app.PhotoPage: void addSecureAlbumItem(boolean,int)> (3)
<com.android.gallery3d.data.SecureAlbum: void onStitchingQueued(android.net.Uri)> (1)
<com.android.gallery3d.app.PhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.app.PhotoPage: void onUndoDeleteImage()> (3)
<com.android.gallery3d.app.AppBridge$Server: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.FilmstripPage: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void notifyScreenNailChanged()> (1)
<com.android.photos.AlbumSetFragment: java.util.ArrayList getSubItemUrisForItem(java.lang.Object)> ()
<com.android.gallery3d.data.LocalSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.app.ManageCachePage$4: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void onVisibleRangeChanged(int,int)> ()
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (12)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (12)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.camera.CameraActivity: void onPause()> (4)
<com.android.camera.CameraActivity$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.camera.SecureCameraActivity: void access$200(com.android.camera.CameraActivity,int)> (1)
<com.android.camera.SecureCameraActivity: void onCameraSelected(int)> (1)
<com.android.camera.ui.CameraSwitcher$CameraSwitchListener: void onCameraSelected(int)> (1)
<com.android.gallery3d.app.PhotoPage: void updateUIForCurrentPhoto()> (4)
<com.android.gallery3d.ui.DetailsHelper: void show()> (3)
<com.android.gallery3d.app.AppBridge$Server: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingQueued(android.net.Uri)> ()
<com.android.gallery3d.app.FilmstripPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onUndoDeleteImage()> (1)
<com.android.camera.ActivityBase$MyAppBridge: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (7)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.camera.SecureCameraActivity: void onPause()> (4)
<com.android.camera.ui.CameraSwitcher: void onCameraSelected(int)> (1)
<com.android.gallery3d.app.FilmstripPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (9)
<com.android.gallery3d.app.PhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (5)
<com.android.gallery3d.app.SinglePhotoPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.AlbumPage: void showDetails()> (1)
<com.android.gallery3d.app.AlbumSetPage: void showDetails()> (1)
<com.android.gallery3d.app.PhotoPage: void showDetails()> (3)
<com.android.camera.ActivityBase$MyAppBridge: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.ui.PhotoView$1: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void access$500(com.android.camera.ActivityBase$MyAppBridge)> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.camera.ui.CameraSwitcher: void access$000(com.android.camera.ui.CameraSwitcher,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: void onPictureCenter(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void requestDeferredUpdate()> (3)
<com.android.gallery3d.app.PhotoPage: void refreshHidingMessage()> (6)
<com.android.gallery3d.app.PhotoPage: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void onActionBarWanted()> (3)
<com.android.gallery3d.app.FilmstripPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (11)
<com.android.gallery3d.app.SinglePhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void showDetails()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void showDetails()> (1)
<com.android.camera.ActivityBase: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (2)
<com.android.gallery3d.ui.GLView$OnClickListener: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.camera.ActivityBase: void notifyScreenNailChanged()> (3)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.camera.ui.CameraSwitcher$1: void onClick(android.view.View)> (1)
<com.android.gallery3d.app.FilmstripPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.FilmstripPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.PhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (5)
<com.android.gallery3d.app.PhotoPage: void onFilmModeChanged(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void showBars()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.FilmstripPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.FilmstripPage: void onActionBarWanted()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarWanted()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarWanted()> (2)
<com.android.gallery3d.app.FilmstripPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage$6: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.camera.CameraActivity: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (4)
<com.android.camera.SecureCameraActivity: void addSecureAlbumItemIfNeeded(boolean,android.net.Uri)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.camera.ActivityBase: void onLayoutChange(android.view.View,int,int,int,int)> (3)
<com.android.camera.CameraActivity: void notifyScreenNailChanged()> (6)
<com.android.camera.SecureCameraActivity: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.ui.PhotoView$FullPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.app.FilmstripPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$8: void onConfirmDialogDismissed(boolean)> (1)
<com.android.gallery3d.app.PhotoPage$MyMenuVisibilityListener: void onMenuVisibilityChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void showBars()> (1)
<com.android.gallery3d.app.PhotoPage: void toggleBars()> (3)
<com.android.gallery3d.app.PhotoPage: void wantBars()> (3)
<com.android.gallery3d.app.SinglePhotoPage: void showBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimationLocked(int)> (1)
<com.android.gallery3d.ui.PhotoView: void captureAnimationDone(int)> (1)
<com.android.gallery3d.ui.PhotoView: void updateActionBar()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (2)
<com.android.camera.PanoramaModule$9: void run()> (1)
<com.android.camera.PhotoModule$3: void onMediaSaved(android.net.Uri)> (1)
<com.android.camera.VideoModule$1: void onMediaSaved(android.net.Uri)> (1)
<com.android.camera.CameraActivity: void onLayoutChange(android.view.View,int,int,int,int)> (2)
<com.android.camera.SecureCameraActivity: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.ui.LayoutChangeNotifier$Listener: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.PanoramaModule: void configMosaicPreview(int,int)> (3)
<com.android.camera.PhotoModule: void onScreenSizeChanged(int,int,int,int)> (1)
<com.android.camera.PhotoModule: void startPreview()> (2)
<com.android.camera.PhotoModule: void updatePreviewSize(com.android.camera.CameraScreenNail)> (1)
<com.android.camera.VideoModule: void updateCameraScreenNailSize(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Picture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onConfirmDialogDismissed(boolean)> (2)
<com.android.gallery3d.ui.PhotoView: void setFilmMode(boolean)> (16)
<com.android.gallery3d.app.FilmstripPage: void toggleBars()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void toggleBars()> (1)
<com.android.gallery3d.app.FilmstripPage: void wantBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (6)
<com.android.gallery3d.app.SinglePhotoPage: void wantBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$900(com.android.gallery3d.ui.PhotoView,int)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void updateCurrentIndex(int)> (1)
<com.android.camera.MediaSaveService$OnMediaSavedListener: void onMediaSaved(android.net.Uri)> (2)
<com.android.camera.PanoramaModule: void onLayoutChange(android.view.View,int,int,int,int)> (1)
<com.android.camera.ui.LayoutChangeHelper: void onLayout(boolean,int,int,int,int)> (2)
<com.android.camera.PanoramaModule: void access$1700(com.android.camera.PanoramaModule,int,int)> (2)
<com.android.camera.PanoramaModule: void onResumeAfterSuper()> (1)
<com.android.camera.PhotoController: void onScreenSizeChanged(int,int,int,int)> (1)
<com.android.camera.PhotoModule: void access$1500(com.android.camera.PhotoModule)> (1)
<com.android.camera.PhotoModule: void setupPreview()> (5)
<com.android.camera.VideoModule: void setCameraParameters()> (3)
<com.android.gallery3d.ui.PhotoView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.gallery3d.app.PhotoPage: void transitionFromAlbumPageIfNeeded()> (3)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void resetToFirstPicture()> (1)
<com.android.gallery3d.app.FilmstripPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: boolean switchWithCaptureAnimation(int)> (4)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void moveTo(int)> (2)
<com.android.camera.MediaSaveService$ImageSaveTask: void onPostExecute(android.net.Uri)> (1)
<com.android.camera.MediaSaveService$VideoSaveTask: void onPostExecute(android.net.Uri)> (1)
<com.android.camera.PreviewFrameLayout: void onLayout(boolean,int,int,int,int)> (3)
<com.android.camera.ui.LayoutNotifyView: void onLayout(boolean,int,int,int,int)> (1)
<com.android.camera.PanoramaModule$WaitProcessorTask: void onPostExecute(java.lang.Void)> (1)
<com.android.camera.CameraModule: void onResumeAfterSuper()> (2)
<com.android.camera.PhotoUI$1: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)> (1)
<com.android.camera.PhotoModule$CameraStartUpThread: void run()> (3)
<com.android.camera.PhotoModule: void access$1700(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onCaptureRetake()> (1)
<com.android.camera.PhotoModule: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void switchCamera()> (2)
<com.android.camera.PhotoModule: void updateCameraParametersPreference()> (1)
<com.android.camera.VideoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoModule: void startPreview()> (5)
<com.android.camera.VideoModule: void updateCameraAppView()> (1)
<com.android.gallery3d.ui.GLView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (12)
<com.android.gallery3d.app.FilmstripPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.app.AppBridge$Server: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.PhotoPage$Model: void moveTo(int)> (2)
<com.android.gallery3d.ui.PhotoView$Model: void moveTo(int)> (5)
<com.android.camera.MediaSaveService$ImageSaveTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.MediaSaveService$VideoSaveTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.PanoramaModule$WaitProcessorTask: void onPostExecute(java.lang.Object)> (1)
<com.android.camera.PhotoModule: void onResumeAfterSuper()> (1)
<com.android.camera.PhotoModule$JpegPictureCallback: void onPictureTaken(byte[],android.hardware.Camera)> (1)
<com.android.camera.PhotoController: void onCaptureRetake()> (1)
<com.android.camera.PhotoController: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void access$2300(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onCameraPickerClicked(int)> (1)
<com.android.camera.PhotoModule: void setCameraParameters(int)> (5)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.VideoModule: void onCancelBgTraining(android.view.View)> ()
<com.android.camera.VideoModule: boolean stopVideoRecording()> (4)
<com.android.camera.VideoModule: void access$800(com.android.camera.VideoModule)> (7)
<com.android.camera.VideoModule: void checkQualityAndStartPreview()> (2)
<com.android.camera.VideoModule: void switchCamera()> (2)
<com.android.camera.CameraModule: void updateCameraAppView()> (1)
<com.android.gallery3d.app.AlbumPage$2: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.PhotoPage$4: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.EdgeView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GLRootView: void onDrawFrameLocked(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.ui.GLView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (13)
<com.android.gallery3d.ui.PreparePageFadeoutTexture: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.SlotView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.UndoBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyScaleListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToFirstImage()> (1)
<com.android.gallery3d.ui.PhotoView: void switchToImage(int)> (7)
<com.android.gallery3d.ui.PhotoView: void switchToNextImage()> (3)
<com.android.gallery3d.ui.PhotoView: void switchToPrevImage()> (2)
<com.android.camera.PhotoUI$6: void onClick(android.view.View)> (1)
<com.android.camera.PhotoUI: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void onPreviewTextureCopied()> (1)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onCameraPickerClicked(int)> (2)
<com.android.camera.PhotoModule: void access$1300(com.android.camera.PhotoModule,int)> (1)
<com.android.camera.PhotoModule: void cancelAutoFocus()> (2)
<com.android.camera.PhotoModule: void setCameraParametersWhenIdle(int)> (2)
<com.android.camera.PhotoModule: void setFocusParameters()> (1)
<com.android.camera.PieController: void onSettingChanged(com.android.camera.ListPreference)> (5)
<com.android.camera.VideoModule: boolean access$1300(com.android.camera.VideoModule)> (1)
<com.android.camera.VideoModule: void onError(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoModule: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: void onStopVideoRecording()> (4)
<com.android.camera.VideoModule$4: void run()> (1)
<com.android.camera.VideoModule$5: void run()> (1)
<com.android.camera.VideoModule: void onShutterButtonClick()> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.camera.VideoModule: void keepScreenOnAwhile()> (3)
<com.android.camera.VideoModule: void updateRecordingTime()> (2)
<com.android.camera.VideoModule: boolean updateEffectSelection()> (1)
<com.android.camera.VideoModule: void onEffectsUpdate(int,int)> (1)
<com.android.camera.VideoModule: void access$1200(com.android.camera.VideoModule)> (7)
<com.android.camera.VideoModule: void onCameraPickerClicked(int)> (1)
<com.android.camera.CameraActivity: void updateCameraAppView()> (2)
<com.android.gallery3d.ui.GLRootView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.app.AlbumPage$2: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.ui.ScrollBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLRoot$OnGLIdleListener: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void access$200(com.android.camera.ActivityBase$MyAppBridge,int)> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToNextPicture()> (3)
<com.android.gallery3d.ui.PhotoView: void switchFocus()> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToPrevPicture()> (3)
<com.android.camera.CameraModule: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoMenu$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.FocusOverlayManager$Listener: void cancelAutoFocus()> (1)
<com.android.camera.PhotoController: void cancelAutoFocus()> (1)
<com.android.camera.PhotoModule: void access$1900(com.android.camera.PhotoModule,int)> (2)
<com.android.camera.PhotoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.FocusOverlayManager$Listener: void setFocusParameters()> (3)
<com.android.camera.PhotoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PieController$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.PieController$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoModule$MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.VideoController: void onReviewCancelClicked(android.view.View)> (1)
<com.android.camera.VideoModule: boolean onBackPressed()> (1)
<com.android.camera.VideoModule: void onInfo(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick()> (1)
<com.android.camera.VideoModule: void onUserInteraction()> (1)
<com.android.camera.VideoModule: void access$400(com.android.camera.VideoModule)> (4)
<com.android.camera.VideoModule: void startVideoRecording()> (1)
<com.android.camera.EffectsRecorder$EffectsListener: void onEffectsUpdate(int,int)> (1)
<com.android.camera.VideoModule: void onPreviewTextureCopied()> (1)
<com.android.camera.VideoModule: void initializeVideoSnapshot()> (2)
<com.android.camera.ActivityBase: void updateCameraAppView()> (2)
<com.android.camera.SecureCameraActivity: void updateCameraAppView()> (2)
<com.android.gallery3d.ui.PhotoView$FullPicture: void drawTileView(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.GLRootView$IdleRunner: void run()> (1)
<com.android.camera.ActivityBase: void gotoGallery()> (2)
<com.android.gallery3d.ui.PhotoView: boolean snapToNeighborImage()> (2)
<com.android.gallery3d.ui.PhotoView: boolean swipeImages(float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToHitPicture(int,int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$800(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.camera.CameraActivity: void onPreviewTextureCopied()> (2)
<com.android.camera.ui.PieItem$OnClickListener: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.FocusOverlayManager: void cancelAutoFocus()> (3)
<com.android.camera.PhotoUI: void openMenu()> (2)
<com.android.camera.PhotoModule: void setLocationPreference(java.lang.String)> (1)
<com.android.camera.FocusOverlayManager: void lockAeAwbIfNeeded()> (2)
<com.android.camera.FocusOverlayManager: void onSingleTapUp(int,int)> (1)
<com.android.camera.FocusOverlayManager: void unlockAeAwbIfNeeded()> (1)
<com.android.camera.PhotoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.ui.ListPrefSettingPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.TimeIntervalPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.MoreSettingPopup$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.VideoUI$3: void onClick(android.view.View)> (1)
<com.android.camera.CameraModule: boolean onBackPressed()> (1)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> (2)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.camera.CameraModule: void onUserInteraction()> (1)
<com.android.camera.EffectsRecorder$1: void run()> (1)
<com.android.camera.ActivityBase: void onFullScreenChanged(boolean)> (2)
<com.android.camera.CameraActivity: void gotoGallery()> (3)
<com.android.camera.SecureCameraActivity: void gotoGallery()> (1)
<com.android.gallery3d.ui.PhotoView: boolean access$3700(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: void snapback()> (2)
<com.android.gallery3d.ui.PhotoView: boolean access$3500(com.android.gallery3d.ui.PhotoView,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void access$3200(com.android.gallery3d.ui.PhotoView,int,int)> (1)
<com.android.camera.ActivityBase: void onPreviewTextureCopied()> (1)
<com.android.camera.SecureCameraActivity: void onPreviewTextureCopied()> (2)
<com.android.camera.ui.PieItem: void performClick()> (1)
<com.android.camera.FocusOverlayManager: void access$000(com.android.camera.FocusOverlayManager)> (3)
<com.android.camera.FocusOverlayManager: void onShutterUp()> (2)
<com.android.camera.PhotoUI: void access$400(com.android.camera.PhotoUI)> (1)
<com.android.camera.PhotoUI: void onSwipe(int)> (1)
<com.android.camera.PhotoModule: void access$3000(com.android.camera.PhotoModule,java.lang.String)> (2)
<com.android.camera.FocusOverlayManager: void onAutoFocus(boolean,boolean)> (1)
<com.android.camera.FocusOverlayManager: void onShutterDown()> (1)
<com.android.camera.PhotoModule: void onSingleTapUp(android.view.View,int,int)> (2)
<com.android.camera.ui.CountdownTimerPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.ListPrefSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.TimeIntervalPopup: void updateInputState()> (1)
<com.android.camera.ui.MoreSettingPopup: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.CameraActivity: void closeModule(com.android.camera.CameraModule)> (2)
<com.android.camera.VideoUI: void clickShutter()> (1)
<com.android.camera.CameraActivity: void onUserInteraction()> (3)
<com.android.camera.ActivityBase$MyAppBridge: void onFullScreenChanged(boolean)> (1)
<com.android.camera.CameraActivity: void onFullScreenChanged(boolean)> (2)
<com.android.camera.PhotoUI$2: void onClick(android.view.View)> (1)
<com.android.camera.VideoUI$5: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: void onUp()> (1)
<com.android.gallery3d.ui.PhotoView: void access$1500(com.android.gallery3d.ui.PhotoView)> (2)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.ActivityBase$MyAppBridge: void onPreviewTextureCopied()> (1)
<com.android.camera.ui.PieRenderer$3: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.camera.PhotoModule: void onCountDownFinished()> (2)
<com.android.camera.PhotoModule: void onShutterButtonFocus(boolean)> (3)
<com.android.camera.PhotoUI$3: void onClick(android.view.View)> (1)
<com.android.camera.PreviewGestures$SwipeListener: void onSwipe(int)> (1)
<com.android.camera.PhotoModule$4: void onCancel(android.content.DialogInterface)> (1)
<com.android.camera.PhotoModule$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.camera.PhotoModule$AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)> (1)
<com.android.camera.CameraModule: void onSingleTapUp(android.view.View,int,int)> ()
<com.android.camera.PhotoController: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void updateInputState()> (1)
<com.android.camera.ui.TimeIntervalPopup: void access$000(com.android.camera.ui.TimeIntervalPopup)> (1)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.SecureCameraActivity: void closeModule(com.android.camera.CameraModule)> (1)
<com.android.camera.VideoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.SecureCameraActivity: void onUserInteraction()> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void onUserInteraction()> (1)
<com.android.gallery3d.app.AppBridge: void onFullScreenChanged(boolean)> (2)
<com.android.camera.SecureCameraActivity: void onFullScreenChanged(boolean)> (2)
<com.android.gallery3d.ui.GestureRecognizer$Listener: void onUp()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.CameraScreenNail$Listener: void onPreviewTextureCopied()> (1)
<com.android.camera.PhotoController: void onCountDownFinished()> ()
<com.android.camera.ui.CountDownView$OnCountDownFinishedListener: void onCountDownFinished()> (1)
<com.android.camera.PhotoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.PhotoModule: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonFocus(boolean)> (1)
<com.android.camera.PreviewGestures: boolean dispatchTouch(android.view.MotionEvent)> (2)
<com.android.camera.PhotoUI: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void access$000(com.android.camera.ui.CountdownTimerPopup)> (1)
<com.android.camera.ui.TimeIntervalPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (2)
<com.android.camera.CameraModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.camera.CameraScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.camera.ui.CountDownView: void remainingSecondsChanged(int)> (2)
<com.android.camera.CameraModule: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ShutterButton: void callShutterButtonFocus(boolean)> (2)
<com.android.camera.PhotoUI: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.VideoUI: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.PreviewGestures$SingleTapListener: void onSingleTapUp(android.view.View,int,int)> (1)
<com.android.camera.ui.CountdownTimerPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean changeIndex(int)> (2)
<com.android.camera.ui.InLineSettingMenu: boolean changeIndex(int)> (1)
<com.android.gallery3d.ui.DownUpDetector$DownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SurfaceTextureScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (2)
<com.android.camera.ui.CountDownView: void access$200(com.android.camera.ui.CountDownView,int)> (1)
<com.android.camera.ui.CountDownView: void startCountDown(int,boolean)> (1)
<com.android.camera.CameraActivity: boolean onKeyUp(int,android.view.KeyEvent)> (4)
<com.android.camera.ShutterButton: void access$000(com.android.camera.ShutterButton,boolean)> (1)
<com.android.camera.ShutterButton: void drawableStateChanged()> (2)
<com.android.camera.PhotoModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.VideoModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingCheckBox$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.gallery3d.ui.DownUpDetector: void setState(boolean,android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail: void access$001(com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.gallery3d.ui.ScreenNail: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (3)
<com.android.camera.PhotoUI: void startCountDown(int,boolean)> (1)
<com.android.camera.ActivityBase: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<com.android.camera.SecureCameraActivity: boolean onKeyUp(int,android.view.KeyEvent)> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.camera.ShutterButton$1: void run()> (1)
<com.android.camera.CameraModule: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail$1: void onDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.gallery3d.ui.PhotoView: com.android.gallery3d.ui.PhotoFallbackEffect buildFallbackEffect(com.android.gallery3d.ui.GLView,com.android.gallery3d.glrenderer.GLCanvas)> ()
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.TileImageView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.camera.PhotoModule: void onShutterButtonClick()> (4)
<com.android.camera.CameraActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.ui.GestureRecognizer: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail$DrawClient: void onDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (1)
<com.android.camera.PhotoModule$1: void run()> (1)
<com.android.camera.SecureCameraActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.camera.CameraScreenNail: void directDraw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)> (3)
<com.android.camera.CaptureAnimManager: boolean drawAnimation(com.android.gallery3d.glrenderer.GLCanvas,com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.RawTexture,int,int,int,int)> (1)
<com.android.camera.SwitchAnimManager: boolean drawAnimation(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int,com.android.camera.CameraScreenNail,com.android.gallery3d.glrenderer.RawTexture)> (1)
<com.android.server.ConnectivityService: void enforceTetherAccessPermission()> (9)
<com.android.server.ConnectivityService: boolean isTetheringSupported()> (10)
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfacePairs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isTetheringSupported()> ()
<android.net.IConnectivityManager$Stub: boolean isTetheringSupported()> (2)
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)> (3)
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int getLastTetherError(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableBluetoothRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableUsbRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableWifiRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheredIfacePairs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager: boolean isTetheringSupported()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> ()
<android.net.IConnectivityManager$Stub: int setUsbTethering(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<com.android.server.ConnectivityService: void access$1700(com.android.server.ConnectivityService,int,boolean)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: int getLastTetherError(java.lang.String)> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheredIfacePairs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheredIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> (1)
<android.net.ConnectivityManager: boolean isTetheringSupported()> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<android.net.IConnectivityManager: int setUsbTethering(boolean)> (1)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<com.android.server.ConnectivityService: void access$1500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$1400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)> (1)
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> (3)
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> (1)
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (5)
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsTethering()> (1)
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> (1)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<android.net.ConnectivityManager: int setUsbTethering(boolean)> (1)
<android.net.ConnectivityManager: int tether(java.lang.String)> (2)
<android.net.ConnectivityManager: int untether(java.lang.String)> (2)
<com.android.settings.TetherSettings: void updateUsbState(java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<com.android.bluetooth.pan.PanService: java.lang.String enableTethering(java.lang.String)> (1)
<com.android.settings.Utils: int getTetheringLabel(android.net.ConnectivityManager)> (2)
<com.android.settings.TetherSettings: void updateState()> (2)
<android.net.wifi.WifiStateMachine: boolean isWifiTethered(java.util.ArrayList)> (1)
<android.net.wifi.WifiStateMachine: boolean startTethering(java.util.ArrayList)> (1)
<com.android.settings.wifi.WifiApEnabler: void <init>(android.content.Context,android.preference.CheckBoxPreference)> (1)
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsUidDetail()> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.settings.TetherSettings: void setUsbTethering(boolean)> (2)
<android.net.wifi.WifiStateMachine: void stopTethering()> (1)
<com.android.settings.TetherSettings: void updateState(java.lang.String[],java.lang.String[],java.lang.String[])> (2)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<com.android.settings.net.UidDetailProvider: com.android.settings.net.UidDetail buildUidDetail(int)> (1)
<com.android.settings.TetherSettings: void access$300(com.android.settings.TetherSettings)> (1)
<com.android.settings.TetherSettings: void onStart()> (3)
<android.net.wifi.WifiStateMachine: boolean access$22400(android.net.wifi.WifiStateMachine,java.util.ArrayList)> (3)
<android.net.wifi.WifiStateMachine: boolean access$22000(android.net.wifi.WifiStateMachine,java.util.ArrayList)> (1)
<com.android.server.net.NetworkStatsService: void bootstrapStatsLocked()> (1)
<com.android.server.net.NetworkStatsService: void performPollLocked(int)> (4)
<com.android.settings.TetherSettings: void startTethering()> (2)
<android.net.wifi.WifiStateMachine: void access$23200(android.net.wifi.WifiStateMachine)> (1)
<com.android.settings.TetherSettings: void access$100(com.android.settings.TetherSettings,java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<com.android.settings.net.UidDetailProvider: com.android.settings.net.UidDetail getUidDetail(int,boolean)> (4)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.SettingsPreferenceFragment: void onStart()> (4)
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$TetheringState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.net.NetworkStatsService: void systemReady()> (1)
<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.net.NetworkStatsService: void performPoll(int)> (2)
<com.android.server.net.NetworkStatsService: void removeUidsLocked(int[])> (2)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void startProvisioningIfNecessary(int)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<com.android.settings.DataUsageSummary$8: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.settings.DataUsageSummary$UidDetailTask: com.android.settings.net.UidDetail doInBackground(java.lang.Void[])> (1)
<com.android.settings.DataUsageSummary$UidDetailTask: void bindView(com.android.settings.net.UidDetailProvider,com.android.settings.DataUsageSummary$AppItem,android.view.View)> (1)
<com.android.settings.LocationSettings: void onStart()> (3)
<com.android.server.net.NetworkStatsService: void access$700(com.android.server.net.NetworkStatsService,int)> (3)
<com.android.server.net.NetworkStatsService: void access$1000(com.android.server.net.NetworkStatsService,int[])> (1)
<com.android.server.net.NetworkStatsService: void removeUserLocked(int)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<com.android.settings.TetherSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (7)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<com.android.settings.DataUsageSummary$UidDetailTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.DataUsageSummary$DataUsageAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.server.net.NetworkStatsService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService: void access$1100(com.android.server.net.NetworkStatsService,int)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<com.android.server.net.NetworkStatsService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (3)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleCaptivePortalTrackerCheck(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$400(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile,android.preference.CheckBoxPreference)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$1200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.server.ConnectivityService: void access$2400(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (3)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (4)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (8)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (5)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.internal.util.State: void exit()> (101)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void access$3600(com.android.development.Connectivity)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> (2)
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> ()
<android.net.INetworkPolicyManager$Stub: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> (2)
<android.net.INetworkPolicyManager: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> (1)
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> (2)
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)> ()
<android.net.INetworkStatsService$Stub: android.net.NetworkStats getDataLayerSnapshotForUid(int)> (2)
<android.net.INetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> (1)
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.TrafficStats: android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)> (2)
<com.android.server.net.NetworkStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.TrafficStats: android.net.NetworkStats stopDataProfiling(android.content.Context)> ()
<android.net.TrafficStats: void startDataProfiling(android.content.Context)> ()
Permission:android.permission.WRITE_CALENDAR
218 Callers:
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> (1)
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)> (2)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.GeneralPreferences: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZonePickerDialog$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZonePickerDialog: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Void doInBackground(android.util.Pair[])> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.DeleteEventHelper$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.alerts.AlertService: void dismissOldAlerts(android.content.Context)> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addEvent(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations,java.lang.String,boolean)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void changeParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void initLoader(java.lang.String)> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$3$1: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onCreate()> (1)
<com.android.calendar.alerts.AlertActivity: void dismissAlarm(long,long,long)> (1)
<com.android.calendar.alerts.AlertActivity: void access$400(com.android.calendar.alerts.AlertActivity,long,long,long)> (1)
<com.android.calendar.alerts.AlertActivity$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> (2)
<com.android.calendar.month.MonthByWeekFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri access$600(com.android.calendar.month.MonthByWeekFragment)> (1)
<com.android.calendar.month.MonthByWeekFragment$3: void run()> (1)
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> (2)
<com.android.calendar.event.CreateEventDialogFragment: void createAllDayEvent()> (1)
<com.android.calendar.event.EditEventFragment$Done: void run()> (6)
<com.android.calendar.event.CreateEventDialogFragment: void access$500(com.android.calendar.event.CreateEventDialogFragment)> (1)
<com.android.calendar.event.EditEventFragment: boolean onActionBarItemSelected(int)> (2)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventHelper$EditDoneRunnable: void run()> (3)
<com.android.calendar.event.CreateEventDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventFragment: boolean access$000(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventView: void onCancel(android.content.DialogInterface)> (1)
<com.android.calendar.event.EditEventView: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean,long)> (1)
<com.android.calendar.event.EditEventFragment$1: void onClick(android.view.View)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (10)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtraWithTitleWithCalendarId(java.lang.Object,long,long,long,long,int,int,long,long,java.lang.String,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.agenda.AgendaFragment$2: void run()> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void handleSelectSyncedCalendarsClicked(android.view.View)> ()
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (5)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (16)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> (7)
<com.android.calendar.event.CreateEventDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (2)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (2)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)> (2)
<com.android.calendar.AllInOneActivity: boolean onNavigationItemSelected(int,long)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (2)
<com.android.calendar.AllInOneActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (2)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity$1: void onChange(boolean)> (1)
<com.android.calendar.DayView: void access$4500(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (4)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void sendViewEvent(com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (2)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (4)
<com.android.calendar.DayView$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AbstractCalendarActivity: void onResume()> (3)
<com.android.calendar.month.MonthByWeekAdapter$2: void run()> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaListView: void goTo(android.text.format.Time,long,java.lang.String,boolean,boolean)> (3)
<com.android.calendar.agenda.AgendaListView: void refresh(boolean)> (3)
<com.android.calendar.AllInOneActivity$4: void onChange(boolean)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.AbstractCalendarActivity: void onBackPressed()> (2)
<com.android.calendar.AbstractCalendarActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.AbstractCalendarActivity: void onUserLeaveHint()> (2)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: boolean goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void updateMonthHighlight(android.widget.AbsListView)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$1500(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (1)
<com.android.calendar.DayView$3: void run()> (1)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void onResume()> (2)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.agenda.AgendaFragment: void goTo(com.android.calendar.CalendarController$EventInfo,boolean)> (1)
<com.android.calendar.agenda.AgendaFragment: void onResume()> (1)
<com.android.calendar.agenda.AgendaFragment: void search(java.lang.String,android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaFragment: void eventsChanged()> (2)
<com.android.calendar.agenda.AgendaListView$2: void run()> (1)
<com.android.calendar.agenda.AgendaListView$3: void run()> (1)
<com.android.calendar.DayView: void access$5000(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: boolean goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void updateMonthHighlight(android.widget.AbsListView)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.agenda.AgendaFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (2)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void doSaveAction()> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: boolean saveEventColor()> (1)
<com.android.calendar.EventInfoFragment: void onStop()> (2)
<com.android.calendar.event.EditEventFragment: void saveReminders()> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.alerts.InitAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> (1)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (6)
<com.android.calendar.alerts.AlertActivity: void onStop()> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.DeleteEventHelper: void deleteExceptionEvent()> (1)
<com.android.calendar.DeleteEventHelper: void access$900(com.android.calendar.DeleteEventHelper)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.CalendarColorPickerDialog$OnCalendarColorSelectedListener: void onColorSelected(int)> (1)
<com.android.colorpicker.ColorPickerSwatch$OnColorSelectedListener: void onColorSelected(int)> (2)
<com.android.colorpicker.ColorPickerDialog: void onColorSelected(int)> (3)
<com.android.colorpicker.ColorPickerSwatch: void onClick(android.view.View)> (1)
<com.android.calendar.CalendarColorPickerDialog: void onColorSelected(int)> (1)
<com.android.calendar.event.EventColorPickerDialog: void onColorSelected(int)> (2)
<com.android.calendar.event.EventColorPickerDialog$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.providers.calendar.CalendarReceiver: void removeScheduledAlarms(android.content.ContentResolver)> (1)
<com.android.providers.calendar.CalendarReceiver: void access$000(com.android.providers.calendar.CalendarReceiver,android.content.ContentResolver)> (1)
<com.android.providers.calendar.CalendarReceiver$1: void run()> (1)
<com.android.calendar.EventInfoFragment: void updateResponse(long,long,int)> (1)
<com.android.calendar.EventInfoFragment: boolean saveResponse()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void doQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$2600(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean access$1800(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,java.lang.String,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$1200(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (3)
<com.android.calendar.EventInfoFragment: boolean saveReminders()> (1)
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> (1)
<com.android.providers.calendar.CalendarAlarmManager: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase,com.android.providers.calendar.CalendarProvider2)> (1)
<com.android.providers.calendar.CalendarAlarmManager: void runScheduleNextAlarm(boolean,com.android.providers.calendar.CalendarProvider2)> (1)
<com.android.providers.calendar.CalendarProviderIntentService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.alerts.AlertActivity: void onClick(android.view.View)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.calendar.EventInfoFragment: void createExceptionResponse(long,int)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onPause()> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.GET_ACCOUNTS
1637 Callers:
<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermission()> (4)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String,int)> (3)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> (3)
<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (4)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (2)
<com.android.server.accounts.AccountManagerService$4: void run()> (1)
<com.android.server.content.SyncManager: void doDatabaseCleanup()> (2)
<com.android.server.content.SyncManager: void onUserStarting(int)> (1)
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (2)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> (3)
<com.android.server.accounts.AccountManagerService: void onUserStarted(android.content.Intent)> (1)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (2)
<com.android.server.accounts.AccountManagerService$Session: void run()> (1)
<com.android.server.content.SyncManager: void access$2100(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void updateRunningAccounts()> (4)
<com.android.server.content.SyncManager: void access$900(com.android.server.content.SyncManager,int)> (1)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (1)
<android.accounts.IAccountManager: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (1)
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (1)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService: void access$200(com.android.server.accounts.AccountManagerService,android.content.Intent)> (1)
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (1)
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (1)
<com.android.server.accounts.AccountManagerService$Session: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (12)
<com.android.server.content.SyncManager$SyncHandler: void onBootCompleted()> (1)
<com.android.server.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void onUserRemoved(int)> (1)
<com.android.server.content.SyncManager: void onUserStopping(int)> (1)
<com.android.server.content.SyncManager$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$3: void doWork()> (1)
<android.accounts.AccountManager$2: void doWork()> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> (4)
<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String)> (1)
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (4)
<com.android.server.accounts.AccountManagerService$10: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$3: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$4: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$5: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$6: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$7: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$8: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$9: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$TestFeaturesSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void access$800(com.android.server.content.SyncManager,int)> (2)
<com.android.server.content.SyncManager: void access$1000(com.android.server.content.SyncManager,int)> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (16)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: android.accounts.Account findIntendedAccount(java.lang.String)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void <init>(com.android.internal.policy.impl.keyguard.KeyguardPatternView,android.accounts.AccountManager)> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> (19)
<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (1)
<android.accounts.ChooseTypeAndAccountActivity: java.util.ArrayList getAcceptableAccountChoices(android.accounts.AccountManager)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (1)
<com.android.server.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (5)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: android.accounts.Account[] getAccounts(android.content.Context)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void enableSync(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.development.SyncAdapterDriver: void startSyncSelected(android.view.View)> ()
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.email.service.AccountService$1: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal(android.content.Context)> (1)
<com.android.email.service.MailService: boolean hasMismatchInPopImapAccounts(android.content.Context)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternalForTest()> (1)
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.inputmethod.research.ResearchLogger: java.lang.String getAccountName()> (1)
<com.android.launcher2.Launcher: boolean skipCustomClingIfNoAccounts()> (1)
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> (1)
<com.android.settings.Settings: int insertAccountsHeaders(java.util.List,int)> (44)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void <init>(com.android.internal.policy.impl.keyguard.KeyguardPatternView,android.accounts.AccountManager,com.android.internal.policy.impl.keyguard.KeyguardPatternView$1)> (1)
<android.accounts.AccountManager$13: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> (8)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> (2)
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.calendar.CalendarController: void refreshCalendars()> (1)
<com.android.calendar.CalendarSettingsActivity$1: void run()> (1)
<com.android.calendar.CalendarSettingsActivity: void onBuildHeaders(java.util.List)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void loadAccountsInBackground()> (5)
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> (1)
<com.android.inputmethod.latin.personalization.AccountUtils: android.accounts.Account[] getAccounts(android.content.Context)> (1)
<com.android.launcher2.Launcher: boolean isClingsEnabled()> (3)
<com.android.providers.calendar.CalendarProvider2: void verifyAccounts()> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.AuthenticatorHelper: void onAccountsUpdated(android.content.Context,android.accounts.Account[])> (2)
<com.android.settings.MasterClear: void loadAccountList()> (1)
<com.android.settings.users.UserSettings: android.content.pm.UserInfo createLimitedUser()> (1)
<com.android.shell.BugreportReceiver: android.accounts.Account findSendToAccount(android.content.Context)> (1)
<android.accounts.AccountManager$5: void doWork()> (1)
<android.accounts.AccountManager$6: void doWork()> (1)
<android.accounts.ChooseTypeAndAccountActivity: void onResume()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<com.android.server.content.SyncManager: void sendSyncAlarmMessage()> (1)
<com.android.server.content.SyncManager: void sendCheckAlarmsMessage()> (4)
<com.android.server.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,int,java.lang.String)> (1)
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$4: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IAccountService$Stub: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal(java.lang.Object)> (1)
<com.android.email.activity.Welcome$1: void run()> (1)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> ()
<com.android.inputmethod.research.ResearchLogger: void sendFeedback(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.launcher2.Launcher: void showFirstRunWorkspaceCling()> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$AccountSyncSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$AndroidBeamSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$ApplicationSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$AppOpsSummaryActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$BluetoothSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$CryptKeeperSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$DataUsageSummaryActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$DateTimeSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$DevelopmentSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$DeviceAdminSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$DeviceInfoSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$DisplaySettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$DreamSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$LocalePickerActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$LocationSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$ManageAccountsSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$ManageApplicationsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$NotificationAccessSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$NotificationStationActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$PowerUsageSummaryActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$PrivacySettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$RunningServicesActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$SecuritySettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$SoundSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$SpellCheckersSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$StorageSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$StorageUseActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$TetherSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$TextToSpeechSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$UserDictionarySettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$UserSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings: void updateHeaderList(java.util.List)> (44)
<com.android.settings.Settings$VpnSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$WifiDisplaySettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$WifiP2pSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$WifiSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.Settings$WirelessSettingsActivity: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.settings.SubSettings: int insertAccountsHeaders(java.util.List,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void maybeEnableFallback(android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void <init>(android.content.Context)> (1)
<com.android.development.AccountsTester: void onStart()> (1)
<com.android.settings.accounts.ManageAccountsSettings: void onStart()> (4)
<com.android.settings.accounts.SyncSettings: void onStart()> (4)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void onStatusChanged(int)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void processBroadcastIntent(android.content.Intent)> (1)
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount(com.android.emailcommon.provider.Account,java.io.File)> (1)
<com.android.inputmethod.latin.personalization.AccountUtils: java.util.List getDeviceAccountsEmailAddresses(android.content.Context)> (1)
<com.android.launcher2.Launcher: com.android.launcher2.Cling showFirstRunFoldersCling()> (1)
<com.android.launcher2.Launcher: void showFirstRunAllAppsCling(int[])> (1)
<com.android.providers.calendar.CalendarProvider2: void access$300(com.android.providers.calendar.CalendarProvider2)> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.settings.Settings: void onAccountsUpdated(android.accounts.Account[])> (44)
<com.android.settings.Settings: void onCreate(android.os.Bundle)> (45)
<com.android.settings.MasterClear: void establishInitialState()> (2)
<com.android.settings.users.UserSettings: android.content.pm.UserInfo access$1800(com.android.settings.users.UserSettings)> (1)
<com.android.shell.BugreportReceiver: android.content.Intent buildSendIntent(android.content.Context,android.net.Uri,android.net.Uri)> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<com.android.server.content.SyncManager: void access$1200(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void access$100(com.android.server.content.SyncManager)> (3)
<com.android.server.content.SyncManager: void scheduleSyncOperation(com.android.server.content.SyncOperation)> (6)
<com.android.server.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> (3)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (4)
<com.android.browser.Controller: void doStart(android.os.Bundle,android.content.Intent)> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void reconcileAccounts(java.lang.String,java.lang.String)> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.inputmethod.research.FeedbackFragment: void onClick(android.view.View)> (1)
<com.android.launcher2.Launcher: void onCreate(android.os.Bundle)> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$AccountSyncSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$ApplicationSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$AppOpsSummaryActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$BluetoothSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$DataUsageSummaryActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$DateTimeSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$DevelopmentSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$DisplaySettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$DreamSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$LocalePickerActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$LocationSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$ManageApplicationsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$NotificationAccessSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$NotificationStationActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$PowerUsageSummaryActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$PrivacySettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$RunningServicesActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$SecuritySettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$SoundSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$StorageSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$StorageUseActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$TetherSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$UserDictionarySettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$UserSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings: void onBuildHeaders(java.util.List)> (44)
<com.android.settings.Settings$VpnSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$WifiDisplaySettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$WifiP2pSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$WifiSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.Settings$WirelessSettingsActivity: void updateHeaderList(java.util.List)> (1)
<com.android.settings.SubSettings: void updateHeaderList(java.util.List)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView: void onFinishInflate()> (3)
<com.android.contacts.common.model.AccountTypeManager: com.android.contacts.common.model.AccountTypeManager getInstance(android.content.Context)> (51)
<com.android.settings.accounts.AccountPreferenceBase: void onStart()> (5)
<com.android.settings.SettingsPreferenceFragment: void onStart()> (4)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDeviceAccountsEmailAddresses()> (2)
<com.android.launcher2.Folder$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.launcher2.AppsCustomizePagedView: void showAllAppsCling()> (2)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$ApplicationSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$AppOpsSummaryActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$BluetoothSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$DataUsageSummaryActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$DateTimeSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$DisplaySettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$DreamSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$LocalePickerActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$LocationSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$ManageApplicationsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$NotificationAccessSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$NotificationStationActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$PrivacySettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$RunningServicesActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$SecuritySettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$SoundSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$StorageSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$StorageUseActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$TetherSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$UserSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$VpnSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$WifiDisplaySettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$WifiSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$WirelessSettingsActivity: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.SubSettings: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$AppOpsSummaryActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$DataUsageSummaryActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$DreamSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$LocalePickerActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$LocationSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$NotificationAccessSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$NotificationStationActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$RunningServicesActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$SoundSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$StorageSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$StorageUseActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$TetherSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$UserSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$VpnSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$WifiDisplaySettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$WifiSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SubSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.MasterClear: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.MasterClear: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.settings.users.UserSettings$11: void run()> (2)
<com.android.shell.BugreportReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<com.android.server.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$10: void onStatusChanged(int)> (2)
<com.android.server.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.server.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,com.android.server.content.SyncManager$ActiveSyncContext)> (4)
<com.android.server.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,com.android.server.content.SyncOperation)> (1)
<com.android.server.content.SyncManager: void scheduleSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle,long,boolean)> (7)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManager$Future2Task start()> (2)
<com.android.browser.CrashRecoveryHandler: void startRecovery(android.content.Intent)> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$3: void run()> (1)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$ApplicationSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$AppOpsSummaryActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$BluetoothSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$DataUsageSummaryActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$DateTimeSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$DisplaySettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$DreamSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$LocalePickerActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$LocationSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$ManageApplicationsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$NotificationAccessSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$NotificationStationActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$PrivacySettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$RunningServicesActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$SecuritySettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$SoundSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$StorageSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$StorageUseActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$TetherSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$UserSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$VpnSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$WifiDisplaySettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$WifiSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.Settings$WirelessSettingsActivity: void onBuildHeaders(java.util.List)> (2)
<com.android.settings.SubSettings: void onBuildHeaders(java.util.List)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.model.RawContactDelta addEditableRawContact(android.content.Context,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.activities.ContactEditorAccountsChangedActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.activities.GroupDetailActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (3)
<com.android.contacts.common.interactions.ImportExportDialogFragment: boolean handleImportRequest(int)> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterListAdapter: void <init>(android.content.Context,java.util.List,com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List loadAccountFilters(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: boolean filterAccountExists()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$DisplayAdapter: void <init>(android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: com.android.contacts.common.model.AccountTypeManager getInstance(android.content.Context)> (1)
<com.android.contacts.common.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (4)
<com.android.contacts.common.util.AccountsListAdapter: void <init>(android.content.Context,com.android.contacts.common.util.AccountsListAdapter$AccountListFilter,com.android.contacts.common.model.account.AccountWithDataSet)> (2)
<com.android.contacts.common.vcard.ImportVCardActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.common.vcard.SelectAccountActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ContactsApplication$DelayedInitializer: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.ContactsUtils: boolean areContactWritableAccountsAvailable(android.content.Context)> (1)
<com.android.contacts.ContactsUtils: boolean areGroupWritableAccountsAvailable(android.content.Context)> (3)
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: void execute()> (1)
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: void execute()> (1)
<com.android.contacts.detail.ContactDetailFragment: void buildEntries()> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment: com.android.contacts.common.model.account.AccountType getAccountTypeForStreamItemEntry(com.android.contacts.util.StreamItemEntry)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> (2)
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean canEditSuggestedContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean hasPendingChanges()> (3)
<com.android.contacts.editor.ContactEditorFragment: boolean isContactWritable()> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (4)
<com.android.contacts.editor.ContactEditorFragment: void createContact(com.android.contacts.common.model.account.AccountWithDataSet)> (4)
<com.android.contacts.editor.ContactEditorFragment: void createContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void rebindEditorsForNewContact(com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.editor.ContactEditorUtils: void <init>(android.content.Context)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void <init>(android.content.Context)> (1)
<com.android.contacts.group.GroupDetailDisplayUtils: void bindGroupSourceView(android.content.Context,android.view.View,java.lang.String,java.lang.String)> (2)
<com.android.contacts.group.GroupDetailFragment: void onAttach(android.app.Activity)> (1)
<com.android.contacts.group.GroupDetailFragment: void updateAccountType(java.lang.String,java.lang.String)> (1)
<com.android.contacts.group.GroupEditorFragment: com.android.contacts.common.model.account.AccountType getAccountType()> (2)
<com.android.contacts.group.GroupEditorFragment: void selectAccountAndCreateGroup()> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.model.ContactLoader: void loadInvitableAccountTypes(com.android.contacts.model.Contact)> (1)
<com.android.contacts.model.RawContact: com.android.contacts.common.model.AccountTypeManager getAccountTypeManager(android.content.Context)> (1)
<com.android.contacts.model.RawContactDelta: com.android.contacts.common.model.account.AccountType getRawContactAccountType(android.content.Context)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void bindData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void setDisplayNameAndSnippet(android.content.Context,android.widget.RemoteViews,java.lang.CharSequence,java.lang.CharSequence,java.util.List,android.app.PendingIntent)> (1)
<com.android.contacts.SplitAggregateView: void <init>(android.content.Context,android.net.Uri)> ()
<com.android.settings.LocationSettings: void onStart()> (3)
<com.android.settings.TetherSettings: void onStart()> (3)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDeviceAccountsEmailAddresses()> (1)
<com.android.launcher2.AppsCustomizePagedView$1: void run()> (1)
<com.android.launcher2.AppsCustomizeTabHost: void onLauncherTransitionEnd(com.android.launcher2.Launcher,boolean,boolean)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.settings.users.UserSettings: void addUserNow(int)> (3)
<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager: void sendSyncFinishedOrCanceledMessage(com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,int,java.lang.String)> (2)
<com.android.server.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$8: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(android.content.SyncAdapterType,int,boolean)> (1)
<com.android.server.content.SyncManager: void scheduleLocalSync(android.accounts.Account,int,int,java.lang.String)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<com.android.browser.Controller: void start(android.content.Intent)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.service.MailService$6: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.contacts.activities.ConfirmAddDetailActivity: void setEntityDeltaList(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.contacts.ContactsActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (2)
<com.android.contacts.common.interactions.ImportExportDialogFragment: boolean access$000(com.android.contacts.common.interactions.ImportExportDialogFragment,int)> (1)
<com.android.contacts.common.list.AccountFilterActivity$MyLoaderCallbacks: void onLoadFinished(android.content.Loader,java.util.List)> (1)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)> (2)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.common.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener)> ()
<com.android.contacts.common.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int)> ()
<com.android.contacts.common.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (1)
<com.android.contacts.common.vcard.SelectAccountActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (1)
<com.android.contacts.common.util.AccountsListAdapter: void <init>(android.content.Context,com.android.contacts.common.util.AccountsListAdapter$AccountListFilter)> (2)
<com.android.contacts.editor.ContactEditorFragment$3: void onClick(android.view.View)> (1)
<com.android.contacts.ContactsApplication$DelayedInitializer: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: boolean areContactWritableAccountsAvailable()> (1)
<com.android.contacts.activities.PeopleActivity: boolean areGroupWritableAccountsAvailable()> (4)
<com.android.contacts.group.GroupBrowseListFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void bindGroupList()> (1)
<com.android.contacts.detail.ContactDetailFragment$QuickFix: void execute()> (1)
<com.android.contacts.detail.ContactDetailFragment: void bindData()> (2)
<com.android.contacts.detail.ContactDetailUpdatesFragment: com.android.contacts.common.model.account.AccountType access$000(com.android.contacts.detail.ContactDetailUpdatesFragment,com.android.contacts.util.StreamItemEntry)> (2)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean handleItemClickEvent()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean doJoinContactAction()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean revert()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean save(int)> (7)
<com.android.contacts.editor.ContactEditorFragment: void showJoinAggregateActivity(android.net.Uri)> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.editor.ContactEditorFragment: void access$2100(com.android.contacts.editor.ContactEditorFragment)> (3)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(java.lang.String,boolean,com.google.common.collect.ImmutableList)> (2)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType)> (2)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$500(com.android.contacts.editor.ContactEditorFragment,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance(android.content.Context)> (2)
<com.android.contacts.group.GroupDetailFragment: void bindGroupMetaData(android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: boolean isGroupMembershipEditable()> (2)
<com.android.contacts.group.GroupEditorFragment: void setupEditorForAccount()> (4)
<com.android.contacts.group.GroupEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> (1)
<com.android.contacts.model.RawContact: com.android.contacts.common.model.account.AccountType getAccountType(android.content.Context)> (6)
<com.android.contacts.activities.AttachPhotoActivity: void saveContact(com.android.contacts.model.Contact)> (1)
<com.android.contacts.model.RawContactDeltaList: int indexOfFirstWritableRawContact(android.content.Context)> (2)
<com.android.contacts.quickcontact.QuickContactActivity: void access$700(com.android.contacts.quickcontact.QuickContactActivity,com.android.contacts.model.Contact)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void bindRemoteViews(android.content.Context,int,android.appwidget.AppWidgetManager,com.android.contacts.model.Contact)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.launcher2.LauncherTransitionable: void onLauncherTransitionEnd(com.android.launcher2.Launcher,boolean,boolean)> (1)
<com.android.settings.users.UserSettings: void access$1100(com.android.settings.users.UserSettings,int)> (1)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onAddUserClicked(int)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (8)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<com.android.server.content.SyncManager: void access$1400(com.android.server.content.SyncManager,com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncStorageEngine$OnSyncRequestListener: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(java.lang.Object,int,boolean)> (1)
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context,boolean)> (2)
<com.android.settings.accounts.AccountSyncSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.ActivityController: void start(android.content.Intent)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$1: void run()> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$300(com.android.contacts.activities.ConfirmAddDetailActivity,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.common.list.AccountFilterActivity$MyLoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterController: void checkFilterValidity(boolean)> (4)
<com.android.contacts.common.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.contacts.activities.PeopleActivity: void updateViewConfiguration(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: boolean access$300(com.android.contacts.activities.PeopleActivity)> (1)
<com.android.contacts.activities.PeopleActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (3)
<com.android.contacts.activities.PeopleActivity: void showEmptyStateForTab(int)> (3)
<com.android.contacts.activities.PeopleActivity: void updateFragmentsVisibility()> (3)
<com.android.contacts.group.GroupBrowseListFragment: void access$400(com.android.contacts.group.GroupBrowseListFragment)> (1)
<com.android.contacts.detail.ContactDetailFragment$3: void onClick(android.view.View)> (1)
<com.android.contacts.detail.ContactDetailFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailFragment: void setData(android.net.Uri,com.android.contacts.model.Contact)> (3)
<com.android.contacts.detail.ContactDetailUpdatesFragment$1: void onClick(android.view.View)> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment$2: void onClick(android.view.View)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onBackPressed()> (3)
<com.android.contacts.editor.ContactEditorFragment: void doJoinSuggestedContact(long[])> (1)
<com.android.contacts.editor.ContactEditorFragment: void doSaveAction()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onStop()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSaveCompleted(boolean,int,boolean,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment$3$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (5)
<com.android.contacts.editor.ContactEditorFragment: void onAttach(android.app.Activity)> (1)
<com.android.contacts.group.GroupDetailFragment: void access$400(com.android.contacts.group.GroupDetailFragment,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: void onDoneClicked()> (1)
<com.android.contacts.group.GroupEditorFragment: void bindGroupMetaData(android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: void onAccountChosen(com.android.contacts.common.model.account.AccountWithDataSet,android.os.Bundle)> (1)
<com.android.contacts.model.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: boolean isApplicable()> (1)
<com.android.contacts.model.ContactLoader: void postViewNotificationToSyncAdapter()> (1)
<com.android.contacts.model.Contact: long getFirstWritableRawContactId(android.content.Context)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void access$000(com.android.contacts.activities.AttachPhotoActivity,com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: int getWritableEntityIndex()> (5)
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getFirstWritableRawContact(android.content.Context)> (3)
<com.android.contacts.quickcontact.QuickContactActivity$5: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void access$000(android.content.Context,int,android.appwidget.AppWidgetManager,com.android.contacts.model.Contact)> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void generateBinaryDictionary()> (5)
<com.android.launcher2.Launcher: void dispatchOnLauncherTransitionEnd(android.view.View,boolean,boolean)> (3)
<com.android.settings.users.UserSettings$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<com.android.settings.users.UserSettings: void access$1400(com.android.settings.users.UserSettings,int)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.calendar.AllInOneActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.util.AccountPromptUtils: void launchAccountPrompt(android.app.Activity)> (1)
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (1)
<com.android.settings.accounts.AddAccountSettings: void addAccount(java.lang.String)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<com.android.server.content.SyncStorageEngine: void requestSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.provider.AccountReconciler: boolean accountsNeedReconciling(android.content.Context,java.util.List,android.accounts.Account[])> (1)
<com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (2)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.list.ContactListFilterController: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (7)
<com.android.contacts.activities.PeopleActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.PeopleActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.PeopleActivity: void onStart()> (3)
<com.android.contacts.common.model.AccountTypeManagerImpl$1: void run()> (1)
<com.android.contacts.activities.PeopleActivity: void onProviderStatusChange()> (1)
<com.android.contacts.activities.PeopleActivity: void onResume()> (3)
<com.android.contacts.activities.PeopleActivity$TabPagerListener: void onPageSelected(int)> (1)
<com.android.contacts.activities.PeopleActivity: void access$200(com.android.contacts.activities.PeopleActivity,int)> (1)
<com.android.contacts.activities.PeopleActivity: void onAction(int)> (1)
<com.android.contacts.activities.PeopleActivity: void onSelectedTabChanged()> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.detail.ContactDetailFragment: void showEmptyState()> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void showContactWithoutUpdates()> (2)
<com.android.contacts.detail.ContactDetailLayoutController: void showContactWithUpdates(boolean)> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onBackPressed()> (2)
<com.android.contacts.ContactsActivity: void onBackPressed()> (4)
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.ContactEditorActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$Listener: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onJoinCompleted(android.net.Uri)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen()> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen()> (2)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (11)
<com.android.contacts.group.GroupDetailFragment$2: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.activities.GroupEditorActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.group.GroupEditorFragment: void access$600(com.android.contacts.group.GroupEditorFragment,android.database.Cursor)> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment$Listener: void onAccountChosen(com.android.contacts.common.model.account.AccountWithDataSet,android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailFragment$QuickFix: boolean isApplicable()> (1)
<com.android.contacts.model.ContactLoader: void deliverResult(com.android.contacts.model.Contact)> (2)
<com.android.contacts.model.Contact: boolean isWritableContact(android.content.Context)> (4)
<com.android.contacts.activities.AttachPhotoActivity$1: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: int getWritableEntityIndex()> (1)
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()> (2)
<com.android.contacts.detail.PhotoSelectionHandler: void onClick(android.view.View)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: int getWritableEntityIndex()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.contacts.quickcontact.QuickContactActivity$5: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider$1: void onLoadComplete(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryInternal()> (6)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void generateBinaryDictionary()> (1)
<com.android.launcher2.Launcher: void access$2200(com.android.launcher2.Launcher,android.view.View,boolean,boolean)> (2)
<com.android.launcher2.Launcher: void hideAppsCustomizeHelper(com.android.launcher2.Launcher$State,boolean,boolean,java.lang.Runnable)> (2)
<com.android.launcher2.Launcher: void showAppsCustomizeHelper(boolean,boolean)> (2)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.AutologinBar: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> ()
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.settings.accounts.AddAccountSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$AccountAnalyzer: void start()> (1)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<com.android.server.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (2)
<com.android.server.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (2)
<com.android.server.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (1)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.DialtactsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (12)
<com.android.contacts.common.activity.TransactionSafeActivity: void onStart()> (12)
<com.android.contacts.ContactsActivity: void onStart()> (3)
<com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener: void onProviderStatusChange()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onResume()> (12)
<com.android.contacts.ContactsActivity: void onResume()> (3)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction(int)> (2)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onSelectedTabChanged()> (2)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void showEmptyState()> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void initialize(android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void setContactData(com.android.contacts.model.Contact)> (2)
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.dialer.DialtactsActivity: void onBackPressed()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed()> (3)
<com.android.contacts.activities.PeopleActivity: void onBackPressed()> (5)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onRemovePictureChosen()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.group.GroupDetailFragment$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$2: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment: void onAccountSelected(com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.detail.ContactDetailFragment: void configureQuickFix()> (1)
<com.android.contacts.model.ContactLoader: void deliverResult(java.lang.Object)> (2)
<com.android.contacts.model.ContactLoader: void onStartLoading()> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getHeaderEntryView(android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.detail.ContactDetailTabCarousel: void loadData(com.android.contacts.model.Contact)> (2)
<com.android.contacts.activities.AttachPhotoActivity$Listener: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void onClick(android.view.View)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void onClick(android.view.View)> (2)
<com.android.contacts.socialwidget.SocialWidgetProvider$1: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (5)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void syncReloadDictionaryIfRequired()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryInternal()> (1)
<com.android.launcher2.Launcher$13: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.launcher2.Launcher$17: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.launcher2.Launcher: void enterSpringLoadedDragMode()> (1)
<com.android.launcher2.Launcher: void showWorkspace(boolean,java.lang.Runnable)> (2)
<com.android.launcher2.Launcher: void exitSpringLoadedDragMode()> (5)
<com.android.launcher2.Launcher: void showAllApps(boolean)> (2)
<com.android.server.content.SyncStorageEngine: void readAndDeleteLegacyAccountInfoLocked()> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.NonPhoneActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void onStart()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onStart()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onStart()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onStart()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onStart()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onStart()> (3)
<com.android.contacts.activities.JoinContactActivity: void onStart()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onStart()> (3)
<com.android.contacts.NonPhoneActivity: void onStart()> (3)
<com.android.dialer.DialtactsActivity: void onStart()> (2)
<com.android.contacts.list.ProviderStatusWatcher: void notifyListeners()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onResume()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onResume()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onResume()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onResume()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onResume()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onResume()> (3)
<com.android.contacts.activities.JoinContactActivity: void onResume()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onResume()> (3)
<com.android.contacts.NonPhoneActivity: void onResume()> (3)
<com.android.dialer.DialtactsActivity: void onResume()> (2)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void update()> (2)
<com.android.contacts.activities.ActionBarAdapter: void setCurrentTab(int,boolean)> (2)
<com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener: void onDetailsLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void <init>(android.app.Activity,android.os.Bundle,android.app.FragmentManager,com.android.contacts.widget.TransitionAnimationView,android.view.View,com.android.contacts.detail.ContactDetailFragment$Listener)> (2)
<com.android.contacts.activities.ContactDetailActivity$3$1: void run()> (1)
<com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener$1: void run()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.PeopleActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.editor.PhotoActionPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.group.GroupEditorFragment$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment: void access$000(com.android.contacts.common.editor.SelectAccountDialogFragment,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long access$1600(com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$4: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRequest(int)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask: void run()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void syncReloadDictionaryIfRequired()> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void syncReloadDictionaryIfRequired()> (1)
<com.android.launcher2.AppsCustomizePagedView$4: void run()> (1)
<com.android.launcher2.Launcher$19: void run()> (1)
<com.android.launcher2.Launcher: void showWorkspace(boolean)> (8)
<com.android.launcher2.AppsCustomizePagedView: void endDragging(android.view.View,boolean,boolean)> (2)
<com.android.launcher2.DeleteDropTarget$1: void run()> (1)
<com.android.launcher2.DeleteDropTarget$6: void run()> (1)
<com.android.launcher2.Launcher$10: void run()> (1)
<com.android.launcher2.Launcher: void onClickAllAppsButton(android.view.View)> (2)
<com.android.launcher2.Launcher: void onResume()> (1)
<com.android.server.content.SyncStorageEngine: void clearAndReadState()> ()
<com.android.server.content.SyncStorageEngine: void <init>(android.content.Context,java.io.File)> (2)
<com.android.contacts.list.ProviderStatusWatcher: void access$600(com.android.contacts.list.ProviderStatusWatcher)> (1)
<com.android.contacts.activities.ActionBarAdapter: void initialize(android.os.Bundle,com.android.contacts.list.ContactsRequest)> (2)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (6)
<com.android.contacts.activities.ActionBarAdapter: void setCurrentTab(int)> (3)
<com.android.contacts.detail.ContactLoaderFragment$ContactLoaderFragmentListener: void onDetailsLoaded(com.android.contacts.model.Contact)> (2)
<com.android.contacts.activities.PeopleActivity: void createViewsAndFragments(android.os.Bundle)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void asyncReloadDictionaryIfRequired()> (7)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (2)
<com.android.launcher2.Launcher$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.launcher2.Launcher: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.launcher2.Launcher: void onBackPressed()> (1)
<com.android.launcher2.Launcher: void onClick(android.view.View)> (1)
<com.android.launcher2.Launcher: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> (2)
<com.android.launcher2.Launcher: void startWallpaper()> (2)
<com.android.launcher2.AppsCustomizePagedView: void onDropCompleted(android.view.View,com.android.launcher2.DropTarget$DragObject,boolean,boolean)> (1)
<com.android.launcher2.AppsCustomizePagedView: void onFlingToDeleteCompleted()> (1)
<com.android.launcher2.Hotseat$2: void onClick(android.view.View)> (1)
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine newTestInstance(android.content.Context)> ()
<com.android.server.content.SyncStorageEngine: void init(android.content.Context)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested()> (4)
<com.android.contacts.activities.PeopleActivity: void configureFragments(boolean)> (3)
<com.android.contacts.activities.ActionBarAdapter$MyNavigationListener: boolean onNavigationItemSelected(int,long)> (1)
<com.android.contacts.activities.ActionBarAdapter$MyTabListener: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.contacts.detail.ContactLoaderFragment$1: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.ContactLoaderFragment: void loadUri(android.net.Uri)> (2)
<com.android.dialer.DialtactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.GroupDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (2)
<com.android.contacts.editor.LabeledEditorView: void notifyEditorListener()> (5)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean isValidWord(java.lang.String)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionary()> (4)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void asyncReloadDictionaryIfRequired()> (1)
<com.android.inputmethod.latin.Dictionary: boolean isValidWord(java.lang.String)> (7)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (4)
<com.android.launcher2.Launcher: boolean onSearchRequested()> (3)
<com.android.launcher2.Launcher: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.Launcher: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.launcher2.DragSource: void onDropCompleted(android.view.View,com.android.launcher2.DropTarget$DragObject,boolean,boolean)> (3)
<com.android.launcher2.DragSource: void onFlingToDeleteCompleted()> (1)
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onSearchRequested()> (1)
<com.android.contacts.ContactsActivity: boolean onSearchRequested()> (2)
<com.android.contacts.detail.ContactLoaderFragment$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onAttachFragment(android.app.Fragment)> (3)
<com.android.contacts.activities.PeopleActivity: void setupContactDetailFragment(android.net.Uri)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void finish()> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.editor.EventFieldEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener()> (2)
<com.android.contacts.editor.TextFieldsEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: boolean isValidWord(java.lang.String)> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionary()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionary()> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isValidWord(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.DictionaryCollection: boolean isValidWord(java.lang.String)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (2)
<com.android.inputmethod.research.MainLogBuffer: boolean isSafeNGram(java.util.ArrayList,int)> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: java.lang.String scrubWord(java.lang.String)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean)> (1)
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (10)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForTypingInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean)> (1)
<com.android.launcher2.Launcher: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.launcher2.Launcher: void onClickSearchButton(android.view.View)> ()
<com.android.launcher2.DragController: void cancelDrag()> (5)
<com.android.launcher2.DragController: void drop(float,float)> (2)
<com.android.launcher2.DragController: void dropOnFlingToDeleteTarget(float,float,android.graphics.PointF)> (2)
<com.android.launcher2.DragController: void onDeferredEndFling(com.android.launcher2.DropTarget$DragObject)> (1)
<com.android.server.content.ContentService: com.android.server.content.SyncManager getSyncManager()> (20)
<com.android.contacts.common.activity.TransactionSafeActivity: void onAttachFragment(android.app.Fragment)> (1)
<com.android.contacts.ContactsActivity: void onAttachFragment(android.app.Fragment)> (2)
<com.android.contacts.activities.PeopleActivity: void access$700(com.android.contacts.activities.PeopleActivity,android.net.Uri)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void finish()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (2)
<com.android.inputmethod.latin.AutoCorrection: boolean isInTheDictionary(java.util.concurrent.ConcurrentHashMap,java.lang.String,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: boolean isInDictForAnyCapitalization(com.android.inputmethod.latin.Dictionary,java.lang.String,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publishLogUnitsAtFrontOfBuffer()> (3)
<com.android.inputmethod.research.ResearchLogger$1: boolean isSafeNGram(java.util.ArrayList,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void publish(java.util.ArrayList,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onUpdateSelection(int,int,int,int,int,int,int,int,boolean,boolean,com.android.inputmethod.latin.RichInputConnection)> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForBatchInput(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.String,com.android.inputmethod.keyboard.ProximityInfo,boolean,boolean,int)> (1)
<com.android.launcher2.DragController: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.DragController: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.DragController: void onAppsRemoved(java.util.ArrayList,android.content.Context)> (1)
<com.android.launcher2.Launcher: void onPause()> (1)
<com.android.launcher2.SpringLoadedDragController: void onAlarm(com.android.launcher2.Alarm)> (1)
<com.android.server.content.ContentService: void systemReady()> (1)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void clearAllFields()> ()
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.inputmethod.latin.LatinIME: void resetContactsDictionary(com.android.inputmethod.latin.ContactsBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)> (3)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)> (3)
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestionsInternal(android.view.textservice.TextInfo,int)> (1)
<com.android.inputmethod.research.MainLogBuffer: void onBufferFull()> (2)
<com.android.inputmethod.research.MainLogBuffer: void shiftAndPublishAll()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void publishLogUnitsAtFrontOfBuffer()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(int)> (2)
<com.android.launcher2.DragLayer: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.DragLayer: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.Launcher: void bindComponentsRemoved(java.util.ArrayList,java.util.ArrayList,boolean)> (2)
<com.android.launcher2.OnAlarmListener: void onAlarm(com.android.launcher2.Alarm)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.inputmethod.latin.LatinIME: void initSuggest()> (3)
<com.android.inputmethod.latin.LatinIME: void loadSettings()> (3)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictAndKeyboard createDictAndKeyboard(java.util.Locale)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void startUsingContactsDictionaryLocked()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$1: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void onBufferFull()> (1)
<com.android.inputmethod.research.ResearchLogger$1: void onBufferFull()> (2)
<com.android.inputmethod.research.ResearchLogger$1: void shiftAndPublishAll()> (1)
<com.android.inputmethod.research.ResearchLogger: void stop()> (3)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsOrOlderSuggestions(int)> (2)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordTouchedByCursor()> (1)
<com.android.launcher2.Launcher$31: void run()> (1)
<com.android.launcher2.LauncherModel$Callbacks: void bindComponentsRemoved(java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.launcher2.Alarm: void run()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (1)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard poll(long,java.util.concurrent.TimeUnit)> (2)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsListener: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.research.FixedLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void initSuggest(com.android.inputmethod.latin.Suggest)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onFinishInputViewInternal(boolean,int,int,android.view.inputmethod.InputConnection)> ()
<com.android.inputmethod.research.ResearchLogger: void restart()> (1)
<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.SuggestedWords access$900(com.android.inputmethod.latin.LatinIME,int)> (1)
<com.android.inputmethod.latin.LatinIME: void updateSuggestionStrip()> (2)
<com.android.inputmethod.latin.LatinIME: void access$200(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.launcher2.LauncherModel$PackageUpdatedTask$3: void run()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndKeyboard pollWithDefaultTimeout()> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: java.lang.Object poll(long,java.util.concurrent.TimeUnit)> ()
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onCreate()> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.LogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.MainLogBuffer: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger$1: void shiftIn(com.android.inputmethod.research.LogUnit)> (3)
<com.android.inputmethod.research.ResearchLogger: void onUserLoggingConsent()> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsGestureLocked(com.android.inputmethod.latin.InputPointers)> (2)
<com.android.inputmethod.latin.LatinIME: void access$000(com.android.inputmethod.latin.LatinIME)> (2)
<com.android.inputmethod.latin.LatinIME: void commitCurrentAutoCorrection(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postResumeSuggestions()> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnit()> (5)
<com.android.inputmethod.research.ResearchLogger$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.SuggestedWords onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: void updateBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip()> (8)
<com.android.inputmethod.latin.LatinIME: boolean handleSeparator(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartBatchInput()> (1)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void onUpdateSelection(int,int,int,int,int,int)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onUpEvent(int,int,int,long)> (3)
<com.android.inputmethod.research.ResearchLogger: void commitCurrentLogUnitAsWord(java.lang.String,long,boolean)> (8)
<com.android.inputmethod.research.ResearchLogger: void latinIME_onStartInputViewInternal(android.view.inputmethod.EditorInfo,android.content.SharedPreferences)> ()
<com.android.inputmethod.research.ResearchLogger: void saveRecording()> (1)
<com.android.inputmethod.latin.LatinIME: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void handleBackspace(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursor(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void revertCommit()> (1)
<com.android.inputmethod.latin.LatinIME: boolean handleNonSpecialCharacter(int,int,int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onStartBatchInput()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.String)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (7)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (9)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.MoreKeysPanel: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.research.ResearchLogger: void commitPartialText(java.lang.String,long,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_maybeDoubleSpacePeriod(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_onTextInput(java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_pickSuggestionManually(java.lang.String,int,java.lang.String,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_punctuationSuggestion(int,java.lang.String,boolean,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void latinIME_revertCommit(java.lang.String,java.lang.String,boolean,java.lang.String)> ()
<com.android.inputmethod.research.ResearchLogger: void onWordFinished(java.lang.String,boolean)> (1)
<com.android.inputmethod.research.ResearchLogger: void richInputConnection_commitText(java.lang.String,int,boolean)> ()
<com.android.inputmethod.research.ResearchLogger: void presentFeedbackDialog(com.android.inputmethod.latin.LatinIME)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onEndBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.latin.LatinIME: void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void mayStartBatchInput(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int,int,long)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void processMotionEvent(int,int,int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (4)
<com.android.inputmethod.research.ResearchLogger: void latinIme_commitCurrentAutoCorrection(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.inputmethod.latin.SuggestedWords)> ()
<com.android.inputmethod.research.ResearchLogger: void onResearchKeySelected(com.android.inputmethod.latin.LatinIME)> ()
<com.android.inputmethod.keyboard.PointerTracker: void mayEndBatchInput(long)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onEvent(com.android.inputmethod.event.Event)> (2)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onGestureMoveEvent(int,int,long,boolean,com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest()> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onPhantomUpEvent(long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onHardwareKeyEvent(android.view.KeyEvent)> ()
<com.android.inputmethod.event.EventInterpreter: boolean onSoftwareEvent()> ()
<com.android.inputmethod.keyboard.MainKeyboardView: void invokeCodeInput(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onRegisterKey(com.android.inputmethod.keyboard.Key)> (3)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (5)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void setQueryString(java.lang.String,boolean)> (8)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element: void onPhantomUpEvent(long)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,long)> (3)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragment()> (1)
<com.android.contacts.activities.PeopleActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator$ProcessMotionEvent: boolean processMotionEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.contacts.common.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (2)
<com.android.dialer.DialtactsActivity$7: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)> (2)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean handleSuddenJumping(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.TouchScreenRegulator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$6: void run()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.activities.PeopleActivity: void setQueryTextToFragment(java.lang.String)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onCancelEvent(int,int,long)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean,boolean)> (2)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void startLongPressTimer(int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void selectCustomFilter()> (1)
<com.android.contacts.common.list.ContactListFilterController: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (4)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()> (1)
<com.android.contacts.common.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.common.util.AccountFilterUtil: void handleAccountFilterResult(com.android.contacts.common.list.ContactListFilterController,int,android.content.Intent)> (5)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key)> (2)
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (2)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.view.BookmarkExpandableView: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (1)
<com.android.browser.BreadCrumbView: void popView()> (1)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void setupTopCrumb()> (2)
<com.android.browser.AddBookmarkPage: void onRootFolderFound(long)> (2)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.AddBookmarkPage: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.AddBookmarkPage: void setAccount(java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.BrowserSettings: void clearHistory()> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete(android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<com.android.browser.Controller$10: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$10: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage: boolean handleContextItem(int,int,int)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$2: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.DataController$DataControllerHandler: void handleMessage(com.android.browser.DataController$DCMessage)> (1)
<com.android.browser.DataController$DataControllerHandler: void run()> (2)
<com.android.browser.DataController: void <init>(android.content.Context)> (1)
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> (6)
<com.android.browser.Controller: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.Controller: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Tab: void deleteThumbnail()> (4)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (5)
<com.android.browser.Tab: void persistThumbnail()> (2)
<com.android.browser.Tab: void restoreState(android.os.Bundle)> (2)
<com.android.browser.WebViewController: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.WebViewController: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void deleteThumbnail()> (1)
<com.android.browser.TabControl: void saveState(android.os.Bundle)> (1)
<com.android.browser.Tab: void removeFromTree()> (3)
<com.android.browser.Tab: void updateShouldCaptureThumbnails()> (4)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (2)
<com.android.browser.SnapshotTab: void persistThumbnail()> (1)
<com.android.browser.Tab: void capture()> (6)
<com.android.browser.SnapshotTab: void restoreState(android.os.Bundle)> (1)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.Tab$3: void onReceivedTitle(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: android.os.Bundle createSaveState()> (2)
<com.android.browser.SnapshotTab: void removeFromTree()> (1)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void removeParentChildRelationShips()> (1)
<com.android.browser.SnapshotTab: void updateShouldCaptureThumbnails()> (1)
<com.android.browser.Tab: void setController(com.android.browser.WebViewController)> (2)
<com.android.browser.XLargeUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.TabControl: com.android.browser.SnapshotTab createSnapshotTab(long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init>(com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (1)
<com.android.browser.PhoneUi: void showNavScreen()> (2)
<com.android.browser.PieControl: void buildTabs()> (1)
<com.android.browser.SnapshotTab: void capture()> (1)
<com.android.browser.Tab: void putInBackground()> (5)
<com.android.browser.Tab: void postCapture()> (3)
<android.webkit.WebViewClientClassicExt: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.Controller: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.CrashRecoveryHandler$2: void run()> (1)
<com.android.browser.Controller: void closeCurrentTab(boolean)> (2)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (3)
<com.android.browser.Controller: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.SnapshotTab: void setController(com.android.browser.WebViewController)> (1)
<com.android.browser.TabControl: void addPreloadedTab(com.android.browser.Tab)> (1)
<com.android.browser.BaseUi: void setUseQuickControls(boolean)> (3)
<com.android.browser.XLargeUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab(boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> ()
<com.android.browser.Controller: void onPreloginFinished(android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.PhoneUi: void toggleNavScreen()> (2)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.PieControl: void access$000(com.android.browser.PieControl)> (1)
<com.android.browser.SnapshotTab: void putInBackground()> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.SnapshotTab: void postCapture()> (1)
<com.android.browser.Tab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (2)
<com.android.browser.Tab$SubWindowClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (2)
<com.android.browser.ActivityController: void onSaveInstanceState(android.os.Bundle)> (2)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void closeOtherTabs()> (2)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.PhoneUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.UI: void setUseQuickControls(boolean)> (1)
<com.android.browser.BaseUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.UiController: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> ()
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: void cancelSearchBoxPreload(java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest(java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.NavigationBarPhone: void onClick(android.view.View)> (1)
<com.android.browser.SnapshotBar: void onClick(android.view.View)> (1)
<com.android.browser.PieControl$1: void onLayout(int,int,boolean)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (3)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.SnapshotTab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab()> (2)
<com.android.browser.UiController: void closeCurrentTab()> (3)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeOtherTabs()> ()
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.ActivityController: void onDestroy()> (1)
<com.android.browser.PhoneUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run()> (1)
<com.android.browser.PreloadRequestReceiver: void handlePreload(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onClick(android.view.View)> (3)
<com.android.browser.view.PieMenu$PieView$OnLayoutListener: void onLayout(int,int,boolean)> (1)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (8)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.NavScreen: void onCloseTab(com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(android.database.Cursor)> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarTablet: void onClick(android.view.View)> (1)
<com.android.browser.view.BasePieView: void layout(int,int,boolean,float,int)> (3)
<com.android.browser.Controller: boolean switchToTab(com.android.browser.Tab)> (8)
<com.android.browser.UiController: void setActiveTab(com.android.browser.Tab)> (2)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (1)
<com.android.browser.NavScreen: void access$000(com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.ActivityController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.NavScreen: void openNewTab()> (1)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.view.PieListView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieMenu$PieView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieStackView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.UiController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab(com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen(int,boolean)> (5)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition(int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.NavScreen: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1700(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.view.PieMenu: void layoutPieView(com.android.browser.view.PieMenu$PieView,int,int,float)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100(com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition(int)> (1)
<com.android.browser.NavigationBarPhone: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.browser.NavScreen$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb(boolean)> (3)
<android.webkit.WebViewClientClassicExt: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.NavTabScroller$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.NavTabScroller: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb(boolean)> (2)
<com.android.browser.XLargeUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$SubWindowClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (2)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.view.ScrollerView: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UI: boolean onBackKey()> (1)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<com.android.browser.Controller$PruneThumbnails: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run()> (2)
<com.android.browser.BrowserHistoryPage$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail(com.android.browser.Tab)> (1)
Permission:android.permission.READ_SYNC_STATS
84 Callers:
<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (3)
<com.android.server.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)> ()
<com.android.server.content.ContentService: java.util.List getCurrentSyncs()> (2)
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> ()
<android.content.IContentService$Stub: java.util.List getCurrentSyncs()> (2)
<android.content.IContentService: java.util.List getCurrentSyncs()> (2)
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> (5)
<android.content.ContentResolver: java.util.List getCurrentSyncs()> (3)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onPrepareOptionsMenu(android.view.Menu)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPrepareOptionsMenu(android.view.Menu)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onSyncStateUpdated()> (2)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getCurrentSyncs()> (1)
<android.test.mock.MockContentResolver: java.util.List getCurrentSyncs()> (1)
<com.android.settings.accounts.AccountSyncSettings: void setFeedsState()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onPrepareOptionsMenu(android.view.Menu)> (5)
<com.android.settings.SettingsPreferenceFragment: void onPrepareOptionsMenu(android.view.Menu)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onSyncStateUpdated()> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountSyncSettings: void onSyncStateUpdated()> (2)
<com.android.settings.vpn2.VpnSettings: void onPrepareOptionsMenu(android.view.Menu)> (3)
<com.android.settings.accounts.AccountPreferenceBase$1$1: void run()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.accounts.SyncSettings: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountSyncSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.settings.accounts.SyncSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (4)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (3)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
Permission:android.permission.USE_SIP
86 Callers:
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()> ()
<android.net.sip.ISipService$Stub: android.net.sip.SipProfile[] getListOfProfiles()> (2)
<android.net.sip.ISipService: android.net.sip.SipProfile[] getListOfProfiles()> (1)
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()> (1)
<com.android.server.sip.SipService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.sip.SipSettings: void processActiveProfilesFromSipService()> (1)
<com.android.phone.sip.SipSettings: void retrieveSipLists()> (1)
<com.android.phone.sip.SipSettings: void access$800(com.android.phone.sip.SipSettings)> (1)
<com.android.phone.sip.SipSettings$3: void run()> (1)
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> (2)
<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile)> ()
<android.net.sip.ISipService$Stub: void open(android.net.sip.SipProfile)> (2)
<android.net.sip.ISipService: void open(android.net.sip.SipProfile)> (1)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> (2)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void handleSipReceiveCallsOption(boolean)> (1)
<com.android.phone.SipCallOptionHandler: void access$300(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void access$700(com.android.phone.sip.SipSettings,boolean)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.sip.SipSettings$2$1: void run()> (1)
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> (3)
<com.android.phone.SipBroadcastReceiver$1: void run()> (1)
<com.android.phone.sip.SipEditor: void saveAndRegisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void access$600(com.android.phone.sip.SipEditor,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor$2: void run()> (1)
<com.android.server.sip.SipService: void close(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> ()
<android.net.sip.ISipService$Stub: void close(java.lang.String)> (2)
<android.net.sip.ISipService: void close(java.lang.String)> (1)
<android.net.sip.SipManager: void close(java.lang.String)> (3)
<com.android.phone.sip.SipEditor: void unregisterProfile(java.lang.String)> (3)
<com.android.phone.sip.SipSettings$7: void run()> (1)
<com.android.phone.sip.SipEditor: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.sip.SipEditor: void deleteAndUnregisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void unregisterOldPrimaryAccount()> (1)
<com.android.phone.sip.SipEditor: void access$500(com.android.phone.sip.SipEditor,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void access$400(com.android.phone.sip.SipEditor)> (1)
<com.android.server.sip.SipService: boolean isOpened(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)> ()
<android.net.sip.ISipService$Stub: boolean isOpened(java.lang.String)> (2)
<android.net.sip.ISipService: boolean isOpened(java.lang.String)> (1)
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> ()
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> ()
<android.net.sip.ISipService$Stub: boolean isRegistered(java.lang.String)> (2)
<android.net.sip.ISipService: boolean isRegistered(java.lang.String)> (1)
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> ()
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> (2)
<com.android.phone.sip.SipSettings: void addProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void access$500(com.android.phone.sip.SipSettings,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings$1: void run()> (2)
<com.android.phone.sip.SipSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (3)
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> (1)
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)> ()
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)> ()
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> (2)
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> ()
<com.android.internal.telephony.sip.SipPhone$SipConnection: void dial()> (1)
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)> ()
<android.net.sip.ISipService$Stub: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> (1)
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> ()
<com.android.phone.SipBroadcastReceiver: void takeCall(android.content.Intent)> (1)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
Permission:android.permission.SET_TIME_ZONE
62 Callers:
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> (3)
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> ()
<android.app.IAlarmManager$Stub: void setTimeZone(java.lang.String)> (2)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<android.app.IAlarmManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IAlarmManager: void setTimeZone(java.lang.String)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.AlarmManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.AlarmManager: void setTimeZone(java.lang.String)> (6)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.MccTable: void setTimezoneFromMccIfNeeded(android.content.Context,int)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onClick(android.view.View)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.settings.ZonePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTimeZone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$100(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker$3: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
Permission:android.permission.WAKE_LOCK
4026 Callers:
<com.android.server.power.PowerManagerService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> ()
<android.os.IPowerManager$Stub: void acquireWakeLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void acquireWakeLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (1)
<com.android.server.power.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.PowerManager$WakeLock: void acquireLocked()> (2)
<android.os.PowerManager$WakeLock: void acquire(long)> (13)
<android.os.PowerManager$WakeLock: void acquire()> (103)
<android.net.DhcpStateMachine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiStateMachine: void handleScreenStateChanged(boolean)> (1)
<android.support.v4.content.WakefulBroadcastReceiver: android.content.ComponentName startWakefulService(android.content.Context,android.content.Intent)> ()
<com.android.bluetooth.hfp.HeadsetStateMachine: void expectVoiceRecognition()> (1)
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver)> (2)
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String,int)> (6)
<com.android.internal.telephony.SMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (3)
<com.android.internal.telephony.SmsStorageMonitor: void handleIccFull()> (1)
<com.android.mms.transaction.PushReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer$1: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.server.DevicePolicyManagerService: void wipeDataLocked(int)> (1)
<com.android.server.sip.SipWakeLock: void acquire(long)> (1)
<android.hardware.location.GeofenceHardwareImpl: void acquireWakeLock()> (6)
<android.media.AsyncPlayer: void acquireWakeLock()> (1)
<android.media.AudioService: void dispatchMediaKeyEvent(android.view.KeyEvent,boolean)> (2)
<android.media.AudioService: void dispatchMediaKeyEventForCalls(android.view.KeyEvent,boolean)> (1)
<android.media.AudioService: void queueMsgUnderWakeLock(android.os.Handler,int,int,int,java.lang.Object,int)> (3)
<android.media.AudioService: void startVoiceBasedInteractions(boolean)> (1)
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)> (3)
<android.media.MediaPlayer: void stayAwake(boolean)> (8)
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppObexClientSession$ClientThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void preStart()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.browser.Controller: void onPause()> (1)
<com.android.calendar.alerts.AlertReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.camera.PanoramaModule$9: void run()> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardScanThread: void run()> (2)
<com.android.deskclock.AlarmAlertWakeLock: void acquireCpuWakeLock(android.content.Context)> (2)
<com.android.deskclock.AlarmAlertWakeLock: void acquireScreenCpuWakeLock(android.content.Context)> (1)
<com.android.deskclock.AlarmInitReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void acquireWakeLock()> (3)
<com.android.development.Connectivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.development.Connectivity: void onStartScreenCycle()> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$3: void onPostExecute(java.lang.Exception)> (1)
<com.android.email.EmailConnectivityManager: void waitForConnectivity()> (1)
<com.android.exchange.ExchangeService: void acquireWakeLock(long)> (1)
<com.android.gallery3d.ingest.ImportTask: void run()> (1)
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: void onProgressStart()> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: void onCreate()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void showLocked(android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void wakeWhenReady(int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void acquireWakeLock()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (4)
<com.android.internal.telephony.gsm.GsmConnection: void acquireWakeLock()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.RIL: void acquireWakeLock()> (1)
<com.android.mms.transaction.NotificationPlayer: void acquireWakeLock()> (1)
<com.android.mms.transaction.SmsReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService: void acquireWakeLock()> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: void acquireWakeLockAndExecute()> (1)
<com.android.phone.PhoneGlobals: void requestWakeState(com.android.phone.PhoneGlobals$WakeState)> (4)
<com.android.phone.PhoneGlobals: void updateProximitySensorMode(com.android.internal.telephony.PhoneConstants$State)> (8)
<com.android.providers.calendar.CalendarAlarmManager: void acquireScheduleNextAlarmWakeLock()> (1)
<com.android.providers.calendar.CalendarReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadThread: void runInternal()> (1)
<com.android.providers.media.MediaScannerService: void scan(java.lang.String[],java.lang.String)> (1)
<com.android.server.AlarmManagerService$AlarmThread: void run()> (2)
<com.android.server.am.ActivityStack: void startPausingLocked(boolean,boolean)> (3)
<com.android.server.am.ActivityStack: void stopIfSleepingLocked()> (2)
<com.android.server.BackupManagerService$RunBackupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService$RunInitializeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService: void restoreAtInstall(java.lang.String,int)> (2)
<com.android.server.ConnectivityService: void requestNetworkTransitionWakelock(java.lang.String)> (2)
<com.android.server.content.SyncManager$ActiveSyncContext: void <init>(com.android.server.content.SyncManager,com.android.server.content.SyncOperation,long,int)> (1)
<com.android.server.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.DockObserver: void updateLocked()> (2)
<com.android.server.IdleMaintenanceService: void sendIdleMaintenanceEndIntent()> (1)
<com.android.server.IdleMaintenanceService: void sendIdleMaintenanceStartIntent()> (1)
<com.android.server.location.GeofenceManager: void sendIntent(android.app.PendingIntent,android.content.Intent)> (2)
<com.android.server.location.GpsLocationProvider: void handleDownloadXtraData()> (1)
<com.android.server.location.GpsLocationProvider: void handleInjectNtpTime()> (1)
<com.android.server.location.GpsLocationProvider: void sendMessage(int,int,java.lang.Object)> (9)
<com.android.server.LocationManagerService$Receiver: void incrementPendingBroadcastsLocked()> (3)
<com.android.server.net.NetworkStatsService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService: void performPoll(int)> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.sip.SipWakeLock: void acquire(java.lang.Object)> (4)
<com.android.server.UiModeManagerService: void updateLocked(int,int)> (7)
<com.android.server.VibratorService$VibrateThread: void <init>(com.android.server.VibratorService,com.android.server.VibratorService$Vibration)> (1)
<com.android.server.WiredAccessoryManager: void updateLocked(java.lang.String,int)> (2)
<com.android.server.wm.WindowManagerService: void setHoldScreenLocked(com.android.server.wm.Session)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)> (5)
<com.android.settings.bluetooth.DockEventReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.settings.CryptKeeper: void encryptionProgressInit()> (1)
<com.android.settings.CryptKeeper: void passwordEntryInit()> (1)
<com.android.soundrecorder.SoundRecorder: void onStateChanged(int)> (1)
<com.android.systemui.media.NotificationPlayer: void acquireWakeLock()> (1)
<com.android.videoeditor.VideoEditorActivity$23: void onStart()> (3)
<com.android.voicedialer.VoiceDialerActivity: void acquireWakeLock(android.content.Context)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<com.android.server.content.SyncManager: void sendSyncAlarmMessage()> (1)
<com.android.server.content.SyncManager: void sendCheckAlarmsMessage()> (4)
<com.android.server.content.SyncManager: void sendSyncFinishedOrCanceledMessage(com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,int,java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void access$000(android.net.wifi.WifiStateMachine,boolean)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processVrEvent(int)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,int)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,int)> (1)
<com.android.internal.telephony.SMSDispatcher: void dispatchBroadcastMessage(android.telephony.SmsCbMessage)> (2)
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])> (4)
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (4)
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.server.DevicePolicyManagerService: void wipeDeviceOrUserLocked(int,int)> (2)
<com.android.server.sip.SipSessionGroup: void processRequest(javax.sip.RequestEvent)> ()
<android.hardware.location.GeofenceHardwareImpl: void reportGpsGeofenceAddStatus(int,int)> (1)
<android.hardware.location.GeofenceHardwareImpl: void reportGpsGeofencePauseStatus(int,int)> (1)
<android.hardware.location.GeofenceHardwareImpl: void reportGpsGeofenceRemoveStatus(int,int)> (1)
<android.hardware.location.GeofenceHardwareImpl: void reportGpsGeofenceResumeStatus(int,int)> (1)
<android.hardware.location.GeofenceHardwareImpl: void reportGpsGeofenceStatus(int,int,double,double,double,float,float,float,long)> (1)
<android.hardware.location.GeofenceHardwareImpl: void reportGpsGeofenceTransition(int,int,double,double,double,float,float,float,long,int,long)> (1)
<android.media.AsyncPlayer: void enqueueLocked(android.media.AsyncPlayer$Command)> (2)
<android.media.AudioService: void filterMediaKeyEvent(android.view.KeyEvent,boolean)> (2)
<android.media.AudioService: void sendSimulatedMediaButtonEvent(android.view.KeyEvent,boolean)> (1)
<android.media.AudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> (2)
<android.media.AudioService: void access$3100(android.media.AudioService,android.os.Handler,int,int,int,java.lang.Object,int)> (1)
<android.media.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)> (3)
<android.media.AudioService: void filterVoiceInputKeyEvent(android.view.KeyEvent,boolean)> (1)
<android.webkit.HTML5VideoInline: void prepareDataAndDisplayMode(android.webkit.HTML5VideoViewProxy)> (1)
<com.android.music.AudioPreview$PreviewPlayer: void setWakeMode(android.content.Context,int)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void setWakeMode(android.content.Context,int)> (4)
<android.media.MediaPlayer: void access$300(android.media.MediaPlayer,boolean)> (3)
<android.media.MediaPlayer: void pause()> (7)
<android.media.MediaPlayer: void release()> (34)
<android.media.MediaPlayer: void reset()> (13)
<android.media.MediaPlayer: void start()> (25)
<android.media.MediaPlayer: void stop()> (21)
<com.android.music.AudioPreview$PreviewPlayer: void stayAwake(boolean)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void stayAwake(boolean)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.bluetooth.a2dp.A2dpStateMachine: void access$1100(com.android.bluetooth.a2dp.A2dpStateMachine,android.bluetooth.BluetoothDevice,int,int)> (6)
<com.android.bluetooth.opp.BluetoothOppObexClientSession: void start(android.os.Handler,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void createServerSession(javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.browser.ActivityController: void onPause()> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (1)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmReceiver: void handleIntent(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.TimerRingService: void onCreate()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void onPageChanged(int)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void onResume()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void rightButtonAction()> (1)
<com.android.development.Connectivity: void access$2200(com.android.development.Connectivity)> (1)
<com.android.development.Connectivity: void access$2400(com.android.development.Connectivity)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$3: void onPostExecute(java.lang.Object)> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.exchange.ExchangeService: void runAwake(long)> (5)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressStart()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLocked(android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onWakeMotionWhenKeyguardShowingTq()> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.cdma.CdmaCallWaitingNotification,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.cdma.CdmaCallTracker,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.gsm.GsmCallTracker,int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.gsm.GsmCallTracker,com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.RIL: void send(com.android.internal.telephony.RILRequest)> (106)
<com.android.mms.transaction.NotificationPlayer: void enqueueLocked(com.android.mms.transaction.NotificationPlayer$Command)> (2)
<com.android.mms.transaction.PrivilegedSmsReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiver: void onReceiveWithPrivilege(android.content.Context,android.content.Intent,boolean)> (2)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (5)
<com.android.phone.CallerInfoCache: void startAsyncCache()> (2)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.PhoneGlobals: void updateWakeState()> (9)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.PhoneGlobals: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.phone.PhoneGlobals: void orientationChanged(int)> (1)
<com.android.phone.PhoneGlobals: void setBeginningCall(boolean)> (2)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.PhoneGlobals: void updatePhoneState(com.android.internal.telephony.PhoneConstants$State)> (1)
<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)> (10)
<com.android.providers.calendar.CalendarProviderBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.providers.media.MediaScannerService: void access$300(com.android.providers.media.MediaScannerService,java.lang.String[],java.lang.String)> (1)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityStack: void checkReadyForSleepLocked()> (7)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (1)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> ()
<android.app.backup.IBackupManager$Stub: void restoreAtInstall(java.lang.String,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: void requestNetworkTransitionWakelock(java.lang.String)> (2)
<com.android.server.content.SyncManager$SyncHandler: boolean dispatchSyncOperation(com.android.server.content.SyncOperation)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<com.android.server.IdleMaintenanceService: void updateIdleMaintenanceState()> (1)
<com.android.server.location.GeofenceManager: void sendIntentEnter(android.app.PendingIntent)> (1)
<com.android.server.location.GeofenceManager: void sendIntentExit(android.app.PendingIntent)> (1)
<com.android.server.location.GpsLocationProvider: void access$2800(com.android.server.location.GpsLocationProvider)> (1)
<com.android.server.location.GpsLocationProvider: void access$2600(com.android.server.location.GpsLocationProvider)> (1)
<com.android.server.location.GpsLocationProvider: void access$1100(com.android.server.location.GpsLocationProvider,int,int,java.lang.Object)> (2)
<com.android.server.location.GpsLocationProvider: void disable()> (1)
<com.android.server.location.GpsLocationProvider: void enable()> (1)
<com.android.server.location.GpsLocationProvider: void handleUpdateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void requestUtcTime()> (1)
<com.android.server.location.GpsLocationProvider: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> (1)
<com.android.server.location.GpsLocationProvider: void updateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void xtraDownloadRequest()> (1)
<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)> (1)
<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)> (1)
<com.android.server.net.NetworkStatsService: void access$700(com.android.server.net.NetworkStatsService,int)> (3)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<com.android.server.power.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)> (3)
<com.android.server.sip.SipService$MyExecutor: void execute(java.lang.Runnable)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onResponse(boolean)> (2)
<com.android.server.sip.SipService$SipAutoReg: void run()> (2)
<com.android.server.sip.SipService$SipAutoReg: void start(com.android.server.sip.SipSessionGroup)> (1)
<com.android.server.UiModeManagerService: void access$400(com.android.server.UiModeManagerService,int,int)> (1)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<com.android.server.UiModeManagerService: void updateDockState(int)> (1)
<com.android.server.UiModeManagerService: void updateTwilight()> (1)
<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)> (3)
<com.android.server.WiredAccessoryManager: void access$700(com.android.server.WiredAccessoryManager,java.lang.String,int)> (1)
<com.android.server.WiredAccessoryManager: void notifyWiredAccessoryChanged(long,int,int)> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)> (1)
<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)> (5)
<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)> (2)
<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,int)> (2)
<com.android.settings.bluetooth.DockEventReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.CryptKeeper: void setupUi()> (2)
<com.android.soundrecorder.Recorder$OnStateChangedListener: void onStateChanged(int)> (1)
<com.android.systemui.media.NotificationPlayer: void enqueueLocked(com.android.systemui.media.NotificationPlayer$Command)> (2)
<com.android.voicedialer.VoiceDialerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.content.SyncManager: void access$1200(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void access$100(com.android.server.content.SyncManager)> (3)
<com.android.server.content.SyncManager: void onUserStarting(int)> (1)
<com.android.server.content.SyncManager: void scheduleSyncOperation(com.android.server.content.SyncOperation)> (6)
<com.android.server.content.SyncManager: void updateRunningAccounts()> (4)
<com.android.server.content.SyncManager: void access$1400(com.android.server.content.SyncManager,com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> (3)
<android.net.wifi.WifiStateMachine$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: void enter()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4800(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void handleServiceCategoryProgramData(com.android.internal.telephony.cdma.SmsMessage)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchBroadcastMessage(android.telephony.SmsCbMessage)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchBroadcastMessage(android.telephony.SmsCbMessage)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchPdus(byte[][])> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchPdus(byte[][])> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (1)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.server.location.GpsLocationProvider: void reportGeofenceAddStatus(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofencePauseStatus(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceRemoveStatus(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceResumeStatus(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceStatus(int,int,double,double,double,float,float,float,long)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceTransition(int,int,double,double,double,float,float,float,long,int,long)> ()
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> ()
<android.media.AsyncPlayer: void stop()> ()
<android.media.AudioService: void dispatchMediaKeyEvent(android.view.KeyEvent)> (2)
<android.media.AudioService: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (2)
<android.media.IAudioService$Stub$Proxy: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> ()
<android.media.IAudioService$Stub: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> (2)
<android.media.AudioService$2: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<android.media.IAudioService$Stub$Proxy: void setWiredDeviceConnectionState(int,int,java.lang.String)> ()
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.IAudioService$Stub: void setWiredDeviceConnectionState(int,int,java.lang.String)> (2)
<android.webkit.HTML5VideoView: void prepareDataAndDisplayMode(android.webkit.HTML5VideoViewProxy)> (3)
<com.android.music.MediaPlaybackService$MultiPlayer$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void <init>(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void setNextDataSource(java.lang.String)> (2)
<com.android.music.AudioPreview$PreviewPlayer: void access$300(android.media.MediaPlayer,boolean)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void access$300(android.media.MediaPlayer,boolean)> (1)
<android.filterpacks.videosrc.MediaSource: void pauseVideo(boolean)> ()
<android.webkit.HTML5Audio: void pause(int)> (2)
<android.webkit.HTML5VideoView: void pause()> (4)
<android.widget.VideoView: void pause()> (6)
<com.android.mms.ui.SlideView: void pauseAudio()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void pause()> (4)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void pause()> (2)
<android.filterpacks.videosrc.MediaSource: boolean setupMediaPlayer(boolean)> (2)
<android.filterpacks.videosrc.MediaSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void process(android.filterfw.core.FilterContext)> (1)
<android.media.AsyncPlayer$Thread: void run()> (2)
<android.media.AsyncPlayer: void startSound(android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void cleanupPlayer(android.media.MediaPlayer)> (1)
<android.media.Ringtone: void destroyLocalPlayer()> (3)
<android.speech.tts.AudioPlaybackQueueItem: void finish()> (1)
<android.webkit.HTML5Audio: void teardown()> ()
<android.webkit.HTML5VideoView: void release()> (3)
<android.widget.VideoView: int getAudioSessionId()> (2)
<android.widget.VideoView: void release(boolean)> (3)
<android.widget.VideoView: void stopPlayback()> (4)
<com.android.deskclock.AlarmKlaxon$3: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.deskclock.AlarmKlaxon: void stop()> (2)
<com.android.deskclock.TimerRingService$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.deskclock.TimerRingService: void stop()> (1)
<com.android.ex.variablespeed.VariableSpeed: void prepare()> (2)
<com.android.mms.transaction.NotificationPlayer$CmdThread: void run()> (2)
<com.android.mms.transaction.NotificationPlayer$CreationAndCompletionThread: void run()> (2)
<com.android.mms.ui.AudioAttachmentView: void cleanupMediaPlayer()> (1)
<com.android.mms.ui.SlideListItemView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.SlideshowAttachmentView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.SlideView$1: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.mms.ui.SlideView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (1)
<com.android.mms.ui.SlideView: void stopAudio()> (2)
<com.android.music.AudioPreview$PreviewPlayer: void release()> (2)
<com.android.musicfx.ControlPanelEffect: void initEffectsPreferences(android.content.Context,java.lang.String,int)> (2)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void release()> (5)
<com.android.music.MusicPicker: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.music.MusicPicker: void stopMediaPlayer()> (2)
<com.android.soundrecorder.Recorder: void stopPlayback()> (1)
<com.android.systemui.media.NotificationPlayer$CmdThread: void run()> (2)
<com.android.systemui.media.NotificationPlayer$CreationAndCompletionThread: void run()> (2)
<android.webkit.HTML5Audio: void resetMediaPlayer()> (5)
<android.webkit.HTML5VideoView: void prepareDataCommon(android.webkit.HTML5VideoViewProxy)> (4)
<android.webkit.HTML5VideoView: void reprepareData(android.webkit.HTML5VideoViewProxy)> (3)
<android.webkit.HTML5VideoView: void reset()> (4)
<com.android.deskclock.AlarmKlaxon: void play(com.android.deskclock.Alarm)> (1)
<com.android.deskclock.TimerRingService: void play()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void reset()> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void reset()> (2)
<com.android.music.MediaPlaybackService$MultiPlayer: boolean setDataSourceImpl(android.media.MediaPlayer,java.lang.String)> (2)
<android.media.AudioService$AudioHandler: void onPlaySoundEffect(int,int)> (1)
<android.media.MediaPlayer: void postEventFromNative(java.lang.Object,int,int,int,java.lang.Object)> (2)
<android.media.Ringtone: boolean playFallbackRingtone()> (1)
<android.media.Ringtone: void play()> (10)
<android.speech.tts.AudioPlaybackQueueItem: void run()> (1)
<android.webkit.HTML5Audio: void onAudioFocusChange(int)> (1)
<android.webkit.HTML5Audio: void play()> (1)
<android.webkit.HTML5VideoFullScreen: void onPrepared(android.media.MediaPlayer)> (2)
<android.webkit.HTML5VideoView: void start()> (4)
<android.widget.VideoView: void start()> (10)
<com.android.deskclock.AlarmKlaxon: void startAlarm(android.media.MediaPlayer)> (1)
<com.android.deskclock.TimerRingService: void startAlarm(android.media.MediaPlayer)> (1)
<com.android.mms.ui.AudioAttachmentView: void startAudio()> (1)
<com.android.mms.ui.SlideView: void startAudio()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void start()> (3)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void start()> (2)
<com.android.music.MusicPicker: void setSelected(android.database.Cursor)> (1)
<com.android.soundrecorder.Recorder: void startPlayback()> (1)
<android.webkit.HTML5VideoView: void stopPlayback()> (2)
<com.android.music.AudioPreview$PreviewPlayer: void stop()> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void stop()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.opp.BluetoothOppObexSession: void start(android.os.Handler,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1000(com.android.bluetooth.opp.BluetoothOppService,javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.browser.BrowserActivity: void onPause()> (1)
<com.android.deskclock.AlarmReceiver: void access$000(com.android.deskclock.AlarmReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.DeskClockFragment: void onPageChanged(int)> (3)
<com.android.deskclock.stopwatch.StopwatchFragment: void access$500(com.android.deskclock.stopwatch.StopwatchFragment)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.exchange.EasAccountService: void sleep(long,boolean)> (1)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (4)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.exchange.ExchangeService: void startServiceThread(com.android.exchange.AbstractSyncService)> (2)
<com.android.exchange.ExchangeService: void waitForConnectivity()> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressStart(com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2600(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLocked()> (4)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection checkMtFindNewRinging(com.android.internal.telephony.DriverCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dialThreeWay(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void processNextPostDialChar()> (5)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)> (4)
<com.android.internal.telephony.gsm.GsmConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void processNextPostDialChar()> (4)
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void conference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getBasebandVersion(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCdmaBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCDMASubscription(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCdmaSubscriptionSource(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCellInfoList(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCLIR(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCurrentCalls(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getDataCallList(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getDataRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getGsmBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMSIForApp(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getLastCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastDataCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getMute(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getOperator(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSignalStrength(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getVoiceRadioTechnology(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getVoiceRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendScreenState(boolean)> (2)
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setCellInfoListRate(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)> (3)
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.mms.transaction.NotificationPlayer: void play(android.content.Context,android.net.Uri,boolean,int,float)> (1)
<com.android.mms.transaction.NotificationPlayer: void stop()> (1)
<com.android.mms.transaction.PrivilegedSmsReceiver: void onReceiveWithPrivilege(android.content.Context,android.content.Intent,boolean)> (2)
<com.android.mms.transaction.SmsReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.phone.CallerInfoCache: com.android.phone.CallerInfoCache init(android.content.Context)> (1)
<com.android.phone.CallerInfoCacheUpdateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen(boolean)> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.PhoneApp: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.phone.AccelerometerListener$OrientationListener: void orientationChanged(int)> (2)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void switchInCallAudio(com.android.phone.InCallScreen$InCallAudioMode)> (1)
<com.android.phone.InCallScreen: void toggleBluetooth()> ()
<com.android.phone.InCallScreen: void toggleSpeaker()> (1)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.PhoneUtils: boolean activateSpeakerIfDocked(com.android.internal.telephony.Phone)> (2)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (7)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (4)
<com.android.phone.PhoneUtils: void restoreSpeakerMode(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.am.ActivityStack: void activitySleptLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void completePauseLocked()> (1)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<android.app.ActivityManagerNative: void goingToSleep()> (2)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void restoreAtInstall(java.lang.String,int)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: void requestNetworkTransitionWakelock(java.lang.String)> (1)
<com.android.server.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<com.android.server.ServerThread$3: void run()> (1)
<com.android.server.IdleMaintenanceService: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.GeofenceManager: void updateFences()> (2)
<com.android.server.location.GpsLocationProvider$4: void run()> (1)
<com.android.server.location.GpsLocationProvider$5: void run()> (1)
<com.android.server.location.LocationProviderInterface: void disable()> (2)
<com.android.server.location.LocationProviderInterface: void enable()> (1)
<com.android.server.location.GpsLocationProvider: void access$2500(com.android.server.location.GpsLocationProvider,int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void setEngineCapabilities(int)> ()
<com.android.server.location.LocationProviderInterface: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> (1)
<com.android.server.location.GpsLocationProvider$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(android.location.LocationRequest,com.android.server.LocationManagerService$Receiver,int,int,java.lang.String)> (1)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)> (2)
<com.android.server.net.NetworkStatsService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)> (1)
<com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)> (2)
<com.android.server.sip.SipService$ConnectivityReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.sip.SipService$SipAutoReg: void onError(int,java.lang.String)> (1)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback: void onResponse(boolean)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onRegistrationDone(android.net.sip.ISipSession,int)> (2)
<com.android.server.sip.SipService$SipSessionGroupExt: void openToReceiveCalls()> (2)
<com.android.server.UiModeManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService: void access$100(com.android.server.UiModeManagerService,int)> (1)
<com.android.server.UiModeManagerService: void access$500(com.android.server.UiModeManagerService)> (1)
<com.android.server.VibratorService: void startNextVibrationLocked()> (4)
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver: void updateStateLocked(java.lang.String,java.lang.String,int)> (2)
<com.android.server.input.InputManagerService$WiredAccessoryCallbacks: void notifyWiredAccessoryChanged(long,int,int)> (1)
<com.android.server.WiredAccessoryManager: void bootCompleted()> (1)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedLoop()> (1)
<com.android.server.wm.WindowManagerService: void resumeRotationLocked()> (1)
<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()> (4)
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityLocked(com.android.server.wm.DisplayContent,int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySizeLocked(com.android.server.wm.DisplayContent,int,int)> (2)
<com.android.settings.CryptKeeper: void access$600(com.android.settings.CryptKeeper)> (1)
<com.android.settings.CryptKeeper: void onStart()> (1)
<com.android.soundrecorder.Recorder: void signalStateChanged(int)> (4)
<com.android.systemui.media.NotificationPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> (1)
<com.android.systemui.media.NotificationPlayer: void stop()> (1)
<com.android.server.content.SyncManager$10: void onStatusChanged(int)> (2)
<com.android.server.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void access$900(com.android.server.content.SyncManager,int)> (1)
<com.android.server.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.server.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,com.android.server.content.SyncManager$ActiveSyncContext)> (4)
<com.android.server.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,com.android.server.content.SyncOperation)> (1)
<com.android.server.content.SyncManager: void scheduleSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle,long,boolean)> (7)
<com.android.server.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void onUserRemoved(int)> (1)
<com.android.server.content.SyncManager: void onUserStopping(int)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<com.android.internal.util.State: void enter()> (29)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleBroadcastSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> (1)
<android.media.IAudioService$Stub$Proxy: void dispatchMediaKeyEvent(android.view.KeyEvent)> ()
<android.media.IAudioService$Stub: void dispatchMediaKeyEvent(android.view.KeyEvent)> (2)
<android.media.IAudioService$Stub$Proxy: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> ()
<android.media.IAudioService$Stub: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (2)
<android.media.IAudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)> (1)
<android.webkit.HTML5VideoFullScreen: void prepareDataAndDisplayMode(android.webkit.HTML5VideoViewProxy)> (2)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void play(java.lang.String,int,android.webkit.HTML5VideoViewProxy,android.webkit.WebChromeClient,int)> (2)
<com.android.music.MediaPlaybackService: void onCreate()> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void setDataSource(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void setNextTrack()> (3)
<android.webkit.HTML5Audio: void pause()> ()
<android.webkit.HTML5VideoFullScreen: void pause()> (2)
<android.webkit.HTML5VideoInline: void pause()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void pause(android.webkit.HTML5VideoViewProxy)> (2)
<android.webkit.HTML5VideoView: void pauseAndDispatch(android.webkit.HTML5VideoViewProxy)> (6)
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.gallery3d.app.MoviePlayer: void pauseVideo()> (5)
<com.android.gallery3d.app.TrimVideo: int setProgress()> (3)
<com.android.gallery3d.app.TrimVideo: void pauseVideo()> (2)
<com.android.mms.ui.SlideView: void pauseVideo()> (1)
<com.android.mms.ui.SlideViewInterface: void pauseAudio()> (1)
<com.android.music.AudioPreview$2: void onAudioFocusChange(int)> (1)
<com.android.music.AudioPreview: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.music.AudioPreview: void playPauseClicked(android.view.View)> ()
<com.android.music.MediaPlaybackService$MultiPlayer: void pause()> (1)
<android.filterpacks.videosrc.MediaSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void close(android.filterfw.core.FilterContext)> (61)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<android.media.AsyncPlayer: void access$200(android.media.AsyncPlayer,android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void access$5000(android.media.AudioService$AudioHandler,android.media.MediaPlayer)> (2)
<android.media.Ringtone: void setUri(android.net.Uri)> (3)
<android.media.Ringtone: void stop()> (8)
<android.webkit.HTML5VideoFullScreen: void release()> (1)
<android.webkit.HTML5VideoInline: void release()> (1)
<android.webkit.WebViewClassic$OnTrimMemoryListener: void onTrimMemory(int)> (1)
<com.android.gallery3d.app.MoviePlayer: void <init>(android.view.View,com.android.gallery3d.app.MovieActivity,android.net.Uri,android.os.Bundle,boolean)> (2)
<android.widget.VideoView: void access$2100(android.widget.VideoView,boolean)> (1)
<android.widget.VideoView: void openVideo()> (3)
<android.widget.VideoView: void suspend()> (3)
<com.android.gallery3d.app.MoviePlayer: void onDestroy()> (2)
<com.android.gallery3d.app.TrimVideo: void onDestroy()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void hideAndStopWelcomeVideo()> (2)
<com.android.mms.ui.SlideView: void stopVideo()> (2)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.deskclock.TimerRingService: void onDestroy()> (1)
<com.android.ex.variablespeed.MediaPlayerProxy: void prepare()> (3)
<com.android.ex.variablespeed.VariableSpeed: void stopAndStartPlayingAgain(com.android.ex.variablespeed.MediaPlayerDataSource)> (2)
<com.android.mms.transaction.NotificationPlayer: void startSound(com.android.mms.transaction.NotificationPlayer$Command)> (1)
<com.android.mms.ui.AudioAttachmentView: void stopAudio()> (4)
<com.android.mms.ui.SlideViewInterface: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.SlideViewInterface: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (2)
<com.android.mms.ui.SlideViewInterface: void stopAudio()> (1)
<com.android.mms.ui.SlideView: void reset()> (2)
<com.android.music.AudioPreview: void stopPlayback()> (3)
<com.android.musicfx.ActivityMusic: void onCreate(android.os.Bundle)> (1)
<com.android.musicfx.ControlPanelEffect: void setEnabledAll(android.content.Context,java.lang.String,int,boolean)> ()
<com.android.music.MediaPlaybackService$MultiPlayer: void release()> (1)
<com.android.music.MusicPicker: void onPause()> (2)
<com.android.soundrecorder.Recorder: void stop()> (11)
<com.android.systemui.media.NotificationPlayer: void startSound(com.android.systemui.media.NotificationPlayer$Command)> (1)
<android.webkit.HTML5Audio: boolean onError(android.media.MediaPlayer,int,int)> (1)
<android.webkit.HTML5Audio: void <init>(android.webkit.WebViewCore,int)> ()
<android.webkit.HTML5Audio: void setDataSource(java.lang.String)> (1)
<android.webkit.HTML5VideoFullScreen: void prepareDataCommon(android.webkit.HTML5VideoViewProxy)> (1)
<android.webkit.HTML5VideoInline: void prepareDataCommon(android.webkit.HTML5VideoViewProxy)> (1)
<android.webkit.HTML5VideoFullScreen: void reprepareData(android.webkit.HTML5VideoViewProxy)> (1)
<android.webkit.HTML5VideoInline: void reprepareData(android.webkit.HTML5VideoViewProxy)> (1)
<android.webkit.HTML5VideoFullScreen: void reset()> (1)
<android.webkit.HTML5VideoInline: void reset()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void enterFullScreenVideo(int,java.lang.String,android.webkit.HTML5VideoViewProxy,android.webkit.WebViewClassic)> (3)
<com.android.deskclock.AlarmKlaxon: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.deskclock.TimerRingService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void stop()> (2)
<com.android.music.AudioPreview$PreviewPlayer: void postEventFromNative(java.lang.Object,int,int,int,java.lang.Object)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void postEventFromNative(java.lang.Object,int,int,int,java.lang.Object)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void startSample()> (3)
<com.android.internal.policy.impl.PhoneWindowManager: void performAuditoryFeedbackForAccessibilityIfNeed()> (1)
<com.android.providers.media.RingtonePickerActivity: void run()> (1)
<com.android.server.DockObserver: void handleDockStateChange()> (1)
<com.android.server.power.Notifier: void playWirelessChargingStartedSound()> (1)
<com.android.systemui.media.RingtonePlayer$1: void play(android.os.IBinder,android.net.Uri,int)> (2)
<com.android.systemui.power.PowerUI: void playLowBatterySound()> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<android.speech.tts.PlaybackQueueItem: void run()> (2)
<android.webkit.HTML5Audio: void onPrepared(android.media.MediaPlayer)> (1)
<android.webkit.HTML5VideoFullScreen: void start()> (2)
<android.webkit.HTML5VideoInline: void start()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void onPrepared()> (1)
<android.widget.VideoView$2: void onPrepared(android.media.MediaPlayer)> (1)
<android.widget.VideoView$6: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.gallery3d.app.MoviePlayer: void playVideo()> (3)
<com.android.gallery3d.app.MoviePlayer: void startVideo()> (4)
<com.android.gallery3d.app.TrimVideo: void playVideo()> (3)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void showAndStartWelcomeVideo()> (1)
<com.android.mms.ui.SlideView: void startVideo()> (1)
<com.android.mms.ui.SlideViewInterface: void startAudio()> (1)
<com.android.music.AudioPreview: void onPrepared(android.media.MediaPlayer)> (2)
<com.android.music.AudioPreview: void start()> (3)
<com.android.music.MediaPlaybackService$MultiPlayer: void start()> (1)
<com.android.music.MusicPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<android.webkit.HTML5VideoFullScreen: void stopPlayback()> (1)
<android.webkit.HTML5VideoInline: void stopPlayback()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startObexSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.deskclock.AlarmReceiver$1: void run()> (1)
<com.android.deskclock.ClockFragment: void onPageChanged(int)> (1)
<com.android.deskclock.DeskClock$TabsAdapter: void notifyPageChanged(int)> (2)
<com.android.deskclock.DeskClock$TabsAdapter: void registerPageChangedListener(com.android.deskclock.DeskClockFragment)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment$3: void run()> (1)
<com.android.exchange.EasAccountService: void runPingLoop()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (1)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (3)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (8)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.exchange.ExchangeService: void requestSync(com.android.emailcommon.provider.Mailbox,int,com.android.exchange.Request)> (2)
<com.android.gallery3d.ui.MenuExecutor: void access$600(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardTimeout(android.os.Bundle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void doKeyguardLaterLocked()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onSystemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (4)
<android.view.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)> (1)
<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.Connection: void cancelPostDial()> (3)
<com.android.internal.telephony.Connection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.Connection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void onConnectedInOrOut()> (4)
<com.android.internal.telephony.CallTracker: void handlePollCalls(android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void access$000(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void onConnectedInOrOut()> (2)
<com.android.internal.telephony.CommandsInterface: void acceptCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void conference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deactivateDataCall(int,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void exitEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void explicitCallTransfer(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getAvailableNetworks(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getBasebandVersion(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCdmaBroadcastConfig(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getCDMASubscription(android.os.Message)> (5)
<com.android.internal.telephony.CommandsInterface: void getCdmaSubscriptionSource(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getCellInfoList(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getCLIR(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCurrentCalls(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getDataCallList(android.os.Message)> (4)
<com.android.internal.telephony.RIL: void getPDPContextList(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getDataRegistrationState(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getGsmBroadcastConfig(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMSIForApp(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getIMSI(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getLastCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getLastDataCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastPdpFailCause(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getMute(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getOperator(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getPreferredNetworkType(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getSignalStrength(android.os.Message)> (5)
<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getVoiceRadioTechnology(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getVoiceRegistrationState(android.os.Message)> (8)
<com.android.internal.telephony.CommandsInterface: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void hangupConnection(int,android.os.Message)> (6)
<com.android.internal.telephony.CommandsInterface: void hangupForegroundResumeBackground(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void hangupWaitingOrBackground(android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (11)
<com.android.internal.telephony.RIL: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void queryCallWaiting(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void rejectCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportSmsMemoryStatus(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void resetRadio(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void sendCdmaSms(byte[],android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void sendDtmf(char,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void sendEnvelope(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void access$000(com.android.internal.telephony.RIL,boolean)> (1)
<com.android.internal.telephony.RIL: void onRadioAvailable()> (1)
<com.android.internal.telephony.CommandsInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void separateConnection(int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCallWaiting(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaSubscriptionSource(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void processUnsolicited(android.os.Parcel)> (1)
<com.android.internal.telephony.CommandsInterface: void setCellInfoListRate(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCLIR(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void setMute(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeAutomatic(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setPreferredNetworkType(int,android.os.Message)> (3)
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()> (2)
<com.android.internal.telephony.CommandsInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setRadioPower(boolean,android.os.Message)> (7)
<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setSuppServiceNotifications(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void startDtmf(char,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void stopDtmf(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.mms.transaction.MessagingNotification: void playInConversationNotificationSound(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification$2: void run()> (1)
<com.android.mms.transaction.PrivilegedSmsReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.AccelerometerListener: void setOrientation(int)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.phone.InCallTouchUi: void handleAudioButtonClick()> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean answerCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: void internalAnswerCall()> (2)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.server.am.ActivityStack: void activityPaused(android.os.IBinder,boolean)> (3)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: boolean shutdown(int)> (1)
<android.app.IActivityManager: void goingToSleep()> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService$5: void run()> (1)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean requestNetworkTransitionWakelock(java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void access$000(com.android.server.location.GeofenceManager)> (2)
<com.android.server.location.GeofenceManager: void onLocationChanged(android.location.Location)> (1)
<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)> (2)
<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)> (5)
<com.android.server.LocationManagerService: void handleLocationChanged(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void switchUser(int)> (1)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (7)
<com.android.server.power.PowerManagerService$2: void run()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: void shutdown(boolean)> (1)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback: void onError(int,java.lang.String)> (2)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy$1: void run()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SipKeepAlive: boolean process(java.util.EventObject)> (1)
<com.android.server.sip.SipService$SipSessionGroupExt: void onConnectivityChanged(boolean)> (1)
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<com.android.server.UiModeManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$4: void onTwilightStateChanged()> (1)
<com.android.server.VibratorService: void access$300(com.android.server.VibratorService)> (3)
<com.android.server.VibratorService: void updateInputDeviceVibrators()> (5)
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver: void init()> (1)
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.input.InputManagerService: void notifySwitch(long,int,int)> ()
<com.android.server.WiredAccessoryManager: void access$000(com.android.server.WiredAccessoryManager)> (1)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (20)
<com.android.server.wm.DragState: void unregister()> (4)
<com.android.server.wm.WindowManagerService: void access$400(com.android.server.wm.WindowManagerService)> (2)
<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)> (6)
<com.android.server.wm.WindowManagerService: void clearForcedDisplayDensity(int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensity(int,int)> (2)
<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)> (2)
<com.android.settings.CryptKeeper$ValidationTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.soundrecorder.Recorder: void clear()> (1)
<com.android.soundrecorder.Recorder: void delete()> (3)
<com.android.soundrecorder.Recorder: void restoreState(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void setState(int)> (4)
<com.android.systemui.media.RingtonePlayer$1: void playAsync(android.net.Uri,android.os.UserHandle,boolean,int)> (2)
<com.android.systemui.media.RingtonePlayer$1: void stopAsync()> (2)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.server.content.SyncManager$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,int,java.lang.String)> (2)
<com.android.server.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$8: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(android.content.SyncAdapterType,int,boolean)> (1)
<com.android.server.content.SyncManager: void scheduleLocalSync(android.accounts.Account,int,int,java.lang.String)> (1)
<com.android.server.content.SyncManager: void access$800(com.android.server.content.SyncManager,int)> (2)
<com.android.server.content.SyncManager: void access$1000(com.android.server.content.SyncManager,int)> (1)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<android.media.IAudioService: void dispatchMediaKeyEvent(android.view.KeyEvent)> (3)
<android.media.IAudioService: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (1)
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String)> (1)
<android.webkit.HTML5VideoFullScreen: void prepareForFullScreen()> (1)
<android.webkit.HTML5VideoViewProxy: void play(java.lang.String,int,int)> ()
<com.android.music.MediaPlaybackService: boolean open(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void access$1200(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void openCurrentAndNext()> (9)
<com.android.music.MediaPlaybackService: void setRepeatMode(int)> (1)
<android.webkit.HTML5VideoViewProxy: void pause()> ()
<android.webkit.HTML5VideoFullScreen: void pauseAndDispatch(android.webkit.HTML5VideoViewProxy)> (2)
<android.webkit.HTML5VideoInline: void pauseAndDispatch(android.webkit.HTML5VideoViewProxy)> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void pauseAndDispatch()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void setBaseLayer(int)> (1)
<android.webkit.HTML5VideoView: void onPrepared(android.media.MediaPlayer)> (4)
<com.android.gallery3d.app.MovieActivity$1: void pauseVideo()> (1)
<com.android.gallery3d.app.MoviePlayer: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.gallery3d.app.MoviePlayer: void access$1000(com.android.gallery3d.app.MoviePlayer)> (2)
<com.android.gallery3d.app.MoviePlayer: void onPlayPause()> (2)
<com.android.gallery3d.app.MoviePlayer: void onResume()> (2)
<com.android.gallery3d.app.TrimVideo: int access$100(com.android.gallery3d.app.TrimVideo)> (1)
<com.android.gallery3d.app.TrimVideo: void onSeekEnd(int,int,int)> (1)
<com.android.gallery3d.app.TrimVideo: void onPlayPause()> (1)
<com.android.gallery3d.app.TrimVideo: void onSeekStart()> (1)
<com.android.mms.ui.SlideViewInterface: void pauseVideo()> (1)
<com.android.mms.ui.SlideshowPresenter: void presentAudio(com.android.mms.ui.SlideViewInterface,com.android.mms.model.AudioModel,boolean)> (2)
<com.android.music.MediaPlaybackService: void pause()> (4)
<android.filterfw.core.Filter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (43)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void performClose(android.filterfw.core.FilterContext)> (72)
<android.filterpacks.base.CallbackFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void close(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<android.media.AudioService$AudioHandler$1: void onCompletion(android.media.MediaPlayer)> (1)
<android.media.AudioService$AudioHandler$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)> (2)
<android.media.Ringtone: void setStreamType(int)> (9)
<com.android.systemui.media.RingtonePlayer$Client: void <init>(com.android.systemui.media.RingtonePlayer,android.os.IBinder,android.net.Uri,android.os.UserHandle,int)> (1)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> (1)
<android.media.RingtoneManager: void stopPreviousRingtone()> (3)
<android.preference.VolumePreference$SeekBarVolumizer: void stopSample()> (6)
<com.android.providers.media.RingtonePickerActivity: void stopAnyPlayingRingtone()> (2)
<com.android.systemui.media.RingtonePlayer$1: void stop(android.os.IBinder)> (2)
<com.android.systemui.media.RingtonePlayer$Client: void binderDied()> (1)
<com.android.gallery3d.app.MovieActivity$1: void <init>(android.view.View,com.android.gallery3d.app.MovieActivity,android.net.Uri,android.os.Bundle,boolean)> (1)
<com.android.gallery3d.app.MovieActivity$1: void <init>(com.android.gallery3d.app.MovieActivity,android.view.View,com.android.gallery3d.app.MovieActivity,android.net.Uri,android.os.Bundle,boolean)> (1)
<android.widget.VideoView$6: void surfaceDestroyed(android.view.SurfaceHolder)> (1)
<android.widget.VideoView: void access$2000(android.widget.VideoView)> (1)
<android.widget.VideoView: void resume()> (2)
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)> (1)
<com.android.gallery3d.app.MoviePlayer: void onPause()> (2)
<com.android.gallery3d.app.TrimVideo: void onPause()> (1)
<com.android.gallery3d.app.MovieActivity$1: void onDestroy()> (1)
<com.android.gallery3d.app.MovieActivity: void onDestroy()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onPause()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void updateSetupStepView()> (4)
<com.android.mms.ui.SlideViewInterface: void stopVideo()> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$2: java.lang.Exception doInBackground(java.lang.Void[])> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$3: java.lang.Exception doInBackground(java.lang.Void[])> (1)
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void prepare()> (1)
<com.android.ex.variablespeed.VariableSpeed: void seekTo(int)> (1)
<com.android.ex.variablespeed.VariableSpeed: void start()> (2)
<com.android.mms.transaction.NotificationPlayer: void access$500(com.android.mms.transaction.NotificationPlayer,com.android.mms.transaction.NotificationPlayer$Command)> (1)
<com.android.mms.ui.AudioAttachmentView$1: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.mms.ui.AudioAttachmentView: void onPlaybackError()> (1)
<com.android.mms.ui.AudioAttachmentView: void reset()> (2)
<com.android.mms.ui.SlideshowPresenter: void presentVideo(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel,com.android.mms.model.RegionModel,boolean)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentAudioThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.AudioModel)> (1)
<com.android.mms.ui.SlideViewInterface: void reset()> (3)
<com.android.mms.ui.ViewInterface: void reset()> ()
<com.android.music.AudioPreview: void onDestroy()> (1)
<com.android.music.AudioPreview: void onUserLeaveHint()> (1)
<com.android.music.MediaPlaybackService: void onDestroy()> (1)
<com.android.soundrecorder.Recorder: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.soundrecorder.Recorder: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<com.android.soundrecorder.SoundRecorder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.soundrecorder.SoundRecorder: void onPause()> (1)
<com.android.soundrecorder.SoundRecorder: void onStop()> (1)
<com.android.soundrecorder.SoundRecorder: void updateTimeRemaining()> (1)
<com.android.systemui.media.NotificationPlayer: void access$600(com.android.systemui.media.NotificationPlayer,com.android.systemui.media.NotificationPlayer$Command)> (1)
<android.webkit.HTML5VideoViewProxy: void enterFullScreenVideo(int,java.lang.String)> ()
<android.webkit.HTML5VideoViewProxy: void enterFullscreenForVideoLayer(java.lang.String,int)> ()
<com.android.music.MediaPlaybackService: void stop(boolean)> (8)
<android.preference.VolumePreference$SeekBarVolumizer: void changeVolumeBy(int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void muteVolume()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void access$200(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.server.DockObserver: void access$000(com.android.server.DockObserver)> (2)
<com.android.server.power.Notifier: void access$700(com.android.server.power.Notifier)> (2)
<android.media.IRingtonePlayer$Stub$Proxy: void play(android.os.IBinder,android.net.Uri,int)> ()
<android.media.IRingtonePlayer$Stub: void play(android.os.IBinder,android.net.Uri,int)> (2)
<com.android.systemui.power.PowerUI$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<android.speech.tts.AudioPlaybackHandler$MessageLoop: void run()> (1)
<android.webkit.HTML5VideoViewProxy: void onPrepared(android.media.MediaPlayer)> (2)
<com.android.gallery3d.app.MovieActivity$1: void playVideo()> (1)
<com.android.gallery3d.app.MovieActivity$1: void startVideo()> (1)
<com.android.gallery3d.app.MoviePlayer: void access$800(com.android.gallery3d.app.MoviePlayer)> (3)
<com.android.gallery3d.app.MoviePlayer: void onReplay()> (2)
<com.android.gallery3d.app.TrimVideo: void onCreate(android.os.Bundle)> (1)
<com.android.gallery3d.app.TrimVideo: void onReplay()> (1)
<com.android.mms.ui.SlideViewInterface: void startVideo()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.music.AudioPreview: void access$700(com.android.music.AudioPreview)> (1)
<com.android.music.MediaPlaybackService: void play()> (10)
<com.android.bluetooth.opp.BluetoothOppTransfer: void access$400(com.android.bluetooth.opp.BluetoothOppTransfer)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.deskclock.DeskClock$TabsAdapter: void notifySelectedPage(int)> (1)
<com.android.deskclock.DeskClock$TabsAdapter: void onPageSelected(int)> (1)
<com.android.deskclock.DeskClock: void registerPageChangedListener(com.android.deskclock.DeskClockFragment)> (2)
<com.android.exchange.EasAccountService: void sync()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (1)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (4)
<com.android.exchange.adapter.AttachmentLoader: void loadAttachment()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: int getEstimate(java.lang.String)> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (2)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (2)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (11)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity)> (2)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendPing(byte[],int)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)> (4)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onDreamingStarted()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<com.android.server.wm.KeyguardDisableHandler$KeyguardTokenWatcher: void acquired()> (1)
<com.android.server.wm.KeyguardDisableHandler$KeyguardTokenWatcher: void released()> (1)
<com.android.server.wm.WindowManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.server.wm.InputMonitor: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.phone.InCallScreen$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$6: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.InCallScreen$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void acceptCall()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void acceptCall()> (2)
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void sendSmsAckForEnvelopeResponse(com.android.internal.telephony.uicc.IccIoResult,int,int)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void acknowledgeSmsWithError(int)> (3)
<com.android.internal.telephony.gsm.GsmMmiCode: void cancel()> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void processCode()> (2)
<com.android.internal.telephony.uicc.UiccCardApplication: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void conference()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DataConnection: void tearDownData(java.lang.Object)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void deleteSms(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void deleteSms(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void dial(java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void exitEmergencyCallbackMode()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void explicitCallTransfer()> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void explicitCallTransfer()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.uicc.RuimRecords: void onReady()> (2)
<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()> (4)
<com.android.internal.telephony.gsm.GSMPhone: void getOutgoingCallerIdDisplay(android.os.Message)> ()
<com.android.internal.telephony.CallTracker: void pollCallsWhenSafe()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getPDPContextList(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.uicc.RuimRecords: void fetchRuimRecords()> (3)
<com.android.internal.telephony.uicc.SIMRecords: void fetchSimRecords()> (3)
<com.android.internal.telephony.CommandsInterface: void getIMSI(android.os.Message)> ()
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getLastPdpFailCause(android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> (6)
<com.android.internal.telephony.ServiceStateTracker: void reRegisterNetwork(android.os.Message)> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> (6)
<com.android.internal.telephony.cat.CatService: void handleCmdResponse(com.android.internal.telephony.cat.CatResponseMessage)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupAllConnections(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaConnection)> (4)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupAllConnections(com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmConnection)> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupWaitingOrBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmCall)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupWaitingOrBackground()> (2)
<com.android.internal.telephony.uicc.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (8)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (6)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (6)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (12)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (10)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFTransparent(int,android.os.Message)> (10)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFTransparent(int,int,android.os.Message)> (6)
<com.android.internal.telephony.uicc.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (10)
<com.android.internal.telephony.uicc.IccFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (7)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestRaw(byte[],android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void queryAvailableBandMode(android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void queryCdmaRoamingPreference(android.os.Message)> (6)
<com.android.internal.telephony.uicc.UiccCardApplication: void queryFdn()> (2)
<com.android.internal.telephony.uicc.UiccCardApplication: void queryPin1State()> (2)
<com.android.internal.telephony.CommandsInterface: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void queryTTYMode(android.os.Message)> (6)
<com.android.internal.telephony.cdma.CdmaCallTracker: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void rejectCall()> (2)
<com.android.internal.telephony.SmsStorageMonitor$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void flashAndSetGenericTrue()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void switchWaitingOrHoldingAndActive()> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)> ()
<com.android.internal.telephony.cat.CatService: void sendMenuSelection(int,boolean)> (1)
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void handleDataDownload(com.android.internal.telephony.gsm.SmsMessage)> (1)
<com.android.internal.telephony.RIL$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.BaseCommands: void onRadioAvailable()> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.cat.CatService: void sendTerminalResponse(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.ResultCode,boolean,int,com.android.internal.telephony.cat.ResponseData)> (3)
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void separate(com.android.internal.telephony.cdma.CdmaConnection)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void separate(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean setCdmaBroadcastActivation(boolean)> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> (6)
<com.android.internal.telephony.RIL: void processResponse(android.os.Parcel)> (1)
<com.android.internal.telephony.PhoneBase: void setCellInfoListRate(int)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void syncClirSetting()> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean setCellBroadcastActivation(boolean)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean setCellBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.ServiceStateTracker: void disableLocationUpdates()> (3)
<com.android.internal.telephony.ServiceStateTracker: void disableSingleLocationUpdate()> (4)
<com.android.internal.telephony.ServiceStateTracker: void enableLocationUpdates()> (3)
<com.android.internal.telephony.ServiceStateTracker: void enableSingleLocationUpdate()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GsmCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)> (6)
<com.android.internal.telephony.BaseCommands: void setCurrentPreferredNetworkType()> (3)
<com.android.internal.telephony.CommandsInterface: void setCurrentPreferredNetworkType()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void hangupAndPowerOff()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setPowerStateToDesired()> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void hangupAndPowerOff()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.uicc.RuimRecords: void handleRuimRefresh(com.android.internal.telephony.uicc.IccRefreshResponse)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void handleSimRefresh(com.android.internal.telephony.uicc.IccRefreshResponse)> (1)
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void registerForSuppServiceNotification(android.os.Handler,int,java.lang.Object)> ()
<com.android.internal.telephony.gsm.GSMPhone: void unregisterForSuppServiceNotification(android.os.Handler)> ()
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)> (6)
<com.android.internal.telephony.dataconnection.DataConnection: void onConnect(com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void stopDtmf()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void stopDtmf()> ()
<com.android.internal.telephony.CommandsInterface: void supplyIccPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void switchWaitingOrHoldingAndActive()> (5)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void writeSms(int,byte[],byte[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void writeSms(int,byte[],byte[],android.os.Message)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,long,boolean)> (5)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.InCallScreen: void openDialpadInternal(boolean)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.AccelerometerListener: void onSensorEvent(double,double,double)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallUiState$InCallScreenMode)> (12)
<com.android.phone.PhoneGlobals: void clearOtaState()> (3)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean answerCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.power.ShutdownThread: void run()> (2)
<com.android.server.power.Notifier: void sendGoToSleepBroadcast(int)> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void exit()> (1)
<com.android.server.location.GeofenceManager: void scheduleUpdateFencesLocked()> (3)
<com.android.server.LocationManagerService: void applyAllProviderRequirementsLocked()> (1)
<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)> (4)
<com.android.server.LocationManagerService: void access$1200(com.android.server.LocationManagerService,android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService: void access$300(com.android.server.LocationManagerService,int)> (1)
<com.android.server.LocationManagerService: void access$200(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void systemReady()> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)> (2)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy$2: void run()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SipKeepAlive: void onError(android.net.sip.ISipSession,int,java.lang.String)> (2)
<com.android.server.sip.SipSessionGroup$SipSessionImpl: boolean process(java.util.EventObject)> (2)
<com.android.server.sip.SipService: void onConnectivityChanged(android.net.NetworkInfo)> (1)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<com.android.server.TwilightService$TwilightListener: void onTwilightStateChanged()> (1)
<com.android.server.VibratorService$3: void run()> (1)
<com.android.server.VibratorService$VibrateThread: void run()> (2)
<com.android.server.VibratorService$Vibration: void binderDied()> (1)
<com.android.server.VibratorService: void access$400(com.android.server.VibratorService)> (2)
<com.android.server.VibratorService: void onInputDeviceAdded(int)> (1)
<com.android.server.VibratorService: void onInputDeviceChanged(int)> (1)
<com.android.server.VibratorService: void onInputDeviceRemoved(int)> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<com.android.server.WiredAccessoryManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration()> (2)
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> (3)
<com.android.server.wm.WindowManagerService: void access$300(com.android.server.wm.WindowManagerService)> (5)
<com.android.server.wm.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)> (2)
<com.android.server.wm.WindowManagerService: void reevaluateStatusBarVisibility()> (1)
<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)> (4)
<com.android.server.wm.WindowManagerService: void setCurrentUser(int)> (1)
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.wm.WindowManagerService: void setOverscan(int,int,int,int,int)> (2)
<com.android.server.wm.WindowManagerService: void setUniverseTransformLocked(com.android.server.wm.WindowState,float,float,float,float,float,float,float)> (1)
<com.android.server.wm.DragState: void endDragLw()> (3)
<com.android.server.wm.Session: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.WindowManagerService: android.os.IBinder prepareDragSurface(android.view.IWindow,android.view.SurfaceSession,int,int,int,android.view.Surface)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)> (3)
<com.android.server.wm.WindowAnimator: void testTokenMayBeDrawnLocked()> (1)
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplayDensity(int)> ()
<android.view.IWindowManager$Stub: void clearForcedDisplayDensity(int)> (2)
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplayDensity(int,int)> ()
<android.view.IWindowManager$Stub: void setForcedDisplayDensity(int,int)> (2)
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplaySize(int)> ()
<android.view.IWindowManager$Stub: void clearForcedDisplaySize(int)> (2)
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize(int,int,int)> ()
<android.view.IWindowManager$Stub: void setForcedDisplaySize(int,int,int)> (2)
<com.android.settings.CryptKeeper$ValidationTask: void onPostExecute(java.lang.Object)> (1)
<com.android.soundrecorder.SoundRecorder$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.soundrecorder.SoundRecorder: void onCreate(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void stopRecording()> (1)
<android.media.IRingtonePlayer$Stub$Proxy: void playAsync(android.net.Uri,android.os.UserHandle,boolean,int)> ()
<android.media.IRingtonePlayer$Stub: void playAsync(android.net.Uri,android.os.UserHandle,boolean,int)> (2)
<android.media.IRingtonePlayer$Stub$Proxy: void stopAsync()> ()
<android.media.IRingtonePlayer$Stub: void stopAsync()> (2)
<com.android.server.content.SyncStorageEngine$OnSyncRequestListener: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(java.lang.Object,int,boolean)> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.commands.media.Media: void sendMediaKey(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void handleMediaKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: void handleMediaKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)> (2)
<com.android.server.WiredAccessoryManager: void setDeviceStateLocked(int,int,int,java.lang.String)> (1)
<android.webkit.HTML5VideoFullScreen: void access$500(android.webkit.HTML5VideoFullScreen)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: int removeTracksInternal(int,int)> (2)
<com.android.music.MediaPlaybackService: void access$400(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.MediaPlaybackService: void gotoNext(boolean)> (5)
<com.android.music.MediaPlaybackService: void open(long[],int)> (1)
<com.android.music.MediaPlaybackService: void prev()> (3)
<com.android.music.MediaPlaybackService: void reloadQueue()> (2)
<com.android.music.MediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.MediaPlaybackService: void setShuffleMode(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setRepeatMode(int)> (2)
<android.webkit.HTML5VideoFullScreen$1: void surfaceDestroyed(android.view.SurfaceHolder)> (1)
<android.webkit.HTML5VideoViewProxy: void pauseAndDispatch()> (1)
<android.webkit.HTML5VideoViewProxy: void setBaseLayer(int)> (1)
<android.webkit.HTML5VideoInline: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.gallery3d.app.MovieActivity$1: void access$1000(com.android.gallery3d.app.MoviePlayer)> (1)
<com.android.gallery3d.app.MoviePlayer$AudioBecomingNoisyReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onPlayPause()> (3)
<com.android.gallery3d.app.MovieActivity$1: void onPlayPause()> (1)
<com.android.gallery3d.app.MovieActivity$1: void onResume()> (1)
<com.android.gallery3d.app.MovieActivity: void onResume()> (1)
<com.android.gallery3d.app.TrimVideo$2: void run()> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onSeekEnd(int,int,int)> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onSeekStart()> (1)
<com.android.mms.ui.SlideshowPresenter$5: void run()> (1)
<com.android.mms.ui.SlideshowPresenter: void presentSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (2)
<com.android.music.MediaPlaybackService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void pause()> (2)
<android.filterfw.core.Filter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BitmapOverlayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ContrastFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: void close()> ()
<android.filterfw.core.FilterGraph: void closeFilters(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performTearDown(android.filterfw.core.FilterContext)> (70)
<android.filterpacks.base.CallbackFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)> (12)
<android.preference.VolumePreference$SeekBarVolumizer: void initSeekBar(android.widget.SeekBar,android.net.Uri)> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: void <init>(android.content.Context)> (1)
<com.android.providers.media.RingtonePickerActivity: void onClick(android.content.DialogInterface,int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void stop()> (2)
<android.preference.VolumePreference: void onActivityStop()> (2)
<android.preference.VolumePreference: void onSampleStarting(android.preference.VolumePreference$SeekBarVolumizer)> (2)
<com.android.settings.RingerVolumePreference: void onActivityStop()> (1)
<com.android.settings.RingerVolumePreference: void onSampleStarting(android.preference.VolumePreference$SeekBarVolumizer)> (1)
<com.android.providers.media.RingtonePickerActivity: void onPause()> (2)
<com.android.providers.media.RingtonePickerActivity: void onStop()> (2)
<android.media.IRingtonePlayer$Stub$Proxy: void stop(android.os.IBinder)> ()
<android.media.IRingtonePlayer$Stub: void stop(android.os.IBinder)> (2)
<com.android.gallery3d.app.MovieActivity: void onCreate(android.os.Bundle)> (1)
<android.widget.VideoView$6: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.gallery3d.app.TrimVideo: void onResume()> (1)
<android.widget.VideoView: void setVideoURI(android.net.Uri)> (5)
<com.android.gallery3d.app.MovieActivity$1: void onPause()> (1)
<com.android.gallery3d.app.MovieActivity: void onPause()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onBackPressed()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onResume()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.ex.variablespeed.MediaPlayerProxy: void seekTo(int)> (2)
<com.android.ex.variablespeed.MediaPlayerProxy: void start()> (2)
<com.android.mms.ui.AudioAttachmentView: void access$000(com.android.mms.ui.AudioAttachmentView)> (1)
<com.android.mms.ui.SlideshowPresenter: void presentRegionMedia(com.android.mms.ui.SlideViewInterface,com.android.mms.model.RegionMediaModel,boolean)> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.soundrecorder.SoundRecorder: void updateTimerView()> (2)
<com.android.music.MediaPlaybackService: void closeExternalStorageFiles(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void stop()> (1)
<android.preference.VolumePreference: boolean onKey(android.view.View,int,android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.server.power.Notifier: void onWirelessChargingStarted()> (1)
<android.media.IRingtonePlayer$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IRingtonePlayer: void play(android.os.IBinder,android.net.Uri,int)> (1)
<com.android.gallery3d.app.MovieActivity$1: void access$800(com.android.gallery3d.app.MoviePlayer)> (1)
<com.android.gallery3d.app.MoviePlayer$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.MoviePlayer$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onReplay()> (2)
<com.android.gallery3d.app.MovieActivity$1: void onReplay()> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void play()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.deskclock.DeskClock: void createTabs(int)> (1)
<com.android.deskclock.timer.TimerFragment: void onResume()> (1)
<com.android.exchange.EasAccountService: void run()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (1)
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> (3)
<com.android.exchange.adapter.EmailSyncAdapter: void getAutomaticLookback()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendPing(byte[],int)> (2)
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> (1)
<com.android.exchange.adapter.Search: int searchMessages(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (2)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (1)
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.EasSyncService: boolean sendSettings()> (3)
<com.android.exchange.EasSyncService: com.android.exchange.adapter.ProvisionParser canProvision(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (3)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvisionImpl(com.android.exchange.EasSyncService,java.lang.String,java.lang.String,boolean)> (4)
<com.android.exchange.EasSyncService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (3)
<com.android.exchange.EasSyncService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (3)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse sendPing(byte[],int)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.EasAccountService: int parsePingResult(java.io.InputStream,android.content.ContentResolver,java.util.HashMap)> (1)
<com.android.exchange.ExchangeService$2: void startSync(long,boolean)> (2)
<com.android.exchange.ExchangeService: void sendMessageRequest(com.android.exchange.Request)> (2)
<com.android.exchange.ExchangeService: void serviceRequest(long,long,int)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onPhoneStateChanged(int)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (8)
<com.android.internal.policy.impl.PhoneWindowManager$15: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void acceptCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallHoldIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void acceptCall()> ()
<com.android.internal.telephony.SMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleStatusReport(android.os.AsyncResult)> (1)
<com.android.internal.telephony.MmiCode: void cancel()> (2)
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)> ()
<com.android.internal.telephony.uicc.IccCardProxy: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void conference()> (1)
<com.android.internal.telephony.dataconnection.DataConnection: void access$4600(com.android.internal.telephony.dataconnection.DataConnection,java.lang.Object)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: void deleteSms(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.cdma.CDMAPhone$1: void run()> (1)
<com.android.internal.telephony.PhoneBase: void exitEmergencyCallbackMode()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void explicitCallTransfer()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getAvailableNetworks(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<com.android.internal.telephony.uicc.IccRecords: void onReady()> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()> (4)
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.CallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getDataCallList(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void doRecovery()> (2)
<com.android.internal.telephony.uicc.RuimRecords: void onRefresh(boolean,int[])> (1)
<com.android.internal.telephony.uicc.SIMRecords: void handleFileUpdate(int)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void onReady()> (2)
<com.android.internal.telephony.uicc.SIMRecords: void onRefresh(boolean,int[])> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getPreferredNetworkType(android.os.Message)> (7)
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void reRegisterNetwork(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void reRegisterNetwork(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void reRegisterNetwork(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getSmscAddress(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void dispose()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void dispose()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallWaitingIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.uicc.AdnRecordLoader: void updateEF(com.android.internal.telephony.uicc.AdnRecord,int,int,int,java.lang.String,android.os.Message)> (6)
<com.android.internal.telephony.uicc.CsimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.cat.IconLoader: void readId()> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.cat.IconLoader: void readClut()> (1)
<com.android.internal.telephony.cat.IconLoader: void readIconData()> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readEmailFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readIapFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readPbrFileAndWait()> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (5)
<com.android.internal.telephony.uicc.AdnRecordLoader: void loadAllFromEF(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimUiccRecords: void fetchIsimRecords()> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.AdnRecordLoader: void loadFromEF(int,int,int,android.os.Message)> (3)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void getSpnFsm(boolean,android.os.AsyncResult)> (2)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: void markMessagesAsRead(java.util.ArrayList)> (3)
<com.android.internal.telephony.uicc.CsimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void setVoiceCallForwardingFlag(int,boolean)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryAvailableBandMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryAvailableBandMode(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getCallWaiting(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryCdmaRoamingPreference(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryCdmaRoamingPreference(android.os.Message)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void <init>(com.android.internal.telephony.uicc.UiccCard,com.android.internal.telephony.uicc.IccCardApplicationStatus,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void update(com.android.internal.telephony.uicc.IccCardApplicationStatus,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryTTYMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryTTYMode(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void rejectCall()> ()
<com.android.internal.telephony.PhoneBase: void requestIsimAuthentication(java.lang.String,android.os.Message)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (4)
<com.android.internal.telephony.cdma.CdmaCallTracker: void conference()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void switchHoldingAndActive()> (1)
<com.android.internal.telephony.SMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendDtmf(char)> (1)
<com.android.internal.telephony.BaseCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (3)
<com.android.internal.telephony.sip.SipCommandInterface: void onRadioAvailable()> (1)
<com.android.internal.telephony.test.SimulatedCommands: void onRadioAvailable()> (1)
<com.android.internal.telephony.cat.CatService: void handleCommand(com.android.internal.telephony.cat.CommandParams,boolean)> (1)
<com.android.internal.telephony.cat.CatService: void handleRilMsg(com.android.internal.telephony.cat.RilMessage)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)> ()
<com.android.internal.telephony.cdma.CdmaConnection: void separate()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void separate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setBandMode(int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean access$000(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaRoamingPreference(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaRoamingPreference(int,android.os.Message)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaSubscription(int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void access$400(com.android.internal.telephony.RIL,android.os.Parcel)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCellInfoListRate(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.Phone: void setCellInfoListRate(int)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean access$000(com.android.internal.telephony.gsm.SimSmsInterfaceManager,com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPreferredNetworkType(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setPreferredNetworkType(int,android.os.Message)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipCommandInterface: void setCurrentPreferredNetworkType()> (2)
<com.android.internal.telephony.test.SimulatedCommands: void setCurrentPreferredNetworkType()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void hangupAndPowerOff()> (2)
<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.ServiceStateTracker: void setPowerStateToDesired()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setSmscAddress(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setTTYMode(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setTTYMode(int,android.os.Message)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DataConnection: void access$2900(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void startDtmf(char)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void stopDtmf()> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaMmiCode: void processCode()> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void switchHoldingAndActive()> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void writeSms(int,byte[],byte[],android.os.Message)> (1)
<com.android.mms.transaction.MessageStatusService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.AccelerometerListener: void access$000(com.android.phone.AccelerometerListener,double,double,double)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void internalResolveIntent(android.content.Intent)> (2)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: boolean ignoreAllIncomingCalls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<android.bluetooth.IBluetoothHeadsetPhone: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.server.power.Notifier: void sendNextBroadcast()> (3)
<com.android.internal.util.State: void exit()> (101)
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)> (2)
<com.android.server.location.GeofenceManager: void removeFence(java.lang.String)> ()
<com.android.server.LocationManagerService: void access$100(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void access$900(com.android.server.LocationManagerService,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.LocationManagerService$2: void onChange(boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$2: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void processCommand(java.util.EventObject)> (2)
<com.android.server.sip.SipSessionGroup: void process(java.util.EventObject)> (6)
<com.android.server.sip.SipService: void access$1700(com.android.server.sip.SipService,android.net.NetworkInfo)> (1)
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (1)
<com.android.server.TwilightService$TwilightListenerRecord: void run()> (1)
<com.android.server.VibratorService$1: void onChange(boolean)> (1)
<com.android.server.VibratorService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (1)
<com.android.server.wm.WindowManagerService: int handleAppTransitionReadyLocked(com.android.server.wm.WindowList)> (1)
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> (8)
<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)> (2)
<com.android.server.wm.WindowManagerService: void requestTraversalLocked()> (4)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void reevaluateStatusBarVisibility()> (2)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<android.view.IWindowManager$Stub$Proxy: void setOverscan(int,int,int,int,int)> ()
<android.view.IWindowManager$Stub: void setOverscan(int,int,int,int,int)> (2)
<com.android.server.wm.WindowManagerService$DragInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> ()
<android.view.IWindowSession$Stub: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.Session: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager$Stub$Proxy: void startFreezingScreen(int,int)> ()
<android.view.IWindowManager$Stub: void startFreezingScreen(int,int)> (2)
<com.android.server.wm.WindowAnimator: void animateLocked()> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void clearForcedDisplayDensity(int)> (1)
<android.view.IWindowManager: void setForcedDisplayDensity(int,int)> (1)
<android.view.IWindowManager: void clearForcedDisplaySize(int)> (1)
<android.view.IWindowManager: void setForcedDisplaySize(int,int,int)> (1)
<android.media.IRingtonePlayer: void playAsync(android.net.Uri,android.os.UserHandle,boolean,int)> (1)
<android.media.IRingtonePlayer: void stopAsync()> (3)
<com.android.server.content.SyncStorageEngine: void requestSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (3)
<com.android.commands.media.Media: void runDispatch()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void handleMediaKeyEvent(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: boolean interceptMediaKey(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyRepeatWithWakeLock(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLock(android.view.KeyEvent)> (1)
<com.android.server.WiredAccessoryManager: void setDevicesState(int,int,java.lang.String)> (1)
<android.webkit.HTML5VideoFullScreen$1: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void openFile(java.lang.String)> ()
<com.android.music.IMediaPlaybackService$Stub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: int removeTrack(long)> (1)
<com.android.music.MediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void enqueue(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void next()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void open(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void prev()> (2)
<com.android.music.MediaPlaybackService: void access$2300(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void setQueuePosition(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setShuffleMode(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setRepeatMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setRepeatMode(int)> (2)
<android.webkit.WebViewClassic: void onPause()> (1)
<android.webkit.WebViewClassic: void setBaseLayer(int,boolean,boolean)> (2)
<com.android.gallery3d.app.CommonControllerOverlay: void onClick(android.view.View)> (3)
<com.android.gallery3d.app.MovieControllerOverlay: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.gallery3d.app.TrimControllerOverlay: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.gallery3d.app.CommonControllerOverlay: void onScrubbingEnd(int,int,int)> (3)
<com.android.gallery3d.app.CommonControllerOverlay: void onScrubbingStart()> (3)
<com.android.mms.ui.SlideshowPresenter$2: void run()> (1)
<com.android.mms.ui.SlideshowPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void pause()> ()
<com.android.music.IMediaPlaybackService$Stub: void pause()> (2)
<android.filterfw.core.FieldPort: void transfer(android.filterfw.core.FilterContext)> (3)
<android.filterpacks.base.CallbackFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.SyncRunner: void close()> (3)
<android.filterfw.core.FilterFunction: void tearDown()> (1)
<android.filterfw.core.FilterGraph: void tearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.base.CallbackFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)> (2)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: java.lang.String getRingToneTitle(android.net.Uri)> (1)
<com.android.deskclock.AlarmPreference$1: java.lang.String doInBackground(android.net.Uri[])> (1)
<com.android.mms.ui.MessagingPreferenceActivity: void setRingtoneSummary(java.lang.String)> (2)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int,android.net.Uri)> (2)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: void onStart()> (1)
<android.preference.VolumePreference: void cleanup()> (1)
<com.android.settings.RingerVolumePreference: void cleanup()> (2)
<com.android.internal.app.AlertActivity: void onPause()> (5)
<com.android.internal.app.AlertActivity: void onStop()> (4)
<android.media.IRingtonePlayer: void stop(android.os.IBinder)> (1)
<android.widget.VideoView: void setVideoPath(java.lang.String)> ()
<com.android.mms.ui.SlideView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void seekTo(int)> (1)
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void start()> (1)
<com.android.mms.ui.AudioAttachmentView$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.mms.ui.SlideshowPresenter$4: void run()> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.soundrecorder.SoundRecorder: void access$000(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void updateUi()> (5)
<com.android.music.MediaPlaybackService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void stop()> (2)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.systemui.media.RingtonePlayer$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void play()> ()
<com.android.music.IMediaPlaybackService$Stub: void play()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.deskclock.DeskClock: void initViews()> (1)
<com.android.exchange.EasAccountService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> (1)
<com.android.exchange.ExchangeService$2: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.ExchangeService$2: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.AbstractSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.EasAccountService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasAccountService: boolean sendSettings()> (1)
<com.android.exchange.EasOutboxService: boolean sendSettings()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.adapter.ProvisionParser canProvision(com.android.exchange.EasSyncService)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.adapter.ProvisionParser canProvision(com.android.exchange.EasSyncService)> (1)
<com.android.exchange.EasSyncService: boolean tryProvision(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.EasAccountService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (1)
<com.android.exchange.EasAccountService: java.lang.String acknowledgeProvisionImpl(com.android.exchange.EasSyncService,java.lang.String,java.lang.String,boolean)> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvisionImpl(com.android.exchange.EasSyncService,java.lang.String,java.lang.String,boolean)> (1)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvision(com.android.exchange.EasSyncService,java.lang.String,java.lang.String)> (4)
<com.android.exchange.EasSyncService: void acknowledgeRemoteWipe(com.android.exchange.EasSyncService,java.lang.String)> (3)
<com.android.exchange.EasAccountService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (1)
<com.android.exchange.EasOutboxService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (1)
<com.android.exchange.EasAccountService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (1)
<com.android.exchange.EasOutboxService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void startSync(long,boolean)> (2)
<com.android.exchange.ExchangeService$2: void loadAttachment(long,boolean)> (2)
<com.android.exchange.ExchangeService$2: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.ExchangeService: void serviceRequest(long,int)> (4)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handlePhoneStateChanged(java.lang.String)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void sendUpdates(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onPhoneStateChanged(int)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView$3: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onSimStateChanged(com.android.internal.telephony.IccCardConstants$State)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<com.android.server.input.InputManagerService: int interceptMotionBeforeQueueingWhenScreenOff(int)> ()
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void acceptCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleInCallMmiCommands(java.lang.String)> (1)
<com.android.internal.telephony.SMSDispatcher$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneUtils$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.PhoneUtils: boolean cancelMmiCode(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.IccCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleMultipartyIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActiveState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.Phone: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.sip.SipPhone: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleEctIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: android.telephony.CellLocation getCellLocation()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.Phone: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.uicc.IccRecords: void onRefresh(boolean,int[])> ()
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.phone.MobileNetworkSettings$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.MobileNetworkSettings: void onResume()> (3)
<com.android.phone.Use2GOnlyCheckBoxPreference$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.settings.RadioInfo: void onCreate(android.os.Bundle)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getEnhancedVoicePrivacy(android.os.Message)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)> (1)
<com.android.settings.RadioInfo: void refreshSmsc()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (2)
<com.android.internal.telephony.Connection: void hangup()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (1)
<com.android.internal.telephony.Call: void hangup()> (6)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.uicc.AdnRecord,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.uicc.AdnRecord,com.android.internal.telephony.uicc.AdnRecord,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.uicc.SIMRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cat.IconLoader: void startLoadingIcon(int)> (3)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.uicc.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)> (2)
<com.android.internal.telephony.uicc.IsimUiccRecords: void onReady()> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void markMessagesAsRead(java.util.ArrayList)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void markMessagesAsRead(java.util.ArrayList)> (1)
<com.android.internal.telephony.uicc.IccRecords: void setVoiceCallForwardingFlag(int,boolean)> (7)
<com.android.internal.telephony.uicc.IccRecords: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.settings.BandMode: void loadBandList()> (1)
<com.android.internal.telephony.PhoneProxy: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleSetCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.internal.telephony.uicc.UiccCard: void update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)> (2)
<com.android.internal.telephony.PhoneProxy: void queryTTYMode(android.os.Message)> (1)
<com.android.phone.PhoneGlobals: void handleSetTTYModeResponse(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void rejectCall()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void switchHoldingAndActive()> (1)
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> (2)
<com.android.internal.telephony.RIL: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (3)
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (4)
<com.android.internal.telephony.Connection: void separate()> (1)
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)> (1)
<com.android.settings.BandMode$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager$CdmaBroadcastRangeManager: boolean finishUpdate()> (1)
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void resetCdmaRoamingModeToDefault()> (1)
<com.android.phone.CdmaSystemSelectListPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.phone.CdmaSubscriptionListPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.telephony.RIL$RILReceiver: void run()> (1)
<com.android.internal.telephony.PhoneProxy: void setCellInfoListRate(int)> (1)
<com.android.phone.PhoneInterfaceManager: void setCellInfoListRate(int)> (2)
<com.android.settings.RadioInfo$CellInfoListRateHandler: void onClick(android.view.View)> (1)
<com.android.internal.telephony.IccCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager$CellBroadcastRangeManager: boolean finishUpdate()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void disableLocationUpdates()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void disableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void enableLocationUpdates()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void enableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void updateServiceLocation()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updateServiceLocation()> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void setMute(boolean)> (1)
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.phone.MobileNetworkSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.MobileNetworkSettings$MyHandler: void resetNetworkModeToDefault()> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void onClick()> (3)
<com.android.settings.RadioInfo$22: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.ServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (4)
<com.android.internal.telephony.ServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (4)
<com.android.internal.telephony.ServiceStateTracker: void setRadioPower(boolean)> (3)
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.settings.RadioInfo$20: void onClick(android.view.View)> (1)
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.IccCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (5)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.phone.AccelerometerListener$1: void onSensorChanged(android.hardware.SensorEvent)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneGlobals: void clearInCallScreenMode()> (2)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAnswerCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.server.power.Notifier: void access$500(com.android.server.power.Notifier)> (4)
<com.android.server.power.Notifier: void sendWakeUpBroadcast()> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.server.LocationManagerService$1: void opChanged(int,java.lang.String)> (1)
<com.android.server.LocationManagerService$4: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.LocationManagerService$Receiver: void binderDied()> (1)
<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)> (3)
<android.location.ILocationManager$Stub$Proxy: void reportLocation(android.location.Location,boolean)> ()
<android.location.ILocationManager$Stub: void reportLocation(android.location.Location,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: boolean onLongPress()> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: void processCommand(java.util.EventObject)> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void access$1600(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)> (2)
<com.android.server.sip.SipSessionGroup: void processDialogTerminated(javax.sip.DialogTerminatedEvent)> ()
<com.android.server.sip.SipSessionGroup: void processIOException(javax.sip.IOExceptionEvent)> ()
<com.android.server.sip.SipSessionGroup: void processResponse(javax.sip.ResponseEvent)> ()
<com.android.server.sip.SipSessionGroup: void processTimeout(javax.sip.TimeoutEvent)> ()
<com.android.server.sip.SipSessionGroup: void processTransactionTerminated(javax.sip.TransactionTerminatedEvent)> ()
<com.android.server.sip.SipService$ConnectivityReceiver$1: void run()> (1)
<com.android.server.sip.SipService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> (3)
<android.app.ActivityManagerNative: void updateConfiguration(android.content.res.Configuration)> (2)
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> ()
<android.view.IWindowManager$Stub: void prepareAppTransition(int,boolean)> (2)
<com.android.server.am.ActivityStack: boolean moveTaskToBackLocked(int,com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.ActivityRecord,android.os.Bundle)> (3)
<com.android.server.am.ActivityStack: void updateTransitLocked(int,android.os.Bundle)> (1)
<com.android.server.wm.WindowManagerService: void updateResizingWindows(com.android.server.wm.WindowState)> (1)
<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl createSurfaceLocked()> (1)
<com.android.server.wm.WindowManagerService: void requestTraversal()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver$1: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<android.view.IWindowManager: void setNewConfiguration(android.content.res.Configuration)> ()
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<android.view.IWindowManager: void setOverscan(int,int,int,int,int)> (1)
<android.view.IWindowSession: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (1)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> ()
<android.view.IWindowSession$Stub: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager: void startFreezingScreen(int,int)> ()
<com.android.server.wm.WindowAnimator: void access$000(com.android.server.wm.WindowAnimator)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.wm.Wm: void runDisplayDensity()> (1)
<com.android.commands.wm.Wm: void runDisplaySize()> (1)
<com.android.server.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (2)
<com.android.server.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (2)
<com.android.server.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (1)
<com.android.commands.media.Media: void onRun()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean interceptMediaKey(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.server.WiredAccessoryManager: void access$100(com.android.server.WiredAccessoryManager,int,int,java.lang.String)> (2)
<com.android.music.IMediaPlaybackService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.IMediaPlaybackService: void openFile(java.lang.String)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTrack(long)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void doAutoShuffleUpdate()> (3)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void enqueue(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void enqueue(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void next()> ()
<com.android.music.IMediaPlaybackService$Stub: void next()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void open(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void open(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void prev()> ()
<com.android.music.IMediaPlaybackService$Stub: void prev()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setQueuePosition(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setQueuePosition(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setShuffleMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setShuffleMode(int)> (2)
<com.android.music.IMediaPlaybackService: void setRepeatMode(int)> (2)
<android.webkit.WebViewClassic: void clearView()> (1)
<android.webkit.WebViewClassic: void setNewPicture(android.webkit.WebViewCore$DrawData,boolean)> (3)
<com.android.gallery3d.app.MovieControllerOverlay: void onClick(android.view.View)> (1)
<com.android.gallery3d.app.TrimControllerOverlay: void onClick(android.view.View)> (1)
<com.android.gallery3d.app.CommonControllerOverlay: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.gallery3d.app.MovieControllerOverlay: void onScrubbingEnd(int,int,int)> (1)
<com.android.gallery3d.app.TimeBar$Listener: void onScrubbingEnd(int,int,int)> (2)
<com.android.gallery3d.app.TrimControllerOverlay: void onScrubbingEnd(int,int,int)> (1)
<com.android.gallery3d.app.MovieControllerOverlay: void onScrubbingStart()> (1)
<com.android.gallery3d.app.TimeBar$Listener: void onScrubbingStart()> (2)
<com.android.gallery3d.app.TrimControllerOverlay: void onScrubbingStart()> (1)
<com.android.mms.ui.Presenter: void present(com.android.mms.util.ItemLoadedCallback)> (3)
<com.android.mms.ui.SlideEditorActivity: void showCurrentSlide()> (3)
<com.android.music.IMediaPlaybackService: void pause()> (1)
<android.filterfw.core.FinalPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> (1)
<android.filterfw.core.FinalPort: void transfer(android.filterfw.core.FilterContext)> (2)
<android.filterfw.core.InputPort: void transfer(android.filterfw.core.FilterContext)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void onPostExecute(android.filterfw.core.AsyncRunner$RunnerResult)> (2)
<android.filterfw.core.AsyncRunner: void close()> (1)
<android.filterfw.core.GraphRunner: void close()> ()
<android.media.effect.SingleFilterEffect: void release()> (28)
<android.filterfw.core.FilterContext: void tearDown()> (1)
<android.media.effect.FilterGraphEffect: void release()> (2)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.GeneralPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void bindExpandArea(com.android.deskclock.AlarmClock$AlarmItemAdapter$ItemHolder,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.AlarmPreference$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.MessagingPreferenceActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.mms.ui.MessagingPreferenceActivity: void setMessagePreferences()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)> (2)
<com.android.settings.RingerVolumePreference: void onBindDialogView(android.view.View)> (3)
<android.preference.VolumePreference: void onDialogClosed(boolean)> (2)
<com.android.settings.RingerVolumePreference: void onDialogClosed(boolean)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onPause()> (2)
<com.android.internal.app.NetInitiatedActivity: void onPause()> (2)
<com.android.vpndialogs.ManageDialog: void onPause()> (2)
<com.android.internal.app.ResolverActivity: void onStop()> (4)
<com.android.systemui.usb.UsbDebuggingActivity: void onStop()> (2)
<com.android.soundrecorder.SoundRecorder$1: void run()> (1)
<com.android.soundrecorder.SoundRecorder: void access$100(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void stop()> ()
<com.android.music.IMediaPlaybackService$Stub: void stop()> (2)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (21)
<com.android.music.IMediaPlaybackService: void play()> (4)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.deskclock.DeskClock: void onCreate(android.os.Bundle)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.AbstractSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.EasAccountService: boolean tryProvision(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.EasOutboxService: boolean tryProvision(com.android.exchange.EasSyncService)> (1)
<com.android.exchange.EasAccountService: java.lang.String acknowledgeProvision(com.android.exchange.EasSyncService,java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvision(com.android.exchange.EasSyncService,java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasAccountService: void acknowledgeRemoteWipe(com.android.exchange.EasSyncService,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: void acknowledgeRemoteWipe(com.android.exchange.EasSyncService,java.lang.String)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void startSync(long,boolean)> (3)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(long,boolean)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> ()
<com.android.emailcommon.service.IEmailService$Stub: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void handleReceive(android.content.Context)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void registerCallback(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback)> (10)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor,com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void reportSimUnlocked()> (1)
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.ChangeIccPinScreen$2: void onClick(android.view.View)> (1)
<com.android.phone.FdnSetting: void updatePINChangeState(boolean)> (1)
<com.android.settings.IccLockSettings: void tryChangePin()> (1)
<com.android.internal.telephony.PhoneProxy: void exitEmergencyCallbackMode()> (1)
<com.android.phone.EmergencyCallbackModeExitDialog$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()> (5)
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()> (1)
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> (2)
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler: void handleSetVPResponse(android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.settings.RadioInfo: void access$4400(com.android.settings.RadioInfo)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void dispose()> (2)
<com.android.internal.telephony.PhoneBase: void dispose()> (5)
<com.android.internal.telephony.sip.SipPhone$SipCall: void hangup()> (2)
<com.android.phone.PhoneUtils: void hangup(com.android.internal.telephony.Connection)> (2)
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.CallManager: void acceptCall(com.android.internal.telephony.Call)> (1)
<com.android.internal.telephony.CallManager: void hangupForegroundResumeBackground(com.android.internal.telephony.Call)> (1)
<com.android.internal.telephony.Call: void hangupIfAlive()> (4)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Call)> (4)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.uicc.IsimUiccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cat.IconLoader: void loadIcon(int,android.os.Message)> (9)
<com.android.internal.telephony.cat.IconLoader: void loadIcons(int[],android.os.Message)> (2)
<com.android.internal.telephony.cat.IconLoader: void postIcon()> (3)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readAdnFileAndWait(int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence makeCFQueryResultMessage(com.android.internal.telephony.CallForwardInfo,int)> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void onQueryCfComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void handleCfuQueryResult(com.android.internal.telephony.CallForwardInfo[])> (1)
<com.android.internal.telephony.uicc.IsimUiccRecords: void setVoiceCallForwardingFlag(int,boolean)> (1)
<com.android.internal.telephony.uicc.RuimRecords: void setVoiceCallForwardingFlag(int,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)> (6)
<com.android.settings.BandMode: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CdmaSystemSelectListPreference: void <init>(android.content.Context)> (3)
<com.android.internal.telephony.uicc.UiccCard: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)> (1)
<com.android.internal.telephony.uicc.UiccController: void onGetIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void access$900(com.android.phone.PhoneGlobals,android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CallManager: boolean sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> (4)
<com.android.internal.telephony.RIL: void switchToRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void <init>()> ()
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void shutdown()> (1)
<com.android.phone.PhoneUtils: void separateCall(com.android.internal.telephony.Connection)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms: boolean enableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IntRangeManager: boolean finishUpdate()> (2)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleQueryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void setCellInfoListRate(int)> ()
<com.android.internal.telephony.ITelephony$Stub: void setCellInfoListRate(int)> (2)
<com.android.phone.EnableFdnScreen: void enableFdn()> (1)
<com.android.phone.FdnSetting: void toggleFDNEnable(boolean)> (1)
<com.android.phone.EnableIccPinScreen: void enableIccPin()> (1)
<com.android.settings.IccLockSettings: void tryChangeIccLockState()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void disableLocationUpdates()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableLocationUpdates()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updateServiceLocation()> (1)
<com.android.phone.MobileNetworkSettings$MyHandler: void handleGetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void onClick()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void restartRadio()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.IccCard: void supplyPin2(java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccCard: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.IccCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean handlePinMmi(java.lang.String)> (1)
<com.android.internal.telephony.IccCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.phone.IccNetworkDepersonalizationPanel$3: void onClick(android.view.View)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4900(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.server.power.Notifier$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier: void updatePendingBroadcastLocked()> (2)
<android.app.AppOpsManager$Callback: void opChanged(int,java.lang.String)> (1)
<com.android.internal.content.PackageMonitor: void onPackageDisappeared(java.lang.String,int)> (13)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void reportLocation(android.location.Location,boolean)> (4)
<com.android.internal.policy.impl.GlobalActions$5: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: void access$1600(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl$1: void run()> (1)
<com.android.phone.SipBroadcastReceiver$1: void run()> (1)
<com.android.phone.sip.SipEditor: void saveAndRegisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void handleSipReceiveCallsOption(boolean)> (1)
<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)> (7)
<android.view.IWindowManager: void prepareAppTransition(int,boolean)> ()
<com.android.server.am.ActivityStack: void moveHomeToFrontLocked()> (2)
<com.android.server.display.DisplayManagerService$WindowManagerFuncs: void requestTraversal()> (2)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<com.android.commands.wm.Wm: void runDisplayOverscan()> (1)
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (591)
<com.android.server.wm.Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (1)
<com.android.server.wm.WindowAnimator$1: void run()> (1)
<com.android.commands.wm.Wm: void onRun()> (1)
<com.android.server.content.SyncStorageEngine: void readAndDeleteLegacyAccountInfoLocked()> (2)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<android.view.FallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.MediaPlaybackActivity: void startPlayback()> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTrack(long)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTracks(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: int getNextPosition(boolean)> (3)
<com.android.music.IMediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void next()> (3)
<com.android.music.IMediaPlaybackService: void open(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void prev()> (3)
<com.android.music.IMediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.IMediaPlaybackService: void setShuffleMode(int)> (5)
<com.android.music.MediaPlaybackActivity: void cycleRepeat()> (1)
<com.android.music.MediaPlaybackActivity: void toggleShuffle()> (2)
<android.webkit.WebViewProvider: void clearView()> (1)
<android.webkit.WebViewClassic$8: void onPostExecute(android.webkit.WebViewCore$DrawData)> (1)
<android.webkit.WebViewClassic: void onSizeChanged(int,int,int,int)> (1)
<com.android.gallery3d.app.TimeBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.TrimTimeBar: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(boolean)> (2)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.SlideEditorActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.SlideEditorActivity: void access$400(com.android.mms.ui.SlideEditorActivity)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.music.MediaPlaybackActivity: void doPauseResume()> (2)
<android.filterfw.core.FieldPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> (4)
<android.filterfw.core.Filter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (68)
<android.filterfw.core.Filter: void transferInputFrames(android.filterfw.core.FilterContext)> (69)
<android.filterfw.core.Filter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (68)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void onCancelled(android.filterfw.core.AsyncRunner$RunnerResult)> (1)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void onPostExecute(java.lang.Object)> (1)
<android.media.effect.effects.AutoFixEffect: void release()> (2)
<android.media.effect.effects.BitmapOverlayEffect: void release()> (2)
<android.media.effect.effects.BlackWhiteEffect: void release()> (2)
<android.media.effect.effects.BrightnessEffect: void release()> (2)
<android.media.effect.effects.ColorTemperatureEffect: void release()> (2)
<android.media.effect.effects.ContrastEffect: void release()> (2)
<android.media.effect.effects.CropEffect: void release()> (3)
<android.media.effect.effects.CrossProcessEffect: void release()> (2)
<android.media.effect.effects.DocumentaryEffect: void release()> (2)
<android.media.effect.effects.DuotoneEffect: void release()> (2)
<android.media.effect.effects.FillLightEffect: void release()> (2)
<android.media.effect.effects.FisheyeEffect: void release()> (2)
<android.media.effect.effects.FlipEffect: void release()> (2)
<android.media.effect.effects.GrainEffect: void release()> (2)
<android.media.effect.effects.GrayscaleEffect: void release()> (2)
<android.media.effect.effects.LomoishEffect: void release()> (2)
<android.media.effect.effects.NegativeEffect: void release()> (2)
<android.media.effect.effects.PosterizeEffect: void release()> (2)
<android.media.effect.effects.RedEyeEffect: void release()> (2)
<android.media.effect.effects.RotateEffect: void release()> (3)
<android.media.effect.effects.SaturateEffect: void release()> (2)
<android.media.effect.effects.SepiaEffect: void release()> (2)
<android.media.effect.effects.SharpenEffect: void release()> (2)
<android.media.effect.effects.StraightenEffect: void release()> (2)
<android.media.effect.effects.TintEffect: void release()> (2)
<android.media.effect.effects.VignetteEffect: void release()> (2)
<android.media.effect.SizeChangeEffect: void release()> (2)
<android.media.effect.EffectContext: void release()> ()
<android.media.effect.effects.BackDropperEffect: void release()> (2)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<com.android.deskclock.AlarmClock$AlarmItemAdapter: void expandAlarm(com.android.deskclock.AlarmClock$AlarmItemAdapter$ItemHolder)> (2)
<com.android.mms.ui.MessagingPreferenceActivity: void loadPrefs()> (2)
<android.preference.VolumePreference: void onBindDialogView(android.view.View)> (3)
<com.android.internal.app.ChooserActivity: void onStop()> (3)
<com.android.systemui.usb.UsbResolverActivity: void onStop()> (3)
<com.android.music.IMediaPlaybackService: void stop()> (2)
<com.android.server.power.PowerManagerService: void access$900(com.android.server.power.PowerManagerService)> (4)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,android.os.WorkSource,int,int)> (1)
<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)> (2)
<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleBootCompletedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleDreamFinishedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.power.PowerManagerService: void handleScreenOnBlockerReleased()> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()> (1)
<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void napInternal(long)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)> (2)
<com.android.server.power.PowerManagerService: void wakeUpInternal(long)> (2)
<com.android.music.MediaPlaybackActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int,boolean)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.emailcommon.service.IEmailService: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.EasAccountService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.ExchangeService$2: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.Controller: void sendPendingMessages(long)> (3)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (2)
<com.android.emailcommon.service.IEmailService: void loadAttachment(long,boolean)> (1)
<com.android.emailcommon.service.IEmailService: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void access$000(com.android.exchange.EmailSyncAlarmReceiver,android.content.Context)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame: void <init>(android.content.Context,com.android.internal.policy.impl.keyguard.CameraWidgetFrame$Callbacks,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher,com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo,android.view.View)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText: void onAttachedToWindow()> (2)
<com.android.internal.policy.impl.keyguard.EmergencyButton: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardFaceUnlockView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void onResume(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: void onAttachedToWindow()> (4)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView$4$1: void run()> (1)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.FdnSetting: void onPinEntered(com.android.phone.EditPinPreference,boolean)> (1)
<com.android.settings.IccLockSettings: void onPinEntered(com.android.settings.EditPinPreference,boolean)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.PhoneBase: android.telephony.CellLocation getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getAllCellInfo()> (2)
<com.android.server.power.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> ()
<android.os.IPowerManager$Stub: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.PowerManager$WakeLock: void finalize()> ()
<android.os.PowerManager$WakeLock: void release(int)> (2)
<android.os.PowerManager$WakeLock: void release()> (127)
<android.hardware.location.GeofenceHardwareImpl: void releaseWakeLock()> (1)
<android.media.AsyncPlayer: void releaseWakeLock()> (1)
<android.media.AudioService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<android.net.DhcpStateMachine$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$RunningState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$WaitBeforeRenewalState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.os.PowerManager$WakeLock$1: void run()> (1)
<android.support.v4.content.WakefulBroadcastReceiver: boolean completeWakefulIntent(android.content.Intent)> ()
<com.android.bluetooth.hfp.HeadsetStateMachine: void processLocalVrEvent(int)> (1)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void releaseWakeLocks()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void closeService()> (4)
<com.android.browser.Controller: void releaseWakeLock()> (2)
<com.android.calendar.alerts.AlertReceiver: void finishStartingService(android.app.Service,int)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: void finalize()> ()
<com.android.deskclock.AlarmAlertWakeLock: void releaseCpuLock()> (2)
<com.android.deskclock.AlarmInitReceiver$1: void run()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void releaseWakeLock()> (4)
<com.android.development.Connectivity: void onStopDelayedCycle()> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter: void onDestroy()> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter: void onPause()> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter: void stopPlaybackAtPosition(int,int)> (3)
<com.android.exchange.ExchangeService: void releaseWakeLock(long)> (4)
<com.android.exchange.ExchangeService: void shutdown()> (1)
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: void onProgressComplete(int)> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: void onDestroy()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleShow(android.os.Bundle)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void releaseWakeLock()> (7)
<com.android.internal.telephony.cdma.CDMAPhone: void finalize()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void releaseWakeLock()> (5)
<com.android.internal.telephony.RIL: void releaseWakeLockIfDone()> (2)
<com.android.mms.transaction.NotificationPlayer: void releaseWakeLock()> (1)
<com.android.mms.transaction.SmsReceiver: void finishStartingService(android.app.Service,int)> (2)
<com.android.mms.transaction.TransactionService: void releaseWakeLock()> (2)
<com.android.phone.CallerInfoCache$CacheAsyncTask: void releaseWakeLock()> (2)
<com.android.providers.calendar.CalendarAlarmManager: void releaseScheduleNextAlarmWakeLock()> (1)
<com.android.providers.calendar.CalendarReceiver$1: void run()> (1)
<com.android.server.AlarmManagerService$ResultReceiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord activityIdleInternal(android.os.IBinder,boolean,android.content.res.Configuration)> (5)
<com.android.server.am.ActivityStack: void awakeFromSleepingLocked()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void finalizeBackup()> (1)
<com.android.server.BackupManagerService$PerformClearTask: void run()> (3)
<com.android.server.BackupManagerService$PerformFullBackupTask: void run()> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: void run()> (1)
<com.android.server.BackupManagerService$PerformInitializeTask: void run()> (3)
<com.android.server.BackupManagerService$PerformRestoreTask: void finalizeRestore()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void close()> (1)
<com.android.server.location.GeofenceManager: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.LocationManagerService$Receiver: void clearPendingBroadcastsLocked()> (2)
<com.android.server.LocationManagerService$Receiver: void decrementPendingBroadcastsLocked()> (2)
<com.android.server.sip.SipWakeLock: void release(java.lang.Object)> (7)
<com.android.settings.bluetooth.DockEventReceiver: void finishStartingService(android.app.Service,int)> (6)
<com.android.settings.CryptKeeper: void onDestroy()> (1)
<com.android.systemui.media.NotificationPlayer: void releaseWakeLock()> (1)
<com.android.videoeditor.VideoEditorActivity$23: void onStop()> (3)
<com.android.voicedialer.VoiceDialerActivity: void releaseWakeLock()> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<android.hardware.location.GeofenceHardwareImpl: void access$100(android.hardware.location.GeofenceHardwareImpl)> (8)
<android.media.AsyncPlayer: void access$500(android.media.AsyncPlayer)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4300(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void onClose()> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1100(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.browser.Controller: void onProgressChanged(com.android.browser.Tab)> (1)
<com.android.browser.Controller: void onResume()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void access$300(com.android.deskclock.stopwatch.StopwatchFragment)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void onPause()> (1)
<com.android.development.Connectivity: void access$2300(com.android.development.Connectivity)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackFragment: void onDestroy()> (1)
<com.android.dialer.voicemail.VoicemailPlaybackFragment: void onPause()> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter: void access$2200(com.android.dialer.voicemail.VoicemailPlaybackPresenter,int,int)> (3)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter: void handleCompletion(android.media.MediaPlayer)> (1)
<com.android.exchange.ExchangeService: void releaseMailbox(long)> (5)
<com.android.exchange.ExchangeService: void runAsleep(long,long)> (4)
<com.android.exchange.ExchangeService: void stopManualSync(long)> (3)
<com.android.exchange.ExchangeService: void stopServiceThreads()> (2)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2200(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,int)> (8)
<com.android.internal.telephony.cdma.CdmaConnection: void access$000(com.android.internal.telephony.cdma.CdmaConnection)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void finalize()> ()
<com.android.internal.telephony.cdma.CdmaConnection: void onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void onLocalDisconnect()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void finalize()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void access$100(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void finalize()> ()
<com.android.internal.telephony.gsm.GsmConnection: void onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (2)
<com.android.internal.telephony.RIL: void access$200(com.android.internal.telephony.RIL)> (2)
<com.android.mms.transaction.NotificationPlayer: void access$700(com.android.mms.transaction.NotificationPlayer)> (1)
<com.android.mms.transaction.PrivilegedSmsReceiver: void finishStartingService(android.app.Service,int)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (8)
<com.android.phone.CallerInfoCache$CacheAsyncTask: void onCancelled(java.lang.Void)> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: void onPostExecute(java.lang.Void)> (1)
<com.android.providers.calendar.CalendarProviderIntentService: void onHandleIntent(android.content.Intent)> (1)
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void scheduleIdleLocked()> (4)
<com.android.server.am.ActivityRecord: void windowsVisible()> (1)
<com.android.server.am.ActivityManagerService: void comeOutOfSleepIfNeededLocked()> (3)
<com.android.server.BackupManagerService$PerformBackupTask: void execute()> (1)
<com.android.server.BackupManagerService: void clearBackupData(java.lang.String)> (2)
<com.android.server.BackupManagerService$PerformRestoreTask: void execute()> (1)
<com.android.server.content.SyncManager$SyncHandler: void closeActiveSyncContext(com.android.server.content.SyncManager$ActiveSyncContext)> (3)
<com.android.server.LocationManagerService$Receiver: void access$1000(com.android.server.LocationManagerService$Receiver)> (1)
<com.android.server.LocationManagerService$Receiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.sip.SipService$MyExecutor: void executeInternal(java.lang.Runnable)> (1)
<com.android.server.sip.SipService$SipAutoReg: boolean notCurrentSession(android.net.sip.ISipSession)> (4)
<com.android.server.sip.SipService$SipAutoReg: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onRegistrationTimeout(android.net.sip.ISipSession)> (2)
<com.android.server.sip.SipService$SipAutoReg: void stop()> (3)
<com.android.server.sip.SipWakeLock: void reset()> (1)
<com.android.settings.bluetooth.DockService$4: void onDismiss(android.content.DialogInterface)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.systemui.media.NotificationPlayer: void access$800(com.android.systemui.media.NotificationPlayer)> (1)
<com.android.voicedialer.VoiceDialerActivity: void onDestroy()> (1)
<com.android.server.ConnectivityService: void access$1500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.app.backup.IRestoreSession$Stub$Proxy: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<com.android.browser.WebViewController: void onProgressChanged(com.android.browser.Tab)> (1)
<com.android.browser.ActivityController: void onResume()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment$1: void onClick(android.view.View)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$PlaybackPositionListener: void onStartTrackingTouch(android.widget.SeekBar)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$PlaybackPositionListener: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$StartStopButtonListener: void onClick(android.view.View)> (1)
<com.android.dialer.voicemail.VoicemailPlaybackPresenter$MediaPlayerCompletionListener$1: void run()> (1)
<com.android.exchange.ExchangeService: void access$800(com.android.exchange.ExchangeService,long)> (1)
<com.android.exchange.ExchangeService: void done(com.android.exchange.AbstractSyncService)> (3)
<com.android.exchange.ExchangeService: void reloadFolderList(android.content.Context,long,boolean)> (4)
<com.android.exchange.ExchangeService: void stopAccountSyncs(long,boolean)> (3)
<com.android.exchange.ExchangeService$2: void stopSync(long)> (2)
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void resetStateLocked(android.os.Bundle)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void notifyScreenOnLocked(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void onRemoteDisconnect(int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void onRemoteDisconnect(int)> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: void onCancelled(java.lang.Object)> (1)
<com.android.phone.CallerInfoCache$CacheAsyncTask: void onPostExecute(java.lang.Object)> (1)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked(java.lang.String,int,boolean,boolean,boolean,boolean,int)> (7)
<com.android.server.am.ActivityRecord$Token: void windowsVisible()> (2)
<com.android.server.am.ActivityManagerService: void setLockScreenShown(boolean)> (1)
<com.android.server.am.ActivityManagerService: void wakingUp()> (1)
<com.android.server.BackupManagerService$BackupRestoreTask: void execute()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String)> ()
<android.app.backup.IBackupManager$Stub: void clearBackupData(java.lang.String)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onRegistering(android.net.sip.ISipSession)> (2)
<com.android.server.sip.SipService$SipSessionGroupExt: void close()> (2)
<com.android.server.sip.SipService: void updateWakeLocks()> (3)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<android.app.backup.IRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (3)
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.browser.Tab$3: void onProgressChanged(android.webkit.WebView,int)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.exchange.ExchangeService$5: void run()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.ExchangeService$2: void updateFolderList(long)> (2)
<com.android.exchange.ExchangeService: void access$300(com.android.exchange.ExchangeService,long,boolean)> (2)
<com.android.exchange.ExchangeService: void stopAccountSyncs(long)> (3)
<com.android.exchange.ExchangeService: void stopNonAccountMailboxSyncsForAccount(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void stopSync(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void stopSync(long)> (2)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$100(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,android.os.Bundle)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardViewManager$ShowListener)> (1)
<com.android.server.am.ActivityManagerService: boolean access$400(com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean,boolean,int)> (3)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (13)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked(com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void forceStopUserLocked(int)> (1)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible()> ()
<android.view.IApplicationToken$Stub: void windowsVisible()> (2)
<android.app.ActivityManagerNative: void setLockScreenShown(boolean)> (2)
<android.app.ActivityManagerNative: void wakingUp()> (2)
<android.app.backup.IBackupManager: void clearBackupData(java.lang.String)> (1)
<com.android.server.sip.SipService$SipKeepAliveProcessCallback: void stop()> (2)
<com.android.server.sip.SipService: void close(java.lang.String)> (2)
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)> ()
<com.android.commands.bmgr.Bmgr: void doListRestoreSets()> (1)
<com.android.commands.bmgr.Bmgr: void doRestoreAll(long,java.util.HashSet)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.exchange.ExchangeService$2: void hostChanged(long)> (2)
<com.android.exchange.ExchangeService$AccountObserver: void onAccountChanged()> (1)
<com.android.exchange.ExchangeService$2: void deleteAccountPIMData(long)> (2)
<com.android.exchange.ExchangeService$ConnectivityReceiver$1: void run()> (1)
<com.android.exchange.adapter.FolderSyncParser: boolean parse()> (4)
<com.android.emailcommon.service.IEmailService: void stopSync(long)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void waitForKeyguard(android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<com.android.server.am.ActivityManagerService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithAppId(java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: int access$200(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (3)
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void finishBooting()> (2)
<com.android.server.am.ActivityManagerService: void finishUserSwitch(com.android.server.am.UserStartedState)> (1)
<com.android.server.am.ActivityManagerService: boolean inputDispatchingTimedOut(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean)> (2)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)> (4)
<com.android.server.am.ActivityManagerService: void finishUserStop(com.android.server.am.UserStartedState)> (1)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible()> (1)
<android.app.IActivityManager: void setLockScreenShown(boolean)> (1)
<android.app.IActivityManager: void wakingUp()> (1)
<com.android.commands.bmgr.Bmgr: void doWipe()> (1)
<com.android.server.sip.SipService$SipKeepAliveProcessCallback: void onResponse(boolean)> (1)
<com.android.server.sip.SipService: void stopPortMappingMeasurement()> (2)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> ()
<android.net.sip.ISipService$Stub: void close(java.lang.String)> (2)
<com.android.commands.bmgr.Bmgr: void doList()> (1)
<com.android.commands.bmgr.Bmgr: void doRestore()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void hostChanged(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void hostChanged(long)> (2)
<com.android.exchange.ExchangeService$AccountObserver: void access$600(com.android.exchange.ExchangeService$AccountObserver)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void deleteAccountPIMData(long)> (2)
<com.android.emailcommon.service.EmailServiceProxy$3: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitorCallback: void onUserSwitching(int)> (9)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (2)
<android.app.ActivityManagerNative: void killApplicationWithAppId(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService$22: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted()> (5)
<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean)> (1)
<com.android.server.am.ActivityRecord: boolean keyDispatchingTimedOut()> (1)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int)> (1)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean)> (5)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (4)
<com.android.server.am.ActivityManagerService$21: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityRecord$Token: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void updateActivityLockScreenState()> (4)
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<com.android.server.sip.SipService: void restartPortMappingLifetimeMeasurement(android.net.sip.SipProfile,int)> (1)
<android.net.sip.ISipService: void close(java.lang.String)> (1)
<com.android.emailcommon.service.EmailServiceProxy$6: void run()> (1)
<com.android.email.Controller$1: void run()> (1)
<com.android.emailcommon.service.IEmailService: void hostChanged(long)> (2)
<com.android.exchange.ExchangeService$AccountObserver$2: void run()> (1)
<com.android.emailcommon.service.IEmailService: void deleteAccountPIMData(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.internal.policy.impl.keyguard.CameraWidgetFrame$7: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.CarrierText$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.EmergencyButton$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea$2: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$2: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardStatusView$1: void onUserSwitching(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: void handleUserSwitching(int,android.os.IRemoteCallback)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame$1: void onUserSwitching(int)> (1)
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<android.app.IActivityManager: void killApplicationWithAppId(java.lang.String,int)> (1)
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> ()
<android.content.IIntentReceiver$Stub: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActiveServices: void serviceTimeout(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService$8: void run()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run()> (1)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.ActivityManagerNative: long inputDispatchingTimedOut(int,boolean)> (2)
<com.android.server.am.ActivityRecord$Token: boolean keyDispatchingTimedOut()> (2)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked(java.lang.String,int,int,int,boolean,boolean,boolean,boolean,java.lang.String)> (3)
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.BroadcastQueue: void processNextBroadcast(boolean)> (4)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<com.android.server.sip.SipService: void access$1300(com.android.server.sip.SipService,android.net.sip.SipProfile,int)> (1)
<android.net.sip.SipManager: void close(java.lang.String)> (3)
<com.android.email.activity.setup.AccountSetupExchangeFragment: void saveSettingsAfterEdit()> (1)
<com.android.emailcommon.service.EmailServiceProxy$9: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$12: void run()> (1)
<com.android.email.Controller: void deleteSyncedDataSync(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.wm.InputMonitor: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int)> (3)
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (13)
<android.content.IIntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (3)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrashInner(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.IActivityManager: long inputDispatchingTimedOut(int,boolean)> (1)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut()> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut()> (2)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest(com.android.server.am.ProcessRecord,android.app.Dialog)> (4)
<com.android.server.am.ActivityManagerService: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,int)> (2)
<com.android.server.am.ActiveServices: void performServiceRestartLocked(com.android.server.am.ServiceRecord)> (1)
<android.app.ActivityManagerNative: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.BroadcastQueue: void scheduleBroadcastsLocked()> (7)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1700(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2500(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$1900(com.android.internal.policy.impl.keyguard.KeyguardViewMediator)> (5)
<com.android.phone.sip.SipEditor: void unregisterProfile(java.lang.String)> (3)
<com.android.phone.sip.SipSettings$7: void run()> (1)
<com.android.email.activity.setup.AccountServerBaseFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.Controller: void deleteAccountSync(long,android.content.Context)> (4)
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> (1)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)> (4)
<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (5)
<com.android.server.pm.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.PendingIntent$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IntentSender$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am$IntentReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$10: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$11: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$17: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$18: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$21: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$22: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService$11: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (1)
<com.android.server.am.BroadcastQueue: void performReceiveLocked(com.android.server.am.ProcessRecord,android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener$NativeCrashReporter: void run()> (2)
<com.android.server.wm.InputMonitor: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> (1)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut()> (1)
<android.app.ActivityManagerNative: void killUid(int,java.lang.String)> (2)
<com.android.server.am.ActiveServices$ServiceRestarter: void run()> (1)
<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (1)
<com.android.server.am.BroadcastQueue: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void broadcastTimeoutLocked(boolean)> (3)
<com.android.server.am.BroadcastQueue: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipPendingBroadcastLocked(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void access$2300(com.android.internal.policy.impl.keyguard.KeyguardViewMediator,boolean)> (9)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (13)
<com.android.phone.sip.SipEditor: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.sip.SipEditor: void deleteAndUnregisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void unregisterOldPrimaryAccount()> (1)
<com.android.email.activity.setup.AccountServerBaseFragment$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.Controller$14: void run()> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context,boolean)> (2)
<com.android.email.SecurityPolicy: void deleteSecuredAccounts(android.content.Context)> (1)
<com.android.email.service.MailService$3: void run()> (1)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> (1)
<com.android.server.input.InputManagerService: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)> (5)
<com.android.server.pm.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void unloadMediaPackages(java.util.HashMap,int[],boolean)> (1)
<com.android.server.pm.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.ApplicationThreadNative: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.BroadcastQueue: void deliverToRegisteredReceiverLocked(com.android.server.am.BroadcastRecord,com.android.server.am.BroadcastFilter,boolean)> (1)
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.NativeCrashListener: void consumeNativeCrashData(java.io.FileDescriptor)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> (1)
<android.app.IActivityManager: void killUid(int,java.lang.String)> (1)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (4)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void setBroadcastTimeoutLocked(long)> (2)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void skipPendingBroadcastLocked(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$2: void keyguardDone(boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$10: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$19: void run()> (1)
<com.android.phone.sip.SipEditor: void access$500(com.android.phone.sip.SipEditor,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void access$400(com.android.phone.sip.SipEditor)> (1)
<com.android.email.activity.setup.AccountServerBaseFragment$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.provider.AccountReconciler: boolean accountsNeedReconciling(android.content.Context,java.util.List,android.accounts.Account[])> (1)
<com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (2)
<com.android.email.SecurityPolicy: void onAdminEnabled(boolean)> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.systemui.statusbar.BaseStatusBar$NotificationClicker: void onClick(android.view.View)> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package access$1600(com.android.server.pm.PackageManagerService,java.io.File,int,int,long,android.os.UserHandle)> (1)
<com.android.server.pm.PackageManagerService: boolean deleteSystemPackageLI(com.android.server.pm.PackageSetting,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (1)
<com.android.server.pm.PackageManagerService: void loadMediaPackages(java.util.HashMap,int[],java.util.HashSet)> (1)
<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)> (1)
<com.android.server.pm.PackageManagerService: void installPackageLI(com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int access$3600(com.android.server.pm.PackageManagerService,java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean,boolean)> (2)
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (1)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener: void run()> (2)
<com.android.server.input.InputManagerService: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> ()
<com.android.server.BackupManagerService$PerformBackupTask: void invokeNextAgent()> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask: void backupOnePackage(android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void restoreNextAgent()> (1)
<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator$ViewMediatorCallback: void keyguardDone(boolean)> (2)
<com.android.phone.sip.SipEditor$2: void run()> (1)
<com.android.email.service.MailService: boolean hasMismatchInPopImapAccounts(android.content.Context)> (1)
<com.android.email.service.AccountService$1: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.server.pm.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: void <init>(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void access$1800(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService$7: void run()> (1)
<com.android.server.pm.PackageManagerService: void access$4100(com.android.server.pm.PackageManagerService,boolean,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void scanAvailableAsecs()> (1)
<android.app.ActivityThread$ApplicationThread: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> (1)
<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()> (1)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register(android.app.IActivityManager)> (1)
<com.android.server.am.ActivityManagerService: void trimApplications()> (5)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void access$300(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void showNextSecurityScreenOrFinish(boolean)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void verifyUnlock()> (2)
<com.android.email.activity.Welcome$1: void run()> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IAccountService$Stub: void reconcileAccounts(java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal(android.content.Context)> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.IPackageManager main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService$10: void run()> (1)
<com.android.server.MountService$4: void run()> (2)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces()> (1)
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> (1)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean handleMenuKey()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void access$900(com.android.internal.policy.impl.keyguard.KeyguardHostView,boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void dismiss()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewBase: void verifyUnlock()> ()
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void reconcileAccounts(java.lang.String,java.lang.String)> (1)
<com.android.email.service.MailService$6: void runInternal(java.lang.Object)> (1)
<com.android.server.MountService: void onDaemonConnected()> (1)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<android.app.ActivityManagerNative: void setProcessLimit(int)> (2)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,boolean)> (4)
<com.android.internal.policy.impl.keyguard.KeyguardViewManager$ViewManagerHost: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$3: void dismiss(boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void dismiss()> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$3: void run()> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.server.INativeDaemonConnectorCallbacks: void onDaemonConnected()> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
<android.app.IActivityManager: void setProcessLimit(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback: void dismiss(boolean)> (11)
<com.android.internal.policy.impl.keyguard.KeyguardViewMediator: void dismiss()> (2)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.DevelopmentSettings: void writeAppProcessLimitOptions(java.lang.Object)> (2)
<com.android.internal.policy.impl.keyguard.FaceUnlock: void handleUnlock(int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: void verifyPasswordAndUnlock()> (3)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView$1: void run()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAccountView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.keyguard.KeyguardHostView$4: boolean onClickHandler(android.view.View,android.app.PendingIntent,android.content.Intent)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardHostView: boolean handleBackKey()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPatternView$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$1: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView$4$1: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$11: void run()> (1)
<com.android.email.service.MailService$6: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.DevelopmentSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.DevelopmentSettings: void resetDangerousOptions()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: void verifyPasswordAndUnlock()> (2)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$1: void run()> (1)
<com.android.settings.DevelopmentSettings: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPinView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardSimPukView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.keyguard.KeyguardPINView$1: void onClick(android.view.View)> (1)
<com.android.internal.widget.LockPatternView: void notifyPatternDetected()> (1)
<com.android.internal.widget.LockPatternView: void handleActionUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.LockPatternView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.power.PowerManagerService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> (2)
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> ()
<android.os.IPowerManager$Stub: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> (2)
<android.os.IPowerManager: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> (1)
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)> (9)
<android.net.wifi.WifiStateMachine: void updateBatteryWorkSource(android.os.WorkSource)> (3)
<com.android.server.AlarmManagerService: void setWakelockWorkSource(android.app.PendingIntent)> (2)
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)> (2)
<android.net.wifi.WifiStateMachine$DriverStartedState: void exit()> (1)
<com.android.server.wifi.WifiController: void updateBatteryWorkSource()> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String)> (1)
<com.android.server.wifi.WifiController: void access$700(com.android.server.wifi.WifiController)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)> (2)
<com.android.server.wifi.WifiController$DefaultState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> (8)
<android.webkit.GeolocationService: void unregisterFromLocationUpdates()> (2)
<com.android.camera.LocationManager: void stopReceivingLocationUpdates()> (1)
<com.android.location.fused.FusionEngine: void disableProvider(java.lang.String)> (1)
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)> (1)
<com.android.wallpaper.grass.GrassRS: void stop()> (1)
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()> (1)
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<android.webkit.GeolocationService: void stop()> ()
<com.android.camera.LocationManager: void recordLocation(boolean)> (9)
<com.android.location.fused.FusionEngine: void updateRequirements()> (3)
<com.android.server.location.LocationBasedCountryDetector: void stop()> (3)
<com.android.wallpaper.RenderScriptScene: void stop()> (6)
<com.android.server.TwilightService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.PanoramaModule: void onPauseBeforeSuper()> (1)
<com.android.camera.PanoramaModule: void onResumeAfterSuper()> (1)
<com.android.camera.PhotoModule: void initializeFirstTime()> (1)
<com.android.camera.PhotoModule: void initializeSecondTime()> (1)
<com.android.camera.PhotoModule: void onPauseAfterSuper()> (1)
<com.android.camera.PhotoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.camera.VideoModule: void onSharedPreferenceChanged()> (2)
<com.android.location.fused.FusionEngine: void disable()> (1)
<com.android.location.fused.FusionEngine: void enable()> ()
<com.android.location.fused.FusionEngine: void setRequest(com.android.location.provider.ProviderRequestUnbundled,android.os.WorkSource)> (1)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.server.location.LocationBasedCountryDetector$1: void onLocationChanged(android.location.Location)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.wallpaper.fall.FallRS: void stop()> (1)
<com.android.wallpaper.galaxy.GalaxyRS: void stop()> (1)
<com.android.wallpaper.nexus.NexusRS: void stop()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void destroyRenderer()> (2)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> (2)
<com.android.camera.CameraModule: void onResumeAfterSuper()> (2)
<com.android.camera.PhotoModule: void access$1800(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onResumeAfterSuper()> (1)
<com.android.camera.CameraModule: void onPauseAfterSuper()> (2)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.PhotoModule: void setLocationPreference(java.lang.String)> (1)
<com.android.camera.VideoModule: void onCancelBgTraining(android.view.View)> ()
<com.android.location.fused.FusionEngine: void deinit()> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onDestroy()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceDestroyed(android.view.SurfaceHolder)> (1)
<com.android.camera.CameraActivity: void closeModule(com.android.camera.CameraModule)> (2)
<com.android.camera.CameraActivity: void onPause()> (4)
<com.android.camera.CameraActivity: void onResume()> (4)
<com.android.camera.CameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (2)
<com.android.camera.PieController: void onSettingChanged(com.android.camera.ListPreference)> (5)
<com.android.camera.PhotoModule: void access$3000(com.android.camera.PhotoModule,java.lang.String)> (2)
<com.android.location.fused.FusedLocationProvider: void onDisable()> (2)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.camera.CameraActivity: void doChangeCamera(int)> (3)
<com.android.camera.SecureCameraActivity: void closeModule(com.android.camera.CameraModule)> (1)
<com.android.camera.ActivityBase: void onPause()> (3)
<com.android.camera.SecureCameraActivity: void onPause()> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (6)
<com.android.camera.ActivityBase: void onResume()> (3)
<com.android.camera.SecureCameraActivity: void onResume()> (4)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (6)
<com.android.camera.SecureCameraActivity: void openModule(com.android.camera.CameraModule,boolean)> (1)
<com.android.camera.PhotoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PieController$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.PieController$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PhotoModule$4: void onCancel(android.content.DialogInterface)> (1)
<com.android.camera.PhotoModule$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.location.fused.FusedLocationService: boolean onUnbind(android.content.Intent)> (1)
<com.android.location.provider.LocationProviderBase: void onDisable()> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.camera.CameraActivity: void access$200(com.android.camera.CameraActivity,int)> (2)
<com.android.camera.CameraActivity: void onCameraSelected(int)> (2)
<com.android.camera.SecureCameraActivity: void doChangeCamera(int)> (1)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (3)
<com.android.gallery3d.app.DialogPicker: void onPause()> (3)
<com.android.gallery3d.app.Gallery: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (3)
<com.android.gallery3d.app.DialogPicker: void onResume()> (3)
<com.android.gallery3d.app.Gallery: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.camera.PhotoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.ui.PieItem$OnClickListener: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.ui.ListPrefSettingPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.TimeIntervalPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.MoreSettingPopup$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.location.provider.LocationProviderBase$Service: void disable()> (2)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.camera.CameraActivity$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.camera.SecureCameraActivity: void access$200(com.android.camera.CameraActivity,int)> (1)
<com.android.camera.SecureCameraActivity: void onCameraSelected(int)> (1)
<com.android.camera.ui.CameraSwitcher$CameraSwitchListener: void onCameraSelected(int)> (1)
<com.android.camera.ui.CountdownTimerPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.PieItem: void performClick()> (1)
<com.android.camera.ui.ListPrefSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.TimeIntervalPopup: void updateInputState()> (1)
<com.android.camera.ui.MoreSettingPopup: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.internal.location.ILocationProvider$Stub$Proxy: void disable()> ()
<com.android.internal.location.ILocationProvider$Stub: void disable()> (2)
<com.android.camera.ui.CameraSwitcher: void onCameraSelected(int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void updateInputState()> (1)
<com.android.camera.ui.PieRenderer$3: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.camera.ui.TimeIntervalPopup: void access$000(com.android.camera.ui.TimeIntervalPopup)> (1)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.internal.location.ILocationProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.location.ILocationProvider: void disable()> (1)
<com.android.camera.ui.CameraSwitcher: void access$000(com.android.camera.ui.CameraSwitcher,int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void access$000(com.android.camera.ui.CountdownTimerPopup)> (1)
<com.android.camera.ui.TimeIntervalPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (2)
<com.android.location.provider.LocationProviderBase$Service: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.LocationProviderProxy: void disable()> (1)
<com.android.camera.ui.CameraSwitcher$1: void onClick(android.view.View)> (1)
<com.android.camera.ui.CountdownTimerPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean changeIndex(int)> (2)
<com.android.camera.ui.InLineSettingMenu: boolean changeIndex(int)> (1)
<com.android.camera.ui.InLineSettingCheckBox$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.server.wifi.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> ()
<android.net.wifi.IWifiManager$Stub: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$WifiLock: void acquire()> (2)
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipAudioCall: void grabWifiHighPerfLock()> (1)
<android.net.sip.SipAudioCall: void startAudioInternal()> (1)
<android.net.sip.SipAudioCall: void startAudio()> (4)
<android.net.sip.SipAudioCall: void transferToNewSession()> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEstablished(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallHeld(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void separate()> (1)
<android.net.sip.SipAudioCall: void access$800(android.net.sip.SipAudioCall)> (1)
<android.net.sip.SipAudioCall$1: void onCallEstablished(android.net.sip.SipSession,java.lang.String)> (1)
<com.android.server.wifi.WifiService: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> ()
<android.net.wifi.IWifiManager$Stub: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager: boolean releaseWifiLock(android.os.IBinder)> (3)
<android.net.wifi.WifiManager$WifiLock: void finalize()> ()
<android.net.wifi.WifiManager$WifiLock: void release()> (3)
<android.net.sip.SipAudioCall: void releaseWifiHighPerfLock()> (1)
<com.android.server.sip.SipService: void unregisterReceivers()> (1)
<android.net.sip.SipAudioCall: void stopCall(boolean)> (3)
<com.android.server.sip.SipService: void notifyProfileRemoved(android.net.sip.SipProfile)> (1)
<android.net.sip.SipAudioCall: void close(boolean)> (3)
<android.net.sip.SipAudioCall: void endCall()> (1)
<android.net.sip.SipAudioCall: void access$1000(android.net.sip.SipAudioCall,boolean)> (1)
<android.net.sip.SipAudioCall: void close()> (2)
<android.net.sip.SipAudioCall: void onError(int,java.lang.String)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void hangup()> (1)
<android.net.sip.SipAudioCall$1: void onCallBusy(android.net.sip.SipSession)> (1)
<android.net.sip.SipAudioCall$1: void onCallEnded(android.net.sip.SipSession)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<android.net.sip.SipAudioCall: void access$1300(android.net.sip.SipAudioCall,int,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onChanged(android.net.sip.SipAudioCall)> (3)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onError(com.android.internal.telephony.Connection$DisconnectCause)> (1)
<android.net.sip.SipAudioCall$1: void onError(android.net.sip.SipSession,int,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallBusy(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onError(com.android.internal.telephony.Connection$DisconnectCause)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallBusy(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEnded(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onError(android.net.sip.SipAudioCall,int,java.lang.String)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onError(android.net.sip.SipAudioCall,int,java.lang.String)> (2)
Permission:android.permission.READ_SYNC_SETTINGS
1589 Callers:
<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (14)
<com.android.server.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onResume()> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void loadSettings()> (2)
<com.android.email.service.MailService: void setupSyncReportsLocked(long,android.content.Context)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.EasAccountService: void runPingLoop()> (1)
<com.android.exchange.ExchangeService: boolean canSyncEmail(android.accounts.Account)> (1)
<com.android.exchange.ExchangeService: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (1)
<com.android.settings.accounts.AccountSyncSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.accounts.AccountSyncSettings: void setFeedsState()> (1)
<com.android.settings.accounts.ManageAccountsSettings: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.ManageAccountsSettings: void requestOrCancelSyncForAccounts(boolean)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void access$800(com.android.email.activity.setup.AccountSettingsFragment)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onStart()> (2)
<com.android.email.service.MailService: void refreshSyncReports()> (1)
<com.android.email.service.MailService: void setupSyncReports(long)> (3)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.EasAccountService: void sync()> (1)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onSyncStateUpdated()> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.ManageAccountsSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: void onPostExecute(java.lang.Object[])> (1)
<com.android.email.service.MailService: void access$700(com.android.email.service.MailService)> (1)
<com.android.email.service.MailService: com.android.email.service.MailService$AccountSyncReport updateAccountReport(long,int)> (1)
<com.android.email.service.MailService: void reschedule(android.app.AlarmManager)> (1)
<com.android.email.service.MailService: void restoreSyncReports(android.content.Intent)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.EasAccountService: void run()> (1)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountPreferenceBase$1$1: void run()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.accounts.SyncSettings: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountPreferenceBase: boolean onOptionsItemSelected(android.view.MenuItem)> (5)
<com.android.settings.SettingsPreferenceFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (8)
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.service.MailService$5: void run()> (1)
<com.android.email.service.MailService: com.android.email.service.MailService$AccountSyncReport access$300(com.android.email.service.MailService,long,int)> (3)
<com.android.email.service.MailService: void access$400(com.android.email.service.MailService,android.app.AlarmManager)> (3)
<com.android.email.service.MailService: void access$000(com.android.email.service.MailService,android.content.Intent)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.settings.accounts.SyncSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountSyncSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.settings.deviceinfo.Memory: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.users.UserSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.vpn2.VpnSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wfd.WifiDisplaySettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.email.service.MailService$2: void run()> (1)
<com.android.email.service.MailService$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> (1)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.email.Controller$Result: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (5)
<com.android.email.Controller$Result: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> (7)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.email.activity.MailboxFinder$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.activity.MessageViewFragmentBase$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.Controller$LegacyListener: void checkMailFinished(android.content.Context,long,long,long)> (2)
<com.android.email.Controller$LegacyListener: void checkMailStarted(android.content.Context,long,long)> (1)
<com.android.email.ControllerResultUiThreadWrapper$4: void run()> (1)
<com.android.email.activity.MailboxFinder$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> (1)
<com.android.email.activity.MessageViewFragmentBase$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxFinished(long,long,int,int,java.util.ArrayList)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)> (1)
<com.android.email.ControllerResultUiThreadWrapper$5: void run()> (1)
<com.android.email.Controller$ServiceCallback: void syncMailboxStatus(long,int,int)> (2)
<com.android.email.Controller: void serviceCheckMail(long,long,long)> (1)
<com.android.email.MessagingListener: void checkMailFinished(android.content.Context,long,long,long)> (1)
<com.android.email.MessagingListener: void checkMailStarted(android.content.Context,long,long)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxFinished(long,long,int,int,java.util.ArrayList)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxStarted(long,long)> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void syncMailboxStatus(long,int,int)> (4)
<com.android.email.service.MailService: boolean syncOneAccount(com.android.email.Controller,long,int)> (1)
<com.android.email.GroupMessagingListener: void checkMailFinished(android.content.Context,long,long,long)> (2)
<com.android.email.GroupMessagingListener: void checkMailStarted(android.content.Context,long,long)> (2)
<com.android.email.GroupMessagingListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (2)
<com.android.email.GroupMessagingListener: void synchronizeMailboxFinished(long,long,int,int,java.util.ArrayList)> (3)
<com.android.email.GroupMessagingListener: void synchronizeMailboxStarted(long,long)> (4)
<com.android.emailcommon.service.IEmailServiceCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.emailcommon.service.IEmailServiceCallback: void syncMailboxStatus(long,int,int)> (4)
<com.android.exchange.ExchangeService$2: void startSync(long,boolean)> (2)
<com.android.exchange.ExchangeService: void requestSync(com.android.emailcommon.provider.Mailbox,int,com.android.exchange.Request)> (2)
<com.android.email.service.MailService: boolean access$200(com.android.email.service.MailService,com.android.email.Controller,long,int)> (1)
<com.android.email.MessagingController$13: void run()> (1)
<com.android.email.MessagingController: void checkMail(long,long,com.android.email.MessagingListener)> (1)
<com.android.email.MessagingController: void synchronizeMailboxSynchronous(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.email.MessagingController: int searchMailbox(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.email.MessagingController: int searchMailboxImpl(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.email.MessagingController: void synchronizeMailbox(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,com.android.email.MessagingListener)> (2)
<com.android.email.Controller$15: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.Controller$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.AttachmentDownloadService$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.adapter.Search: int searchMessages(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.exchange.EasSyncService: boolean setupService()> (3)
<com.android.exchange.ExchangeService$1$4: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void startSync(long,boolean)> (2)
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)> (4)
<com.android.email.Controller$2: void run()> (1)
<com.android.email.MessagingController: void access$400(com.android.email.MessagingController,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (2)
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)> (2)
<com.android.email.Controller$3: void run()> (1)
<com.android.email.Controller$7: void run()> (1)
<com.android.exchange.ExchangeService$2: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.EasAccountService: boolean setupService()> (2)
<com.android.exchange.EasOutboxService: boolean setupService()> (2)
<com.android.exchange.ExchangeService$ServiceCallbackWrapper: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void startSync(long,boolean)> (3)
<com.android.exchange.EasAccountService: int parsePingResult(java.io.InputStream,android.content.ContentResolver,java.util.HashMap)> (1)
<com.android.exchange.ExchangeService: void sendMessageRequest(com.android.exchange.Request)> (2)
<com.android.exchange.ExchangeService: void serviceRequest(long,long,int)> (1)
<com.android.email.MessagingController$2: void run()> (1)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.Controller: void searchMore(long)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.ExchangeService$1: void broadcastCallback(com.android.exchange.ExchangeService$ServiceCallbackWrapper)> (4)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.Controller: void sendPendingMessages(long)> (3)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (2)
<com.android.exchange.ExchangeService$2: void loadAttachment(long,boolean)> (2)
<com.android.exchange.ExchangeService$2: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.ExchangeService: void serviceRequest(long,int)> (4)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: java.lang.Object loadInBackground()> (3)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.ExchangeService$1: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.exchange.ExchangeService$1: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.exchange.ExchangeService$1: void syncMailboxListStatus(long,int,int)> (2)
<com.android.exchange.ExchangeService$1: void syncMailboxStatus(long,int,int)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.Controller: void sendMessage(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> (2)
<com.android.email.service.MailService$4: void run()> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(long,boolean)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> ()
<com.android.emailcommon.service.IEmailService$Stub: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void handleReceive(android.content.Context)> (1)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: java.lang.Object loadInBackground()> (2)
<com.android.emailcommon.service.EmailServiceProxy$13: void run()> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void loadAttachmentStatus(long,long,int,int)> (6)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void sendMessageStatus(long,java.lang.String,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxListStatus(long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void syncMailboxListStatus(long,int,int)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageListFragment: void onSendPendingMessages()> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void performAction(long)> (1)
<com.android.email.RefreshManager: boolean loadMoreMessages(long,long)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean)> (4)
<com.android.email.service.PopImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.emailcommon.service.IEmailService: void loadAttachment(long,boolean)> (1)
<com.android.emailcommon.service.IEmailService: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void access$000(com.android.exchange.EmailSyncAlarmReceiver,android.content.Context)> (1)
<com.android.emailcommon.service.IEmailServiceCallback: void loadAttachmentStatus(long,long,int,int)> (5)
<com.android.email.Controller$ControllerService$1: void loadAttachment(long,boolean)> (2)
<com.android.email.Controller$LegacyListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.emailcommon.service.IEmailServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback: void syncMailboxListStatus(long,int,int)> (3)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void performAction(long)> (1)
<com.android.email.activity.MessageListFragment: void onLoadMoreMessages()> (1)
<com.android.email.activity.MessageListFragment: void onRefresh(boolean)> (1)
<com.android.email.activity.setup.MailboxSettings$2: void onSuccess(java.lang.Void)> (1)
<com.android.email.activity.UIControllerOnePane: void onRefresh()> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void onSuccess(java.lang.Boolean)> (1)
<com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$10: void run()> (1)
<com.android.email.Controller: void sendMeetingResponse(long,int)> (1)
<com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver$1: void run()> (1)
<com.android.email.Controller$15$1: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.adapter.AttachmentLoader: void doProgressCallback(int)> (2)
<com.android.exchange.adapter.AttachmentLoader: void doStatusCallback(int)> (2)
<com.android.exchange.ExchangeService$1$1: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.email.MessagingListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (1)
<com.android.email.MessagingListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.MessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.exchange.EasOutboxService: void sendCallback(long,java.lang.String,int)> (2)
<com.android.exchange.ExchangeService$1$2: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.ExchangeService$1$3: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.ExchangeService: void reloadFolderListFailed(long)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Long[])> (2)
<com.android.email.activity.MessageListFragment: void doFooterClick()> (1)
<com.android.email.activity.MessageListFragment: void autoRefreshStaleMailbox()> (1)
<com.android.email.activity.setup.MailboxSettings$2: void onSuccess(java.lang.Object)> (1)
<com.android.email.activity.UIControllerBase: void onRefresh()> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void onSuccess(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragment: void onRespondToInvite(int,int)> (1)
<com.android.email.Controller$ServiceCallbackWrapper: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.adapter.AttachmentLoader: void loadAttachment()> (1)
<com.android.exchange.adapter.AttachmentLoader: void readChunked(java.io.InputStream,java.io.OutputStream,int)> (2)
<com.android.exchange.adapter.AttachmentLoader: void finishLoadAttachment()> (1)
<com.android.email.GroupMessagingListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentFinished(long,long,long)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (2)
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> (1)
<com.android.exchange.EasOutboxService: void sendFailed(long,int)> (1)
<com.android.exchange.ExchangeService: void reloadFolderList(android.content.Context,long,boolean)> (4)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Object)> (2)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.activity.MessageListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment: void access$2200(com.android.email.activity.MessageListFragment)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: void onSuccess(java.lang.Object)> (2)
<com.android.email.activity.UIControllerBase: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<com.android.email.Controller$15: void broadcastCallback(com.android.email.Controller$ServiceCallbackWrapper)> (1)
<com.android.exchange.adapter.ItemOperationsParser: void parseProperties()> (1)
<com.android.email.MessagingController$11: void run()> (1)
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.ExchangeService$2: void updateFolderList(long)> (2)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (22)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Object)> (2)
<com.android.email.activity.MessageListFragment$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: void onSuccess(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: void onPostExecute(java.lang.Object)> (2)
<com.android.email.activity.EmailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.UIControllerOnePane: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.UIControllerTwoPane: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.Controller$15: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.exchange.adapter.ItemOperationsParser: void parseFetch()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.email.activity.MailboxFinder$FindMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$6: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageList$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask: void callOnPostExecuteForTest(java.lang.Object)> (22)
<com.android.email.activity.UIControllerSearchTwoPane: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.ItemOperationsParser: void parseResponse()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MailboxListFragment$FindParentMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$6: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$QuickResponseChecker: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageFileView$LoadFilenameTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageList$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$ReloadMessageTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$UpdatePreviewIconTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$QuickResponseFinder: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSetupNames$2: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$2: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.email.activity.UIControllerTwoPane$RefreshTask: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: void callOnPostExecuteForTest(java.lang.Object)> (1)
<com.android.exchange.adapter.ItemOperationsParser: boolean parse()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.EmailServiceProxy$6: void run()> (1)
<com.android.email.Controller$1: void run()> (1)
<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (3)
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (8)
<com.android.contacts.common.model.AccountTypeManagerImpl: void loadAccountsInBackground()> (5)
<com.android.providers.contacts.ContactsProvider2: boolean isContactsAccount(android.accounts.Account)> (1)
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void enableSync(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.calendar.CalendarSettingsActivity: void onBuildHeaders(java.util.List)> (1)
<com.android.settings.accounts.AccountSyncSettings: void updateAccountCheckboxes(android.accounts.Account[])> (2)
<com.android.contacts.common.model.AccountTypeManagerImpl: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void onStatusChanged(int)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: void processBroadcastIntent(android.content.Intent)> (1)
<com.android.providers.contacts.ContactsProvider2: void updateContactsAccountCount(android.accounts.Account[])> (2)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.contacts.common.model.AccountTypeManager: com.android.contacts.common.model.AccountTypeManager getInstance(android.content.Context)> (51)
<com.android.providers.contacts.ContactsProvider2: boolean updateAccountsInBackground(android.accounts.Account[])> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.model.RawContactDelta addEditableRawContact(android.content.Context,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.activities.ContactEditorAccountsChangedActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.activities.GroupDetailActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (3)
<com.android.contacts.common.interactions.ImportExportDialogFragment: boolean handleImportRequest(int)> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterListAdapter: void <init>(android.content.Context,java.util.List,com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List loadAccountFilters(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: boolean filterAccountExists()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$DisplayAdapter: void <init>(android.content.Context)> (1)
<com.android.contacts.common.model.AccountTypeManagerImpl: com.android.contacts.common.model.AccountTypeManager getInstance(android.content.Context)> (1)
<com.android.contacts.common.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (4)
<com.android.contacts.common.util.AccountsListAdapter: void <init>(android.content.Context,com.android.contacts.common.util.AccountsListAdapter$AccountListFilter,com.android.contacts.common.model.account.AccountWithDataSet)> (2)
<com.android.contacts.common.vcard.ImportVCardActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.common.vcard.SelectAccountActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ContactsApplication$DelayedInitializer: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.ContactsUtils: boolean areContactWritableAccountsAvailable(android.content.Context)> (1)
<com.android.contacts.ContactsUtils: boolean areGroupWritableAccountsAvailable(android.content.Context)> (3)
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: void execute()> (1)
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: void execute()> (1)
<com.android.contacts.detail.ContactDetailFragment: void buildEntries()> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment: com.android.contacts.common.model.account.AccountType getAccountTypeForStreamItemEntry(com.android.contacts.util.StreamItemEntry)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> (2)
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean canEditSuggestedContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean hasPendingChanges()> (3)
<com.android.contacts.editor.ContactEditorFragment: boolean isContactWritable()> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (4)
<com.android.contacts.editor.ContactEditorFragment: void createContact(com.android.contacts.common.model.account.AccountWithDataSet)> (4)
<com.android.contacts.editor.ContactEditorFragment: void createContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void rebindEditorsForNewContact(com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.editor.ContactEditorUtils: void <init>(android.content.Context)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void <init>(android.content.Context)> (1)
<com.android.contacts.group.GroupDetailDisplayUtils: void bindGroupSourceView(android.content.Context,android.view.View,java.lang.String,java.lang.String)> (2)
<com.android.contacts.group.GroupDetailFragment: void onAttach(android.app.Activity)> (1)
<com.android.contacts.group.GroupDetailFragment: void updateAccountType(java.lang.String,java.lang.String)> (1)
<com.android.contacts.group.GroupEditorFragment: com.android.contacts.common.model.account.AccountType getAccountType()> (2)
<com.android.contacts.group.GroupEditorFragment: void selectAccountAndCreateGroup()> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.model.ContactLoader: void loadInvitableAccountTypes(com.android.contacts.model.Contact)> (1)
<com.android.contacts.model.RawContact: com.android.contacts.common.model.AccountTypeManager getAccountTypeManager(android.content.Context)> (1)
<com.android.contacts.model.RawContactDelta: com.android.contacts.common.model.account.AccountType getRawContactAccountType(android.content.Context)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void bindData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void setDisplayNameAndSnippet(android.content.Context,android.widget.RemoteViews,java.lang.CharSequence,java.lang.CharSequence,java.util.List,android.app.PendingIntent)> (1)
<com.android.contacts.SplitAggregateView: void <init>(android.content.Context,android.net.Uri)> ()
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: void setEntityDeltaList(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.contacts.ContactsActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (2)
<com.android.contacts.common.interactions.ImportExportDialogFragment: boolean access$000(com.android.contacts.common.interactions.ImportExportDialogFragment,int)> (1)
<com.android.contacts.common.list.AccountFilterActivity$MyLoaderCallbacks: void onLoadFinished(android.content.Loader,java.util.List)> (1)
<com.android.contacts.common.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)> (2)
<com.android.contacts.common.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.common.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener)> ()
<com.android.contacts.common.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int)> ()
<com.android.contacts.common.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (1)
<com.android.contacts.common.vcard.SelectAccountActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (1)
<com.android.contacts.common.util.AccountsListAdapter: void <init>(android.content.Context,com.android.contacts.common.util.AccountsListAdapter$AccountListFilter)> (2)
<com.android.contacts.editor.ContactEditorFragment$3: void onClick(android.view.View)> (1)
<com.android.contacts.ContactsApplication$DelayedInitializer: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: boolean areContactWritableAccountsAvailable()> (1)
<com.android.contacts.activities.PeopleActivity: boolean areGroupWritableAccountsAvailable()> (4)
<com.android.contacts.group.GroupBrowseListFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void bindGroupList()> (1)
<com.android.contacts.detail.ContactDetailFragment$QuickFix: void execute()> (1)
<com.android.contacts.detail.ContactDetailFragment: void bindData()> (2)
<com.android.contacts.detail.ContactDetailUpdatesFragment: com.android.contacts.common.model.account.AccountType access$000(com.android.contacts.detail.ContactDetailUpdatesFragment,com.android.contacts.util.StreamItemEntry)> (2)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean handleItemClickEvent()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean doJoinContactAction()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean revert()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean save(int)> (7)
<com.android.contacts.editor.ContactEditorFragment: void showJoinAggregateActivity(android.net.Uri)> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.editor.ContactEditorFragment: void access$2100(com.android.contacts.editor.ContactEditorFragment)> (3)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(java.lang.String,boolean,com.google.common.collect.ImmutableList)> (2)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType)> (2)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$500(com.android.contacts.editor.ContactEditorFragment,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance(android.content.Context)> (2)
<com.android.contacts.group.GroupDetailFragment: void bindGroupMetaData(android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: boolean isGroupMembershipEditable()> (2)
<com.android.contacts.group.GroupEditorFragment: void setupEditorForAccount()> (4)
<com.android.contacts.group.GroupEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> (1)
<com.android.contacts.model.RawContact: com.android.contacts.common.model.account.AccountType getAccountType(android.content.Context)> (6)
<com.android.contacts.activities.AttachPhotoActivity: void saveContact(com.android.contacts.model.Contact)> (1)
<com.android.contacts.model.RawContactDeltaList: int indexOfFirstWritableRawContact(android.content.Context)> (2)
<com.android.contacts.quickcontact.QuickContactActivity: void access$700(com.android.contacts.quickcontact.QuickContactActivity,com.android.contacts.model.Contact)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void bindRemoteViews(android.content.Context,int,android.appwidget.AppWidgetManager,com.android.contacts.model.Contact)> (1)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$300(com.android.contacts.activities.ConfirmAddDetailActivity,com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.common.interactions.ImportExportDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.common.list.AccountFilterActivity$MyLoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.common.list.ContactListFilterController: void checkFilterValidity(boolean)> (4)
<com.android.contacts.common.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.contacts.activities.PeopleActivity: void updateViewConfiguration(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: boolean access$300(com.android.contacts.activities.PeopleActivity)> (1)
<com.android.contacts.activities.PeopleActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (3)
<com.android.contacts.activities.PeopleActivity: void showEmptyStateForTab(int)> (3)
<com.android.contacts.activities.PeopleActivity: void updateFragmentsVisibility()> (3)
<com.android.contacts.group.GroupBrowseListFragment: void access$400(com.android.contacts.group.GroupBrowseListFragment)> (1)
<com.android.contacts.detail.ContactDetailFragment$3: void onClick(android.view.View)> (1)
<com.android.contacts.detail.ContactDetailFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailFragment: void setData(android.net.Uri,com.android.contacts.model.Contact)> (3)
<com.android.contacts.detail.ContactDetailUpdatesFragment$1: void onClick(android.view.View)> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment$2: void onClick(android.view.View)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onBackPressed()> (3)
<com.android.contacts.editor.ContactEditorFragment: void doJoinSuggestedContact(long[])> (1)
<com.android.contacts.editor.ContactEditorFragment: void doSaveAction()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onStop()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSaveCompleted(boolean,int,boolean,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(com.android.contacts.common.model.account.AccountWithDataSet,com.android.contacts.common.model.account.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment$3$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (5)
<com.android.contacts.editor.ContactEditorFragment: void onAttach(android.app.Activity)> (1)
<com.android.contacts.group.GroupDetailFragment: void access$400(com.android.contacts.group.GroupDetailFragment,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: void onDoneClicked()> (1)
<com.android.contacts.group.GroupEditorFragment: void bindGroupMetaData(android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: void onAccountChosen(com.android.contacts.common.model.account.AccountWithDataSet,android.os.Bundle)> (1)
<com.android.contacts.model.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: boolean isApplicable()> (1)
<com.android.contacts.model.ContactLoader: void postViewNotificationToSyncAdapter()> (1)
<com.android.contacts.model.Contact: long getFirstWritableRawContactId(android.content.Context)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void access$000(com.android.contacts.activities.AttachPhotoActivity,com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: int getWritableEntityIndex()> (5)
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getFirstWritableRawContact(android.content.Context)> (3)
<com.android.contacts.quickcontact.QuickContactActivity$5: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void access$000(android.content.Context,int,android.appwidget.AppWidgetManager,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(com.android.contacts.model.RawContactDeltaList)> (1)
<com.android.contacts.common.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.common.list.ContactListFilterController: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (7)
<com.android.contacts.activities.PeopleActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.PeopleActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.activities.PeopleActivity: void onStart()> (3)
<com.android.contacts.common.model.AccountTypeManagerImpl$1: void run()> (1)
<com.android.contacts.activities.PeopleActivity: void onProviderStatusChange()> (1)
<com.android.contacts.activities.PeopleActivity: void onResume()> (3)
<com.android.contacts.activities.PeopleActivity$TabPagerListener: void onPageSelected(int)> (1)
<com.android.contacts.activities.PeopleActivity: void access$200(com.android.contacts.activities.PeopleActivity,int)> (1)
<com.android.contacts.activities.PeopleActivity: void onAction(int)> (1)
<com.android.contacts.activities.PeopleActivity: void onSelectedTabChanged()> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.detail.ContactDetailFragment: void showEmptyState()> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void showContactWithoutUpdates()> (2)
<com.android.contacts.detail.ContactDetailLayoutController: void showContactWithUpdates(boolean)> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected(android.graphics.Bitmap)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onBackPressed()> (2)
<com.android.contacts.ContactsActivity: void onBackPressed()> (4)
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.ContactEditorActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$Listener: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onJoinCompleted(android.net.Uri)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen()> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen()> (2)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (11)
<com.android.contacts.group.GroupDetailFragment$2: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.activities.GroupEditorActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.group.GroupEditorFragment: void access$600(com.android.contacts.group.GroupEditorFragment,android.database.Cursor)> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment$Listener: void onAccountChosen(com.android.contacts.common.model.account.AccountWithDataSet,android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailFragment$QuickFix: boolean isApplicable()> (1)
<com.android.contacts.model.ContactLoader: void deliverResult(com.android.contacts.model.Contact)> (2)
<com.android.contacts.model.Contact: boolean isWritableContact(android.content.Context)> (4)
<com.android.contacts.activities.AttachPhotoActivity$1: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: int getWritableEntityIndex()> (1)
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()> (2)
<com.android.contacts.detail.PhotoSelectionHandler: void onClick(android.view.View)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: int getWritableEntityIndex()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.contacts.quickcontact.QuickContactActivity$5: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider$1: void onLoadComplete(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.dialer.DialtactsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (12)
<com.android.contacts.common.activity.TransactionSafeActivity: void onStart()> (12)
<com.android.contacts.ContactsActivity: void onStart()> (3)
<com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener: void onProviderStatusChange()> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: void onResume()> (12)
<com.android.contacts.ContactsActivity: void onResume()> (3)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction(int)> (2)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onSelectedTabChanged()> (2)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void showEmptyState()> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void initialize(android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void setContactData(com.android.contacts.model.Contact)> (2)
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.dialer.DialtactsActivity: void onBackPressed()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed()> (3)
<com.android.contacts.activities.PeopleActivity: void onBackPressed()> (5)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onRemovePictureChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onRemovePictureChosen()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onUseAsPrimaryChosen()> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.group.GroupDetailFragment$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$2: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment: void onAccountSelected(com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.detail.ContactDetailFragment: void configureQuickFix()> (1)
<com.android.contacts.model.ContactLoader: void deliverResult(java.lang.Object)> (2)
<com.android.contacts.model.ContactLoader: void onStartLoading()> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getHeaderEntryView(android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.detail.ContactDetailTabCarousel: void loadData(com.android.contacts.model.Contact)> (2)
<com.android.contacts.activities.AttachPhotoActivity$Listener: void onContactLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void onClick(android.view.View)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void onClick(android.view.View)> (2)
<com.android.contacts.socialwidget.SocialWidgetProvider$1: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupDetailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.NonPhoneActivity: void onCreate(android.os.Bundle)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void onStart()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onStart()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onStart()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onStart()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onStart()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onStart()> (3)
<com.android.contacts.activities.JoinContactActivity: void onStart()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onStart()> (3)
<com.android.contacts.NonPhoneActivity: void onStart()> (3)
<com.android.dialer.DialtactsActivity: void onStart()> (2)
<com.android.contacts.list.ProviderStatusWatcher: void notifyListeners()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onResume()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onResume()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onResume()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onResume()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onResume()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onResume()> (3)
<com.android.contacts.activities.JoinContactActivity: void onResume()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onResume()> (3)
<com.android.contacts.NonPhoneActivity: void onResume()> (3)
<com.android.dialer.DialtactsActivity: void onResume()> (2)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void update()> (2)
<com.android.contacts.activities.ActionBarAdapter: void setCurrentTab(int,boolean)> (2)
<com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener: void onDetailsLoaded(com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void <init>(android.app.Activity,android.os.Bundle,android.app.FragmentManager,com.android.contacts.widget.TransitionAnimationView,android.view.View,com.android.contacts.detail.ContactDetailFragment$Listener)> (2)
<com.android.contacts.activities.ContactDetailActivity$3$1: void run()> (1)
<com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener$1: void run()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)> (2)
<com.android.contacts.activities.PeopleActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.editor.PhotoActionPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.group.GroupEditorFragment$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment: void access$000(com.android.contacts.common.editor.SelectAccountDialogFragment,com.android.contacts.common.model.account.AccountWithDataSet)> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long access$1600(com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$4: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRequest(int)> (1)
<com.android.contacts.list.ProviderStatusWatcher: void access$600(com.android.contacts.list.ProviderStatusWatcher)> (1)
<com.android.contacts.activities.ActionBarAdapter: void initialize(android.os.Bundle,com.android.contacts.list.ContactsRequest)> (2)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (6)
<com.android.contacts.activities.ActionBarAdapter: void setCurrentTab(int)> (3)
<com.android.contacts.detail.ContactLoaderFragment$ContactLoaderFragmentListener: void onDetailsLoaded(com.android.contacts.model.Contact)> (2)
<com.android.contacts.activities.PeopleActivity: void createViewsAndFragments(android.os.Bundle)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.common.editor.SelectAccountDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested()> (4)
<com.android.contacts.activities.PeopleActivity: void configureFragments(boolean)> (3)
<com.android.contacts.activities.ActionBarAdapter$MyNavigationListener: boolean onNavigationItemSelected(int,long)> (1)
<com.android.contacts.activities.ActionBarAdapter$MyTabListener: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.contacts.detail.ContactLoaderFragment$1: void onLoadFinished(android.content.Loader,com.android.contacts.model.Contact)> (1)
<com.android.contacts.detail.ContactLoaderFragment: void loadUri(android.net.Uri)> (2)
<com.android.dialer.DialtactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.GroupDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (2)
<com.android.contacts.editor.LabeledEditorView: void notifyEditorListener()> (5)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.common.activity.TransactionSafeActivity: boolean onSearchRequested()> (1)
<com.android.contacts.ContactsActivity: boolean onSearchRequested()> (2)
<com.android.contacts.detail.ContactLoaderFragment$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onAttachFragment(android.app.Fragment)> (3)
<com.android.contacts.activities.PeopleActivity: void setupContactDetailFragment(android.net.Uri)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void finish()> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.editor.EventFieldEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener()> (2)
<com.android.contacts.editor.TextFieldsEditorView: void notifyEditorListener()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.common.activity.TransactionSafeActivity: void onAttachFragment(android.app.Fragment)> (1)
<com.android.contacts.ContactsActivity: void onAttachFragment(android.app.Fragment)> (2)
<com.android.contacts.activities.PeopleActivity: void access$700(com.android.contacts.activities.PeopleActivity,android.net.Uri)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void finish()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void clearAllFields()> ()
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (1)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute(java.lang.Object)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (7)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (9)
<com.android.contacts.common.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.common.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest()> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.common.list.ContactListFilter)> (5)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.common.list.ContactEntryListFragment: void setQueryString(java.lang.String,boolean)> (8)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragment()> (1)
<com.android.contacts.activities.PeopleActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setQueryString(java.lang.String,boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setQueryString(java.lang.String,boolean)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.common.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (2)
<com.android.dialer.DialtactsActivity$7: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setQueryString(java.lang.String,boolean)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.activities.PeopleActivity: void setQueryTextToFragment(java.lang.String)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean,boolean)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (2)
<com.android.contacts.common.list.ContactListFilterControllerImpl: void selectCustomFilter()> (1)
<com.android.contacts.common.list.ContactListFilterController: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)> (4)
<com.android.contacts.common.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.common.util.AccountFilterUtil: void handleAccountFilterResult(com.android.contacts.common.list.ContactListFilterController,int,android.content.Intent)> (5)
<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService$Stub$Proxy: boolean getMasterSyncAutomatically()> ()
<android.content.IContentService$Stub: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService: boolean getMasterSyncAutomatically()> (1)
<android.content.ContentResolver: boolean getMasterSyncAutomatically()> (13)
<android.app.ContextImpl$ApplicationContentResolver: boolean getMasterSyncAutomatically()> (1)
<android.test.mock.MockContentResolver: boolean getMasterSyncAutomatically()> (1)
<com.android.email.EmailConnectivityManager: boolean isAutoSyncAllowed()> (1)
<com.android.settings.accounts.SyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.DataUsageSummary: void onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getActualState(android.content.Context)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void requestStateChange(android.content.Context,boolean)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (6)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (42)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void requestStateChange(android.content.Context,boolean)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setCurrentState(android.content.Context,int)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setCurrentState(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setCurrentState(android.content.Context,int)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setCurrentState(android.content.Context,int)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setCurrentState(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange(boolean)> (1)
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$100()> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupNames$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.vcard.VCardEntry$PhoneData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$EntryElement: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$InsertOperationConstrutor: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (1)
<com.android.vcard.VCardEntry$EntryElementIterator: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (2)
<com.android.vcard.VCardEntry: void iterateAllData(com.android.vcard.VCardEntry$EntryElementIterator)> (3)
<com.android.vcard.VCardEntry: void iterateOneList(java.util.List,com.android.vcard.VCardEntry$EntryElementIterator)> (1)
<com.android.vcard.VCardEntry: boolean isIgnorable()> (2)
<com.android.vcard.VCardEntry: java.lang.String toString()> ()
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.common.vcard.ImportProcessor: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void onEntryEnded()> (1)
<com.android.vcard.VCardInterpreter: void onEntryEnded()> (2)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard()> (4)
<com.android.vcard.VCardParserImpl_V21: void handleNest()> (3)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseOne(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseItem()> (3)
<com.android.vcard.VCardParserImpl_V30: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V40: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V30: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V21: void parseItems()> (4)
<com.android.vcard.VCardParserImpl_V30: boolean parseItem()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseItem()> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParser_V30: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parseOne(java.io.InputStream)> ()
<com.android.vcard.VCardParserImpl_V30: void parseItems()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseItems()> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.common.vcard.ImportRequest constructImportRequest(byte[],android.net.Uri,java.lang.String)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity: com.android.contacts.common.vcard.ImportRequest createImportRequest()> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (4)
<com.android.contacts.common.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.common.vcard.ImportRequest doInBackground(com.android.contacts.common.vcard.VCardService[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: boolean readOneVCard(java.io.InputStream,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.contacts.common.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.common.vcard.NfcImportVCardActivity$ImportTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.common.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.common.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.common.vcard.ProcessorBase: void run()> ()
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> (1)
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (14)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (13)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.vcard.VCardEntry$EmailData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.contacts.common.database.ContactUpdateUtils: void setSuperPrimary(android.content.Context,long)> (2)
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<com.android.dialer.contact.ContactUpdateService: void onHandleIntent(android.content.Intent)> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onClick(android.view.View)> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void removeMembersFromGroup(android.content.ContentResolver,long[],long)> (1)
<com.android.contacts.ContactSaveService: void updateGroup(android.content.Intent)> (1)
<com.android.contacts.util.ContactLoaderUtils: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (2)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.vcard.VCardEntry$PhotoData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$ImData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (19)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (7)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (10)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (3)
<com.android.contacts.group.GroupEditorFragment$Member: void <init>(long,java.lang.String,long,java.lang.String,java.lang.String)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupContactFromUri(android.net.Uri)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.ArrayList getContactMatches()> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (2)
<com.android.contacts.common.vcard.NfcImportVCardActivity: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (9)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int)> (5)
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (3)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForPhoneNumber(java.lang.String,java.lang.String)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo queryContactInfoForSipAddress(java.lang.String)> (1)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.util.List doInBackground(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.common.list.ContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (3)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.group.GroupEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$4: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.dialer.calllog.ContactInfoHelper: com.android.dialer.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> (2)
<com.android.dialer.dialpad.SmartDialLoaderTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor addSearchSuggestionsBasedOnFilter(android.database.MatrixCursor,android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)> (1)
<com.android.contacts.common.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (2)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean queryContactInfo(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.email.NotificationController$MessageContentObserver: void onChange(boolean)> (1)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.common.list.IndexerListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.dialer.CallDetailActivity: com.android.dialer.PhoneCallDetails access$300(com.android.dialer.CallDetailActivity,android.net.Uri)> (1)
<com.android.dialer.calllog.CallLogAdapter: boolean access$300(com.android.dialer.calllog.CallLogAdapter,java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> (5)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: com.android.dialer.PhoneCallDetails[] doInBackground(java.lang.Void[])> (1)
<com.android.dialer.calllog.CallLogAdapter$QueryThread: void run()> (2)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (2)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (2)
<com.android.providers.contacts.ContactsProvider2: long insertSettings(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.dialer.CallDetailActivity$1UpdateContactDetailsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.CallLogAdapter: void startRequestProcessing()> (2)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (5)
<com.android.providers.contacts.ContactsProvider2: void cleanupPhotoStore()> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (4)
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.dialer.calllog.CallLogAdapter: void access$100(com.android.dialer.calllog.CallLogAdapter)> (1)
<com.android.dialer.calllog.CallLogAdapter: void enqueueRequest(java.lang.String,java.lang.String,com.android.dialer.calllog.ContactInfo,boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (2)
<com.android.dialer.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindView(android.view.View,android.database.Cursor,int)> (3)
<com.android.dialer.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.dialer.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (1)
<com.android.common.widget.GroupingListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.dialer.calllog.CallLogAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.model.RawContactDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.model.RawContactDeltaList[])> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.common.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.vcard.VCardEntry$AnniversaryData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.common.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.list.LegacyPhoneNumberPickerFragment: void onItemClick(int,long)> (3)
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getGroupUriFromId(long)> (3)
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void setCursor(android.database.Cursor)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void requestSelectionToScreen()> (1)
<com.android.vcard.VCardEntry$NameData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void addMembersToGroup(android.content.ContentResolver,long[],long)> (2)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForEmail(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForEmail(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$10: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$2700(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.contacts.common.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void doSaveAction()> (1)
<com.android.contacts.common.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (5)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (3)
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: int getEstimate(java.lang.String)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void getAutomaticLookback()> (1)
<com.android.contacts.detail.ContactLoaderFragment: android.net.Uri getPreAuthorizedUri(android.net.Uri)> (1)
<com.android.contacts.detail.ContactLoaderFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<com.android.contacts.model.RawContactDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.vcard.VCardEntry$SipData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean update(java.util.Collection,java.util.Collection,java.lang.String)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithRfc822Address(java.util.Collection)> (1)
<com.android.mail.providers.UIProvider: void incrementRecipientsTimesContacted(android.content.Context,java.lang.String)> ()
<com.android.mms.data.WorkingMessage: void updateSendStats(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void access$800(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.vcard.VCardEntry$NicknameData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$OrganizationData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<com.android.contacts.GroupMetaDataLoader: android.net.Uri ensureIsGroupUri(android.net.Uri)> (1)
<com.android.contacts.GroupMetaDataLoader: void <init>(android.content.Context,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment$5: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$2: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.vcard.VCardEntry$AndroidCustomData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.debug.DataExporter: android.net.Uri exportData(android.content.Context)> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: android.net.Uri doInBackground(java.lang.Void[])> (1)
<com.android.providers.contacts.debug.ContactsDumpActivity$DumpDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.vcard.VCardEntry$WebsiteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$BirthdayData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.ContactsAsyncHelper$OnImageLoadCompleteListener: void onImageLoadComplete(int,android.graphics.drawable.Drawable,android.graphics.Bitmap,java.lang.Object)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.vcard.VCardEntry$PostalData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (7)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.MessageListItem: void updateAvatarView(java.lang.String,boolean)> (2)
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(boolean)> (2)
<com.android.mms.ui.MessageListItem: void bindNotifInd()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.MessageListItem: void access$500(com.android.mms.ui.MessageListItem,boolean)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageItem,boolean,int)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.mms.ui.MessageListItem$2: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageItem$PduLoadedCallback: void onPduLoaded(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageItem$PduLoadedMessageItemCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.util.ItemLoadedCallback: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (5)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(com.android.mms.util.ThumbnailManager$ImageLoaded,java.lang.Throwable)> (1)
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.PduLoaderManager$PduTask$1: void run()> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.util.ThumbnailManager$ThumbnailTask$1: void run()> (1)
<com.android.mms.ui.MmsThumbnailPresenter$1: void onItemLoaded(java.lang.Object,java.lang.Throwable)> (1)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.data.WorkingMessage: int setAttachment(int,android.net.Uri,boolean)> (4)
<com.android.mms.ui.MmsThumbnailPresenter: void presentImageThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.ImageModel)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$31: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAudio(android.net.Uri)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addImage(android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void addVideo(android.net.Uri,boolean)> (3)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAudio(android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addImage(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(java.lang.String,android.net.Uri,boolean)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addVideo(android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void present(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$33: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5700(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void addAttachment(java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity$34: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5800(com.android.mms.ui.ComposeMessageActivity,android.net.Uri,boolean)> (1)
<com.android.mms.ui.Presenter: void present(com.android.mms.util.ItemLoadedCallback)> (3)
<com.android.mms.ui.ComposeMessageActivity$35: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$36: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$5900(com.android.mms.ui.ComposeMessageActivity,java.lang.String,android.net.Uri,boolean)> (1)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel(boolean)> (6)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void drawTopPanel(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (3)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (3)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivity$21: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$41: void run()> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$4600(com.android.mms.ui.ComposeMessageActivity,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void initialize(android.os.Bundle,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (3)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void access$800(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.vcard.VCardEntry$NoteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.providers.contacts.ContactsProvider2$PipeMonitor: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<com.android.contacts.GroupMemberLoader: android.net.Uri createUri()> (1)
<com.android.contacts.GroupMemberLoader: void <init>(android.content.Context,long,java.lang.String[])> (2)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupDetailQuery(android.content.Context,long)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupEditorQuery(android.content.Context,long)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupDetailFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.group.GroupEditorFragment$3: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (2)
<com.android.dialer.list.PhoneFavoriteFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.common.model.ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(android.content.Context,com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment: void access$300(com.android.contacts.editor.ContactEditorFragment,android.content.Context,com.android.contacts.editor.RawContactEditorView)> (1)
<com.android.contacts.editor.ContactEditorFragment$2: void onRequest(int)> (1)
Permission:android.permission.SET_WALLPAPER_HINTS
12 Callers:
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)> ()
<android.app.IWallpaperManager$Stub: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IWallpaperManager: void setDimensionHints(int,int)> (1)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)> (1)
<com.android.launcher2.Workspace$2: void run()> (2)
<com.android.launcher2.Workspace: void setWallpaperDimension()> (1)
<com.android.launcher2.Workspace: void setup(com.android.launcher2.DragController)> (1)
<com.android.launcher2.Launcher: void setupViews()> (1)
<com.android.launcher2.Launcher: void onCreate(android.os.Bundle)> (1)
Permission:android.permission.FLASHLIGHT
6 Callers:
<com.android.server.LightsService$1: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub$Proxy: void setFlashlightEnabled(boolean)> ()
<android.os.IHardwareService$Stub: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IHardwareService: void setFlashlightEnabled(boolean)> ()
<com.android.server.LightsService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
7 Callers:
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.READ_CALL_LOG
87 Callers:
<com.android.voicedialer.VoiceContact: java.lang.String redialNumber(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.RecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> (1)
<com.android.bluetooth.hfp.AtPhonebook: com.android.bluetooth.hfp.AtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (3)
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> (2)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbsCommand(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void handleAccessPermissionResult(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbs(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void fetchCalls(int,int,boolean,int)> (1)
<com.android.dialer.calllog.CallLogQueryHandler: void fetchCalls(int)> (3)
<com.android.dialer.calllog.CallLogFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.dialer.calllog.CallLogFragment: void fetchCalls()> (1)
<com.android.dialer.calllog.CallLogFragment: void startCallsQuery()> (1)
<com.android.dialer.calllog.CallLogAdapter$CallFetcher: void fetchCalls()> (1)
<com.android.dialer.calllog.CallLogFragment: void refreshData()> (2)
<com.android.dialer.calllog.CallLogAdapter: void onContentChanged()> (1)
<com.android.dialer.calllog.CallLogFragment: void onResume()> (1)
<com.android.dialer.calllog.CallLogFragment: void setMenuVisibility(boolean)> (1)
<com.android.common.widget.GroupingListAdapter: void onContentChanged()> (1)
<com.android.common.widget.GroupingListAdapter$1: void onChange(boolean)> (1)
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processDialCall(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5200(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> (1)
<com.android.phone.common.CallLogAsync$GetLastOutgoingCallTask: java.lang.String doInBackground(com.android.phone.common.CallLogAsync$GetLastOutgoingCallArgs[])> (1)
<com.android.phone.common.CallLogAsync$GetLastOutgoingCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$DefaultNewCallsQuery: com.android.dialer.calllog.DefaultVoicemailNotifier$NewCall[] query()> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier$NewCallsQuery: com.android.dialer.calllog.DefaultVoicemailNotifier$NewCall[] query()> (1)
<com.android.dialer.calllog.DefaultVoicemailNotifier: void updateNotification(android.net.Uri)> (2)
<com.android.dialer.calllog.CallLogNotificationsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.dialer.calllog.VoicemailNotifier: void updateNotification(android.net.Uri)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.NotificationMgr: com.android.phone.NotificationMgr init(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
Permission:android.permission.BLUETOOTH
2027 Callers:
<com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> ()
<android.bluetooth.IBluetoothManager$Stub: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothManager: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (1)
<com.android.server.BluetoothManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: void finalize()> ()
<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> ()
<android.bluetooth.IBluetoothManager$Stub: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (6)
<android.bluetooth.BluetoothA2dp: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothHeadset: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothHealth: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothInputDevice: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothPan: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothPbap: void <init>(android.content.Context,android.bluetooth.BluetoothPbap$ServiceListener)> (1)
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> (11)
<com.android.settings.bluetooth.PbapServerProfile: void <init>(android.content.Context)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService: boolean getBluetoothHeadset()> (2)
<com.android.phone.BluetoothPhoneService: void onCreate()> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneGlobals,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.CallLogger)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.server.am.BatteryStatsService: void noteBluetoothOn()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> (3)
<com.android.settings.bluetooth.PanProfile: void <init>(android.content.Context)> (1)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.voicedialer.VoiceDialerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void <init>(android.content.Context,com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.CachedBluetoothDeviceManager,com.android.settings.bluetooth.BluetoothEventManager)> (1)
<android.net.NetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<android.media.AudioService: boolean access$2800(android.media.AudioService)> (2)
<android.media.AudioService: void disconnectBluetoothSco(int)> (2)
<com.android.phone.CallNotifier: com.android.phone.CallNotifier init(com.android.phone.PhoneGlobals,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.CallLogger)> (1)
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBluetoothOn()> ()
<com.android.internal.app.IBatteryStats$Stub: void noteBluetoothOn()> (2)
<com.android.settings.bluetooth.A2dpProfile: void <init>(android.content.Context,com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.CachedBluetoothDeviceManager,com.android.settings.bluetooth.LocalBluetoothProfileManager)> (1)
<com.android.settings.bluetooth.HeadsetProfile: void <init>(android.content.Context,com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.CachedBluetoothDeviceManager,com.android.settings.bluetooth.LocalBluetoothProfileManager)> (1)
<com.android.settings.bluetooth.HidProfile: void <init>(android.content.Context,com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.CachedBluetoothDeviceManager,com.android.settings.bluetooth.LocalBluetoothProfileManager)> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (38)
<com.android.settings.bluetooth.LocalBluetoothManager: void <init>(com.android.settings.bluetooth.LocalBluetoothAdapter,android.content.Context)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<android.media.AudioService$ScoClient: void requestScoState(int,int)> (3)
<android.media.AudioService: void access$1300(android.media.AudioService,int)> (1)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (2)
<com.android.phone.PhoneGlobals: void onCreate()> (1)
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.IBatteryStats: void noteBluetoothOn()> ()
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void updateLocalProfiles(android.os.ParcelUuid[])> (2)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate(android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate(android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.NotificationStation: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.LocalBluetoothManager: com.android.settings.bluetooth.LocalBluetoothManager getInstance(android.content.Context)> (15)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount(int)> (1)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.am.BatteryStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void setBluetoothStateOn()> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothEnabler: void <init>(android.content.Context,android.widget.Switch)> (2)
<com.android.settings.bluetooth.BluetoothNameDialogFragment: void <init>()> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void savePhonebookPermissionChoice(int)> (2)
<com.android.settings.bluetooth.BluetoothPermissionRequest: boolean checkUserChoice()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void updateContent(int,boolean)> (3)
<com.android.settings.bluetooth.BluetoothVisibilityTimeoutFragment: void <init>()> (3)
<com.android.settings.bluetooth.DockService: void onCreate()> (1)
<com.android.settings.bluetooth.LocalBluetoothPreferences: boolean shouldShowDialogInForeground(android.content.Context,java.lang.String)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: boolean parseIntent()> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: boolean parseIntent()> (1)
<com.android.settings.bluetooth.Utils: void showError(android.content.Context,java.lang.String,int)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients(int,boolean)> (3)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothStateInt(int)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void addPreferencesForActivity()> (1)
<com.android.settings.Settings$HeaderAdapter: void <init>(android.content.Context,java.util.List,com.android.settings.accounts.AuthenticatorHelper)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (25)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onNegative()> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onPositive()> (1)
<com.android.settings.bluetooth.BluetoothPermissionRequest: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDeviceBondStateChanged(com.android.settings.bluetooth.CachedBluetoothDevice,int)> ()
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothPairingRequest: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void showUnbondMessage(android.content.Context,java.lang.String,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$PairingCancelHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.Utils: void showConnectingError(android.content.Context,java.lang.String)> ()
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<android.media.AudioService: void resetBluetoothSco()> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setMode(int)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$AdapterStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean syncBluetoothState()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void addPreferencesForActivity()> (1)
<com.android.settings.Settings: void setListAdapter(android.widget.ListAdapter)> (45)
<com.android.settings.SettingsPreferenceFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (8)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (5)
<com.android.musicfx.ControlPanelPicker: void onCreate(android.os.Bundle)> (2)
<com.android.providers.media.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AllowBindAppWidgetActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.shell.BugreportWarningActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbDebuggingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.vpndialogs.ConfirmDialog: void onCreate(android.os.Bundle)> (2)
<com.android.vpndialogs.ManageDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onBluetoothStateChanged(int)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (5)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (31)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<android.media.AudioService: void access$6700(android.media.AudioService)> (2)
<com.android.internal.telephony.CallManager: void acceptCall(com.android.internal.telephony.Call)> (1)
<com.android.internal.telephony.CallManager: void setAudioMode()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: int getBluetoothState()> (12)
<com.android.settings.bluetooth.BluetoothEnabler: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$AccountSyncSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$ApplicationSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$AppOpsSummaryActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$BluetoothSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$DataUsageSummaryActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$DateTimeSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$DevelopmentSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$DisplaySettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$DreamSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$LocalePickerActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$LocationSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$ManageApplicationsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$NotificationAccessSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$NotificationStationActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$PowerUsageSummaryActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$PrivacySettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$RunningServicesActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$SecuritySettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$SoundSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$StorageSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$StorageUseActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$TetherSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$UserDictionarySettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$UserSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$VpnSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$WifiDisplaySettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$WifiP2pSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$WifiSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.Settings$WirelessSettingsActivity: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.SubSettings: void setListAdapter(android.widget.ListAdapter)> (2)
<com.android.settings.deviceinfo.Memory: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.users.UserSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.vpn2.VpnSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wfd.WifiDisplaySettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothCallback: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DeviceInfoSettings: void onResume()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DreamSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume()> (3)
<com.android.settings.LocationSettings: void onResume()> (3)
<com.android.settings.NotificationStation: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onResume()> (3)
<com.android.settings.users.UserSettings: void onResume()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (3)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (7)
<com.android.phone.PhoneUtils: void setAudioMode(com.android.internal.telephony.CallManager)> (5)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.bluetooth.BluetoothEnabler: void setSwitch(android.widget.Switch)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onProfileStateChanged(com.android.settings.bluetooth.LocalBluetoothProfile,int)> (4)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (4)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.accounts.SyncSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.phone.BluetoothPhoneService$3: boolean answerCall()> (2)
<com.android.phone.BluetoothPhoneService$3: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: void internalAnswerCall()> (2)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (4)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.PhoneUtils: void setAudioMode()> (4)
<com.android.phone.PhoneUtils: void switchHoldingAndActive(com.android.internal.telephony.Call)> (7)
<com.android.settings.Settings$HeaderAdapter: void resume()> (1)
<com.android.settings.Settings$HeaderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.settings.SettingsPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (39)
<com.android.settings.bluetooth.A2dpProfile$A2dpServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.settings.bluetooth.HeadsetProfile$HeadsetServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.settings.bluetooth.HidProfile$InputDeviceServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$StateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothCallback: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void addCachedDevices()> (2)
<com.android.settings.bluetooth.DevicePickerFragment: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean answerCall()> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> ()
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean processChld(int)> (2)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (2)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneGlobals$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (4)
<com.android.phone.Ringer: void stopRing()> (3)
<com.android.phone.InCallScreen: void internalResolveIntent(android.content.Intent)> (2)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (1)
<com.android.phone.PhoneUtils: void mergeCalls(com.android.internal.telephony.CallManager)> (3)
<com.android.phone.PhoneUtils: void sendEmptyFlash(com.android.internal.telephony.Phone)> (1)
<com.android.settings.Settings: void onResume()> (46)
<com.android.settings.AccessibilitySettings$ToggleFeaturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (6)
<com.android.settings.AccessibilitySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (5)
<com.android.settings.accounts.SyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.ApplicationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DateTimeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DeviceInfoSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.DreamSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.LocationSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.NotificationStation: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.PrivacySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SecuritySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.SoundSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.TetherSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.users.UserSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.wifi.WifiSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.WirelessSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$PanStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager: void dispatchDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothSettings: void addCachedDevices()> (2)
<com.android.settings.bluetooth.DevicePickerFragment: void addCachedDevices()> (2)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (4)
<android.bluetooth.IBluetoothHeadsetPhone: boolean answerCall()> (2)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadsetPhone: boolean processChld(int)> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal(android.content.Intent)> (1)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall()> (2)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (4)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.PhoneUtils: void mergeCalls()> (1)
<com.android.phone.OutgoingCallBroadcaster: void processIntent(android.content.Intent)> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onResume()> (4)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$ApplicationSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$AppOpsSummaryActivity: void onResume()> (4)
<com.android.settings.Settings$BluetoothSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DataUsageSummaryActivity: void onResume()> (4)
<com.android.settings.Settings$DateTimeSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DisplaySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$DreamSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onResume()> (4)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onResume()> (4)
<com.android.settings.Settings$LocalePickerActivity: void onResume()> (4)
<com.android.settings.Settings$LocationSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$ManageApplicationsActivity: void onResume()> (4)
<com.android.settings.Settings$NotificationAccessSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$NotificationStationActivity: void onResume()> (4)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onResume()> (4)
<com.android.settings.Settings$PrivacySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$RunningServicesActivity: void onResume()> (4)
<com.android.settings.Settings$SecuritySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$SoundSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$StorageSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$StorageUseActivity: void onResume()> (4)
<com.android.settings.Settings$TetherSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$UserSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$VpnSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WifiDisplaySettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WifiSettingsActivity: void onResume()> (4)
<com.android.settings.Settings$WirelessSettingsActivity: void onResume()> (4)
<com.android.settings.SubSettings: void onResume()> (4)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleGlobalGesturePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.AccessibilitySettings$ToggleScreenMagnificationPreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.AccountSyncSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (4)
<com.android.settings.bluetooth.BluetoothEventManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.BluetoothEventManager: void access$1400(com.android.settings.bluetooth.BluetoothEventManager,com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void addDeviceCategory(android.preference.PreferenceGroup,int,com.android.settings.bluetooth.BluetoothDeviceFilter$Filter)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAnswerCall()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.phone.BluetoothPhoneService$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtChld(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.phone.CallController: void placeCall(android.content.Intent)> (3)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout()> (3)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)> (2)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void internalSilenceRinger()> (2)
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$DeviceFoundHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4900(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5500(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence(java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer()> (2)
<com.android.phone.InCallScreen: void internalRespondViaSms()> (1)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal(android.os.Message)> (2)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)> (2)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> ()
<android.bluetooth.IBluetoothManager$Stub: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (6)
<android.bluetooth.BluetoothA2dp: void close()> (2)
<android.bluetooth.BluetoothHeadset: void close()> (1)
<android.bluetooth.BluetoothHealth: void close()> (1)
<android.bluetooth.BluetoothInputDevice: void close()> (1)
<android.bluetooth.BluetoothPan: void close()> (2)
<android.bluetooth.BluetoothPbap: void close()> (2)
<android.bluetooth.BluetoothA2dp: void finalize()> ()
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)> (6)
<android.bluetooth.BluetoothPan: void finalize()> ()
<android.bluetooth.BluetoothPbap: void finalize()> ()
<com.android.settings.bluetooth.PbapServerProfile: void finalize()> ()
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.settings.bluetooth.A2dpProfile: void finalize()> ()
<com.android.settings.bluetooth.HeadsetProfile: void finalize()> ()
<com.android.settings.bluetooth.HidProfile: void finalize()> ()
<com.android.settings.bluetooth.PanProfile: void finalize()> ()
<com.android.voicedialer.VoiceDialerActivity: void onDestroy()> (1)
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> ()
<android.bluetooth.IBluetoothManager$Stub: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetoothManager: java.lang.String getAddress()> (1)
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> (2)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)> (8)
<com.android.settings.deviceinfo.Status: void setBtStatus()> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocket(int)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocket(int)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createScoSocket()> ()
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,android.os.ParcelUuid)> (1)
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,int)> (4)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,java.lang.String,int)> ()
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransfer$SocketConnectThread: void run()> (3)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket createNewRfcommSocketAndRecord(java.lang.String,java.util.UUID,boolean,boolean)> (3)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommOn(int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommOn(int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommOn(int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingScoOn()> ()
<com.android.bluetooth.opp.BluetoothOppTransfer: void startConnectSession()> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> ()
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: boolean initSocket()> (1)
<com.android.bluetooth.opp.BluetoothOppRfcommListener$1: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: boolean access$200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.server.BluetoothManagerService: java.lang.String getName()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> ()
<android.bluetooth.IBluetoothManager$Stub: java.lang.String getName()> (2)
<android.bluetooth.IBluetoothManager: java.lang.String getName()> (1)
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: java.lang.String getName()> (4)
<com.android.settings.bluetooth.BluetoothNameDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.settings.bluetooth.BluetoothNameDialogFragment: void updateDeviceName()> (1)
<com.android.settings.bluetooth.BluetoothSettings$1: void updateDeviceName()> (1)
<com.android.settings.bluetooth.BluetoothNameDialogFragment$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: int getState()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetoothPbap$Stub: int getState()> (2)
<android.bluetooth.IBluetoothPbap: int getState()> (1)
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPbap: int getState()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> ()
<android.bluetooth.IBluetoothPbap$Stub: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap: android.bluetooth.BluetoothDevice getClient()> (1)
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.PbapServerProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: int getProfileConnectionState(com.android.settings.bluetooth.LocalBluetoothProfile)> (4)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile,android.preference.CheckBoxPreference)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: int getConnectionSummary()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isBusy()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isConnectedProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isConnected()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onDeviceAttributesChanged()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.preference.CheckBoxPreference createProfilePreference(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refreshProfilePreference(android.preference.CheckBoxPreference,com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: int compareTo(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.DockService: boolean hasOtherConnectedDevices(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void <init>(android.content.Context,com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void addPreferencesForProfiles()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refreshProfiles()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: int compareTo(android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: int compareTo(java.lang.Object)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refresh()> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: int compareTo(java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onDeviceAttributesChanged()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(android.content.Context,com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.LocalBluetoothProfileManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$DockEventHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean onDeviceDisappeared(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: com.android.settings.bluetooth.CachedBluetoothDevice addDevice(com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.LocalBluetoothProfileManager,android.bluetooth.BluetoothDevice)> (9)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$ClassChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$NameChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$DeviceDisappearedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$ScanningStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (2)
<android.bluetooth.IBluetoothHealth: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (1)
<android.bluetooth.IBluetoothHealth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothHealth: boolean registerAppConfiguration(java.lang.String,int,int,int,android.bluetooth.BluetoothHealthCallback)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)> ()
<com.android.bluetooth.hdp.HealthService: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthDeathRecipient: void binderDied()> (1)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.BluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<com.android.bluetooth.hdp.HealthService: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHealth$Stub: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHealth: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()> ()
<android.bluetooth.IBluetoothHealth$Stub: java.util.List getConnectedHealthDevices()> (2)
<android.bluetooth.IBluetoothHealth: java.util.List getConnectedHealthDevices()> (1)
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()> (1)
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothHealth$Stub: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothHealth: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.btservice.AdapterService: void processConnectOtherProfiles(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.btservice.AdapterService: void access$200(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.btservice.AdapterService: void connectOtherProfile(android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.IBluetoothHeadset: java.util.List getConnectedDevices()> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void processProfileStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> (11)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.AdapterService: void access$100(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<android.media.AudioService$2: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.internal.os.BatteryStatsImpl: int getCurrentBluetoothPingCount()> (3)
<com.android.phone.InCallScreen: boolean isBluetoothAudioConnected()> (7)
<com.android.phone.InCallScreen: boolean isBluetoothAvailable()> (6)
<com.android.phone.InCallScreen: void dumpBluetoothState()> ()
<com.android.settings.bluetooth.HeadsetProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (2)
<com.android.voicedialer.VoiceDialerActivity$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.bluetooth.btservice.AdapterService: void onProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> (3)
<com.android.internal.os.BatteryStatsImpl: void doUnplugLocked(long,long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void setBtHeadset(android.bluetooth.BluetoothHeadset)> (2)
<com.android.phone.InCallScreen: boolean isBluetoothAudioConnectedOrPending()> (2)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void switchInCallAudio(com.android.phone.InCallScreen$InCallAudioMode)> (1)
<com.android.phone.InCallScreen: void toggleBluetooth()> ()
<com.android.phone.InCallScreen: void toggleSpeaker()> (1)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.InCallControlState: void update()> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.ProfileService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (6)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int,int)> (3)
<com.android.internal.os.BatteryStatsImpl: void doPlugLocked(long,long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcelLocked(android.os.Parcel,boolean,int)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void addBluetoothUsage(long)> (1)
<com.android.internal.os.BatteryStatsImpl: void setOnBatteryLocked(boolean,int,int)> (2)
<com.android.server.am.BatteryStatsService$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.phone.InCallTouchUi: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.phone.InCallTouchUi: void handleAudioButtonClick()> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallControlState getUpdatedInCallControlState()> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.gatt.GattService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hid.HidService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.pan.PanService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1900(com.android.bluetooth.pbap.BluetoothPbapService,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int)> (2)
<com.android.internal.os.BatteryStatsImpl: void writeToParcel(android.os.Parcel,int)> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcelWithoutUids(android.os.Parcel,int)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void processMiscUsage()> (1)
<com.android.internal.os.BatteryStatsImpl: void setBatteryState(int,int,int,int,int,int)> (1)
<com.android.internal.os.BatteryStatsImpl: void setOnBattery(boolean,int,int)> ()
<com.android.phone.InCallScreen: boolean checkOtaspStateOnResume()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallUiState$InCallScreenMode)> (12)
<com.android.phone.PhoneGlobals: void clearOtaState()> (3)
<com.android.phone.InCallTouchUi: void showAudioModePopup()> (2)
<com.android.phone.InCallTouchUi: void updateInCallControls(com.android.internal.telephony.CallManager)> (2)
<com.android.phone.PhoneGlobals: void updateProximitySensorMode(com.android.internal.telephony.PhoneConstants$State)> (8)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$IntentBroadcastHandler: void onConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: void updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hid.HidService: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService$2: void disconnect()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void refreshStats()> (3)
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)> (2)
<com.android.phone.InCallScreen: void endInCallScreenSession(boolean)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: boolean ignoreAllIncomingCalls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void initForNewRadioTechnology()> (1)
<com.android.phone.InCallTouchUi: void refreshAudioModePopup()> (1)
<com.android.phone.InCallTouchUi: void access$300(com.android.phone.InCallTouchUi,com.android.internal.telephony.CallManager)> (1)
<com.android.phone.InCallTouchUi: void updateState(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.InCallScreen: void onOpenCloseDialpad()> (1)
<com.android.phone.PhoneGlobals: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.phone.PhoneGlobals: void orientationChanged(int)> (1)
<com.android.phone.PhoneGlobals: void setBeginningCall(boolean)> (2)
<com.android.phone.PhoneGlobals: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.PhoneGlobals: void updatePhoneState(com.android.internal.telephony.PhoneConstants$State)> (1)
<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)> (10)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.bluetooth.a2dp.A2dpStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void broadcastHealthDeviceStateChange(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$1000(com.android.bluetooth.hfp.HeadsetStateMachine,android.bluetooth.BluetoothDevice,int,int)> (7)
<com.android.bluetooth.hid.HidService: void access$100(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice,int)> (4)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void disconnect()> ()
<android.bluetooth.IBluetoothPbap$Stub: void disconnect()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void access$100(com.android.settings.fuelgauge.PowerUsageSummary)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void onResume()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: void setBatteryState(int,int,int,int,int,int)> ()
<com.android.internal.app.IBatteryStats$Stub: void setBatteryState(int,int,int,int,int,int)> (2)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (8)
<com.android.phone.PhoneGlobals: void dismissCallScreen()> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneGlobals: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (6)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneGlobals: void access$1100(com.android.phone.PhoneGlobals)> (1)
<com.android.phone.InCallTouchUi$2: void onAnimationStart(android.animation.Animator)> (1)
<com.android.phone.InCallScreen: void updateInCallTouchUi()> (7)
<com.android.phone.PhoneApp: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.phone.AccelerometerListener$OrientationListener: void orientationChanged(int)> (2)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.PhoneUtils: boolean activateSpeakerIfDocked(com.android.internal.telephony.Phone)> (2)
<com.android.phone.PhoneUtils: void restoreSpeakerMode(android.content.Context)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void access$1100(com.android.bluetooth.a2dp.A2dpStateMachine,android.bluetooth.BluetoothDevice,int,int)> (6)
<com.android.bluetooth.hdp.HealthService: void callHealthChannelCallback(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: void onConnectStateChanged(byte[],int)> ()
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<android.bluetooth.IBluetoothPbap: void disconnect()> (1)
<com.android.internal.app.IBatteryStats: byte[] getStatistics()> (1)
<com.android.settings.fuelgauge.PowerUsageSummary$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.app.IBatteryStats: void setBatteryState(int,int,int,int,int,int)> (1)
<com.android.phone.InCallScreen: void access$2300(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onMMIComplete(com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.RespondViaSmsManager$RespondViaSmsCancelListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.RespondViaSmsManager: void onPostMessageSent()> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$600(com.android.phone.InCallScreen)> (9)
<com.android.phone.InCallScreen: void onDialerClose(boolean)> (1)
<com.android.phone.InCallScreen: void onDialerOpen(boolean)> (1)
<com.android.phone.AccelerometerListener: void setOrientation(int)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: void access$1700(com.android.bluetooth.hdp.HealthService,android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (3)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (7)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothPbap: boolean disconnect()> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void load()> (1)
<com.android.server.BatteryService: void processValuesLocked()> (2)
<com.android.phone.InCallScreen$11: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1300(com.android.phone.InCallScreen)> (5)
<com.android.phone.InCallScreen: void access$1200(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$800(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen,com.android.internal.telephony.MmiCode)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.RespondViaSmsManager: void access$300(com.android.phone.RespondViaSmsManager)> (1)
<com.android.phone.RespondViaSmsManager: void sendTextAndExit(java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (2)
<com.android.phone.RespondViaSmsManager: void sendTextToDefaultActivity(java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen: void showPausePromptDialog(com.android.internal.telephony.Connection,java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestUpdateScreen()> (9)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void requestCloseSpcErrorNotice(long)> (1)
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose(boolean)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen(boolean)> (1)
<com.android.phone.AccelerometerListener: void onSensorEvent(double,double,double)> (1)
<com.android.bluetooth.hdp.HealthService: boolean connectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<com.android.settings.bluetooth.PbapServerProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.server.BatteryService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.BatteryService: void updateLocked()> (3)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (6)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.phone.RespondViaSmsManager: void access$700(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String,android.content.ComponentName,boolean)> (1)
<com.android.phone.RespondViaSmsManager: void access$400(com.android.phone.RespondViaSmsManager,java.lang.String,java.lang.String)> (1)
<com.android.phone.InCallScreen: void handlePostOnDialChars(android.os.AsyncResult,char)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.PhoneGlobals: void updateInCallScreen()> (7)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.CallCard: void updateCallStateWidgets(com.android.internal.telephony.Call)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (7)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (1)
<com.android.phone.AccelerometerListener: void access$000(com.android.phone.AccelerometerListener,double,double,double)> (1)
<android.bluetooth.IBluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothInputDevice$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<com.android.server.BatteryService: void access$200(com.android.server.BatteryService)> (2)
<com.android.server.BatteryService: void <init>(android.content.Context,com.android.server.LightsService)> (1)
<com.android.phone.RespondViaSmsManager$PackageClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen: void access$1000(com.android.phone.InCallScreen,android.os.AsyncResult,char)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallHelper: void cleanup()> (4)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (1)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void closeDialpadInternal(boolean)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.InCallScreen: void openDialpadInternal(boolean)> (2)
<com.android.phone.AccelerometerListener$1: void onSensorChanged(android.hardware.SensorEvent)> (1)
<android.bluetooth.BluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (3)
<com.android.server.BatteryService$8: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.BatteryService$9: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.PhoneGlobals: void handleOtaspEvent(android.os.Message)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.settings.bluetooth.HidProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.TetherSettings: void startTethering()> (2)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (10)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (3)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.TetherSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void startProvisioningIfNecessary(int)> (2)
<com.android.phone.InCallScreen: void updateIncomingCallWidgetHint(int,int)> (2)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleCaptivePortalTrackerCheck(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$400(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (9)
<com.android.settings.TetherSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$1200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$1500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.AppRestrictionsFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.users.UserSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.server.ConnectivityService: void access$2400(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (4)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (8)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (8)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void renewMmsConnectivity()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (7)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (5)
<com.android.mms.transaction.TransactionService$ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)> (2)
<com.android.mms.transaction.TransactionService: void access$200(com.android.mms.transaction.TransactionService)> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.State: void exit()> (101)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void access$3600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: void enter()> (29)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.bluetooth.hfp.HeadsetService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hfp.HeadsetService: java.util.List access$200(com.android.bluetooth.hfp.HeadsetService,int[])> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.settings.bluetooth.HeadsetProfile: java.util.List getConnectedDevices()> ()
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> (4)
<com.android.bluetooth.hfp.HeadsetService: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.voicedialer.VoiceDialerActivity: void updateBluetoothParameters(boolean)> (1)
<com.android.voicedialer.VoiceDialerActivity: void access$2200(com.android.voicedialer.VoiceDialerActivity,boolean)> (2)
<com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (3)
<com.android.bluetooth.hfp.HeadsetService: boolean isAudioOn()> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioOn()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean isAudioOn()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean isAudioOn()> (2)
<android.bluetooth.IBluetoothHeadset: boolean isAudioOn()> (1)
<android.bluetooth.BluetoothHeadset: boolean isAudioOn()> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hfp.HeadsetService: boolean connectAudio()> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connectAudio()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectAudio()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectAudio()> (2)
<android.bluetooth.IBluetoothHeadset: boolean connectAudio()> (1)
<android.bluetooth.BluetoothHeadset: boolean connectAudio()> (3)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (2)
<com.android.bluetooth.hfp.HeadsetService: boolean disconnectAudio()> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnectAudio()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnectAudio()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectAudio()> (2)
<android.bluetooth.IBluetoothHeadset: boolean disconnectAudio()> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectAudio()> (4)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (4)
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothA2dp$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothA2dp: java.util.List getConnectedDevices()> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> (4)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean isA2dpPlaying()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void startScanning(boolean)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void startScanning()> (2)
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothA2dp$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.settings.bluetooth.A2dpProfile: java.util.List getConnectedDevices()> (1)
<com.android.settings.bluetooth.A2dpProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.A2dpProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.A2dpProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (3)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothInputDevice$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothInputDevice$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothInputDevice: java.util.List getConnectedDevices()> (1)
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()> (3)
<com.android.settings.bluetooth.HidProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.HidProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.gatt.GattService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothGatt$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothGatt: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothGatt$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)> (1)
<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,int[])> ()
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.gatt.GattService: void stopScan(int,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void stopScan(int,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void stopScan(int,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void stopScan(int,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void stopScan(int,boolean)> (1)
<android.bluetooth.BluetoothAdapter$GattCallbackWrapper: void stopLeScan()> (1)
<android.bluetooth.BluetoothAdapter: void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)> ()
<com.android.bluetooth.gatt.GattService: void registerClient(java.util.UUID,android.bluetooth.IBluetoothGattCallback)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> ()
<android.bluetooth.IBluetoothGatt$Stub: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> (2)
<android.bluetooth.IBluetoothGatt: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> (2)
<android.bluetooth.BluetoothAdapter: boolean startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)> (1)
<android.bluetooth.BluetoothGatt: boolean registerApp(android.bluetooth.BluetoothGattCallback)> (1)
<android.bluetooth.BluetoothAdapter: boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)> ()
<android.bluetooth.BluetoothGatt: boolean connect(java.lang.Boolean,android.bluetooth.BluetoothGattCallback)> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)> ()
<com.android.bluetooth.gatt.GattService: void unregisterClient(int)> (2)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterClient(int)> (2)
<com.android.bluetooth.gatt.GattService$ClientDeathRecipient: void binderDied()> (1)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void unregisterClient(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void unregisterClient(int)> (2)
<android.bluetooth.IBluetoothGatt: void unregisterClient(int)> (3)
<android.bluetooth.BluetoothAdapter$GattCallbackWrapper: void onClientRegistered(int,int)> (2)
<android.bluetooth.BluetoothGatt: void unregisterApp()> (1)
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onClientRegistered(int,int)> ()
<android.bluetooth.BluetoothGatt: void close()> (1)
<com.android.bluetooth.gatt.GattService: void clientConnect(int,java.lang.String,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void clientConnect(int,java.lang.String,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void clientConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void clientConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.BluetoothGatt$1: void onClientRegistered(int,int)> (2)
<android.bluetooth.BluetoothGatt: boolean connect()> ()
<com.android.bluetooth.gatt.GattService: void clientDisconnect(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void clientDisconnect(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void clientDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void clientDisconnect(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: void disconnect()> ()
<com.android.bluetooth.gatt.GattService: java.util.List getConnectedDevices()> ()
<com.android.bluetooth.gatt.GattService: void refreshDevice(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void refreshDevice(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void refreshDevice(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void refreshDevice(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void refreshDevice(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean refresh()> ()
<com.android.bluetooth.gatt.GattService: void discoverServices(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void discoverServices(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void discoverServices(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void discoverServices(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void discoverServices(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean discoverServices()> ()
<com.android.bluetooth.gatt.GattService: void readCharacteristic(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.BluetoothGatt$1: void onCharacteristicRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,byte[])> (2)
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onCharacteristicRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,byte[])> ()
<com.android.bluetooth.gatt.GattService: void writeCharacteristic(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int,int,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.BluetoothGatt$1: void onCharacteristicWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid)> (2)
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onCharacteristicWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid)> ()
<com.android.bluetooth.gatt.GattService: void readDescriptor(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,java.util.UUID,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int)> (2)
<android.bluetooth.BluetoothGatt$1: void onDescriptorRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,byte[])> (2)
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onDescriptorRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,byte[])> ()
<com.android.bluetooth.gatt.GattService: void writeDescriptor(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,java.util.UUID,int,int,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int,int,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.BluetoothGatt$1: void onDescriptorWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid)> (2)
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onDescriptorWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid)> ()
<com.android.bluetooth.gatt.GattService: void beginReliableWrite(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginReliableWrite(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void beginReliableWrite(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void beginReliableWrite(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void beginReliableWrite(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean beginReliableWrite()> ()
<com.android.bluetooth.gatt.GattService: void endReliableWrite(int,java.lang.String,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endReliableWrite(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void endReliableWrite(int,java.lang.String,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void endReliableWrite(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void endReliableWrite(int,java.lang.String,boolean)> (2)
<android.bluetooth.BluetoothGatt: boolean executeReliableWrite()> ()
<android.bluetooth.BluetoothGatt: void abortReliableWrite(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.gatt.GattService: void registerForNotification(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> (1)
<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)> ()
<com.android.bluetooth.gatt.GattService: void readRemoteRssi(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readRemoteRssi(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void readRemoteRssi(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void readRemoteRssi(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void readRemoteRssi(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()> ()
<com.android.bluetooth.gatt.GattService: void registerServer(java.util.UUID,android.bluetooth.IBluetoothGattServerCallback)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> ()
<android.bluetooth.IBluetoothGatt$Stub: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> (2)
<android.bluetooth.IBluetoothGatt: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> (1)
<android.bluetooth.BluetoothGattServer: boolean registerCallback(android.bluetooth.BluetoothGattServerCallback)> (1)
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)> ()
<com.android.bluetooth.gatt.GattService: void unregisterServer(int)> (2)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterServer(int)> (2)
<com.android.bluetooth.gatt.GattService$ServerDeathRecipient: void binderDied()> (1)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void unregisterServer(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void unregisterServer(int)> (2)
<android.bluetooth.IBluetoothGatt: void unregisterServer(int)> (1)
<android.bluetooth.BluetoothGattServer: void unregisterCallback()> (1)
<android.bluetooth.BluetoothGattServer: void close()> (1)
<com.android.bluetooth.gatt.GattService: void serverConnect(int,java.lang.String,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void serverConnect(int,java.lang.String,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void serverConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void serverConnect(int,java.lang.String,boolean)> (1)
<android.bluetooth.BluetoothGattServer: boolean connect(android.bluetooth.BluetoothDevice,boolean)> ()
<com.android.bluetooth.gatt.GattService: void serverDisconnect(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void serverDisconnect(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void serverDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void serverDisconnect(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGattServer: void cancelConnection(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.gatt.GattService: void beginServiceDeclaration(int,int,int,int,java.util.UUID)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid)> ()
<android.bluetooth.IBluetoothGatt$Stub: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid)> (1)
<android.bluetooth.BluetoothGattServer: boolean addService(android.bluetooth.BluetoothGattService)> ()
<com.android.bluetooth.gatt.GattService: void addIncludedService(int,int,int,java.util.UUID)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addIncludedService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void addIncludedService(int,int,int,android.os.ParcelUuid)> ()
<android.bluetooth.IBluetoothGatt$Stub: void addIncludedService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt: void addIncludedService(int,int,int,android.os.ParcelUuid)> (1)
<com.android.bluetooth.gatt.GattService: void addCharacteristic(int,java.util.UUID,int,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addCharacteristic(int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void addCharacteristic(int,android.os.ParcelUuid,int,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void addCharacteristic(int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetoothGatt: void addCharacteristic(int,android.os.ParcelUuid,int,int)> (1)
<com.android.bluetooth.gatt.GattService: void addDescriptor(int,java.util.UUID,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addDescriptor(int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void addDescriptor(int,android.os.ParcelUuid,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void addDescriptor(int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt: void addDescriptor(int,android.os.ParcelUuid,int)> (1)
<com.android.bluetooth.gatt.GattService: void endServiceDeclaration(int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endServiceDeclaration(int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void endServiceDeclaration(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void endServiceDeclaration(int)> (2)
<android.bluetooth.IBluetoothGatt: void endServiceDeclaration(int)> (1)
<com.android.bluetooth.gatt.GattService: void removeService(int,int,int,java.util.UUID)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void removeService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void removeService(int,int,int,android.os.ParcelUuid)> ()
<android.bluetooth.IBluetoothGatt$Stub: void removeService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt: void removeService(int,int,int,android.os.ParcelUuid)> (1)
<android.bluetooth.BluetoothGattServer: boolean removeService(android.bluetooth.BluetoothGattService)> ()
<com.android.bluetooth.gatt.GattService: void clearServices(int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clearServices(int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void clearServices(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void clearServices(int)> (2)
<android.bluetooth.IBluetoothGatt: void clearServices(int)> (1)
<android.bluetooth.BluetoothGattServer: void clearServices()> ()
<com.android.bluetooth.gatt.GattService: void sendResponse(int,java.lang.String,int,int,int,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendResponse(int,java.lang.String,int,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void sendResponse(int,java.lang.String,int,int,int,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void sendResponse(int,java.lang.String,int,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void sendResponse(int,java.lang.String,int,int,int,byte[])> (1)
<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,byte[])> ()
<com.android.bluetooth.gatt.GattService: void sendNotification(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,boolean,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> (1)
<android.bluetooth.BluetoothGattServer: boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)> ()
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()> (3)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothPan$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothPan: java.util.List getConnectedDevices()> (1)
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> (4)
<com.android.settings.TetherSettings: void updateBluetoothState(java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<com.android.settings.TetherSettings: void updateState(java.lang.String[],java.lang.String[],java.lang.String[])> (2)
<com.android.settings.TetherSettings: void access$100(com.android.settings.TetherSettings,java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<com.android.settings.TetherSettings: void updateState()> (2)
<com.android.settings.TetherSettings: void access$300(com.android.settings.TetherSettings)> (1)
<com.android.settings.TetherSettings: void onStart()> (3)
<com.android.settings.SettingsPreferenceFragment: void onStart()> (4)
<com.android.settings.LocationSettings: void onStart()> (3)
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothPan$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.btservice.AdapterService: boolean isEnabled()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isEnabled()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isEnabled()> ()
<android.bluetooth.IBluetooth$Stub: boolean isEnabled()> (2)
<android.bluetooth.IBluetooth: boolean isEnabled()> (2)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean isEnabled()> (16)
<com.android.server.BluetoothManagerService: boolean isEnabled()> (2)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean enableNoAutoConnect()> ()
<android.bluetooth.BluetoothAdapter: boolean enable()> (5)
<com.android.bluetooth.opp.BluetoothOppManager: boolean isEnabled()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void startListener()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void updateNotificationWhenBtDisabled()> (3)
<com.android.bluetooth.pbap.BluetoothPbapReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean isEnabled()> (2)
<com.android.systemui.statusbar.phone.QuickSettings$17: boolean onLongClick(android.view.View)> (1)
<com.android.systemui.statusbar.phone.QuickSettingsModel: void addBluetoothTile(com.android.systemui.statusbar.phone.QuickSettingsTileView,com.android.systemui.statusbar.phone.QuickSettingsModel$RefreshCallback)> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean isEnabled()> ()
<android.bluetooth.IBluetoothManager$Stub: boolean isEnabled()> (2)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void launchDevicePicker()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearAllDownloads()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void addSystemTiles(android.view.ViewGroup,android.view.LayoutInflater)> (1)
<android.bluetooth.IBluetoothManager: boolean isEnabled()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void access$000(com.android.bluetooth.opp.BluetoothOppLauncherActivity)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void access$000(com.android.bluetooth.opp.BluetoothOppTransferHistory)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void setupQuickSettings()> (1)
<com.android.server.power.ShutdownThread$5: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity$1: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity$2: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity$3: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.systemui.statusbar.phone.QuickSettings: void setup(com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.policy.LocationController)> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.phone.SettingsPanelView: void setup(com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.policy.LocationController)> ()
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.statusbar.tv.TvStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.bluetooth.btservice.AdapterService: int getState()> (4)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()> (2)
<com.android.bluetooth.btservice.AdapterService: void autoConnect()> (1)
<com.android.bluetooth.btservice.AdapterService: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetooth$Stub: int getState()> (2)
<com.android.bluetooth.btservice.AdapterState$OnState: void enter()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<android.bluetooth.IBluetooth: int getState()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> ()
<android.bluetooth.IBluetooth$Stub: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (3)
<android.bluetooth.BluetoothAdapter: int getState()> (28)
<com.android.server.BluetoothManagerService: boolean canUnbindBluetoothService()> (1)
<com.android.server.BluetoothManagerService: boolean waitForOnOff(boolean,boolean)> (2)
<android.bluetooth.IBluetooth: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> ()
<android.bluetooth.BluetoothA2dp: boolean isEnabled()> (9)
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> (1)
<android.bluetooth.BluetoothAdapter: android.util.Pair readOutOfBandData()> ()
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> (2)
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> (3)
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> (1)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> (1)
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: int getConnectionState()> (3)
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> (1)
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> ()
<android.bluetooth.BluetoothAdapter: int getScanMode()> (1)
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> (5)
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> (1)
<android.bluetooth.BluetoothHeadset: boolean isDisabled()> (1)
<android.bluetooth.BluetoothHeadset: boolean isEnabled()> (20)
<android.bluetooth.BluetoothHealth: boolean isEnabled()> (10)
<android.bluetooth.BluetoothInputDevice: boolean isEnabled()> (13)
<android.bluetooth.BluetoothPan: boolean isEnabled()> (5)
<com.android.settings.bluetooth.LocalBluetoothAdapter: int getState()> (2)
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void <init>(android.content.Context)> (1)
<com.android.systemui.statusbar.policy.BluetoothController: void <init>(android.content.Context)> (2)
<com.android.server.BluetoothManagerService: void bluetoothStateChangeHandler(int,int)> (1)
<com.android.server.BluetoothManagerService: boolean access$1800(com.android.server.BluetoothManagerService,boolean,boolean)> (3)
<com.android.server.BluetoothManagerService: void recoverBluetoothServiceFromError()> (1)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean shouldSendVolumeKeys(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothAdapter: android.os.ParcelUuid[] getUuids()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void cancelDiscovery()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void stopScanning()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean isDiscovering()> (4)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean setScanMode(int,int)> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setScanMode(int)> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: int getScanMode()> (3)
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: java.util.Set getBondedDevices()> (2)
<com.android.systemui.statusbar.policy.BluetoothController: void updateBondedBluetoothDevices()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setDiscoverableTimeout(int)> ()
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.BluetoothHeadset: void clccResponse(int,int,int,int,boolean,java.lang.String,int)> (3)
<android.bluetooth.BluetoothHeadset: void phoneStateChanged(int,int,int,java.lang.String,int)> (2)
<android.bluetooth.BluetoothHeadset: void roamChanged(boolean)> (1)
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> ()
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> ()
<android.bluetooth.BluetoothInputDevice: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothDiscoverableTimeoutReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.server.BluetoothManagerService: void access$2800(com.android.server.BluetoothManagerService,int,int)> (3)
<com.android.server.BluetoothManagerService: void sendDisableMsg()> (2)
<com.android.server.BluetoothManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BluetoothManagerService: void access$2900(com.android.server.BluetoothManagerService)> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.A2dpProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean updateProfiles()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void removeAllDevices()> (3)
<com.android.settings.bluetooth.BluetoothNameDialogFragment: void setDeviceName(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void setEnabled(boolean)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void proceedAndFinish()> (4)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void resume()> (2)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void setNumberOfPairedDevices(int)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void updateCountdownSummary()> (3)
<com.android.systemui.statusbar.policy.BluetoothController: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService: void checkScoAudioState()> (2)
<com.android.settings.bluetooth.HeadsetProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.HeadsetProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothPhoneService: void handleListCurrentCalls()> (1)
<com.android.phone.BluetoothPhoneService: void sendClccResponseCdma(int,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothPhoneService: void sendClccResponseGsm(int,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothPhoneService: void handlePreciseCallStateChange(com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothPhoneService: void handleQueryPhoneState()> (1)
<com.android.phone.BluetoothPhoneService: void updateServiceState(android.telephony.ServiceState)> (2)
<com.android.settings.bluetooth.HidProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.HidProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.PanProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (3)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addStatusBarWindow()> (1)
<com.android.server.BluetoothManagerService$1: void onBluetoothStateChange(int,int)> (2)
<com.android.server.BluetoothManagerService: boolean disable(boolean)> (2)
<com.android.server.BluetoothManagerService: void access$600(com.android.server.BluetoothManagerService)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (4)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (5)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void removeAllDevices()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onPause()> (5)
<com.android.settings.bluetooth.DevicePickerFragment: void removeAllDevices()> (1)
<com.android.settings.bluetooth.BluetoothNameDialogFragment: void access$000(com.android.settings.bluetooth.BluetoothNameDialogFragment,java.lang.String)> (2)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void setDiscoverableTimeout(int)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void access$200(com.android.settings.bluetooth.RequestPermissionActivity)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onClick(android.content.DialogInterface,int)> (2)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void access$000(com.android.settings.bluetooth.BluetoothDiscoverableEnabler)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void handleModeChanged(int)> (3)
<android.media.AudioService: void access$2200(android.media.AudioService)> (2)
<com.android.phone.BluetoothPhoneService: void access$300(com.android.phone.BluetoothPhoneService)> (1)
<com.android.phone.BluetoothPhoneService: void listCurrentCallsCdma()> (1)
<com.android.phone.BluetoothPhoneService: void listCurrentCallsGsm()> (1)
<com.android.phone.BluetoothPhoneService: void access$200(com.android.phone.BluetoothPhoneService,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothPhoneService: void access$400(com.android.phone.BluetoothPhoneService)> (1)
<com.android.phone.BluetoothPhoneService: void access$100(com.android.phone.BluetoothPhoneService,android.telephony.ServiceState)> (1)
<com.android.settings.bluetooth.PanProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.PanProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onBluetoothStateChange(int,int)> ()
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetoothManager$Stub: boolean disable(boolean)> (2)
<com.android.settings.bluetooth.DockService: java.lang.CharSequence[] initBtSettings(android.bluetooth.BluetoothDevice,int,boolean)> (2)
<com.android.settings.bluetooth.BluetoothSettings: void onPause()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onPause()> (4)
<com.android.settings.SettingsPreferenceFragment: void onPause()> (23)
<com.android.settings.bluetooth.BluetoothNameDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothNameDialogFragment$3: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.settings.bluetooth.BluetoothVisibilityTimeoutFragment: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void createDialog()> (2)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler$2: void run()> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.IBluetoothManager: boolean disable(boolean)> (3)
<com.android.settings.bluetooth.DockService: void createDialog(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.AccessibilitySettings: void onPause()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onPause()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onPause()> (3)
<com.android.settings.DateTimeSettings: void onPause()> (3)
<com.android.settings.deviceinfo.Memory: void onPause()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onPause()> (3)
<com.android.settings.DisplaySettings: void onPause()> (3)
<com.android.settings.DreamSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onPause()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onPause()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onPause()> (3)
<com.android.settings.NotificationStation: void onPause()> (3)
<com.android.settings.SoundSettings: void onPause()> (3)
<com.android.settings.users.AppRestrictionsFragment: void onPause()> (3)
<com.android.settings.vpn2.VpnSettings: void onPause()> (3)
<com.android.settings.wfd.WifiDisplaySettings: void onPause()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onPause()> (3)
<com.android.settings.wifi.WifiSettings: void onPause()> (3)
<com.android.settings.WirelessSettings: void onPause()> (3)
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)> ()
<android.bluetooth.BluetoothAdapter: boolean disable()> (4)
<com.android.settings.accounts.AccountSyncSettings: void onPause()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPause()> (4)
<com.android.settings.accounts.SyncSettings: void onPause()> (4)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean disable()> (2)
<com.android.settings.bluetooth.DockService: boolean msgTypeDisableBluetooth(int)> (1)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetooth: java.lang.String getAddress()> (2)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelUuid[] getUuids()> (2)
<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getUuids()> (1)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getName()> (2)
<android.bluetooth.IBluetooth: java.lang.String getName()> (2)
<com.android.bluetooth.btservice.AdapterService: int getScanMode()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()> ()
<android.bluetooth.IBluetooth$Stub: int getScanMode()> (2)
<android.bluetooth.IBluetooth: int getScanMode()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setScanMode(int,int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setScanMode(int,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setScanMode(int,int)> (2)
<android.bluetooth.IBluetooth: boolean setScanMode(int,int)> (1)
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()> ()
<android.bluetooth.IBluetooth$Stub: int getDiscoverableTimeout()> (2)
<android.bluetooth.IBluetooth: int getDiscoverableTimeout()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setDiscoverableTimeout(int)> (2)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth: boolean setDiscoverableTimeout(int)> (1)
<com.android.bluetooth.btservice.AdapterService: boolean isDiscovering()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isDiscovering()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isDiscovering()> ()
<android.bluetooth.IBluetooth$Stub: boolean isDiscovering()> (2)
<android.bluetooth.IBluetooth: boolean isDiscovering()> (1)
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()> (5)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()> (2)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherHeadsetPriorities(com.android.bluetooth.hfp.HeadsetService,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherSinkPriorities(com.android.bluetooth.a2dp.A2dpService,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void autoConnectA2dp()> (1)
<com.android.bluetooth.btservice.AdapterService: void autoConnectHeadset()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()> ()
<android.bluetooth.IBluetooth$Stub: android.bluetooth.BluetoothDevice[] getBondedDevices()> (2)
<com.android.bluetooth.btservice.AdapterService: void setProfileAutoConnectionPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetooth: android.bluetooth.BluetoothDevice[] getBondedDevices()> (1)
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()> ()
<android.bluetooth.IBluetooth$Stub: int getAdapterConnectionState()> (2)
<android.bluetooth.IBluetooth: int getAdapterConnectionState()> (1)
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getProfileConnectionState(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)> ()
<android.bluetooth.IBluetooth$Stub: int getProfileConnectionState(int)> (2)
<android.bluetooth.IBluetooth: int getProfileConnectionState(int)> (1)
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getBondState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getBondState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getBondState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: int getBondState()> (12)
<com.android.bluetooth.a2dp.A2dpStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean cancelBond(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean createBond(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean removeBond(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$BondedDeviceFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$UnbondedDeviceFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: int getBondState()> (13)
<com.android.bluetooth.btservice.BondStateMachine: boolean access$1000(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean access$300(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice,boolean)> (2)
<com.android.bluetooth.btservice.BondStateMachine: boolean access$400(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice,boolean)> (2)
<com.android.bluetooth.hid.HidService: boolean access$600(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothDeviceFilter$Filter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onBindView(android.view.View)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void initDevicePreference(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: boolean processMessage(android.os.Message)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void initDevicePreference(com.android.settings.bluetooth.BluetoothDevicePreference)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.DevicePickerFragment: void initDevicePreference(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: java.lang.String getName()> (6)
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()> (7)
<com.android.bluetooth.hfp.HeadsetStateMachine: java.lang.String getCurrentDeviceName()> (1)
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void clearProfileConnectionState()> (1)
<android.media.AudioService: void onSetA2dpConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: java.lang.String createConnectionDisplayText()> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: java.lang.String createPhonebookDisplayText()> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: java.lang.String getName(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fetchName()> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void configAudioParameters()> (1)
<com.android.bluetooth.opp.BluetoothOppReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppTransferInfo queryRecord(android.content.Context,android.net.Uri)> (5)
<android.media.AudioService: void access$7000(android.media.AudioService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: android.view.View createConnectionDialogView()> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: android.view.View createPhonebookDialogView()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: android.view.View createView(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createUserEntryDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$2400(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void updateProgressbar()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void openCompleteTransfer()> (2)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void showConnectionDialog()> (1)
<com.android.settings.bluetooth.BluetoothPermissionActivity: void showPhonebookDialog()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createConfirmationDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createConsentDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createDisplayPasskeyOrPinDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: android.view.View createView()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void access$100(com.android.bluetooth.opp.BluetoothOppTransferActivity)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setUpDialog()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity$BluetoothTransferContentObserver: void onChange(boolean)> (1)
<com.android.bluetooth.btservice.AdapterService: int getRemoteType(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteType(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteType(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteType(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getRemoteType(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: int getType()> ()
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)> (1)
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteClass(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteClass(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getRemoteClass(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> (5)
<com.android.bluetooth.btservice.RemoteDevices: void pinRequestCallback(byte[],byte[],int)> (1)
<com.android.musicfx.ActivityMusic$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$ClassUuidFilter: boolean matches(android.bluetooth.BluetoothDevice)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fetchBtClass()> (2)
<com.android.bluetooth.btservice.JniCallbacks: void pinRequestCallback(byte[],byte[],int)> ()
<com.android.settings.bluetooth.BluetoothDeviceFilter$AudioFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$NapFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$PanuFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$TransferFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> (5)
<com.android.bluetooth.btservice.AdapterService: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (1)
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onPair(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (2)
<android.bluetooth.IBluetooth: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> (2)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (1)
<android.bluetooth.BluetoothSocket: void connect()> (1)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (1)
<android.bluetooth.BluetoothSocket: int bindListen()> (5)
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)> ()
<android.bluetooth.BluetoothSocket: void initSocketNative()> ()
Permission:android.permission.RECORD_AUDIO
281 Callers:
<android.speech.RecognitionService: boolean checkPermissions(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService: boolean access$700(android.speech.RecognitionService,android.speech.IRecognitionListener)> (3)
<android.speech.RecognitionService$RecognitionServiceBinder: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService$RecognitionServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.SpeechRecognizer: void handleCancelMessage()> (1)
<android.speech.SpeechRecognizer: void handleStartListening(android.content.Intent)> (1)
<android.speech.SpeechRecognizer: void handleStopMessage()> (1)
<android.speech.SpeechRecognizer: void access$200(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void access$000(android.speech.SpeechRecognizer,android.content.Intent)> (2)
<android.speech.SpeechRecognizer: void access$100(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void putMessage(android.os.Message)> (4)
<android.speech.SpeechRecognizer: void cancel()> ()
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)> ()
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> ()
<android.speech.SpeechRecognizer: void stopListening()> ()
<android.media.AudioRecord: void <init>(int,int,int,int,int)> ()
<android.media.MediaRecorder: void setAudioSource(int)> (3)
<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()> (1)
<com.android.camera.VideoModule: void initializeRecorder()> (1)
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)> (2)
<com.android.camera.VideoModule: void startVideoRecording()> (1)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> (1)
<com.android.camera.VideoModule: void onShutterButtonClick()> (1)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick()> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<com.android.camera.VideoUI: void clickShutter()> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<com.android.camera.VideoModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<com.android.camera.CameraModule: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> (2)
